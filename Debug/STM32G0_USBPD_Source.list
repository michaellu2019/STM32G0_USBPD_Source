
STM32G0_USBPD_Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a88  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  08019b48  08019b48  00029b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afd0  0801afd0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801afd0  0801afd0  0002afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afd8  0801afd8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801afd8  0801afd8  0002afd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afdc  0801afdc  0002afdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801afe0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00002e44  200001fc  0801b1dc  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20003040  0801b1dc  00033040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .comment      0000418d  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  000343b7  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  000346f4  2**2
                  CONTENTS, READONLY
 15 .debug_info   00026036  00000000  00000000  00034718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006eb8  00000000  00000000  0005a74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002588  00000000  00000000  00061608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001d80  00000000  00000000  00063b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000ca15  00000000  00000000  00065910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ab77  00000000  00000000  00072325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e3235  00000000  00000000  0009ce9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009910  00000000  00000000  001800d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  001899e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08019b1c 	.word	0x08019b1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	08019b1c 	.word	0x08019b1c

08000108 <USBPD_CAD_Init>:
 8000108:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 800010a:	b083      	sub	sp, #12
 800010c:	001e      	movs	r6, r3
 800010e:	2500      	movs	r5, #0
 8000110:	2400      	movs	r4, #0
 8000112:	4668      	mov	r0, sp
 8000114:	7b00      	ldrb	r0, [r0, #12]
 8000116:	2803      	cmp	r0, #3
 8000118:	d301      	bcc.n	800011e <USBPD_CAD_Init+0x16>
 800011a:	2401      	movs	r4, #1
 800011c:	e059      	b.n	80001d2 <USBPD_CAD_Init+0xca>
 800011e:	9100      	str	r1, [sp, #0]
 8000120:	2900      	cmp	r1, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x20>
 8000124:	2402      	movs	r4, #2
 8000126:	e054      	b.n	80001d2 <USBPD_CAD_Init+0xca>
 8000128:	200c      	movs	r0, #12
 800012a:	f019 f803 	bl	8019134 <malloc>
 800012e:	0007      	movs	r7, r0
 8000130:	d101      	bne.n	8000136 <USBPD_CAD_Init+0x2e>
 8000132:	2403      	movs	r4, #3
 8000134:	e04d      	b.n	80001d2 <USBPD_CAD_Init+0xca>
 8000136:	9601      	str	r6, [sp, #4]
 8000138:	210c      	movs	r1, #12
 800013a:	f019 f95e 	bl	80193fa <__aeabi_memclr>
 800013e:	9801      	ldr	r0, [sp, #4]
 8000140:	6038      	str	r0, [r7, #0]
 8000142:	723d      	strb	r5, [r7, #8]
 8000144:	9800      	ldr	r0, [sp, #0]
 8000146:	6078      	str	r0, [r7, #4]
 8000148:	4867      	ldr	r0, [pc, #412]	; (80002e8 <.text_6>)
 800014a:	4669      	mov	r1, sp
 800014c:	7b09      	ldrb	r1, [r1, #12]
 800014e:	0089      	lsls	r1, r1, #2
 8000150:	5047      	str	r7, [r0, r1]
 8000152:	2001      	movs	r0, #1
 8000154:	2100      	movs	r1, #0
 8000156:	43c9      	mvns	r1, r1
 8000158:	4a64      	ldr	r2, [pc, #400]	; (80002ec <.text_7>)
 800015a:	4b65      	ldr	r3, [pc, #404]	; (80002f0 <.text_8>)
 800015c:	4d65      	ldr	r5, [pc, #404]	; (80002f4 <.text_9>)
 800015e:	682e      	ldr	r6, [r5, #0]
 8000160:	401e      	ands	r6, r3
 8000162:	4f65      	ldr	r7, [pc, #404]	; (80002f8 <.text_10>)
 8000164:	42be      	cmp	r6, r7
 8000166:	d004      	beq.n	8000172 <USBPD_CAD_Init+0x6a>
 8000168:	682d      	ldr	r5, [r5, #0]
 800016a:	402b      	ands	r3, r5
 800016c:	4d63      	ldr	r5, [pc, #396]	; (80002fc <.text_11>)
 800016e:	42ab      	cmp	r3, r5
 8000170:	d112      	bne.n	8000198 <USBPD_CAD_Init+0x90>
 8000172:	4b63      	ldr	r3, [pc, #396]	; (8000300 <.text_12>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d10e      	bne.n	8000198 <USBPD_CAD_Init+0x90>
 800017a:	0d0b      	lsrs	r3, r1, #20
 800017c:	4d61      	ldr	r5, [pc, #388]	; (8000304 <.text_13>)
 800017e:	682e      	ldr	r6, [r5, #0]
 8000180:	401e      	ands	r6, r3
 8000182:	278a      	movs	r7, #138	; 0x8a
 8000184:	00ff      	lsls	r7, r7, #3
 8000186:	42be      	cmp	r6, r7
 8000188:	d004      	beq.n	8000194 <USBPD_CAD_Init+0x8c>
 800018a:	682d      	ldr	r5, [r5, #0]
 800018c:	402b      	ands	r3, r5
 800018e:	4d5e      	ldr	r5, [pc, #376]	; (8000308 <.text_14>)
 8000190:	42ab      	cmp	r3, r5
 8000192:	d101      	bne.n	8000198 <USBPD_CAD_Init+0x90>
 8000194:	4b5d      	ldr	r3, [pc, #372]	; (800030c <.text_15>)
 8000196:	e000      	b.n	800019a <USBPD_CAD_Init+0x92>
 8000198:	4b5d      	ldr	r3, [pc, #372]	; (8000310 <.text_16>)
 800019a:	689d      	ldr	r5, [r3, #8]
 800019c:	681e      	ldr	r6, [r3, #0]
 800019e:	695f      	ldr	r7, [r3, #20]
 80001a0:	615a      	str	r2, [r3, #20]
 80001a2:	6119      	str	r1, [r3, #16]
 80001a4:	6098      	str	r0, [r3, #8]
 80001a6:	6899      	ldr	r1, [r3, #8]
 80001a8:	2901      	cmp	r1, #1
 80001aa:	d0fc      	beq.n	80001a6 <USBPD_CAD_Init+0x9e>
 80001ac:	4959      	ldr	r1, [pc, #356]	; (8000314 <.text_17>)
 80001ae:	6019      	str	r1, [r3, #0]
 80001b0:	6819      	ldr	r1, [r3, #0]
 80001b2:	4a59      	ldr	r2, [pc, #356]	; (8000318 <.text_18>)
 80001b4:	6011      	str	r1, [r2, #0]
 80001b6:	611e      	str	r6, [r3, #16]
 80001b8:	615f      	str	r7, [r3, #20]
 80001ba:	609d      	str	r5, [r3, #8]
 80001bc:	6899      	ldr	r1, [r3, #8]
 80001be:	4308      	orrs	r0, r1
 80001c0:	6098      	str	r0, [r3, #8]
 80001c2:	9904      	ldr	r1, [sp, #16]
 80001c4:	9800      	ldr	r0, [sp, #0]
 80001c6:	6843      	ldr	r3, [r0, #4]
 80001c8:	9a01      	ldr	r2, [sp, #4]
 80001ca:	4668      	mov	r0, sp
 80001cc:	7b00      	ldrb	r0, [r0, #12]
 80001ce:	f00d fa2b 	bl	800d628 <CAD_Init>
 80001d2:	0020      	movs	r0, r4
 80001d4:	b005      	add	sp, #20
 80001d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001d8 <USBPD_CAD_PortEnable>:
 80001d8:	2803      	cmp	r0, #3
 80001da:	d203      	bcs.n	80001e4 <USBPD_CAD_PortEnable+0xc>
 80001dc:	4a42      	ldr	r2, [pc, #264]	; (80002e8 <.text_6>)
 80001de:	0080      	lsls	r0, r0, #2
 80001e0:	5810      	ldr	r0, [r2, r0]
 80001e2:	7201      	strb	r1, [r0, #8]
 80001e4:	4770      	bx	lr

080001e6 <USBPD_CAD_Process>:
 80001e6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80001e8:	2400      	movs	r4, #0
 80001ea:	4669      	mov	r1, sp
 80001ec:	700c      	strb	r4, [r1, #0]
 80001ee:	9401      	str	r4, [sp, #4]
 80001f0:	2500      	movs	r5, #0
 80001f2:	43ed      	mvns	r5, r5
 80001f4:	4f49      	ldr	r7, [pc, #292]	; (800031c <.text_19>)
 80001f6:	483c      	ldr	r0, [pc, #240]	; (80002e8 <.text_6>)
 80001f8:	00a1      	lsls	r1, r4, #2
 80001fa:	1846      	adds	r6, r0, r1
 80001fc:	6830      	ldr	r0, [r6, #0]
 80001fe:	2800      	cmp	r0, #0
 8000200:	d06c      	beq.n	80002dc <USBPD_CAD_Process+0xf6>
 8000202:	7a00      	ldrb	r0, [r0, #8]
 8000204:	2801      	cmp	r0, #1
 8000206:	d169      	bne.n	80002dc <USBPD_CAD_Process+0xf6>
 8000208:	aa01      	add	r2, sp, #4
 800020a:	4669      	mov	r1, sp
 800020c:	b2e0      	uxtb	r0, r4
 800020e:	f00d fc09 	bl	800da24 <CAD_StateMachine>
 8000212:	42a8      	cmp	r0, r5
 8000214:	d800      	bhi.n	8000218 <USBPD_CAD_Process+0x32>
 8000216:	0005      	movs	r5, r0
 8000218:	4668      	mov	r0, sp
 800021a:	7800      	ldrb	r0, [r0, #0]
 800021c:	2801      	cmp	r0, #1
 800021e:	d004      	beq.n	800022a <USBPD_CAD_Process+0x44>
 8000220:	2802      	cmp	r0, #2
 8000222:	d012      	beq.n	800024a <USBPD_CAD_Process+0x64>
 8000224:	2804      	cmp	r0, #4
 8000226:	d010      	beq.n	800024a <USBPD_CAD_Process+0x64>
 8000228:	e040      	b.n	80002ac <USBPD_CAD_Process+0xc6>
 800022a:	6830      	ldr	r0, [r6, #0]
 800022c:	6801      	ldr	r1, [r0, #0]
 800022e:	680a      	ldr	r2, [r1, #0]
 8000230:	4b3b      	ldr	r3, [pc, #236]	; (8000320 <.text_20>)
 8000232:	4013      	ands	r3, r2
 8000234:	600b      	str	r3, [r1, #0]
 8000236:	6801      	ldr	r1, [r0, #0]
 8000238:	680a      	ldr	r2, [r1, #0]
 800023a:	23c0      	movs	r3, #192	; 0xc0
 800023c:	439a      	bics	r2, r3
 800023e:	600a      	str	r2, [r1, #0]
 8000240:	6800      	ldr	r0, [r0, #0]
 8000242:	6801      	ldr	r1, [r0, #0]
 8000244:	4039      	ands	r1, r7
 8000246:	6001      	str	r1, [r0, #0]
 8000248:	e034      	b.n	80002b4 <USBPD_CAD_Process+0xce>
 800024a:	6830      	ldr	r0, [r6, #0]
 800024c:	9901      	ldr	r1, [sp, #4]
 800024e:	2901      	cmp	r1, #1
 8000250:	6801      	ldr	r1, [r0, #0]
 8000252:	680a      	ldr	r2, [r1, #0]
 8000254:	d103      	bne.n	800025e <USBPD_CAD_Process+0x78>
 8000256:	403a      	ands	r2, r7
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	01db      	lsls	r3, r3, #7
 800025c:	e002      	b.n	8000264 <USBPD_CAD_Process+0x7e>
 800025e:	403a      	ands	r2, r7
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	019b      	lsls	r3, r3, #6
 8000264:	4313      	orrs	r3, r2
 8000266:	600b      	str	r3, [r1, #0]
 8000268:	6801      	ldr	r1, [r0, #0]
 800026a:	680b      	ldr	r3, [r1, #0]
 800026c:	22c0      	movs	r2, #192	; 0xc0
 800026e:	4393      	bics	r3, r2
 8000270:	469c      	mov	ip, r3
 8000272:	9a01      	ldr	r2, [sp, #4]
 8000274:	0193      	lsls	r3, r2, #6
 8000276:	22c0      	movs	r2, #192	; 0xc0
 8000278:	401a      	ands	r2, r3
 800027a:	4663      	mov	r3, ip
 800027c:	431a      	orrs	r2, r3
 800027e:	600a      	str	r2, [r1, #0]
 8000280:	6801      	ldr	r1, [r0, #0]
 8000282:	680a      	ldr	r2, [r1, #0]
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	015b      	lsls	r3, r3, #5
 8000288:	4313      	orrs	r3, r2
 800028a:	600b      	str	r3, [r1, #0]
 800028c:	6800      	ldr	r0, [r0, #0]
 800028e:	6801      	ldr	r1, [r0, #0]
 8000290:	074a      	lsls	r2, r1, #29
 8000292:	0fd2      	lsrs	r2, r2, #31
 8000294:	d103      	bne.n	800029e <USBPD_CAD_Process+0xb8>
 8000296:	2208      	movs	r2, #8
 8000298:	4391      	bics	r1, r2
 800029a:	6001      	str	r1, [r0, #0]
 800029c:	e002      	b.n	80002a4 <USBPD_CAD_Process+0xbe>
 800029e:	2208      	movs	r2, #8
 80002a0:	430a      	orrs	r2, r1
 80002a2:	6002      	str	r2, [r0, #0]
 80002a4:	2168      	movs	r1, #104	; 0x68
 80002a6:	b2e0      	uxtb	r0, r4
 80002a8:	f000 f93e 	bl	8000528 <USBPD_PE_Notification>
 80002ac:	4668      	mov	r0, sp
 80002ae:	7800      	ldrb	r0, [r0, #0]
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d013      	beq.n	80002dc <USBPD_CAD_Process+0xf6>
 80002b4:	9a01      	ldr	r2, [sp, #4]
 80002b6:	4668      	mov	r0, sp
 80002b8:	7801      	ldrb	r1, [r0, #0]
 80002ba:	b2e0      	uxtb	r0, r4
 80002bc:	6833      	ldr	r3, [r6, #0]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4798      	blx	r3
 80002c4:	4668      	mov	r0, sp
 80002c6:	7800      	ldrb	r0, [r0, #0]
 80002c8:	2801      	cmp	r0, #1
 80002ca:	d003      	beq.n	80002d4 <USBPD_CAD_Process+0xee>
 80002cc:	4668      	mov	r0, sp
 80002ce:	7800      	ldrb	r0, [r0, #0]
 80002d0:	2803      	cmp	r0, #3
 80002d2:	d103      	bne.n	80002dc <USBPD_CAD_Process+0xf6>
 80002d4:	2169      	movs	r1, #105	; 0x69
 80002d6:	b2e0      	uxtb	r0, r4
 80002d8:	f000 f926 	bl	8000528 <USBPD_PE_Notification>
 80002dc:	1c64      	adds	r4, r4, #1
 80002de:	2c03      	cmp	r4, #3
 80002e0:	d389      	bcc.n	80001f6 <USBPD_CAD_Process+0x10>
 80002e2:	0028      	movs	r0, r5
 80002e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

080002e8 <.text_6>:
 80002e8:	20000218 	.word	0x20000218

080002ec <.text_7>:
 80002ec:	04c11db7 	.word	0x04c11db7

080002f0 <.text_8>:
 80002f0:	0000fff0 	.word	0x0000fff0

080002f4 <.text_9>:
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <.text_10>:
 80002f8:	0000c240 	.word	0x0000c240

080002fc <.text_11>:
 80002fc:	0000c270 	.word	0x0000c270

08000300 <.text_12>:
 8000300:	e0042000 	.word	0xe0042000

08000304 <.text_13>:
 8000304:	5c001000 	.word	0x5c001000

08000308 <.text_14>:
 8000308:	00000483 	.word	0x00000483

0800030c <.text_15>:
 800030c:	58024c00 	.word	0x58024c00

08000310 <.text_16>:
 8000310:	40023000 	.word	0x40023000

08000314 <.text_17>:
 8000314:	f407a5c2 	.word	0xf407a5c2

08000318 <.text_18>:
 8000318:	20000224 	.word	0x20000224

0800031c <.text_19>:
 800031c:	ffff9fff 	.word	0xffff9fff

08000320 <.text_20>:
 8000320:	ffffefff 	.word	0xffffefff

08000324 <USBPD_CAD_AssertRd>:
 8000324:	b510      	push	{r4, lr}
 8000326:	0004      	movs	r4, r0
 8000328:	f00f f8aa 	bl	800f480 <USBPDM1_DeAssertRp>
 800032c:	0020      	movs	r0, r4
 800032e:	f00f f8b1 	bl	800f494 <USBPDM1_AssertRd>
 8000332:	bd10      	pop	{r4, pc}

08000334 <USBPD_CAD_AssertRp>:
 8000334:	b510      	push	{r4, lr}
 8000336:	0004      	movs	r4, r0
 8000338:	f00f f958 	bl	800f5ec <USBPDM1_DeAssertRd>
 800033c:	0020      	movs	r0, r4
 800033e:	f00e ffe1 	bl	800f304 <USBPDM1_AssertRp>
 8000342:	bd10      	pop	{r4, pc}

08000344 <USBPD_CAD_EnterErrorRecovery>:
 8000344:	b580      	push	{r7, lr}
 8000346:	f00d fa85 	bl	800d854 <CAD_Enter_ErrorRecovery>
 800034a:	bd01      	pop	{r0, pc}

0800034c <USBPD_CAD_SRC_SetRpResistor>:
 800034c:	b510      	push	{r4, lr}
 800034e:	2404      	movs	r4, #4
 8000350:	f00d faea 	bl	800d928 <CAD_Set_ResistorRp>
 8000354:	2800      	cmp	r0, #0
 8000356:	d100      	bne.n	800035a <USBPD_CAD_SRC_SetRpResistor+0xe>
 8000358:	2400      	movs	r4, #0
 800035a:	0020      	movs	r0, r4
 800035c:	bd10      	pop	{r4, pc}

0800035e <USBPD_CAD_SetRpResistor>:
 800035e:	b580      	push	{r7, lr}
 8000360:	f7ff fff4 	bl	800034c <USBPD_CAD_SRC_SetRpResistor>
 8000364:	bd02      	pop	{r1, pc}

08000366 <USBPD_CAD_GetMemoryConsumption>:
 8000366:	2024      	movs	r0, #36	; 0x24
 8000368:	4770      	bx	lr
	...

0800036c <USBPD_PE_Init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	000e      	movs	r6, r1
 8000370:	0017      	movs	r7, r2
 8000372:	001c      	movs	r4, r3
 8000374:	6871      	ldr	r1, [r6, #4]
 8000376:	070a      	lsls	r2, r1, #28
 8000378:	0fd2      	lsrs	r2, r2, #31
 800037a:	d002      	beq.n	8000382 <USBPD_PE_Init+0x16>
 800037c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800037e:	2900      	cmp	r1, #0
 8000380:	d002      	beq.n	8000388 <USBPD_PE_Init+0x1c>
 8000382:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000384:	2900      	cmp	r1, #0
 8000386:	d101      	bne.n	800038c <USBPD_PE_Init+0x20>
 8000388:	241b      	movs	r4, #27
 800038a:	e04a      	b.n	8000422 <USBPD_PE_Init+0xb6>
 800038c:	4669      	mov	r1, sp
 800038e:	7008      	strb	r0, [r1, #0]
 8000390:	4668      	mov	r0, sp
 8000392:	7800      	ldrb	r0, [r0, #0]
 8000394:	2803      	cmp	r0, #3
 8000396:	d301      	bcc.n	800039c <USBPD_PE_Init+0x30>
 8000398:	2417      	movs	r4, #23
 800039a:	e042      	b.n	8000422 <USBPD_PE_Init+0xb6>
 800039c:	2096      	movs	r0, #150	; 0x96
 800039e:	00c0      	lsls	r0, r0, #3
 80003a0:	f018 fec8 	bl	8019134 <malloc>
 80003a4:	0005      	movs	r5, r0
 80003a6:	d101      	bne.n	80003ac <USBPD_PE_Init+0x40>
 80003a8:	2416      	movs	r4, #22
 80003aa:	e03a      	b.n	8000422 <USBPD_PE_Init+0xb6>
 80003ac:	2196      	movs	r1, #150	; 0x96
 80003ae:	00c9      	lsls	r1, r1, #3
 80003b0:	f019 f823 	bl	80193fa <__aeabi_memclr>
 80003b4:	487a      	ldr	r0, [pc, #488]	; (80005a0 <.text_16>)
 80003b6:	4669      	mov	r1, sp
 80003b8:	7809      	ldrb	r1, [r1, #0]
 80003ba:	0089      	lsls	r1, r1, #2
 80003bc:	5045      	str	r5, [r0, r1]
 80003be:	602e      	str	r6, [r5, #0]
 80003c0:	606f      	str	r7, [r5, #4]
 80003c2:	4668      	mov	r0, sp
 80003c4:	7800      	ldrb	r0, [r0, #0]
 80003c6:	7428      	strb	r0, [r5, #16]
 80003c8:	60ac      	str	r4, [r5, #8]
 80003ca:	4876      	ldr	r0, [pc, #472]	; (80005a4 <.text_17>)
 80003cc:	182b      	adds	r3, r5, r0
 80003ce:	4876      	ldr	r0, [pc, #472]	; (80005a8 <.text_18>)
 80003d0:	182a      	adds	r2, r5, r0
 80003d2:	0031      	movs	r1, r6
 80003d4:	4668      	mov	r0, sp
 80003d6:	7800      	ldrb	r0, [r0, #0]
 80003d8:	f005 f9f2 	bl	80057c0 <USBPD_PRL_Init>
 80003dc:	0004      	movs	r4, r0
 80003de:	d120      	bne.n	8000422 <USBPD_PE_Init+0xb6>
 80003e0:	6868      	ldr	r0, [r5, #4]
 80003e2:	6801      	ldr	r1, [r0, #0]
 80003e4:	2703      	movs	r7, #3
 80003e6:	682a      	ldr	r2, [r5, #0]
 80003e8:	6852      	ldr	r2, [r2, #4]
 80003ea:	0753      	lsls	r3, r2, #29
 80003ec:	0fdb      	lsrs	r3, r3, #31
 80003ee:	d006      	beq.n	80003fe <USBPD_PE_Init+0x92>
 80003f0:	2208      	movs	r2, #8
 80003f2:	430a      	orrs	r2, r1
 80003f4:	6002      	str	r2, [r0, #0]
 80003f6:	6873      	ldr	r3, [r6, #4]
 80003f8:	403b      	ands	r3, r7
 80003fa:	2201      	movs	r2, #1
 80003fc:	e005      	b.n	800040a <USBPD_PE_Init+0x9e>
 80003fe:	2208      	movs	r2, #8
 8000400:	4391      	bics	r1, r2
 8000402:	6001      	str	r1, [r0, #0]
 8000404:	6873      	ldr	r3, [r6, #4]
 8000406:	403b      	ands	r3, r7
 8000408:	2200      	movs	r2, #0
 800040a:	4611      	mov	r1, r2
 800040c:	4668      	mov	r0, sp
 800040e:	7800      	ldrb	r0, [r0, #0]
 8000410:	f005 fa11 	bl	8005836 <USBPD_PRL_SetHeader>
 8000414:	6870      	ldr	r0, [r6, #4]
 8000416:	4007      	ands	r7, r0
 8000418:	0039      	movs	r1, r7
 800041a:	4668      	mov	r0, sp
 800041c:	7800      	ldrb	r0, [r0, #0]
 800041e:	f005 fa48 	bl	80058b2 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000422:	0020      	movs	r0, r4
 8000424:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000426 <USBPD_PE_TimerCounter>:
 8000426:	495e      	ldr	r1, [pc, #376]	; (80005a0 <.text_16>)
 8000428:	0080      	lsls	r0, r0, #2
 800042a:	5808      	ldr	r0, [r1, r0]
 800042c:	49b4      	ldr	r1, [pc, #720]	; (8000700 <.text_20>)
 800042e:	084a      	lsrs	r2, r1, #1
 8000430:	8bc3      	ldrh	r3, [r0, #30]
 8000432:	4213      	tst	r3, r2
 8000434:	d002      	beq.n	800043c <USBPD_PE_TimerCounter+0x16>
 8000436:	8bc3      	ldrh	r3, [r0, #30]
 8000438:	185b      	adds	r3, r3, r1
 800043a:	83c3      	strh	r3, [r0, #30]
 800043c:	8c03      	ldrh	r3, [r0, #32]
 800043e:	4213      	tst	r3, r2
 8000440:	d002      	beq.n	8000448 <USBPD_PE_TimerCounter+0x22>
 8000442:	8c03      	ldrh	r3, [r0, #32]
 8000444:	185b      	adds	r3, r3, r1
 8000446:	8403      	strh	r3, [r0, #32]
 8000448:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800044a:	4213      	tst	r3, r2
 800044c:	d002      	beq.n	8000454 <USBPD_PE_TimerCounter+0x2e>
 800044e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8000450:	185b      	adds	r3, r3, r1
 8000452:	84c3      	strh	r3, [r0, #38]	; 0x26
 8000454:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000456:	4213      	tst	r3, r2
 8000458:	d002      	beq.n	8000460 <USBPD_PE_TimerCounter+0x3a>
 800045a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800045c:	185b      	adds	r3, r3, r1
 800045e:	8443      	strh	r3, [r0, #34]	; 0x22
 8000460:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8000462:	4213      	tst	r3, r2
 8000464:	d002      	beq.n	800046c <USBPD_PE_TimerCounter+0x46>
 8000466:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8000468:	1851      	adds	r1, r2, r1
 800046a:	8481      	strh	r1, [r0, #36]	; 0x24
 800046c:	4770      	bx	lr

0800046e <USBPD_PE_TimerCounteUpdate>:
 800046e:	b570      	push	{r4, r5, r6, lr}
 8000470:	000e      	movs	r6, r1
 8000472:	494b      	ldr	r1, [pc, #300]	; (80005a0 <.text_16>)
 8000474:	0080      	lsls	r0, r0, #2
 8000476:	580c      	ldr	r4, [r1, r0]
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0209      	lsls	r1, r1, #8
 800047c:	428e      	cmp	r6, r1
 800047e:	da28      	bge.n	80004d2 <USBPD_PE_TimerCounteUpdate+0x64>
 8000480:	1e4d      	subs	r5, r1, #1
 8000482:	8be0      	ldrh	r0, [r4, #30]
 8000484:	4228      	tst	r0, r5
 8000486:	d004      	beq.n	8000492 <USBPD_PE_TimerCounteUpdate+0x24>
 8000488:	0031      	movs	r1, r6
 800048a:	8be0      	ldrh	r0, [r4, #30]
 800048c:	f000 ffcb 	bl	8001426 <PE_UpdateTimer>
 8000490:	83e0      	strh	r0, [r4, #30]
 8000492:	8c20      	ldrh	r0, [r4, #32]
 8000494:	4228      	tst	r0, r5
 8000496:	d004      	beq.n	80004a2 <USBPD_PE_TimerCounteUpdate+0x34>
 8000498:	0031      	movs	r1, r6
 800049a:	8c20      	ldrh	r0, [r4, #32]
 800049c:	f000 ffc3 	bl	8001426 <PE_UpdateTimer>
 80004a0:	8420      	strh	r0, [r4, #32]
 80004a2:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80004a4:	4228      	tst	r0, r5
 80004a6:	d004      	beq.n	80004b2 <USBPD_PE_TimerCounteUpdate+0x44>
 80004a8:	0031      	movs	r1, r6
 80004aa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80004ac:	f000 ffbb 	bl	8001426 <PE_UpdateTimer>
 80004b0:	84e0      	strh	r0, [r4, #38]	; 0x26
 80004b2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80004b4:	4228      	tst	r0, r5
 80004b6:	d004      	beq.n	80004c2 <USBPD_PE_TimerCounteUpdate+0x54>
 80004b8:	0031      	movs	r1, r6
 80004ba:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80004bc:	f000 ffb3 	bl	8001426 <PE_UpdateTimer>
 80004c0:	8460      	strh	r0, [r4, #34]	; 0x22
 80004c2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80004c4:	4228      	tst	r0, r5
 80004c6:	d004      	beq.n	80004d2 <USBPD_PE_TimerCounteUpdate+0x64>
 80004c8:	0031      	movs	r1, r6
 80004ca:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80004cc:	f000 ffab 	bl	8001426 <PE_UpdateTimer>
 80004d0:	84a0      	strh	r0, [r4, #36]	; 0x24
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <USBPD_PE_IsCableConnected>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	4a32      	ldr	r2, [pc, #200]	; (80005a0 <.text_16>)
 80004d8:	0080      	lsls	r0, r0, #2
 80004da:	5810      	ldr	r0, [r2, r0]
 80004dc:	6842      	ldr	r2, [r0, #4]
 80004de:	6813      	ldr	r3, [r2, #0]
 80004e0:	4cb2      	ldr	r4, [pc, #712]	; (80007ac <.text_22>)
 80004e2:	401c      	ands	r4, r3
 80004e4:	0309      	lsls	r1, r1, #12
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	015b      	lsls	r3, r3, #5
 80004ea:	4019      	ands	r1, r3
 80004ec:	4321      	orrs	r1, r4
 80004ee:	6011      	str	r1, [r2, #0]
 80004f0:	2148      	movs	r1, #72	; 0x48
 80004f2:	7441      	strb	r1, [r0, #17]
 80004f4:	bd10      	pop	{r4, pc}

080004f6 <USBPD_PE_StateMachine_Reset>:
 80004f6:	2148      	movs	r1, #72	; 0x48
 80004f8:	4a29      	ldr	r2, [pc, #164]	; (80005a0 <.text_16>)
 80004fa:	0080      	lsls	r0, r0, #2
 80004fc:	5810      	ldr	r0, [r2, r0]
 80004fe:	7441      	strb	r1, [r0, #17]
 8000500:	4770      	bx	lr

08000502 <USBPD_PE_StateMachine_Stop>:
 8000502:	b580      	push	{r7, lr}
 8000504:	f005 fc9a 	bl	8005e3c <USBPD_PRL_Stop>
 8000508:	bd01      	pop	{r0, pc}

0800050a <USBPD_PE_StateMachine_DRP>:
 800050a:	b580      	push	{r7, lr}
 800050c:	4924      	ldr	r1, [pc, #144]	; (80005a0 <.text_16>)
 800050e:	0082      	lsls	r2, r0, #2
 8000510:	5889      	ldr	r1, [r1, r2]
 8000512:	6849      	ldr	r1, [r1, #4]
 8000514:	6809      	ldr	r1, [r1, #0]
 8000516:	074a      	lsls	r2, r1, #29
 8000518:	0fd2      	lsrs	r2, r2, #31
 800051a:	d002      	beq.n	8000522 <USBPD_PE_StateMachine_DRP+0x18>
 800051c:	f002 fbba 	bl	8002c94 <USBPD_PE_StateMachine_SRC>
 8000520:	bd02      	pop	{r1, pc}
 8000522:	f001 fcd3 	bl	8001ecc <USBPD_PE_StateMachine_SNK>
 8000526:	bd02      	pop	{r1, pc}

08000528 <USBPD_PE_Notification>:
 8000528:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800052a:	0004      	movs	r4, r0
 800052c:	2803      	cmp	r0, #3
 800052e:	d211      	bcs.n	8000554 <USBPD_PE_Notification+0x2c>
 8000530:	000d      	movs	r5, r1
 8000532:	2000      	movs	r0, #0
 8000534:	9000      	str	r0, [sp, #0]
 8000536:	2300      	movs	r3, #0
 8000538:	002a      	movs	r2, r5
 800053a:	0021      	movs	r1, r4
 800053c:	2009      	movs	r0, #9
 800053e:	4eb2      	ldr	r6, [pc, #712]	; (8000808 <.text_24>)
 8000540:	6836      	ldr	r6, [r6, #0]
 8000542:	47b0      	blx	r6
 8000544:	0029      	movs	r1, r5
 8000546:	0020      	movs	r0, r4
 8000548:	4ab0      	ldr	r2, [pc, #704]	; (800080c <.text_25>)
 800054a:	00a3      	lsls	r3, r4, #2
 800054c:	58d2      	ldr	r2, [r2, r3]
 800054e:	6892      	ldr	r2, [r2, #8]
 8000550:	68d2      	ldr	r2, [r2, #12]
 8000552:	4790      	blx	r2
 8000554:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000556 <USBPD_PE_InitVDM_Callback>:
 8000556:	4aad      	ldr	r2, [pc, #692]	; (800080c <.text_25>)
 8000558:	0080      	lsls	r0, r0, #2
 800055a:	5810      	ldr	r0, [r2, r0]
 800055c:	60c1      	str	r1, [r0, #12]
 800055e:	4770      	bx	lr

08000560 <USBPD_PE_Request_HardReset>:
 8000560:	b580      	push	{r7, lr}
 8000562:	49aa      	ldr	r1, [pc, #680]	; (800080c <.text_25>)
 8000564:	0082      	lsls	r2, r0, #2
 8000566:	5889      	ldr	r1, [r1, r2]
 8000568:	220f      	movs	r2, #15
 800056a:	2332      	movs	r3, #50	; 0x32
 800056c:	54ca      	strb	r2, [r1, r3]
 800056e:	6889      	ldr	r1, [r1, #8]
 8000570:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000572:	4788      	blx	r1
 8000574:	2000      	movs	r0, #0
 8000576:	bd02      	pop	{r1, pc}

08000578 <USBPD_PE_Request_CableReset>:
 8000578:	b580      	push	{r7, lr}
 800057a:	4909      	ldr	r1, [pc, #36]	; (80005a0 <.text_16>)
 800057c:	0082      	lsls	r2, r0, #2
 800057e:	5889      	ldr	r1, [r1, r2]
 8000580:	684a      	ldr	r2, [r1, #4]
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	4ba2      	ldr	r3, [pc, #648]	; (8000810 <.text_26>)
 8000586:	4013      	ands	r3, r2
 8000588:	4aa2      	ldr	r2, [pc, #648]	; (8000814 <.text_27>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d105      	bne.n	800059a <USBPD_PE_Request_CableReset+0x22>
 800058e:	2299      	movs	r2, #153	; 0x99
 8000590:	2332      	movs	r3, #50	; 0x32
 8000592:	54ca      	strb	r2, [r1, r3]
 8000594:	6889      	ldr	r1, [r1, #8]
 8000596:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000598:	4788      	blx	r1
 800059a:	2010      	movs	r0, #16
 800059c:	bd02      	pop	{r1, pc}
	...

080005a0 <.text_16>:
 80005a0:	20000228 	.word	0x20000228

080005a4 <.text_17>:
 80005a4:	0000048e 	.word	0x0000048e

080005a8 <.text_18>:
 80005a8:	00000281 	.word	0x00000281

080005ac <USBPD_PE_Request_CtrlMessage>:
 80005ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80005ae:	b096      	sub	sp, #88	; 0x58
 80005b0:	4896      	ldr	r0, [pc, #600]	; (800080c <.text_25>)
 80005b2:	a916      	add	r1, sp, #88	; 0x58
 80005b4:	7809      	ldrb	r1, [r1, #0]
 80005b6:	0089      	lsls	r1, r1, #2
 80005b8:	5840      	ldr	r0, [r0, r1]
 80005ba:	9001      	str	r0, [sp, #4]
 80005bc:	2400      	movs	r4, #0
 80005be:	a802      	add	r0, sp, #8
 80005c0:	4995      	ldr	r1, [pc, #596]	; (8000818 <.text_28>)
 80005c2:	224c      	movs	r2, #76	; 0x4c
 80005c4:	f018 ff0e 	bl	80193e4 <__aeabi_memcpy>
 80005c8:	2303      	movs	r3, #3
 80005ca:	9801      	ldr	r0, [sp, #4]
 80005cc:	2132      	movs	r1, #50	; 0x32
 80005ce:	5c40      	ldrb	r0, [r0, r1]
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d105      	bne.n	80005e0 <USBPD_PE_Request_CtrlMessage+0x34>
 80005d4:	9801      	ldr	r0, [sp, #4]
 80005d6:	6840      	ldr	r0, [r0, #4]
 80005d8:	6800      	ldr	r0, [r0, #0]
 80005da:	04c1      	lsls	r1, r0, #19
 80005dc:	0fc9      	lsrs	r1, r1, #31
 80005de:	d101      	bne.n	80005e4 <USBPD_PE_Request_CtrlMessage+0x38>
 80005e0:	2403      	movs	r4, #3
 80005e2:	e089      	b.n	80006f8 <USBPD_PE_Request_CtrlMessage+0x14c>
 80005e4:	9901      	ldr	r1, [sp, #4]
 80005e6:	6809      	ldr	r1, [r1, #0]
 80005e8:	684a      	ldr	r2, [r1, #4]
 80005ea:	0712      	lsls	r2, r2, #28
 80005ec:	0fd5      	lsrs	r5, r2, #31
 80005ee:	466a      	mov	r2, sp
 80005f0:	7055      	strb	r5, [r2, #1]
 80005f2:	2201      	movs	r2, #1
 80005f4:	0885      	lsrs	r5, r0, #2
 80005f6:	4015      	ands	r5, r2
 80005f8:	d103      	bne.n	8000602 <USBPD_PE_Request_CtrlMessage+0x56>
 80005fa:	2502      	movs	r5, #2
 80005fc:	466f      	mov	r7, sp
 80005fe:	703c      	strb	r4, [r7, #0]
 8000600:	e003      	b.n	800060a <USBPD_PE_Request_CtrlMessage+0x5e>
 8000602:	2500      	movs	r5, #0
 8000604:	2604      	movs	r6, #4
 8000606:	466f      	mov	r7, sp
 8000608:	703e      	strb	r6, [r7, #0]
 800060a:	0546      	lsls	r6, r0, #21
 800060c:	0f76      	lsrs	r6, r6, #29
 800060e:	2e03      	cmp	r6, #3
 8000610:	d101      	bne.n	8000616 <USBPD_PE_Request_CtrlMessage+0x6a>
 8000612:	2608      	movs	r6, #8
 8000614:	e000      	b.n	8000618 <USBPD_PE_Request_CtrlMessage+0x6c>
 8000616:	2600      	movs	r6, #0
 8000618:	4018      	ands	r0, r3
 800061a:	2802      	cmp	r0, #2
 800061c:	d101      	bne.n	8000622 <USBPD_PE_Request_CtrlMessage+0x76>
 800061e:	2040      	movs	r0, #64	; 0x40
 8000620:	e000      	b.n	8000624 <USBPD_PE_Request_CtrlMessage+0x78>
 8000622:	2000      	movs	r0, #0
 8000624:	787f      	ldrb	r7, [r7, #1]
 8000626:	433d      	orrs	r5, r7
 8000628:	466f      	mov	r7, sp
 800062a:	783f      	ldrb	r7, [r7, #0]
 800062c:	432f      	orrs	r7, r5
 800062e:	433e      	orrs	r6, r7
 8000630:	4330      	orrs	r0, r6
 8000632:	4003      	ands	r3, r0
 8000634:	d002      	beq.n	800063c <USBPD_PE_Request_CtrlMessage+0x90>
 8000636:	0003      	movs	r3, r0
 8000638:	2010      	movs	r0, #16
 800063a:	4318      	orrs	r0, r3
 800063c:	2505      	movs	r5, #5
 800063e:	4228      	tst	r0, r5
 8000640:	d002      	beq.n	8000648 <USBPD_PE_Request_CtrlMessage+0x9c>
 8000642:	0003      	movs	r3, r0
 8000644:	2020      	movs	r0, #32
 8000646:	4318      	orrs	r0, r3
 8000648:	ab17      	add	r3, sp, #92	; 0x5c
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	005e      	lsls	r6, r3, #1
 800064e:	18f3      	adds	r3, r6, r3
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	ab02      	add	r3, sp, #8
 8000654:	9e00      	ldr	r6, [sp, #0]
 8000656:	5d9e      	ldrb	r6, [r3, r6]
 8000658:	4030      	ands	r0, r6
 800065a:	42b0      	cmp	r0, r6
 800065c:	d11f      	bne.n	800069e <USBPD_PE_Request_CtrlMessage+0xf2>
 800065e:	9e01      	ldr	r6, [sp, #4]
 8000660:	2733      	movs	r7, #51	; 0x33
 8000662:	55f4      	strb	r4, [r6, r7]
 8000664:	9801      	ldr	r0, [sp, #4]
 8000666:	4eb2      	ldr	r6, [pc, #712]	; (8000930 <.text_30>)
 8000668:	1980      	adds	r0, r0, r6
 800066a:	ae17      	add	r6, sp, #92	; 0x5c
 800066c:	7836      	ldrb	r6, [r6, #0]
 800066e:	2e05      	cmp	r6, #5
 8000670:	d031      	beq.n	80006d6 <USBPD_PE_Request_CtrlMessage+0x12a>
 8000672:	2e0b      	cmp	r6, #11
 8000674:	d00e      	beq.n	8000694 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000676:	2e0d      	cmp	r6, #13
 8000678:	d028      	beq.n	80006cc <USBPD_PE_Request_CtrlMessage+0x120>
 800067a:	2e11      	cmp	r6, #17
 800067c:	d011      	beq.n	80006a2 <USBPD_PE_Request_CtrlMessage+0xf6>
 800067e:	2e12      	cmp	r6, #18
 8000680:	d013      	beq.n	80006aa <USBPD_PE_Request_CtrlMessage+0xfe>
 8000682:	2e14      	cmp	r6, #20
 8000684:	d013      	beq.n	80006ae <USBPD_PE_Request_CtrlMessage+0x102>
 8000686:	2e15      	cmp	r6, #21
 8000688:	d017      	beq.n	80006ba <USBPD_PE_Request_CtrlMessage+0x10e>
 800068a:	2e16      	cmp	r6, #22
 800068c:	d00b      	beq.n	80006a6 <USBPD_PE_Request_CtrlMessage+0xfa>
 800068e:	2e18      	cmp	r6, #24
 8000690:	d01c      	beq.n	80006cc <USBPD_PE_Request_CtrlMessage+0x120>
 8000692:	e021      	b.n	80006d8 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000694:	9901      	ldr	r1, [sp, #4]
 8000696:	6889      	ldr	r1, [r1, #8]
 8000698:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800069a:	2900      	cmp	r1, #0
 800069c:	d11c      	bne.n	80006d8 <USBPD_PE_Request_CtrlMessage+0x12c>
 800069e:	2402      	movs	r4, #2
 80006a0:	e02a      	b.n	80006f8 <USBPD_PE_Request_CtrlMessage+0x14c>
 80006a2:	2111      	movs	r1, #17
 80006a4:	e010      	b.n	80006c8 <USBPD_PE_Request_CtrlMessage+0x11c>
 80006a6:	2116      	movs	r1, #22
 80006a8:	e00e      	b.n	80006c8 <USBPD_PE_Request_CtrlMessage+0x11c>
 80006aa:	2112      	movs	r1, #18
 80006ac:	e00c      	b.n	80006c8 <USBPD_PE_Request_CtrlMessage+0x11c>
 80006ae:	8909      	ldrh	r1, [r1, #8]
 80006b0:	0889      	lsrs	r1, r1, #2
 80006b2:	4211      	tst	r1, r2
 80006b4:	d110      	bne.n	80006d8 <USBPD_PE_Request_CtrlMessage+0x12c>
 80006b6:	2410      	movs	r4, #16
 80006b8:	e01e      	b.n	80006f8 <USBPD_PE_Request_CtrlMessage+0x14c>
 80006ba:	8909      	ldrh	r1, [r1, #8]
 80006bc:	09c9      	lsrs	r1, r1, #7
 80006be:	4211      	tst	r1, r2
 80006c0:	d101      	bne.n	80006c6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006c2:	2010      	movs	r0, #16
 80006c4:	e019      	b.n	80006fa <USBPD_PE_Request_CtrlMessage+0x14e>
 80006c6:	2115      	movs	r1, #21
 80006c8:	7001      	strb	r1, [r0, #0]
 80006ca:	e005      	b.n	80006d8 <USBPD_PE_Request_CtrlMessage+0x12c>
 80006cc:	a918      	add	r1, sp, #96	; 0x60
 80006ce:	7809      	ldrb	r1, [r1, #0]
 80006d0:	9a01      	ldr	r2, [sp, #4]
 80006d2:	55d1      	strb	r1, [r2, r7]
 80006d4:	e000      	b.n	80006d8 <USBPD_PE_Request_CtrlMessage+0x12c>
 80006d6:	7005      	strb	r5, [r0, #0]
 80006d8:	9900      	ldr	r1, [sp, #0]
 80006da:	1859      	adds	r1, r3, r1
 80006dc:	7849      	ldrb	r1, [r1, #1]
 80006de:	7041      	strb	r1, [r0, #1]
 80006e0:	9800      	ldr	r0, [sp, #0]
 80006e2:	1818      	adds	r0, r3, r0
 80006e4:	7880      	ldrb	r0, [r0, #2]
 80006e6:	9901      	ldr	r1, [sp, #4]
 80006e8:	2232      	movs	r2, #50	; 0x32
 80006ea:	5488      	strb	r0, [r1, r2]
 80006ec:	a816      	add	r0, sp, #88	; 0x58
 80006ee:	7800      	ldrb	r0, [r0, #0]
 80006f0:	9901      	ldr	r1, [sp, #4]
 80006f2:	6889      	ldr	r1, [r1, #8]
 80006f4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006f6:	4788      	blx	r1
 80006f8:	0020      	movs	r0, r4
 80006fa:	b019      	add	sp, #100	; 0x64
 80006fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000700 <.text_20>:
 8000700:	0000ffff 	.word	0x0000ffff

08000704 <USBPD_PE_Request_DataMessage>:
 8000704:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	000b      	movs	r3, r1
 800070a:	0017      	movs	r7, r2
 800070c:	483f      	ldr	r0, [pc, #252]	; (800080c <.text_25>)
 800070e:	4669      	mov	r1, sp
 8000710:	7a09      	ldrb	r1, [r1, #8]
 8000712:	0089      	lsls	r1, r1, #2
 8000714:	5841      	ldr	r1, [r0, r1]
 8000716:	2402      	movs	r4, #2
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	5c08      	ldrb	r0, [r1, r0]
 800071c:	2800      	cmp	r0, #0
 800071e:	d105      	bne.n	800072c <USBPD_PE_Request_DataMessage+0x28>
 8000720:	2001      	movs	r0, #1
 8000722:	684a      	ldr	r2, [r1, #4]
 8000724:	6812      	ldr	r2, [r2, #0]
 8000726:	0b12      	lsrs	r2, r2, #12
 8000728:	4002      	ands	r2, r0
 800072a:	d101      	bne.n	8000730 <USBPD_PE_Request_DataMessage+0x2c>
 800072c:	2403      	movs	r4, #3
 800072e:	e021      	b.n	8000774 <USBPD_PE_Request_DataMessage+0x70>
 8000730:	466a      	mov	r2, sp
 8000732:	7013      	strb	r3, [r2, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	2533      	movs	r5, #51	; 0x33
 8000738:	554a      	strb	r2, [r1, r5]
 800073a:	000b      	movs	r3, r1
 800073c:	3332      	adds	r3, #50	; 0x32
 800073e:	4dc0      	ldr	r5, [pc, #768]	; (8000a40 <.text_36>)
 8000740:	4ec0      	ldr	r6, [pc, #768]	; (8000a44 <.text_37>)
 8000742:	9701      	str	r7, [sp, #4]
 8000744:	466f      	mov	r7, sp
 8000746:	783f      	ldrb	r7, [r7, #0]
 8000748:	2f01      	cmp	r7, #1
 800074a:	d004      	beq.n	8000756 <USBPD_PE_Request_DataMessage+0x52>
 800074c:	2f06      	cmp	r7, #6
 800074e:	d013      	beq.n	8000778 <USBPD_PE_Request_DataMessage+0x74>
 8000750:	2f07      	cmp	r7, #7
 8000752:	d01b      	beq.n	800078c <USBPD_PE_Request_DataMessage+0x88>
 8000754:	e027      	b.n	80007a6 <USBPD_PE_Request_DataMessage+0xa2>
 8000756:	684d      	ldr	r5, [r1, #4]
 8000758:	682d      	ldr	r5, [r5, #0]
 800075a:	08ad      	lsrs	r5, r5, #2
 800075c:	4005      	ands	r5, r0
 800075e:	d009      	beq.n	8000774 <USBPD_PE_Request_DataMessage+0x70>
 8000760:	4cc1      	ldr	r4, [pc, #772]	; (8000a68 <.text_39>)
 8000762:	5508      	strb	r0, [r1, r4]
 8000764:	2007      	movs	r0, #7
 8000766:	7018      	strb	r0, [r3, #0]
 8000768:	2400      	movs	r4, #0
 800076a:	4668      	mov	r0, sp
 800076c:	7a00      	ldrb	r0, [r0, #8]
 800076e:	6889      	ldr	r1, [r1, #8]
 8000770:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000772:	4788      	blx	r1
 8000774:	0020      	movs	r0, r4
 8000776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000778:	6848      	ldr	r0, [r1, #4]
 800077a:	6800      	ldr	r0, [r0, #0]
 800077c:	4006      	ands	r6, r0
 800077e:	42ae      	cmp	r6, r5
 8000780:	d1f8      	bne.n	8000774 <USBPD_PE_Request_DataMessage+0x70>
 8000782:	9801      	ldr	r0, [sp, #4]
 8000784:	6800      	ldr	r0, [r0, #0]
 8000786:	6288      	str	r0, [r1, #40]	; 0x28
 8000788:	202b      	movs	r0, #43	; 0x2b
 800078a:	e7ec      	b.n	8000766 <USBPD_PE_Request_DataMessage+0x62>
 800078c:	6848      	ldr	r0, [r1, #4]
 800078e:	6800      	ldr	r0, [r0, #0]
 8000790:	4006      	ands	r6, r0
 8000792:	42ae      	cmp	r6, r5
 8000794:	d1ee      	bne.n	8000774 <USBPD_PE_Request_DataMessage+0x70>
 8000796:	9801      	ldr	r0, [sp, #4]
 8000798:	6800      	ldr	r0, [r0, #0]
 800079a:	6288      	str	r0, [r1, #40]	; 0x28
 800079c:	205d      	movs	r0, #93	; 0x5d
 800079e:	4cb2      	ldr	r4, [pc, #712]	; (8000a68 <.text_39>)
 80007a0:	5508      	strb	r0, [r1, r4]
 80007a2:	2062      	movs	r0, #98	; 0x62
 80007a4:	e7df      	b.n	8000766 <USBPD_PE_Request_DataMessage+0x62>
 80007a6:	2410      	movs	r4, #16
 80007a8:	e7e4      	b.n	8000774 <USBPD_PE_Request_DataMessage+0x70>
	...

080007ac <.text_22>:
 80007ac:	ffffefff 	.word	0xffffefff

080007b0 <USBPD_PE_Send_Request>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	000b      	movs	r3, r1
 80007b4:	4915      	ldr	r1, [pc, #84]	; (800080c <.text_25>)
 80007b6:	0084      	lsls	r4, r0, #2
 80007b8:	590d      	ldr	r5, [r1, r4]
 80007ba:	2102      	movs	r1, #2
 80007bc:	2432      	movs	r4, #50	; 0x32
 80007be:	5d2c      	ldrb	r4, [r5, r4]
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d104      	bne.n	80007ce <USBPD_PE_Send_Request+0x1e>
 80007c4:	686c      	ldr	r4, [r5, #4]
 80007c6:	6824      	ldr	r4, [r4, #0]
 80007c8:	04e6      	lsls	r6, r4, #19
 80007ca:	0ff6      	lsrs	r6, r6, #31
 80007cc:	d101      	bne.n	80007d2 <USBPD_PE_Send_Request+0x22>
 80007ce:	2103      	movs	r1, #3
 80007d0:	e017      	b.n	8000802 <USBPD_PE_Send_Request+0x52>
 80007d2:	4ea6      	ldr	r6, [pc, #664]	; (8000a6c <.text_40>)
 80007d4:	4026      	ands	r6, r4
 80007d6:	24c0      	movs	r4, #192	; 0xc0
 80007d8:	00a4      	lsls	r4, r4, #2
 80007da:	42a6      	cmp	r6, r4
 80007dc:	d111      	bne.n	8000802 <USBPD_PE_Send_Request+0x52>
 80007de:	2145      	movs	r1, #69	; 0x45
 80007e0:	2432      	movs	r4, #50	; 0x32
 80007e2:	5529      	strb	r1, [r5, r4]
 80007e4:	61ab      	str	r3, [r5, #24]
 80007e6:	6969      	ldr	r1, [r5, #20]
 80007e8:	2318      	movs	r3, #24
 80007ea:	4399      	bics	r1, r3
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	4013      	ands	r3, r2
 80007f0:	430b      	orrs	r3, r1
 80007f2:	616b      	str	r3, [r5, #20]
 80007f4:	2400      	movs	r4, #0
 80007f6:	2233      	movs	r2, #51	; 0x33
 80007f8:	54ac      	strb	r4, [r5, r2]
 80007fa:	68a9      	ldr	r1, [r5, #8]
 80007fc:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80007fe:	4788      	blx	r1
 8000800:	2100      	movs	r1, #0
 8000802:	0008      	movs	r0, r1
 8000804:	bd70      	pop	{r4, r5, r6, pc}
	...

08000808 <.text_24>:
 8000808:	20000000 	.word	0x20000000

0800080c <.text_25>:
 800080c:	20000228 	.word	0x20000228

08000810 <.text_26>:
 8000810:	00008708 	.word	0x00008708

08000814 <.text_27>:
 8000814:	00008308 	.word	0x00008308

08000818 <.text_28>:
 8000818:	0801a618 	.word	0x0801a618

0800081c <USBPD_PE_SendExtendedMessage>:
 800081c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	001f      	movs	r7, r3
 8000822:	2400      	movs	r4, #0
 8000824:	2500      	movs	r5, #0
 8000826:	48b5      	ldr	r0, [pc, #724]	; (8000afc <.text_43>)
 8000828:	4669      	mov	r1, sp
 800082a:	7b09      	ldrb	r1, [r1, #12]
 800082c:	0089      	lsls	r1, r1, #2
 800082e:	5846      	ldr	r6, [r0, r1]
 8000830:	2003      	movs	r0, #3
 8000832:	2132      	movs	r1, #50	; 0x32
 8000834:	5c71      	ldrb	r1, [r6, r1]
 8000836:	2900      	cmp	r1, #0
 8000838:	d107      	bne.n	800084a <USBPD_PE_SendExtendedMessage+0x2e>
 800083a:	6871      	ldr	r1, [r6, #4]
 800083c:	6809      	ldr	r1, [r1, #0]
 800083e:	9100      	str	r1, [sp, #0]
 8000840:	2101      	movs	r1, #1
 8000842:	9b00      	ldr	r3, [sp, #0]
 8000844:	0b1b      	lsrs	r3, r3, #12
 8000846:	400b      	ands	r3, r1
 8000848:	d101      	bne.n	800084e <USBPD_PE_SendExtendedMessage+0x32>
 800084a:	2503      	movs	r5, #3
 800084c:	e06c      	b.n	8000928 <USBPD_PE_SendExtendedMessage+0x10c>
 800084e:	9b00      	ldr	r3, [sp, #0]
 8000850:	055b      	lsls	r3, r3, #21
 8000852:	0f5b      	lsrs	r3, r3, #29
 8000854:	2b03      	cmp	r3, #3
 8000856:	d10b      	bne.n	8000870 <USBPD_PE_SendExtendedMessage+0x54>
 8000858:	9b00      	ldr	r3, [sp, #0]
 800085a:	4018      	ands	r0, r3
 800085c:	2801      	cmp	r0, #1
 800085e:	d801      	bhi.n	8000864 <USBPD_PE_SendExtendedMessage+0x48>
 8000860:	2501      	movs	r5, #1
 8000862:	e061      	b.n	8000928 <USBPD_PE_SendExtendedMessage+0x10c>
 8000864:	4668      	mov	r0, sp
 8000866:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8000868:	21ff      	movs	r1, #255	; 0xff
 800086a:	1d89      	adds	r1, r1, #6
 800086c:	4288      	cmp	r0, r1
 800086e:	d301      	bcc.n	8000874 <USBPD_PE_SendExtendedMessage+0x58>
 8000870:	2502      	movs	r5, #2
 8000872:	e059      	b.n	8000928 <USBPD_PE_SendExtendedMessage+0x10c>
 8000874:	4668      	mov	r0, sp
 8000876:	7002      	strb	r2, [r0, #0]
 8000878:	6970      	ldr	r0, [r6, #20]
 800087a:	2120      	movs	r1, #32
 800087c:	4388      	bics	r0, r1
 800087e:	6170      	str	r0, [r6, #20]
 8000880:	2020      	movs	r0, #32
 8000882:	4669      	mov	r1, sp
 8000884:	7809      	ldrb	r1, [r1, #0]
 8000886:	2903      	cmp	r1, #3
 8000888:	d008      	beq.n	800089c <USBPD_PE_SendExtendedMessage+0x80>
 800088a:	2904      	cmp	r1, #4
 800088c:	d020      	beq.n	80008d0 <USBPD_PE_SendExtendedMessage+0xb4>
 800088e:	2906      	cmp	r1, #6
 8000890:	d020      	beq.n	80008d4 <USBPD_PE_SendExtendedMessage+0xb8>
 8000892:	2908      	cmp	r1, #8
 8000894:	d020      	beq.n	80008d8 <USBPD_PE_SendExtendedMessage+0xbc>
 8000896:	290a      	cmp	r1, #10
 8000898:	d023      	beq.n	80008e2 <USBPD_PE_SendExtendedMessage+0xc6>
 800089a:	e024      	b.n	80008e6 <USBPD_PE_SendExtendedMessage+0xca>
 800089c:	210c      	movs	r1, #12
 800089e:	4aac      	ldr	r2, [pc, #688]	; (8000b50 <.text_45>)
 80008a0:	18b2      	adds	r2, r6, r2
 80008a2:	7091      	strb	r1, [r2, #2]
 80008a4:	6971      	ldr	r1, [r6, #20]
 80008a6:	4308      	orrs	r0, r1
 80008a8:	6170      	str	r0, [r6, #20]
 80008aa:	4668      	mov	r0, sp
 80008ac:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d027      	beq.n	8000902 <USBPD_PE_SendExtendedMessage+0xe6>
 80008b2:	9401      	str	r4, [sp, #4]
 80008b4:	4668      	mov	r0, sp
 80008b6:	7b00      	ldrb	r0, [r0, #12]
 80008b8:	f000 fa98 	bl	8000dec <PE_Get_UnchunkedSupport>
 80008bc:	2801      	cmp	r0, #1
 80008be:	d101      	bne.n	80008c4 <USBPD_PE_SendExtendedMessage+0xa8>
 80008c0:	2004      	movs	r0, #4
 80008c2:	9001      	str	r0, [sp, #4]
 80008c4:	9702      	str	r7, [sp, #8]
 80008c6:	9801      	ldr	r0, [sp, #4]
 80008c8:	4669      	mov	r1, sp
 80008ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80008cc:	4fa1      	ldr	r7, [pc, #644]	; (8000b54 <.text_46>)
 80008ce:	e012      	b.n	80008f6 <USBPD_PE_SendExtendedMessage+0xda>
 80008d0:	210d      	movs	r1, #13
 80008d2:	e7e4      	b.n	800089e <USBPD_PE_SendExtendedMessage+0x82>
 80008d4:	210e      	movs	r1, #14
 80008d6:	e7e2      	b.n	800089e <USBPD_PE_SendExtendedMessage+0x82>
 80008d8:	205b      	movs	r0, #91	; 0x5b
 80008da:	499d      	ldr	r1, [pc, #628]	; (8000b50 <.text_45>)
 80008dc:	1871      	adds	r1, r6, r1
 80008de:	7088      	strb	r0, [r1, #2]
 80008e0:	e7e3      	b.n	80008aa <USBPD_PE_SendExtendedMessage+0x8e>
 80008e2:	205c      	movs	r0, #92	; 0x5c
 80008e4:	e7f9      	b.n	80008da <USBPD_PE_SendExtendedMessage+0xbe>
 80008e6:	2510      	movs	r5, #16
 80008e8:	e01e      	b.n	8000928 <USBPD_PE_SendExtendedMessage+0x10c>
 80008ea:	9a02      	ldr	r2, [sp, #8]
 80008ec:	5d12      	ldrb	r2, [r2, r4]
 80008ee:	1823      	adds	r3, r4, r0
 80008f0:	18f3      	adds	r3, r6, r3
 80008f2:	55da      	strb	r2, [r3, r7]
 80008f4:	1c64      	adds	r4, r4, #1
 80008f6:	428c      	cmp	r4, r1
 80008f8:	d3f7      	bcc.n	80008ea <USBPD_PE_SendExtendedMessage+0xce>
 80008fa:	2092      	movs	r0, #146	; 0x92
 80008fc:	00c0      	lsls	r0, r0, #3
 80008fe:	5231      	strh	r1, [r6, r0]
 8000900:	e002      	b.n	8000908 <USBPD_PE_SendExtendedMessage+0xec>
 8000902:	2092      	movs	r0, #146	; 0x92
 8000904:	00c0      	lsls	r0, r0, #3
 8000906:	5234      	strh	r4, [r6, r0]
 8000908:	4668      	mov	r0, sp
 800090a:	7c00      	ldrb	r0, [r0, #16]
 800090c:	2133      	movs	r1, #51	; 0x33
 800090e:	5470      	strb	r0, [r6, r1]
 8000910:	4668      	mov	r0, sp
 8000912:	7800      	ldrb	r0, [r0, #0]
 8000914:	498e      	ldr	r1, [pc, #568]	; (8000b50 <.text_45>)
 8000916:	5470      	strb	r0, [r6, r1]
 8000918:	2031      	movs	r0, #49	; 0x31
 800091a:	2132      	movs	r1, #50	; 0x32
 800091c:	5470      	strb	r0, [r6, r1]
 800091e:	4668      	mov	r0, sp
 8000920:	7b00      	ldrb	r0, [r0, #12]
 8000922:	68b1      	ldr	r1, [r6, #8]
 8000924:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000926:	4788      	blx	r1
 8000928:	0028      	movs	r0, r5
 800092a:	b005      	add	sp, #20
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000930 <.text_30>:
 8000930:	0000025e 	.word	0x0000025e

08000934 <PE_Send_RESET>:
 8000934:	b538      	push	{r3, r4, r5, lr}
 8000936:	0005      	movs	r5, r0
 8000938:	000c      	movs	r4, r1
 800093a:	2c05      	cmp	r4, #5
 800093c:	d101      	bne.n	8000942 <PE_Send_RESET+0xe>
 800093e:	211f      	movs	r1, #31
 8000940:	e000      	b.n	8000944 <PE_Send_RESET+0x10>
 8000942:	215e      	movs	r1, #94	; 0x5e
 8000944:	7c28      	ldrb	r0, [r5, #16]
 8000946:	f7ff fdef 	bl	8000528 <USBPD_PE_Notification>
 800094a:	0021      	movs	r1, r4
 800094c:	7c28      	ldrb	r0, [r5, #16]
 800094e:	f005 fa11 	bl	8005d74 <USBPD_PRL_ResetRequestProcess>
 8000952:	f3ef 8010 	mrs	r0, PRIMASK
 8000956:	b672      	cpsid	i
 8000958:	2100      	movs	r1, #0
 800095a:	223c      	movs	r2, #60	; 0x3c
 800095c:	54a9      	strb	r1, [r5, r2]
 800095e:	f380 8810 	msr	PRIMASK, r0
 8000962:	bd31      	pop	{r0, r4, r5, pc}

08000964 <PE_Get_SpecRevision>:
 8000964:	4965      	ldr	r1, [pc, #404]	; (8000afc <.text_43>)
 8000966:	0080      	lsls	r0, r0, #2
 8000968:	5808      	ldr	r0, [r1, r0]
 800096a:	6840      	ldr	r0, [r0, #4]
 800096c:	7800      	ldrb	r0, [r0, #0]
 800096e:	0780      	lsls	r0, r0, #30
 8000970:	0f80      	lsrs	r0, r0, #30
 8000972:	4770      	bx	lr

08000974 <PE_ChangePowerRole>:
 8000974:	b538      	push	{r3, r4, r5, lr}
 8000976:	6842      	ldr	r2, [r0, #4]
 8000978:	6813      	ldr	r3, [r2, #0]
 800097a:	2404      	movs	r4, #4
 800097c:	43a3      	bics	r3, r4
 800097e:	008c      	lsls	r4, r1, #2
 8000980:	2504      	movs	r5, #4
 8000982:	402c      	ands	r4, r5
 8000984:	431c      	orrs	r4, r3
 8000986:	6014      	str	r4, [r2, #0]
 8000988:	7c00      	ldrb	r0, [r0, #16]
 800098a:	f004 ff70 	bl	800586e <USBPD_PRL_SetHeaderPowerRole>
 800098e:	bd31      	pop	{r0, r4, r5, pc}

08000990 <PE_Get_RxEvent>:
 8000990:	b530      	push	{r4, r5, lr}
 8000992:	0001      	movs	r1, r0
 8000994:	2014      	movs	r0, #20
 8000996:	f3ef 8210 	mrs	r2, PRIMASK
 800099a:	b672      	cpsid	i
 800099c:	233c      	movs	r3, #60	; 0x3c
 800099e:	5ccc      	ldrb	r4, [r1, r3]
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d029      	beq.n	80009f8 <PE_Get_RxEvent+0x68>
 80009a4:	2393      	movs	r3, #147	; 0x93
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	18cb      	adds	r3, r1, r3
 80009aa:	5d1d      	ldrb	r5, [r3, r4]
 80009ac:	066d      	lsls	r5, r5, #25
 80009ae:	d401      	bmi.n	80009b4 <PE_Get_RxEvent+0x24>
 80009b0:	2003      	movs	r0, #3
 80009b2:	e021      	b.n	80009f8 <PE_Get_RxEvent+0x68>
 80009b4:	2584      	movs	r5, #132	; 0x84
 80009b6:	006d      	lsls	r5, r5, #1
 80009b8:	436c      	muls	r4, r5
 80009ba:	190c      	adds	r4, r1, r4
 80009bc:	3ccb      	subs	r4, #203	; 0xcb
 80009be:	638c      	str	r4, [r1, #56]	; 0x38
 80009c0:	7825      	ldrb	r5, [r4, #0]
 80009c2:	7864      	ldrb	r4, [r4, #1]
 80009c4:	0224      	lsls	r4, r4, #8
 80009c6:	192c      	adds	r4, r5, r4
 80009c8:	868c      	strh	r4, [r1, #52]	; 0x34
 80009ca:	000c      	movs	r4, r1
 80009cc:	3430      	adds	r4, #48	; 0x30
 80009ce:	253c      	movs	r5, #60	; 0x3c
 80009d0:	5d49      	ldrb	r1, [r1, r5]
 80009d2:	5c59      	ldrb	r1, [r3, r1]
 80009d4:	06c9      	lsls	r1, r1, #27
 80009d6:	0ec9      	lsrs	r1, r1, #27
 80009d8:	2901      	cmp	r1, #1
 80009da:	d004      	beq.n	80009e6 <PE_Get_RxEvent+0x56>
 80009dc:	2902      	cmp	r1, #2
 80009de:	d005      	beq.n	80009ec <PE_Get_RxEvent+0x5c>
 80009e0:	2904      	cmp	r1, #4
 80009e2:	d006      	beq.n	80009f2 <PE_Get_RxEvent+0x62>
 80009e4:	e008      	b.n	80009f8 <PE_Get_RxEvent+0x68>
 80009e6:	2011      	movs	r0, #17
 80009e8:	2100      	movs	r1, #0
 80009ea:	e004      	b.n	80009f6 <PE_Get_RxEvent+0x66>
 80009ec:	2012      	movs	r0, #18
 80009ee:	2101      	movs	r1, #1
 80009f0:	e001      	b.n	80009f6 <PE_Get_RxEvent+0x66>
 80009f2:	2013      	movs	r0, #19
 80009f4:	2102      	movs	r1, #2
 80009f6:	7021      	strb	r1, [r4, #0]
 80009f8:	f382 8810 	msr	PRIMASK, r2
 80009fc:	bd30      	pop	{r4, r5, pc}

080009fe <PE_Clear_RxEvent>:
 80009fe:	b510      	push	{r4, lr}
 8000a00:	0001      	movs	r1, r0
 8000a02:	f3ef 8010 	mrs	r0, PRIMASK
 8000a06:	b672      	cpsid	i
 8000a08:	223c      	movs	r2, #60	; 0x3c
 8000a0a:	5c8a      	ldrb	r2, [r1, r2]
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d014      	beq.n	8000a3a <PE_Clear_RxEvent+0x3c>
 8000a10:	1e53      	subs	r3, r2, #1
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4acb      	ldr	r2, [pc, #812]	; (8000d44 <.text_56>)
 8000a16:	188c      	adds	r4, r1, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	54e2      	strb	r2, [r4, r3]
 8000a1c:	1e5b      	subs	r3, r3, #1
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	0fdb      	lsrs	r3, r3, #31
 8000a22:	5ce4      	ldrb	r4, [r4, r3]
 8000a24:	0664      	lsls	r4, r4, #25
 8000a26:	d506      	bpl.n	8000a36 <PE_Clear_RxEvent+0x38>
 8000a28:	1c5b      	adds	r3, r3, #1
 8000a2a:	223c      	movs	r2, #60	; 0x3c
 8000a2c:	548b      	strb	r3, [r1, r2]
 8000a2e:	f380 8810 	msr	PRIMASK, r0
 8000a32:	7c08      	ldrb	r0, [r1, #16]
 8000a34:	e168      	b.n	8000d08 <.text_54>
 8000a36:	233c      	movs	r3, #60	; 0x3c
 8000a38:	54ca      	strb	r2, [r1, r3]
 8000a3a:	f380 8810 	msr	PRIMASK, r0
 8000a3e:	bd10      	pop	{r4, pc}

08000a40 <.text_36>:
 8000a40:	00000302 	.word	0x00000302

08000a44 <.text_37>:
 8000a44:	00000703 	.word	0x00000703

08000a48 <PE_PRL_Control_RxEvent>:
 8000a48:	492c      	ldr	r1, [pc, #176]	; (8000afc <.text_43>)
 8000a4a:	0080      	lsls	r0, r0, #2
 8000a4c:	580a      	ldr	r2, [r1, r0]
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f3ef 8110 	mrs	r1, PRIMASK
 8000a54:	b672      	cpsid	i
 8000a56:	233c      	movs	r3, #60	; 0x3c
 8000a58:	5cd2      	ldrb	r2, [r2, r3]
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d000      	beq.n	8000a60 <PE_PRL_Control_RxEvent+0x18>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f381 8810 	msr	PRIMASK, r1
 8000a64:	4770      	bx	lr
	...

08000a68 <.text_39>:
 8000a68:	0000025f 	.word	0x0000025f

08000a6c <.text_40>:
 8000a6c:	00000704 	.word	0x00000704

08000a70 <PE_Convert_SOPRxEvent>:
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d003      	beq.n	8000a7c <PE_Convert_SOPRxEvent+0xc>
 8000a74:	2802      	cmp	r0, #2
 8000a76:	d005      	beq.n	8000a84 <PE_Convert_SOPRxEvent+0x14>
 8000a78:	d302      	bcc.n	8000a80 <PE_Convert_SOPRxEvent+0x10>
 8000a7a:	e005      	b.n	8000a88 <PE_Convert_SOPRxEvent+0x18>
 8000a7c:	2011      	movs	r0, #17
 8000a7e:	4770      	bx	lr
 8000a80:	2012      	movs	r0, #18
 8000a82:	4770      	bx	lr
 8000a84:	2013      	movs	r0, #19
 8000a86:	4770      	bx	lr
 8000a88:	2014      	movs	r0, #20
 8000a8a:	4770      	bx	lr

08000a8c <PE_Check_AMSConflict>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	0005      	movs	r5, r0
 8000a90:	2400      	movs	r4, #0
 8000a92:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8000a94:	49b7      	ldr	r1, [pc, #732]	; (8000d74 <.text_58>)
 8000a96:	4001      	ands	r1, r0
 8000a98:	290d      	cmp	r1, #13
 8000a9a:	d101      	bne.n	8000aa0 <PE_Check_AMSConflict+0x14>
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	e01b      	b.n	8000ad8 <PE_Check_AMSConflict+0x4c>
 8000aa0:	2603      	movs	r6, #3
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	7f29      	ldrb	r1, [r5, #28]
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d011      	beq.n	8000ace <PE_Check_AMSConflict+0x42>
 8000aaa:	1e49      	subs	r1, r1, #1
 8000aac:	2901      	cmp	r1, #1
 8000aae:	d912      	bls.n	8000ad6 <PE_Check_AMSConflict+0x4a>
 8000ab0:	1e89      	subs	r1, r1, #2
 8000ab2:	d011      	beq.n	8000ad8 <PE_Check_AMSConflict+0x4c>
 8000ab4:	1e49      	subs	r1, r1, #1
 8000ab6:	d01d      	beq.n	8000af4 <PE_Check_AMSConflict+0x68>
 8000ab8:	1e49      	subs	r1, r1, #1
 8000aba:	2909      	cmp	r1, #9
 8000abc:	d90b      	bls.n	8000ad6 <PE_Check_AMSConflict+0x4a>
 8000abe:	390b      	subs	r1, #11
 8000ac0:	2901      	cmp	r1, #1
 8000ac2:	d908      	bls.n	8000ad6 <PE_Check_AMSConflict+0x4a>
 8000ac4:	1e89      	subs	r1, r1, #2
 8000ac6:	d004      	beq.n	8000ad2 <PE_Check_AMSConflict+0x46>
 8000ac8:	394d      	subs	r1, #77	; 0x4d
 8000aca:	d004      	beq.n	8000ad6 <PE_Check_AMSConflict+0x4a>
 8000acc:	e006      	b.n	8000adc <PE_Check_AMSConflict+0x50>
 8000ace:	746e      	strb	r6, [r5, #17]
 8000ad0:	e011      	b.n	8000af6 <PE_Check_AMSConflict+0x6a>
 8000ad2:	7468      	strb	r0, [r5, #17]
 8000ad4:	e00f      	b.n	8000af6 <PE_Check_AMSConflict+0x6a>
 8000ad6:	2011      	movs	r0, #17
 8000ad8:	7468      	strb	r0, [r5, #17]
 8000ada:	e00b      	b.n	8000af4 <PE_Check_AMSConflict+0x68>
 8000adc:	215c      	movs	r1, #92	; 0x5c
 8000ade:	7c28      	ldrb	r0, [r5, #16]
 8000ae0:	f7ff fd22 	bl	8000528 <USBPD_PE_Notification>
 8000ae4:	746e      	strb	r6, [r5, #17]
 8000ae6:	6868      	ldr	r0, [r5, #4]
 8000ae8:	6800      	ldr	r0, [r0, #0]
 8000aea:	49c4      	ldr	r1, [pc, #784]	; (8000dfc <.text_62>)
 8000aec:	4001      	ands	r1, r0
 8000aee:	0230      	lsls	r0, r6, #8
 8000af0:	4281      	cmp	r1, r0
 8000af2:	d000      	beq.n	8000af6 <PE_Check_AMSConflict+0x6a>
 8000af4:	2415      	movs	r4, #21
 8000af6:	0020      	movs	r0, r4
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000afc <.text_43>:
 8000afc:	20000228 	.word	0x20000228

08000b00 <PE_PRL_ResetReceived>:
 8000b00:	b538      	push	{r3, r4, r5, lr}
 8000b02:	0004      	movs	r4, r0
 8000b04:	48be      	ldr	r0, [pc, #760]	; (8000e00 <.text_63>)
 8000b06:	00a2      	lsls	r2, r4, #2
 8000b08:	5885      	ldr	r5, [r0, r2]
 8000b0a:	2905      	cmp	r1, #5
 8000b0c:	d115      	bne.n	8000b3a <PE_PRL_ResetReceived+0x3a>
 8000b0e:	6868      	ldr	r0, [r5, #4]
 8000b10:	6801      	ldr	r1, [r0, #0]
 8000b12:	2210      	movs	r2, #16
 8000b14:	4391      	bics	r1, r2
 8000b16:	6001      	str	r1, [r0, #0]
 8000b18:	6968      	ldr	r0, [r5, #20]
 8000b1a:	49ba      	ldr	r1, [pc, #744]	; (8000e04 <.text_64>)
 8000b1c:	4001      	ands	r1, r0
 8000b1e:	0150      	lsls	r0, r2, #5
 8000b20:	4308      	orrs	r0, r1
 8000b22:	6168      	str	r0, [r5, #20]
 8000b24:	2014      	movs	r0, #20
 8000b26:	2132      	movs	r1, #50	; 0x32
 8000b28:	5468      	strb	r0, [r5, r1]
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	213c      	movs	r1, #60	; 0x3c
 8000b2e:	5468      	strb	r0, [r5, r1]
 8000b30:	211e      	movs	r1, #30
 8000b32:	7c28      	ldrb	r0, [r5, #16]
 8000b34:	f7ff fcf8 	bl	8000528 <USBPD_PE_Notification>
 8000b38:	e004      	b.n	8000b44 <PE_PRL_ResetReceived+0x44>
 8000b3a:	6968      	ldr	r0, [r5, #20]
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	02c9      	lsls	r1, r1, #11
 8000b40:	4301      	orrs	r1, r0
 8000b42:	6169      	str	r1, [r5, #20]
 8000b44:	0020      	movs	r0, r4
 8000b46:	68a9      	ldr	r1, [r5, #8]
 8000b48:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000b4a:	4788      	blx	r1
 8000b4c:	bd31      	pop	{r0, r4, r5, pc}
	...

08000b50 <.text_45>:
 8000b50:	0000025d 	.word	0x0000025d

08000b54 <.text_46>:
 8000b54:	00000385 	.word	0x00000385

08000b58 <PE_PRL_BistCompleted>:
 8000b58:	4770      	bx	lr

08000b5a <PE_Reset_HardReset>:
 8000b5a:	b538      	push	{r3, r4, r5, lr}
 8000b5c:	0004      	movs	r4, r0
 8000b5e:	2032      	movs	r0, #50	; 0x32
 8000b60:	5c20      	ldrb	r0, [r4, r0]
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d003      	beq.n	8000b6e <PE_Reset_HardReset+0x14>
 8000b66:	215b      	movs	r1, #91	; 0x5b
 8000b68:	7c20      	ldrb	r0, [r4, #16]
 8000b6a:	f7ff fcdd 	bl	8000528 <USBPD_PE_Notification>
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f000 f82c 	bl	8000bcc <PE_Reset_ZI>
 8000b74:	2503      	movs	r5, #3
 8000b76:	6820      	ldr	r0, [r4, #0]
 8000b78:	6843      	ldr	r3, [r0, #4]
 8000b7a:	402b      	ands	r3, r5
 8000b7c:	7c20      	ldrb	r0, [r4, #16]
 8000b7e:	6861      	ldr	r1, [r4, #4]
 8000b80:	6809      	ldr	r1, [r1, #0]
 8000b82:	074a      	lsls	r2, r1, #29
 8000b84:	0fd2      	lsrs	r2, r2, #31
 8000b86:	d008      	beq.n	8000b9a <PE_Reset_HardReset+0x40>
 8000b88:	2101      	movs	r1, #1
 8000b8a:	f004 fe54 	bl	8005836 <USBPD_PRL_SetHeader>
 8000b8e:	6860      	ldr	r0, [r4, #4]
 8000b90:	6801      	ldr	r1, [r0, #0]
 8000b92:	2208      	movs	r2, #8
 8000b94:	430a      	orrs	r2, r1
 8000b96:	6002      	str	r2, [r0, #0]
 8000b98:	e007      	b.n	8000baa <PE_Reset_HardReset+0x50>
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f004 fe4b 	bl	8005836 <USBPD_PRL_SetHeader>
 8000ba0:	6860      	ldr	r0, [r4, #4]
 8000ba2:	6801      	ldr	r1, [r0, #0]
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	4391      	bics	r1, r2
 8000ba8:	6001      	str	r1, [r0, #0]
 8000baa:	6820      	ldr	r0, [r4, #0]
 8000bac:	6840      	ldr	r0, [r0, #4]
 8000bae:	4005      	ands	r5, r0
 8000bb0:	6860      	ldr	r0, [r4, #4]
 8000bb2:	6801      	ldr	r1, [r0, #0]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	4391      	bics	r1, r2
 8000bb8:	430d      	orrs	r5, r1
 8000bba:	6005      	str	r5, [r0, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	7c20      	ldrb	r0, [r4, #16]
 8000bc0:	f004 feaa 	bl	8005918 <USBPD_PRL_SOPCapability>
 8000bc4:	7c20      	ldrb	r0, [r4, #16]
 8000bc6:	f005 f913 	bl	8005df0 <USBPD_PRL_Reset>
 8000bca:	bd31      	pop	{r0, r4, r5, pc}

08000bcc <PE_Reset_ZI>:
 8000bcc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000bce:	0004      	movs	r4, r0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	9001      	str	r0, [sp, #4]
 8000bd4:	6860      	ldr	r0, [r4, #4]
 8000bd6:	6801      	ldr	r1, [r0, #0]
 8000bd8:	2210      	movs	r2, #16
 8000bda:	4391      	bics	r1, r2
 8000bdc:	6001      	str	r1, [r0, #0]
 8000bde:	2100      	movs	r1, #0
 8000be0:	0020      	movs	r0, r4
 8000be2:	f000 fc34 	bl	800144e <PE_SetPowerNegotiation>
 8000be6:	2193      	movs	r1, #147	; 0x93
 8000be8:	0089      	lsls	r1, r1, #2
 8000bea:	0020      	movs	r0, r4
 8000bec:	3014      	adds	r0, #20
 8000bee:	f018 fc04 	bl	80193fa <__aeabi_memclr>
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	aa01      	add	r2, sp, #4
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	7c20      	ldrb	r0, [r4, #16]
 8000bfa:	68a5      	ldr	r5, [r4, #8]
 8000bfc:	69ad      	ldr	r5, [r5, #24]
 8000bfe:	47a8      	blx	r5
 8000c00:	2080      	movs	r0, #128	; 0x80
 8000c02:	0440      	lsls	r0, r0, #17
 8000c04:	9000      	str	r0, [sp, #0]
 8000c06:	2304      	movs	r3, #4
 8000c08:	466a      	mov	r2, sp
 8000c0a:	2106      	movs	r1, #6
 8000c0c:	7c20      	ldrb	r0, [r4, #16]
 8000c0e:	68a5      	ldr	r5, [r4, #8]
 8000c10:	69ad      	ldr	r5, [r5, #24]
 8000c12:	47a8      	blx	r5
 8000c14:	2503      	movs	r5, #3
 8000c16:	6820      	ldr	r0, [r4, #0]
 8000c18:	6841      	ldr	r1, [r0, #4]
 8000c1a:	4029      	ands	r1, r5
 8000c1c:	7c20      	ldrb	r0, [r4, #16]
 8000c1e:	f004 fe48 	bl	80058b2 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000c22:	6820      	ldr	r0, [r4, #0]
 8000c24:	6840      	ldr	r0, [r0, #4]
 8000c26:	4005      	ands	r5, r0
 8000c28:	6860      	ldr	r0, [r4, #4]
 8000c2a:	6801      	ldr	r1, [r0, #0]
 8000c2c:	4a76      	ldr	r2, [pc, #472]	; (8000e08 <.text_65>)
 8000c2e:	400a      	ands	r2, r1
 8000c30:	06a9      	lsls	r1, r5, #26
 8000c32:	4311      	orrs	r1, r2
 8000c34:	6001      	str	r1, [r0, #0]
 8000c36:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000c38 <PE_Reset_Counter>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	2298      	movs	r2, #152	; 0x98
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	1880      	adds	r0, r0, r2
 8000c42:	f018 fbda 	bl	80193fa <__aeabi_memclr>
 8000c46:	bd01      	pop	{r0, pc}

08000c48 <PE_Reset_StateMachine>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	0004      	movs	r4, r0
 8000c4c:	2032      	movs	r0, #50	; 0x32
 8000c4e:	5c20      	ldrb	r0, [r4, r0]
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d003      	beq.n	8000c5c <PE_Reset_StateMachine+0x14>
 8000c54:	215b      	movs	r1, #91	; 0x5b
 8000c56:	7c20      	ldrb	r0, [r4, #16]
 8000c58:	f7ff fc66 	bl	8000528 <USBPD_PE_Notification>
 8000c5c:	0020      	movs	r0, r4
 8000c5e:	f7ff ffb5 	bl	8000bcc <PE_Reset_ZI>
 8000c62:	2101      	movs	r1, #1
 8000c64:	0020      	movs	r0, r4
 8000c66:	f000 fbf2 	bl	800144e <PE_SetPowerNegotiation>
 8000c6a:	7c20      	ldrb	r0, [r4, #16]
 8000c6c:	f005 f8c0 	bl	8005df0 <USBPD_PRL_Reset>
 8000c70:	6860      	ldr	r0, [r4, #4]
 8000c72:	6801      	ldr	r1, [r0, #0]
 8000c74:	2501      	movs	r5, #1
 8000c76:	08ca      	lsrs	r2, r1, #3
 8000c78:	402a      	ands	r2, r5
 8000c7a:	078b      	lsls	r3, r1, #30
 8000c7c:	0f9b      	lsrs	r3, r3, #30
 8000c7e:	7c20      	ldrb	r0, [r4, #16]
 8000c80:	0889      	lsrs	r1, r1, #2
 8000c82:	400d      	ands	r5, r1
 8000c84:	d004      	beq.n	8000c90 <PE_Reset_StateMachine+0x48>
 8000c86:	2101      	movs	r1, #1
 8000c88:	f004 fdd5 	bl	8005836 <USBPD_PRL_SetHeader>
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	e003      	b.n	8000c98 <PE_Reset_StateMachine+0x50>
 8000c90:	2100      	movs	r1, #0
 8000c92:	f004 fdd0 	bl	8005836 <USBPD_PRL_SetHeader>
 8000c96:	203e      	movs	r0, #62	; 0x3e
 8000c98:	7460      	strb	r0, [r4, #17]
 8000c9a:	bd31      	pop	{r0, r4, r5, pc}

08000c9c <PE_ExtRevisionInteroperability>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	4957      	ldr	r1, [pc, #348]	; (8000e00 <.text_63>)
 8000ca2:	0083      	lsls	r3, r0, #2
 8000ca4:	58cb      	ldr	r3, [r1, r3]
 8000ca6:	685c      	ldr	r4, [r3, #4]
 8000ca8:	6825      	ldr	r5, [r4, #0]
 8000caa:	2103      	movs	r1, #3
 8000cac:	2603      	movs	r6, #3
 8000cae:	402e      	ands	r6, r5
 8000cb0:	42b2      	cmp	r2, r6
 8000cb2:	db00      	blt.n	8000cb6 <PE_ExtRevisionInteroperability+0x1a>
 8000cb4:	0032      	movs	r2, r6
 8000cb6:	438d      	bics	r5, r1
 8000cb8:	400a      	ands	r2, r1
 8000cba:	432a      	orrs	r2, r5
 8000cbc:	6022      	str	r2, [r4, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	6814      	ldr	r4, [r2, #0]
 8000cc2:	2503      	movs	r5, #3
 8000cc4:	4025      	ands	r5, r4
 8000cc6:	2d01      	cmp	r5, #1
 8000cc8:	d101      	bne.n	8000cce <PE_ExtRevisionInteroperability+0x32>
 8000cca:	2500      	movs	r5, #0
 8000ccc:	e000      	b.n	8000cd0 <PE_ExtRevisionInteroperability+0x34>
 8000cce:	2520      	movs	r5, #32
 8000cd0:	2620      	movs	r6, #32
 8000cd2:	43b4      	bics	r4, r6
 8000cd4:	4325      	orrs	r5, r4
 8000cd6:	6015      	str	r5, [r2, #0]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	4011      	ands	r1, r2
 8000cde:	f004 fddc 	bl	800589a <USBPD_PRL_SetHeaderSpecification>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}

08000ce4 <PE_PRL_FastRoleSwapReception>:
 8000ce4:	4946      	ldr	r1, [pc, #280]	; (8000e00 <.text_63>)
 8000ce6:	0082      	lsls	r2, r0, #2
 8000ce8:	5889      	ldr	r1, [r1, r2]
 8000cea:	7f0a      	ldrb	r2, [r1, #28]
 8000cec:	2a09      	cmp	r2, #9
 8000cee:	d100      	bne.n	8000cf2 <PE_PRL_FastRoleSwapReception+0xe>
 8000cf0:	4770      	bx	lr
 8000cf2:	b510      	push	{r4, lr}
 8000cf4:	684a      	ldr	r2, [r1, #4]
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	2410      	movs	r4, #16
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	6014      	str	r4, [r2, #0]
 8000cfe:	694a      	ldr	r2, [r1, #20]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	4313      	orrs	r3, r2
 8000d06:	614b      	str	r3, [r1, #20]

08000d08 <.text_54>:
 8000d08:	6889      	ldr	r1, [r1, #8]
 8000d0a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d0c:	4788      	blx	r1
 8000d0e:	bd10      	pop	{r4, pc}

08000d10 <PE_PRL_PostReceiveEvent>:
 8000d10:	b530      	push	{r4, r5, lr}
 8000d12:	4a3b      	ldr	r2, [pc, #236]	; (8000e00 <.text_63>)
 8000d14:	0080      	lsls	r0, r0, #2
 8000d16:	5813      	ldr	r3, [r2, r0]
 8000d18:	2400      	movs	r4, #0
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	191a      	adds	r2, r3, r4
 8000d1e:	4d09      	ldr	r5, [pc, #36]	; (8000d44 <.text_56>)
 8000d20:	1952      	adds	r2, r2, r5
 8000d22:	7815      	ldrb	r5, [r2, #0]
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d004      	beq.n	8000d32 <PE_PRL_PostReceiveEvent+0x22>
 8000d28:	1c64      	adds	r4, r4, #1
 8000d2a:	b2e4      	uxtb	r4, r4
 8000d2c:	2c01      	cmp	r4, #1
 8000d2e:	d9f5      	bls.n	8000d1c <PE_PRL_PostReceiveEvent+0xc>
 8000d30:	bd30      	pop	{r4, r5, pc}
 8000d32:	2020      	movs	r0, #32
 8000d34:	7010      	strb	r0, [r2, #0]
 8000d36:	2001      	movs	r0, #1
 8000d38:	7813      	ldrb	r3, [r2, #0]
 8000d3a:	2401      	movs	r4, #1
 8000d3c:	408c      	lsls	r4, r1
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	7014      	strb	r4, [r2, #0]
 8000d42:	bd30      	pop	{r4, r5, pc}

08000d44 <.text_56>:
 8000d44:	0000024d 	.word	0x0000024d

08000d48 <PE_PRL_PostReceiveEventError>:
 8000d48:	b530      	push	{r4, r5, lr}
 8000d4a:	492d      	ldr	r1, [pc, #180]	; (8000e00 <.text_63>)
 8000d4c:	0080      	lsls	r0, r0, #2
 8000d4e:	5809      	ldr	r1, [r1, r0]
 8000d50:	2000      	movs	r0, #0
 8000d52:	2200      	movs	r2, #0
 8000d54:	b2d3      	uxtb	r3, r2
 8000d56:	18cb      	adds	r3, r1, r3
 8000d58:	4c2c      	ldr	r4, [pc, #176]	; (8000e0c <.text_66>)
 8000d5a:	191b      	adds	r3, r3, r4
 8000d5c:	781c      	ldrb	r4, [r3, #0]
 8000d5e:	2560      	movs	r5, #96	; 0x60
 8000d60:	4025      	ands	r5, r4
 8000d62:	2d20      	cmp	r5, #32
 8000d64:	d004      	beq.n	8000d70 <PE_PRL_PostReceiveEventError+0x28>
 8000d66:	1c52      	adds	r2, r2, #1
 8000d68:	b2d3      	uxtb	r3, r2
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d3f2      	bcc.n	8000d54 <PE_PRL_PostReceiveEventError+0xc>
 8000d6e:	bd30      	pop	{r4, r5, pc}
 8000d70:	7018      	strb	r0, [r3, #0]
 8000d72:	bd30      	pop	{r4, r5, pc}

08000d74 <.text_58>:
 8000d74:	0000f01f 	.word	0x0000f01f

08000d78 <PE_PRL_PostReceiveEventCopy>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <.text_63>)
 8000d7c:	0080      	lsls	r0, r0, #2
 8000d7e:	5813      	ldr	r3, [r2, r0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	b2d0      	uxtb	r0, r2
 8000d84:	181c      	adds	r4, r3, r0
 8000d86:	4d21      	ldr	r5, [pc, #132]	; (8000e0c <.text_66>)
 8000d88:	5d64      	ldrb	r4, [r4, r5]
 8000d8a:	2560      	movs	r5, #96	; 0x60
 8000d8c:	4025      	ands	r5, r4
 8000d8e:	2d20      	cmp	r5, #32
 8000d90:	d004      	beq.n	8000d9c <PE_PRL_PostReceiveEventCopy+0x24>
 8000d92:	1c52      	adds	r2, r2, #1
 8000d94:	b2d0      	uxtb	r0, r2
 8000d96:	2802      	cmp	r0, #2
 8000d98:	d3f3      	bcc.n	8000d82 <PE_PRL_PostReceiveEventCopy+0xa>
 8000d9a:	bd31      	pop	{r0, r4, r5, pc}
 8000d9c:	2284      	movs	r2, #132	; 0x84
 8000d9e:	0052      	lsls	r2, r2, #1
 8000da0:	4350      	muls	r0, r2
 8000da2:	1818      	adds	r0, r3, r0
 8000da4:	303d      	adds	r0, #61	; 0x3d
 8000da6:	f018 fb1d 	bl	80193e4 <__aeabi_memcpy>
 8000daa:	bd31      	pop	{r0, r4, r5, pc}

08000dac <PE_PRL_PostReceiveEventComplete>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	4914      	ldr	r1, [pc, #80]	; (8000e00 <.text_63>)
 8000db0:	0082      	lsls	r2, r0, #2
 8000db2:	5889      	ldr	r1, [r1, r2]
 8000db4:	2300      	movs	r3, #0
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	18cb      	adds	r3, r1, r3
 8000dba:	4c14      	ldr	r4, [pc, #80]	; (8000e0c <.text_66>)
 8000dbc:	191b      	adds	r3, r3, r4
 8000dbe:	781c      	ldrb	r4, [r3, #0]
 8000dc0:	2560      	movs	r5, #96	; 0x60
 8000dc2:	4025      	ands	r5, r4
 8000dc4:	2d20      	cmp	r5, #32
 8000dc6:	d003      	beq.n	8000dd0 <PE_PRL_PostReceiveEventComplete+0x24>
 8000dc8:	b2d3      	uxtb	r3, r2
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d3f3      	bcc.n	8000db6 <PE_PRL_PostReceiveEventComplete+0xa>
 8000dce:	bd31      	pop	{r0, r4, r5, pc}
 8000dd0:	781c      	ldrb	r4, [r3, #0]
 8000dd2:	2540      	movs	r5, #64	; 0x40
 8000dd4:	4325      	orrs	r5, r4
 8000dd6:	701d      	strb	r5, [r3, #0]
 8000dd8:	233c      	movs	r3, #60	; 0x3c
 8000dda:	5ccb      	ldrb	r3, [r1, r3]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <PE_PRL_PostReceiveEventComplete+0x38>
 8000de0:	233c      	movs	r3, #60	; 0x3c
 8000de2:	54ca      	strb	r2, [r1, r3]
 8000de4:	6889      	ldr	r1, [r1, #8]
 8000de6:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000de8:	4788      	blx	r1
 8000dea:	bd31      	pop	{r0, r4, r5, pc}

08000dec <PE_Get_UnchunkedSupport>:
 8000dec:	4904      	ldr	r1, [pc, #16]	; (8000e00 <.text_63>)
 8000dee:	0080      	lsls	r0, r0, #2
 8000df0:	5808      	ldr	r0, [r1, r0]
 8000df2:	6840      	ldr	r0, [r0, #4]
 8000df4:	6800      	ldr	r0, [r0, #0]
 8000df6:	0181      	lsls	r1, r0, #6
 8000df8:	0fc8      	lsrs	r0, r1, #31
 8000dfa:	4770      	bx	lr

08000dfc <.text_62>:
 8000dfc:	00000704 	.word	0x00000704

08000e00 <.text_63>:
 8000e00:	20000228 	.word	0x20000228

08000e04 <.text_64>:
 8000e04:	fffff9ff 	.word	0xfffff9ff

08000e08 <.text_65>:
 8000e08:	f3ffffff 	.word	0xf3ffffff

08000e0c <.text_66>:
 8000e0c:	0000024d 	.word	0x0000024d

08000e10 <PE_SubStateMachine_Generic>:
 8000e10:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000e12:	b08d      	sub	sp, #52	; 0x34
 8000e14:	0004      	movs	r4, r0
 8000e16:	2002      	movs	r0, #2
 8000e18:	9004      	str	r0, [sp, #16]
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	9503      	str	r5, [sp, #12]
 8000e1e:	2601      	movs	r6, #1
 8000e20:	2714      	movs	r7, #20
 8000e22:	7c61      	ldrb	r1, [r4, #17]
 8000e24:	2901      	cmp	r1, #1
 8000e26:	d100      	bne.n	8000e2a <PE_SubStateMachine_Generic+0x1a>
 8000e28:	e195      	b.n	8001156 <PE_SubStateMachine_Generic+0x346>
 8000e2a:	2918      	cmp	r1, #24
 8000e2c:	d03f      	beq.n	8000eae <PE_SubStateMachine_Generic+0x9e>
 8000e2e:	2919      	cmp	r1, #25
 8000e30:	d050      	beq.n	8000ed4 <PE_SubStateMachine_Generic+0xc4>
 8000e32:	291d      	cmp	r1, #29
 8000e34:	d100      	bne.n	8000e38 <PE_SubStateMachine_Generic+0x28>
 8000e36:	e092      	b.n	8000f5e <PE_SubStateMachine_Generic+0x14e>
 8000e38:	2927      	cmp	r1, #39	; 0x27
 8000e3a:	d100      	bne.n	8000e3e <PE_SubStateMachine_Generic+0x2e>
 8000e3c:	e0b0      	b.n	8000fa0 <PE_SubStateMachine_Generic+0x190>
 8000e3e:	2928      	cmp	r1, #40	; 0x28
 8000e40:	d100      	bne.n	8000e44 <PE_SubStateMachine_Generic+0x34>
 8000e42:	e0b9      	b.n	8000fb8 <PE_SubStateMachine_Generic+0x1a8>
 8000e44:	2929      	cmp	r1, #41	; 0x29
 8000e46:	d100      	bne.n	8000e4a <PE_SubStateMachine_Generic+0x3a>
 8000e48:	e0c0      	b.n	8000fcc <PE_SubStateMachine_Generic+0x1bc>
 8000e4a:	292c      	cmp	r1, #44	; 0x2c
 8000e4c:	d100      	bne.n	8000e50 <PE_SubStateMachine_Generic+0x40>
 8000e4e:	e2bc      	b.n	80013ca <PE_SubStateMachine_Generic+0x5ba>
 8000e50:	2930      	cmp	r1, #48	; 0x30
 8000e52:	d100      	bne.n	8000e56 <PE_SubStateMachine_Generic+0x46>
 8000e54:	e1de      	b.n	8001214 <PE_SubStateMachine_Generic+0x404>
 8000e56:	293a      	cmp	r1, #58	; 0x3a
 8000e58:	d100      	bne.n	8000e5c <PE_SubStateMachine_Generic+0x4c>
 8000e5a:	e28c      	b.n	8001376 <PE_SubStateMachine_Generic+0x566>
 8000e5c:	293b      	cmp	r1, #59	; 0x3b
 8000e5e:	d100      	bne.n	8000e62 <PE_SubStateMachine_Generic+0x52>
 8000e60:	e270      	b.n	8001344 <PE_SubStateMachine_Generic+0x534>
 8000e62:	293c      	cmp	r1, #60	; 0x3c
 8000e64:	d100      	bne.n	8000e68 <PE_SubStateMachine_Generic+0x58>
 8000e66:	e247      	b.n	80012f8 <PE_SubStateMachine_Generic+0x4e8>
 8000e68:	294b      	cmp	r1, #75	; 0x4b
 8000e6a:	d100      	bne.n	8000e6e <PE_SubStateMachine_Generic+0x5e>
 8000e6c:	e114      	b.n	8001098 <PE_SubStateMachine_Generic+0x288>
 8000e6e:	2963      	cmp	r1, #99	; 0x63
 8000e70:	d100      	bne.n	8000e74 <PE_SubStateMachine_Generic+0x64>
 8000e72:	e178      	b.n	8001166 <PE_SubStateMachine_Generic+0x356>
 8000e74:	2964      	cmp	r1, #100	; 0x64
 8000e76:	d100      	bne.n	8000e7a <PE_SubStateMachine_Generic+0x6a>
 8000e78:	e1a0      	b.n	80011bc <PE_SubStateMachine_Generic+0x3ac>
 8000e7a:	2967      	cmp	r1, #103	; 0x67
 8000e7c:	d100      	bne.n	8000e80 <PE_SubStateMachine_Generic+0x70>
 8000e7e:	e120      	b.n	80010c2 <PE_SubStateMachine_Generic+0x2b2>
 8000e80:	2968      	cmp	r1, #104	; 0x68
 8000e82:	d100      	bne.n	8000e86 <PE_SubStateMachine_Generic+0x76>
 8000e84:	e138      	b.n	80010f8 <PE_SubStateMachine_Generic+0x2e8>
 8000e86:	2974      	cmp	r1, #116	; 0x74
 8000e88:	d100      	bne.n	8000e8c <PE_SubStateMachine_Generic+0x7c>
 8000e8a:	e1f3      	b.n	8001274 <PE_SubStateMachine_Generic+0x464>
 8000e8c:	2993      	cmp	r1, #147	; 0x93
 8000e8e:	d100      	bne.n	8000e92 <PE_SubStateMachine_Generic+0x82>
 8000e90:	e0a6      	b.n	8000fe0 <PE_SubStateMachine_Generic+0x1d0>
 8000e92:	2994      	cmp	r1, #148	; 0x94
 8000e94:	d100      	bne.n	8000e98 <PE_SubStateMachine_Generic+0x88>
 8000e96:	e0a7      	b.n	8000fe8 <PE_SubStateMachine_Generic+0x1d8>
 8000e98:	2995      	cmp	r1, #149	; 0x95
 8000e9a:	d100      	bne.n	8000e9e <PE_SubStateMachine_Generic+0x8e>
 8000e9c:	e0bd      	b.n	800101a <PE_SubStateMachine_Generic+0x20a>
 8000e9e:	2999      	cmp	r1, #153	; 0x99
 8000ea0:	d000      	beq.n	8000ea4 <PE_SubStateMachine_Generic+0x94>
 8000ea2:	e297      	b.n	80013d4 <PE_SubStateMachine_Generic+0x5c4>
 8000ea4:	2106      	movs	r1, #6
 8000ea6:	0020      	movs	r0, r4
 8000ea8:	f7ff fd44 	bl	8000934 <PE_Send_RESET>
 8000eac:	e220      	b.n	80012f0 <PE_SubStateMachine_Generic+0x4e0>
 8000eae:	6861      	ldr	r1, [r4, #4]
 8000eb0:	6809      	ldr	r1, [r1, #0]
 8000eb2:	0889      	lsrs	r1, r1, #2
 8000eb4:	400e      	ands	r6, r1
 8000eb6:	d002      	beq.n	8000ebe <PE_SubStateMachine_Generic+0xae>
 8000eb8:	6960      	ldr	r0, [r4, #20]
 8000eba:	0741      	lsls	r1, r0, #29
 8000ebc:	0fc8      	lsrs	r0, r1, #31
 8000ebe:	9000      	str	r0, [sp, #0]
 8000ec0:	2319      	movs	r3, #25
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f000 fb76 	bl	80015b8 <PE_Send_CtrlMessage>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d156      	bne.n	8000f7e <PE_SubStateMachine_Generic+0x16e>
 8000ed0:	2007      	movs	r0, #7
 8000ed2:	e107      	b.n	80010e4 <PE_SubStateMachine_Generic+0x2d4>
 8000ed4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000ed6:	7800      	ldrb	r0, [r0, #0]
 8000ed8:	2811      	cmp	r0, #17
 8000eda:	d13c      	bne.n	8000f56 <PE_SubStateMachine_Generic+0x146>
 8000edc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000ede:	0bc1      	lsrs	r1, r0, #15
 8000ee0:	d11e      	bne.n	8000f20 <PE_SubStateMachine_Generic+0x110>
 8000ee2:	0441      	lsls	r1, r0, #17
 8000ee4:	0f49      	lsrs	r1, r1, #29
 8000ee6:	d01b      	beq.n	8000f20 <PE_SubStateMachine_Generic+0x110>
 8000ee8:	06c0      	lsls	r0, r0, #27
 8000eea:	0ec0      	lsrs	r0, r0, #27
 8000eec:	2804      	cmp	r0, #4
 8000eee:	d117      	bne.n	8000f20 <PE_SubStateMachine_Generic+0x110>
 8000ef0:	008b      	lsls	r3, r1, #2
 8000ef2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ef4:	1c82      	adds	r2, r0, #2
 8000ef6:	2105      	movs	r1, #5
 8000ef8:	7c20      	ldrb	r0, [r4, #16]
 8000efa:	68a6      	ldr	r6, [r4, #8]
 8000efc:	69b6      	ldr	r6, [r6, #24]
 8000efe:	47b0      	blx	r6
 8000f00:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f02:	7800      	ldrb	r0, [r0, #0]
 8000f04:	2814      	cmp	r0, #20
 8000f06:	d004      	beq.n	8000f12 <PE_SubStateMachine_Generic+0x102>
 8000f08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000f0a:	700f      	strb	r7, [r1, #0]
 8000f0c:	0020      	movs	r0, r4
 8000f0e:	f7ff fd76 	bl	80009fe <PE_Clear_RxEvent>
 8000f12:	2003      	movs	r0, #3
 8000f14:	7460      	strb	r0, [r4, #17]
 8000f16:	9504      	str	r5, [sp, #16]
 8000f18:	2107      	movs	r1, #7
 8000f1a:	7c20      	ldrb	r0, [r4, #16]
 8000f1c:	f7ff fb04 	bl	8000528 <USBPD_PE_Notification>
 8000f20:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000f22:	21f0      	movs	r1, #240	; 0xf0
 8000f24:	0209      	lsls	r1, r1, #8
 8000f26:	4001      	ands	r1, r0
 8000f28:	d115      	bne.n	8000f56 <PE_SubStateMachine_Generic+0x146>
 8000f2a:	06c0      	lsls	r0, r0, #27
 8000f2c:	0ec0      	lsrs	r0, r0, #27
 8000f2e:	2804      	cmp	r0, #4
 8000f30:	d001      	beq.n	8000f36 <PE_SubStateMachine_Generic+0x126>
 8000f32:	2810      	cmp	r0, #16
 8000f34:	d10f      	bne.n	8000f56 <PE_SubStateMachine_Generic+0x146>
 8000f36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f38:	7800      	ldrb	r0, [r0, #0]
 8000f3a:	2814      	cmp	r0, #20
 8000f3c:	d004      	beq.n	8000f48 <PE_SubStateMachine_Generic+0x138>
 8000f3e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f40:	7007      	strb	r7, [r0, #0]
 8000f42:	0020      	movs	r0, r4
 8000f44:	f7ff fd5b 	bl	80009fe <PE_Clear_RxEvent>
 8000f48:	2003      	movs	r0, #3
 8000f4a:	7460      	strb	r0, [r4, #17]
 8000f4c:	9504      	str	r5, [sp, #16]
 8000f4e:	2108      	movs	r1, #8
 8000f50:	7c20      	ldrb	r0, [r4, #16]
 8000f52:	f7ff fae9 	bl	8000528 <USBPD_PE_Notification>
 8000f56:	8be0      	ldrh	r0, [r4, #30]
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0209      	lsls	r1, r1, #8
 8000f5c:	e099      	b.n	8001092 <PE_SubStateMachine_Generic+0x282>
 8000f5e:	9505      	str	r5, [sp, #20]
 8000f60:	ab05      	add	r3, sp, #20
 8000f62:	aa06      	add	r2, sp, #24
 8000f64:	2101      	movs	r1, #1
 8000f66:	7c20      	ldrb	r0, [r4, #16]
 8000f68:	68a5      	ldr	r5, [r4, #8]
 8000f6a:	696d      	ldr	r5, [r5, #20]
 8000f6c:	47a8      	blx	r5
 8000f6e:	2104      	movs	r1, #4
 8000f70:	9805      	ldr	r0, [sp, #20]
 8000f72:	f000 fabf 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d002      	beq.n	8000f80 <PE_SubStateMachine_Generic+0x170>
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	7460      	strb	r0, [r4, #17]
 8000f7e:	e22a      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 8000f80:	9002      	str	r0, [sp, #8]
 8000f82:	2003      	movs	r0, #3
 8000f84:	9001      	str	r0, [sp, #4]
 8000f86:	9805      	ldr	r0, [sp, #20]
 8000f88:	0880      	lsrs	r0, r0, #2
 8000f8a:	9000      	str	r0, [sp, #0]
 8000f8c:	ab06      	add	r3, sp, #24
 8000f8e:	2204      	movs	r2, #4
 8000f90:	2100      	movs	r1, #0
 8000f92:	0020      	movs	r0, r4
 8000f94:	f000 fb3b 	bl	800160e <PE_Send_DataMessage>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d1f0      	bne.n	8000f7e <PE_SubStateMachine_Generic+0x16e>
 8000f9c:	210a      	movs	r1, #10
 8000f9e:	e165      	b.n	800126c <PE_SubStateMachine_Generic+0x45c>
 8000fa0:	2012      	movs	r0, #18
 8000fa2:	7720      	strb	r0, [r4, #28]
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	7c20      	ldrb	r0, [r4, #16]
 8000fa8:	f004 ff11 	bl	8005dce <USBDPD_PRL_BistCarrierEyeMode>
 8000fac:	2028      	movs	r0, #40	; 0x28
 8000fae:	7460      	strb	r0, [r4, #17]
 8000fb0:	484f      	ldr	r0, [pc, #316]	; (80010f0 <PE_SubStateMachine_Generic+0x2e0>)
 8000fb2:	83e0      	strh	r0, [r4, #30]
 8000fb4:	203a      	movs	r0, #58	; 0x3a
 8000fb6:	e099      	b.n	80010ec <PE_SubStateMachine_Generic+0x2dc>
 8000fb8:	8be0      	ldrh	r0, [r4, #30]
 8000fba:	03f1      	lsls	r1, r6, #15
 8000fbc:	4288      	cmp	r0, r1
 8000fbe:	d10e      	bne.n	8000fde <PE_SubStateMachine_Generic+0x1ce>
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	7c20      	ldrb	r0, [r4, #16]
 8000fc4:	f004 ff0b 	bl	8005dde <USBDPD_PRL_BistCarrierEyeModeExit>
 8000fc8:	83e5      	strh	r5, [r4, #30]
 8000fca:	e191      	b.n	80012f0 <PE_SubStateMachine_Generic+0x4e0>
 8000fcc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fce:	7800      	ldrb	r0, [r0, #0]
 8000fd0:	2814      	cmp	r0, #20
 8000fd2:	d004      	beq.n	8000fde <PE_SubStateMachine_Generic+0x1ce>
 8000fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fd6:	7007      	strb	r7, [r0, #0]
 8000fd8:	0020      	movs	r0, r4
 8000fda:	f7ff fd10 	bl	80009fe <PE_Clear_RxEvent>
 8000fde:	e1fa      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f000 f9fb 	bl	80013dc <PE_SubStateMachine_ReceiveDRS>
 8000fe6:	e1f6      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 8000fe8:	6861      	ldr	r1, [r4, #4]
 8000fea:	6809      	ldr	r1, [r1, #0]
 8000fec:	0889      	lsrs	r1, r1, #2
 8000fee:	400e      	ands	r6, r1
 8000ff0:	d002      	beq.n	8000ff8 <PE_SubStateMachine_Generic+0x1e8>
 8000ff2:	6960      	ldr	r0, [r4, #20]
 8000ff4:	0741      	lsls	r1, r0, #29
 8000ff6:	0fc8      	lsrs	r0, r1, #31
 8000ff8:	9000      	str	r0, [sp, #0]
 8000ffa:	2395      	movs	r3, #149	; 0x95
 8000ffc:	2209      	movs	r2, #9
 8000ffe:	2100      	movs	r1, #0
 8001000:	0020      	movs	r0, r4
 8001002:	f000 fad9 	bl	80015b8 <PE_Send_CtrlMessage>
 8001006:	2800      	cmp	r0, #0
 8001008:	d1ed      	bne.n	8000fe6 <PE_SubStateMachine_Generic+0x1d6>
 800100a:	2010      	movs	r0, #16
 800100c:	7720      	strb	r0, [r4, #28]
 800100e:	4839      	ldr	r0, [pc, #228]	; (80010f4 <PE_SubStateMachine_Generic+0x2e4>)
 8001010:	83e0      	strh	r0, [r4, #30]
 8001012:	201b      	movs	r0, #27
 8001014:	9004      	str	r0, [sp, #16]
 8001016:	2122      	movs	r1, #34	; 0x22
 8001018:	e128      	b.n	800126c <PE_SubStateMachine_Generic+0x45c>
 800101a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800101c:	7800      	ldrb	r0, [r0, #0]
 800101e:	2814      	cmp	r0, #20
 8001020:	d035      	beq.n	800108e <PE_SubStateMachine_Generic+0x27e>
 8001022:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001024:	21f0      	movs	r1, #240	; 0xf0
 8001026:	0209      	lsls	r1, r1, #8
 8001028:	4001      	ands	r1, r0
 800102a:	d130      	bne.n	800108e <PE_SubStateMachine_Generic+0x27e>
 800102c:	211f      	movs	r1, #31
 800102e:	231f      	movs	r3, #31
 8001030:	4003      	ands	r3, r0
 8001032:	2b03      	cmp	r3, #3
 8001034:	d006      	beq.n	8001044 <PE_SubStateMachine_Generic+0x234>
 8001036:	2b04      	cmp	r3, #4
 8001038:	d008      	beq.n	800104c <PE_SubStateMachine_Generic+0x23c>
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d006      	beq.n	800104c <PE_SubStateMachine_Generic+0x23c>
 800103e:	2b10      	cmp	r3, #16
 8001040:	d015      	beq.n	800106e <PE_SubStateMachine_Generic+0x25e>
 8001042:	e024      	b.n	800108e <PE_SubStateMachine_Generic+0x27e>
 8001044:	0020      	movs	r0, r4
 8001046:	f000 fa6d 	bl	8001524 <PE_SwitchDataRole>
 800104a:	e008      	b.n	800105e <PE_SubStateMachine_Generic+0x24e>
 800104c:	4001      	ands	r1, r0
 800104e:	290c      	cmp	r1, #12
 8001050:	d101      	bne.n	8001056 <PE_SubStateMachine_Generic+0x246>
 8001052:	2126      	movs	r1, #38	; 0x26
 8001054:	e000      	b.n	8001058 <PE_SubStateMachine_Generic+0x248>
 8001056:	2127      	movs	r1, #39	; 0x27
 8001058:	7c20      	ldrb	r0, [r4, #16]
 800105a:	f7ff fa65 	bl	8000528 <USBPD_PE_Notification>
 800105e:	2003      	movs	r0, #3
 8001060:	7460      	strb	r0, [r4, #17]
 8001062:	9504      	str	r5, [sp, #16]
 8001064:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001066:	7800      	ldrb	r0, [r0, #0]
 8001068:	2814      	cmp	r0, #20
 800106a:	d10b      	bne.n	8001084 <PE_SubStateMachine_Generic+0x274>
 800106c:	e00f      	b.n	800108e <PE_SubStateMachine_Generic+0x27e>
 800106e:	2128      	movs	r1, #40	; 0x28
 8001070:	7c20      	ldrb	r0, [r4, #16]
 8001072:	f7ff fa59 	bl	8000528 <USBPD_PE_Notification>
 8001076:	2003      	movs	r0, #3
 8001078:	7460      	strb	r0, [r4, #17]
 800107a:	9504      	str	r5, [sp, #16]
 800107c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800107e:	7800      	ldrb	r0, [r0, #0]
 8001080:	2814      	cmp	r0, #20
 8001082:	d004      	beq.n	800108e <PE_SubStateMachine_Generic+0x27e>
 8001084:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001086:	7007      	strb	r7, [r0, #0]
 8001088:	0020      	movs	r0, r4
 800108a:	f7ff fcb8 	bl	80009fe <PE_Clear_RxEvent>
 800108e:	8be0      	ldrh	r0, [r4, #30]
 8001090:	03f1      	lsls	r1, r6, #15
 8001092:	4288      	cmp	r0, r1
 8001094:	d12b      	bne.n	80010ee <PE_SubStateMachine_Generic+0x2de>
 8001096:	e12b      	b.n	80012f0 <PE_SubStateMachine_Generic+0x4e0>
 8001098:	ab03      	add	r3, sp, #12
 800109a:	aa05      	add	r2, sp, #20
 800109c:	2114      	movs	r1, #20
 800109e:	7c20      	ldrb	r0, [r4, #16]
 80010a0:	68a5      	ldr	r5, [r4, #8]
 80010a2:	696d      	ldr	r5, [r5, #20]
 80010a4:	47a8      	blx	r5
 80010a6:	9803      	ldr	r0, [sp, #12]
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d100      	bne.n	80010ae <PE_SubStateMachine_Generic+0x29e>
 80010ac:	e192      	b.n	80013d4 <PE_SubStateMachine_Generic+0x5c4>
 80010ae:	2000      	movs	r0, #0
 80010b0:	9002      	str	r0, [sp, #8]
 80010b2:	2003      	movs	r0, #3
 80010b4:	9001      	str	r0, [sp, #4]
 80010b6:	9803      	ldr	r0, [sp, #12]
 80010b8:	0880      	lsrs	r0, r0, #2
 80010ba:	9000      	str	r0, [sp, #0]
 80010bc:	ab05      	add	r3, sp, #20
 80010be:	220c      	movs	r2, #12
 80010c0:	e154      	b.n	800136c <PE_SubStateMachine_Generic+0x55c>
 80010c2:	6861      	ldr	r1, [r4, #4]
 80010c4:	6809      	ldr	r1, [r1, #0]
 80010c6:	0889      	lsrs	r1, r1, #2
 80010c8:	4031      	ands	r1, r6
 80010ca:	d000      	beq.n	80010ce <PE_SubStateMachine_Generic+0x2be>
 80010cc:	2001      	movs	r0, #1
 80010ce:	9000      	str	r0, [sp, #0]
 80010d0:	2368      	movs	r3, #104	; 0x68
 80010d2:	2218      	movs	r2, #24
 80010d4:	2031      	movs	r0, #49	; 0x31
 80010d6:	5c21      	ldrb	r1, [r4, r0]
 80010d8:	0020      	movs	r0, r4
 80010da:	f000 fa6d 	bl	80015b8 <PE_Send_CtrlMessage>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d105      	bne.n	80010ee <PE_SubStateMachine_Generic+0x2de>
 80010e2:	200f      	movs	r0, #15
 80010e4:	7720      	strb	r0, [r4, #28]
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <PE_SubStateMachine_Generic+0x2e4>)
 80010e8:	83e0      	strh	r0, [r4, #30]
 80010ea:	201b      	movs	r0, #27
 80010ec:	9004      	str	r0, [sp, #16]
 80010ee:	e172      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 80010f0:	0000803a 	.word	0x0000803a
 80010f4:	0000801b 	.word	0x0000801b
 80010f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80010fa:	7800      	ldrb	r0, [r0, #0]
 80010fc:	2814      	cmp	r0, #20
 80010fe:	d023      	beq.n	8001148 <PE_SubStateMachine_Generic+0x338>
 8001100:	2030      	movs	r0, #48	; 0x30
 8001102:	5c20      	ldrb	r0, [r4, r0]
 8001104:	2131      	movs	r1, #49	; 0x31
 8001106:	5c61      	ldrb	r1, [r4, r1]
 8001108:	4288      	cmp	r0, r1
 800110a:	d11d      	bne.n	8001148 <PE_SubStateMachine_Generic+0x338>
 800110c:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800110e:	0bc1      	lsrs	r1, r0, #15
 8001110:	d11a      	bne.n	8001148 <PE_SubStateMachine_Generic+0x338>
 8001112:	0b01      	lsrs	r1, r0, #12
 8001114:	0749      	lsls	r1, r1, #29
 8001116:	d017      	beq.n	8001148 <PE_SubStateMachine_Generic+0x338>
 8001118:	06c0      	lsls	r0, r0, #27
 800111a:	0ec0      	lsrs	r0, r0, #27
 800111c:	280c      	cmp	r0, #12
 800111e:	d113      	bne.n	8001148 <PE_SubStateMachine_Generic+0x338>
 8001120:	2304      	movs	r3, #4
 8001122:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001124:	1c82      	adds	r2, r0, #2
 8001126:	2114      	movs	r1, #20
 8001128:	7c20      	ldrb	r0, [r4, #16]
 800112a:	68a6      	ldr	r6, [r4, #8]
 800112c:	69b6      	ldr	r6, [r6, #24]
 800112e:	47b0      	blx	r6
 8001130:	2003      	movs	r0, #3
 8001132:	7460      	strb	r0, [r4, #17]
 8001134:	9504      	str	r5, [sp, #16]
 8001136:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001138:	7800      	ldrb	r0, [r0, #0]
 800113a:	2814      	cmp	r0, #20
 800113c:	d004      	beq.n	8001148 <PE_SubStateMachine_Generic+0x338>
 800113e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001140:	7007      	strb	r7, [r0, #0]
 8001142:	0020      	movs	r0, r4
 8001144:	f7ff fc5b 	bl	80009fe <PE_Clear_RxEvent>
 8001148:	8be0      	ldrh	r0, [r4, #30]
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	0209      	lsls	r1, r1, #8
 800114e:	4288      	cmp	r0, r1
 8001150:	d108      	bne.n	8001164 <PE_SubStateMachine_Generic+0x354>
 8001152:	2011      	movs	r0, #17
 8001154:	e0cd      	b.n	80012f2 <PE_SubStateMachine_Generic+0x4e2>
 8001156:	9500      	str	r5, [sp, #0]
 8001158:	2303      	movs	r3, #3
 800115a:	2210      	movs	r2, #16
 800115c:	2100      	movs	r1, #0
 800115e:	0020      	movs	r0, r4
 8001160:	f000 fa2a 	bl	80015b8 <PE_Send_CtrlMessage>
 8001164:	e137      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 8001166:	ab03      	add	r3, sp, #12
 8001168:	48c9      	ldr	r0, [pc, #804]	; (8001490 <.text_73>)
 800116a:	1822      	adds	r2, r4, r0
 800116c:	2108      	movs	r1, #8
 800116e:	7c20      	ldrb	r0, [r4, #16]
 8001170:	68a7      	ldr	r7, [r4, #8]
 8001172:	697f      	ldr	r7, [r7, #20]
 8001174:	47b8      	blx	r7
 8001176:	2118      	movs	r1, #24
 8001178:	9803      	ldr	r0, [sp, #12]
 800117a:	f000 f9bb 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 800117e:	2800      	cmp	r0, #0
 8001180:	d129      	bne.n	80011d6 <PE_SubStateMachine_Generic+0x3c6>
 8001182:	48c4      	ldr	r0, [pc, #784]	; (8001494 <.text_74>)
 8001184:	1826      	adds	r6, r4, r0
 8001186:	7035      	strb	r5, [r6, #0]
 8001188:	7075      	strb	r5, [r6, #1]
 800118a:	7c20      	ldrb	r0, [r4, #16]
 800118c:	f7ff fe2e 	bl	8000dec <PE_Get_UnchunkedSupport>
 8001190:	2800      	cmp	r0, #0
 8001192:	d103      	bne.n	800119c <PE_SubStateMachine_Generic+0x38c>
 8001194:	7870      	ldrb	r0, [r6, #1]
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	4301      	orrs	r1, r0
 800119a:	7071      	strb	r1, [r6, #1]
 800119c:	9502      	str	r5, [sp, #8]
 800119e:	2003      	movs	r0, #3
 80011a0:	9001      	str	r0, [sp, #4]
 80011a2:	9803      	ldr	r0, [sp, #12]
 80011a4:	1d00      	adds	r0, r0, #4
 80011a6:	b280      	uxth	r0, r0
 80011a8:	9000      	str	r0, [sp, #0]
 80011aa:	48bb      	ldr	r0, [pc, #748]	; (8001498 <.text_75>)
 80011ac:	1823      	adds	r3, r4, r0
 80011ae:	2201      	movs	r2, #1
 80011b0:	2100      	movs	r1, #0
 80011b2:	0020      	movs	r0, r4
 80011b4:	f000 fb5e 	bl	8001874 <PE_Send_ExtendedMessage>
 80011b8:	2148      	movs	r1, #72	; 0x48
 80011ba:	e057      	b.n	800126c <PE_SubStateMachine_Generic+0x45c>
 80011bc:	ab03      	add	r3, sp, #12
 80011be:	48b4      	ldr	r0, [pc, #720]	; (8001490 <.text_73>)
 80011c0:	1822      	adds	r2, r4, r0
 80011c2:	2113      	movs	r1, #19
 80011c4:	7c20      	ldrb	r0, [r4, #16]
 80011c6:	68a7      	ldr	r7, [r4, #8]
 80011c8:	697f      	ldr	r7, [r7, #20]
 80011ca:	47b8      	blx	r7
 80011cc:	2118      	movs	r1, #24
 80011ce:	9803      	ldr	r0, [sp, #12]
 80011d0:	f000 f990 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d000      	beq.n	80011da <PE_SubStateMachine_Generic+0x3ca>
 80011d8:	e0fc      	b.n	80013d4 <PE_SubStateMachine_Generic+0x5c4>
 80011da:	48ae      	ldr	r0, [pc, #696]	; (8001494 <.text_74>)
 80011dc:	1826      	adds	r6, r4, r0
 80011de:	7035      	strb	r5, [r6, #0]
 80011e0:	7075      	strb	r5, [r6, #1]
 80011e2:	7c20      	ldrb	r0, [r4, #16]
 80011e4:	f7ff fe02 	bl	8000dec <PE_Get_UnchunkedSupport>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d103      	bne.n	80011f4 <PE_SubStateMachine_Generic+0x3e4>
 80011ec:	7870      	ldrb	r0, [r6, #1]
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	4301      	orrs	r1, r0
 80011f2:	7071      	strb	r1, [r6, #1]
 80011f4:	9502      	str	r5, [sp, #8]
 80011f6:	2003      	movs	r0, #3
 80011f8:	9001      	str	r0, [sp, #4]
 80011fa:	9803      	ldr	r0, [sp, #12]
 80011fc:	1d00      	adds	r0, r0, #4
 80011fe:	b280      	uxth	r0, r0
 8001200:	9000      	str	r0, [sp, #0]
 8001202:	48a5      	ldr	r0, [pc, #660]	; (8001498 <.text_75>)
 8001204:	1823      	adds	r3, r4, r0
 8001206:	220f      	movs	r2, #15
 8001208:	2100      	movs	r1, #0
 800120a:	0020      	movs	r0, r4
 800120c:	f000 fb32 	bl	8001874 <PE_Send_ExtendedMessage>
 8001210:	2161      	movs	r1, #97	; 0x61
 8001212:	e02b      	b.n	800126c <PE_SubStateMachine_Generic+0x45c>
 8001214:	ab03      	add	r3, sp, #12
 8001216:	489e      	ldr	r0, [pc, #632]	; (8001490 <.text_73>)
 8001218:	1822      	adds	r2, r4, r0
 800121a:	2109      	movs	r1, #9
 800121c:	7c20      	ldrb	r0, [r4, #16]
 800121e:	68a7      	ldr	r7, [r4, #8]
 8001220:	697f      	ldr	r7, [r7, #20]
 8001222:	47b8      	blx	r7
 8001224:	2107      	movs	r1, #7
 8001226:	9803      	ldr	r0, [sp, #12]
 8001228:	f000 f964 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 800122c:	2800      	cmp	r0, #0
 800122e:	d170      	bne.n	8001312 <PE_SubStateMachine_Generic+0x502>
 8001230:	4998      	ldr	r1, [pc, #608]	; (8001494 <.text_74>)
 8001232:	5465      	strb	r5, [r4, r1]
 8001234:	1860      	adds	r0, r4, r1
 8001236:	7045      	strb	r5, [r0, #1]
 8001238:	7c20      	ldrb	r0, [r4, #16]
 800123a:	f7ff fdd7 	bl	8000dec <PE_Get_UnchunkedSupport>
 800123e:	2800      	cmp	r0, #0
 8001240:	d105      	bne.n	800124e <PE_SubStateMachine_Generic+0x43e>
 8001242:	4894      	ldr	r0, [pc, #592]	; (8001494 <.text_74>)
 8001244:	1820      	adds	r0, r4, r0
 8001246:	7841      	ldrb	r1, [r0, #1]
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	430a      	orrs	r2, r1
 800124c:	7042      	strb	r2, [r0, #1]
 800124e:	9502      	str	r5, [sp, #8]
 8001250:	2003      	movs	r0, #3
 8001252:	9001      	str	r0, [sp, #4]
 8001254:	9803      	ldr	r0, [sp, #12]
 8001256:	1d00      	adds	r0, r0, #4
 8001258:	b280      	uxth	r0, r0
 800125a:	9000      	str	r0, [sp, #0]
 800125c:	488e      	ldr	r0, [pc, #568]	; (8001498 <.text_75>)
 800125e:	1823      	adds	r3, r4, r0
 8001260:	2202      	movs	r2, #2
 8001262:	2100      	movs	r1, #0
 8001264:	0020      	movs	r0, r4
 8001266:	f000 fb05 	bl	8001874 <PE_Send_ExtendedMessage>
 800126a:	214f      	movs	r1, #79	; 0x4f
 800126c:	7c20      	ldrb	r0, [r4, #16]
 800126e:	f7ff f95b 	bl	8000528 <USBPD_PE_Notification>
 8001272:	e0b0      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 8001274:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001276:	7800      	ldrb	r0, [r0, #0]
 8001278:	2814      	cmp	r0, #20
 800127a:	d034      	beq.n	80012e6 <PE_SubStateMachine_Generic+0x4d6>
 800127c:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800127e:	0bc1      	lsrs	r1, r0, #15
 8001280:	d11a      	bne.n	80012b8 <PE_SubStateMachine_Generic+0x4a8>
 8001282:	0b01      	lsrs	r1, r0, #12
 8001284:	0749      	lsls	r1, r1, #29
 8001286:	d017      	beq.n	80012b8 <PE_SubStateMachine_Generic+0x4a8>
 8001288:	06c0      	lsls	r0, r0, #27
 800128a:	0ec0      	lsrs	r0, r0, #27
 800128c:	2805      	cmp	r0, #5
 800128e:	d113      	bne.n	80012b8 <PE_SubStateMachine_Generic+0x4a8>
 8001290:	2304      	movs	r3, #4
 8001292:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001294:	1d02      	adds	r2, r0, #4
 8001296:	210f      	movs	r1, #15
 8001298:	7c20      	ldrb	r0, [r4, #16]
 800129a:	68a6      	ldr	r6, [r4, #8]
 800129c:	69b6      	ldr	r6, [r6, #24]
 800129e:	47b0      	blx	r6
 80012a0:	2003      	movs	r0, #3
 80012a2:	7460      	strb	r0, [r4, #17]
 80012a4:	9504      	str	r5, [sp, #16]
 80012a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80012a8:	7800      	ldrb	r0, [r0, #0]
 80012aa:	2814      	cmp	r0, #20
 80012ac:	d004      	beq.n	80012b8 <PE_SubStateMachine_Generic+0x4a8>
 80012ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80012b0:	700f      	strb	r7, [r1, #0]
 80012b2:	0020      	movs	r0, r4
 80012b4:	f7ff fba3 	bl	80009fe <PE_Clear_RxEvent>
 80012b8:	2034      	movs	r0, #52	; 0x34
 80012ba:	5c20      	ldrb	r0, [r4, r0]
 80012bc:	06c0      	lsls	r0, r0, #27
 80012be:	0ec0      	lsrs	r0, r0, #27
 80012c0:	2810      	cmp	r0, #16
 80012c2:	d110      	bne.n	80012e6 <PE_SubStateMachine_Generic+0x4d6>
 80012c4:	2159      	movs	r1, #89	; 0x59
 80012c6:	7c20      	ldrb	r0, [r4, #16]
 80012c8:	f7ff f92e 	bl	8000528 <USBPD_PE_Notification>
 80012cc:	83e5      	strh	r5, [r4, #30]
 80012ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80012d0:	7800      	ldrb	r0, [r0, #0]
 80012d2:	2814      	cmp	r0, #20
 80012d4:	d004      	beq.n	80012e0 <PE_SubStateMachine_Generic+0x4d0>
 80012d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80012d8:	7007      	strb	r7, [r0, #0]
 80012da:	0020      	movs	r0, r4
 80012dc:	f7ff fb8f 	bl	80009fe <PE_Clear_RxEvent>
 80012e0:	2003      	movs	r0, #3
 80012e2:	7460      	strb	r0, [r4, #17]
 80012e4:	9504      	str	r5, [sp, #16]
 80012e6:	8be0      	ldrh	r0, [r4, #30]
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	0209      	lsls	r1, r1, #8
 80012ec:	4288      	cmp	r0, r1
 80012ee:	d172      	bne.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 80012f0:	2003      	movs	r0, #3
 80012f2:	7460      	strb	r0, [r4, #17]
 80012f4:	9504      	str	r5, [sp, #16]
 80012f6:	e06e      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 80012f8:	ab03      	add	r3, sp, #12
 80012fa:	4865      	ldr	r0, [pc, #404]	; (8001490 <.text_73>)
 80012fc:	1822      	adds	r2, r4, r0
 80012fe:	210d      	movs	r1, #13
 8001300:	7c20      	ldrb	r0, [r4, #16]
 8001302:	68a7      	ldr	r7, [r4, #8]
 8001304:	697f      	ldr	r7, [r7, #20]
 8001306:	47b8      	blx	r7
 8001308:	2104      	movs	r1, #4
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	f000 f8f2 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 8001310:	2800      	cmp	r0, #0
 8001312:	d15f      	bne.n	80013d4 <PE_SubStateMachine_Generic+0x5c4>
 8001314:	485f      	ldr	r0, [pc, #380]	; (8001494 <.text_74>)
 8001316:	1826      	adds	r6, r4, r0
 8001318:	7035      	strb	r5, [r6, #0]
 800131a:	7075      	strb	r5, [r6, #1]
 800131c:	7c20      	ldrb	r0, [r4, #16]
 800131e:	f7ff fd65 	bl	8000dec <PE_Get_UnchunkedSupport>
 8001322:	2800      	cmp	r0, #0
 8001324:	d103      	bne.n	800132e <PE_SubStateMachine_Generic+0x51e>
 8001326:	7870      	ldrb	r0, [r6, #1]
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	4301      	orrs	r1, r0
 800132c:	7071      	strb	r1, [r6, #1]
 800132e:	9502      	str	r5, [sp, #8]
 8001330:	2003      	movs	r0, #3
 8001332:	9001      	str	r0, [sp, #4]
 8001334:	9803      	ldr	r0, [sp, #12]
 8001336:	1d00      	adds	r0, r0, #4
 8001338:	b280      	uxth	r0, r0
 800133a:	9000      	str	r0, [sp, #0]
 800133c:	4856      	ldr	r0, [pc, #344]	; (8001498 <.text_75>)
 800133e:	1823      	adds	r3, r4, r0
 8001340:	2207      	movs	r2, #7
 8001342:	e03d      	b.n	80013c0 <PE_SubStateMachine_Generic+0x5b0>
 8001344:	9505      	str	r5, [sp, #20]
 8001346:	ab03      	add	r3, sp, #12
 8001348:	aa05      	add	r2, sp, #20
 800134a:	210f      	movs	r1, #15
 800134c:	7c20      	ldrb	r0, [r4, #16]
 800134e:	68a5      	ldr	r5, [r4, #8]
 8001350:	696d      	ldr	r5, [r5, #20]
 8001352:	47a8      	blx	r5
 8001354:	2104      	movs	r1, #4
 8001356:	9803      	ldr	r0, [sp, #12]
 8001358:	f000 f8cc 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 800135c:	2800      	cmp	r0, #0
 800135e:	d139      	bne.n	80013d4 <PE_SubStateMachine_Generic+0x5c4>
 8001360:	9002      	str	r0, [sp, #8]
 8001362:	2003      	movs	r0, #3
 8001364:	9001      	str	r0, [sp, #4]
 8001366:	9600      	str	r6, [sp, #0]
 8001368:	ab05      	add	r3, sp, #20
 800136a:	2205      	movs	r2, #5
 800136c:	2100      	movs	r1, #0
 800136e:	0020      	movs	r0, r4
 8001370:	f000 f94d 	bl	800160e <PE_Send_DataMessage>
 8001374:	e02f      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 8001376:	ab03      	add	r3, sp, #12
 8001378:	4845      	ldr	r0, [pc, #276]	; (8001490 <.text_73>)
 800137a:	1822      	adds	r2, r4, r0
 800137c:	2111      	movs	r1, #17
 800137e:	7c20      	ldrb	r0, [r4, #16]
 8001380:	68a7      	ldr	r7, [r4, #8]
 8001382:	697f      	ldr	r7, [r7, #20]
 8001384:	47b8      	blx	r7
 8001386:	2109      	movs	r1, #9
 8001388:	9803      	ldr	r0, [sp, #12]
 800138a:	f000 f8b3 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 800138e:	2800      	cmp	r0, #0
 8001390:	d120      	bne.n	80013d4 <PE_SubStateMachine_Generic+0x5c4>
 8001392:	4840      	ldr	r0, [pc, #256]	; (8001494 <.text_74>)
 8001394:	1826      	adds	r6, r4, r0
 8001396:	7035      	strb	r5, [r6, #0]
 8001398:	7075      	strb	r5, [r6, #1]
 800139a:	7c20      	ldrb	r0, [r4, #16]
 800139c:	f7ff fd26 	bl	8000dec <PE_Get_UnchunkedSupport>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d103      	bne.n	80013ac <PE_SubStateMachine_Generic+0x59c>
 80013a4:	7870      	ldrb	r0, [r6, #1]
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	4301      	orrs	r1, r0
 80013aa:	7071      	strb	r1, [r6, #1]
 80013ac:	9502      	str	r5, [sp, #8]
 80013ae:	2003      	movs	r0, #3
 80013b0:	9001      	str	r0, [sp, #4]
 80013b2:	9803      	ldr	r0, [sp, #12]
 80013b4:	1d00      	adds	r0, r0, #4
 80013b6:	b280      	uxth	r0, r0
 80013b8:	9000      	str	r0, [sp, #0]
 80013ba:	4837      	ldr	r0, [pc, #220]	; (8001498 <.text_75>)
 80013bc:	1823      	adds	r3, r4, r0
 80013be:	2205      	movs	r2, #5
 80013c0:	2100      	movs	r1, #0
 80013c2:	0020      	movs	r0, r4
 80013c4:	f000 fa56 	bl	8001874 <PE_Send_ExtendedMessage>
 80013c8:	e005      	b.n	80013d6 <PE_SubStateMachine_Generic+0x5c6>
 80013ca:	2150      	movs	r1, #80	; 0x50
 80013cc:	7c20      	ldrb	r0, [r4, #16]
 80013ce:	f7ff f8ab 	bl	8000528 <USBPD_PE_Notification>
 80013d2:	e78d      	b.n	80012f0 <PE_SubStateMachine_Generic+0x4e0>
 80013d4:	7466      	strb	r6, [r4, #17]
 80013d6:	9804      	ldr	r0, [sp, #16]
 80013d8:	b00f      	add	sp, #60	; 0x3c
 80013da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013dc <PE_SubStateMachine_ReceiveDRS>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	0004      	movs	r4, r0
 80013e0:	252a      	movs	r5, #42	; 0x2a
 80013e2:	7c20      	ldrb	r0, [r4, #16]
 80013e4:	68a1      	ldr	r1, [r4, #8]
 80013e6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80013e8:	4788      	blx	r1
 80013ea:	280a      	cmp	r0, #10
 80013ec:	d002      	beq.n	80013f4 <PE_SubStateMachine_ReceiveDRS+0x18>
 80013ee:	280c      	cmp	r0, #12
 80013f0:	d017      	beq.n	8001422 <PE_SubStateMachine_ReceiveDRS+0x46>
 80013f2:	e00d      	b.n	8001410 <PE_SubStateMachine_ReceiveDRS+0x34>
 80013f4:	2000      	movs	r0, #0
 80013f6:	9000      	str	r0, [sp, #0]
 80013f8:	2303      	movs	r3, #3
 80013fa:	2203      	movs	r2, #3
 80013fc:	2100      	movs	r1, #0
 80013fe:	0020      	movs	r0, r4
 8001400:	f000 f8da 	bl	80015b8 <PE_Send_CtrlMessage>
 8001404:	2800      	cmp	r0, #0
 8001406:	d10d      	bne.n	8001424 <PE_SubStateMachine_ReceiveDRS+0x48>
 8001408:	0020      	movs	r0, r4
 800140a:	f000 f88b 	bl	8001524 <PE_SwitchDataRole>
 800140e:	bd31      	pop	{r0, r4, r5, pc}
 8001410:	6860      	ldr	r0, [r4, #4]
 8001412:	7800      	ldrb	r0, [r0, #0]
 8001414:	0780      	lsls	r0, r0, #30
 8001416:	0f80      	lsrs	r0, r0, #30
 8001418:	2802      	cmp	r0, #2
 800141a:	d102      	bne.n	8001422 <PE_SubStateMachine_ReceiveDRS+0x46>
 800141c:	2001      	movs	r0, #1
 800141e:	7460      	strb	r0, [r4, #17]
 8001420:	bd31      	pop	{r0, r4, r5, pc}
 8001422:	7465      	strb	r5, [r4, #17]
 8001424:	bd31      	pop	{r0, r4, r5, pc}

08001426 <PE_UpdateTimer>:
 8001426:	b510      	push	{r4, lr}
 8001428:	0002      	movs	r2, r0
 800142a:	2080      	movs	r0, #128	; 0x80
 800142c:	0200      	lsls	r0, r0, #8
 800142e:	0454      	lsls	r4, r2, #17
 8001430:	0c64      	lsrs	r4, r4, #17
 8001432:	42a1      	cmp	r1, r4
 8001434:	da00      	bge.n	8001438 <PE_UpdateTimer+0x12>
 8001436:	1a50      	subs	r0, r2, r1
 8001438:	b280      	uxth	r0, r0
 800143a:	bd10      	pop	{r4, pc}

0800143c <PE_CallHardResetCallback>:
 800143c:	6883      	ldr	r3, [r0, #8]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d100      	bne.n	8001446 <PE_CallHardResetCallback+0xa>
 8001444:	4770      	bx	lr
 8001446:	b580      	push	{r7, lr}
 8001448:	7c00      	ldrb	r0, [r0, #16]
 800144a:	4798      	blx	r3
 800144c:	bd01      	pop	{r0, pc}

0800144e <PE_SetPowerNegotiation>:
 800144e:	b510      	push	{r4, lr}
 8001450:	6842      	ldr	r2, [r0, #4]
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	055c      	lsls	r4, r3, #21
 8001456:	0f64      	lsrs	r4, r4, #29
 8001458:	42a1      	cmp	r1, r4
 800145a:	d00b      	beq.n	8001474 <PE_SetPowerNegotiation+0x26>
 800145c:	4c2e      	ldr	r4, [pc, #184]	; (8001518 <.text_79>)
 800145e:	401c      	ands	r4, r3
 8001460:	0209      	lsls	r1, r1, #8
 8001462:	23e0      	movs	r3, #224	; 0xe0
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	400b      	ands	r3, r1
 8001468:	4323      	orrs	r3, r4
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	215a      	movs	r1, #90	; 0x5a
 800146e:	7c00      	ldrb	r0, [r0, #16]
 8001470:	f7ff f85a 	bl	8000528 <USBPD_PE_Notification>
 8001474:	bd10      	pop	{r4, pc}

08001476 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001476:	b580      	push	{r7, lr}
 8001478:	4928      	ldr	r1, [pc, #160]	; (800151c <.text_80>)
 800147a:	0082      	lsls	r2, r0, #2
 800147c:	5889      	ldr	r1, [r1, r2]
 800147e:	694a      	ldr	r2, [r1, #20]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4313      	orrs	r3, r2
 8001486:	614b      	str	r3, [r1, #20]
 8001488:	6889      	ldr	r1, [r1, #8]
 800148a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800148c:	4788      	blx	r1
 800148e:	bd01      	pop	{r0, pc}

08001490 <.text_73>:
 8001490:	00000267 	.word	0x00000267

08001494 <.text_74>:
 8001494:	00000265 	.word	0x00000265

08001498 <.text_75>:
 8001498:	00000263 	.word	0x00000263

0800149c <PE_CalculateMinTiming>:
 800149c:	0001      	movs	r1, r0
 800149e:	2000      	movs	r0, #0
 80014a0:	43c0      	mvns	r0, r0
 80014a2:	0c42      	lsrs	r2, r0, #17
 80014a4:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 80014a6:	4213      	tst	r3, r2
 80014a8:	d001      	beq.n	80014ae <PE_CalculateMinTiming+0x12>
 80014aa:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 80014ac:	4010      	ands	r0, r2
 80014ae:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 80014b0:	4213      	tst	r3, r2
 80014b2:	d006      	beq.n	80014c2 <PE_CalculateMinTiming+0x26>
 80014b4:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 80014b6:	4013      	ands	r3, r2
 80014b8:	4298      	cmp	r0, r3
 80014ba:	d302      	bcc.n	80014c2 <PE_CalculateMinTiming+0x26>
 80014bc:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80014be:	0010      	movs	r0, r2
 80014c0:	4008      	ands	r0, r1
 80014c2:	4770      	bx	lr

080014c4 <PE_SetPowerNegociation>:
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	0005      	movs	r5, r0
 80014c8:	000c      	movs	r4, r1
 80014ca:	6868      	ldr	r0, [r5, #4]
 80014cc:	6800      	ldr	r0, [r0, #0]
 80014ce:	0540      	lsls	r0, r0, #21
 80014d0:	0f40      	lsrs	r0, r0, #29
 80014d2:	4284      	cmp	r4, r0
 80014d4:	d003      	beq.n	80014de <PE_SetPowerNegociation+0x1a>
 80014d6:	215a      	movs	r1, #90	; 0x5a
 80014d8:	7c28      	ldrb	r0, [r5, #16]
 80014da:	f7ff f825 	bl	8000528 <USBPD_PE_Notification>
 80014de:	6868      	ldr	r0, [r5, #4]
 80014e0:	6801      	ldr	r1, [r0, #0]
 80014e2:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <.text_79>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	0221      	lsls	r1, r4, #8
 80014e8:	23e0      	movs	r3, #224	; 0xe0
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	400b      	ands	r3, r1
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6003      	str	r3, [r0, #0]
 80014f2:	bd31      	pop	{r0, r4, r5, pc}

080014f4 <PE_CheckDataSizeFromGetDataInfo>:
 80014f4:	b51c      	push	{r2, r3, r4, lr}
 80014f6:	0002      	movs	r2, r0
 80014f8:	2000      	movs	r0, #0
 80014fa:	428a      	cmp	r2, r1
 80014fc:	d20a      	bcs.n	8001514 <PE_CheckDataSizeFromGetDataInfo+0x20>
 80014fe:	2018      	movs	r0, #24
 8001500:	9000      	str	r0, [sp, #0]
 8001502:	bf00      	nop
 8001504:	a315      	add	r3, pc, #84	; (adr r3, 800155c <.text_83>)
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2006      	movs	r0, #6
 800150c:	4c04      	ldr	r4, [pc, #16]	; (8001520 <.text_81>)
 800150e:	6824      	ldr	r4, [r4, #0]
 8001510:	47a0      	blx	r4
 8001512:	2002      	movs	r0, #2
 8001514:	bd16      	pop	{r1, r2, r4, pc}
	...

08001518 <.text_79>:
 8001518:	fffff8ff 	.word	0xfffff8ff

0800151c <.text_80>:
 800151c:	20000228 	.word	0x20000228

08001520 <.text_81>:
 8001520:	20000000 	.word	0x20000000

08001524 <PE_SwitchDataRole>:
 8001524:	b510      	push	{r4, lr}
 8001526:	0004      	movs	r4, r0
 8001528:	6860      	ldr	r0, [r4, #4]
 800152a:	6802      	ldr	r2, [r0, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	08d3      	lsrs	r3, r2, #3
 8001530:	400b      	ands	r3, r1
 8001532:	d107      	bne.n	8001544 <PE_SwitchDataRole+0x20>
 8001534:	2308      	movs	r3, #8
 8001536:	4313      	orrs	r3, r2
 8001538:	6003      	str	r3, [r0, #0]
 800153a:	7c20      	ldrb	r0, [r4, #16]
 800153c:	f004 f9a1 	bl	8005882 <USBPD_PRL_SetHeaderDataRole>
 8001540:	2125      	movs	r1, #37	; 0x25
 8001542:	e007      	b.n	8001554 <PE_SwitchDataRole+0x30>
 8001544:	2108      	movs	r1, #8
 8001546:	438a      	bics	r2, r1
 8001548:	6002      	str	r2, [r0, #0]
 800154a:	2100      	movs	r1, #0
 800154c:	7c20      	ldrb	r0, [r4, #16]
 800154e:	f004 f998 	bl	8005882 <USBPD_PRL_SetHeaderDataRole>
 8001552:	2124      	movs	r1, #36	; 0x24
 8001554:	7c20      	ldrb	r0, [r4, #16]
 8001556:	f7fe ffe7 	bl	8000528 <USBPD_PE_Notification>
 800155a:	bd10      	pop	{r4, pc}

0800155c <.text_83>:
 800155c:	61746144 	.word	0x61746144
 8001560:	7a695320 	.word	0x7a695320
 8001564:	73692065 	.word	0x73692065
 8001568:	746f6e20 	.word	0x746f6e20
 800156c:	726f6320 	.word	0x726f6320
 8001570:	74636572 	.word	0x74636572
 8001574:	00          	.byte	0x00
 8001575:	00          	.byte	0x00
	...

08001578 <USBPD_PE_SetTrace>:
 8001578:	0001      	movs	r1, r0
 800157a:	d100      	bne.n	800157e <USBPD_PE_SetTrace+0x6>
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <.text_5>)
 800157e:	4906      	ldr	r1, [pc, #24]	; (8001598 <.text_6>)
 8001580:	6008      	str	r0, [r1, #0]
 8001582:	4770      	bx	lr

08001584 <USBPD_PE_CheckLIB>:
 8001584:	0001      	movs	r1, r0
 8001586:	2000      	movs	r0, #0
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <.text_7>)
 800158a:	4291      	cmp	r1, r2
 800158c:	d100      	bne.n	8001590 <USBPD_PE_CheckLIB+0xc>
 800158e:	2001      	movs	r0, #1
 8001590:	4770      	bx	lr
	...

08001594 <.text_5>:
 8001594:	080015b7 	.word	0x080015b7

08001598 <.text_6>:
 8001598:	20000000 	.word	0x20000000

0800159c <.text_7>:
 800159c:	30410000 	.word	0x30410000

080015a0 <USBPD_PE_GetMemoryConsumption>:
 80015a0:	b510      	push	{r4, lr}
 80015a2:	f004 f945 	bl	8005830 <USBPD_PRL_GetMemoryConsumption>
 80015a6:	0004      	movs	r4, r0
 80015a8:	f7fe fedd 	bl	8000366 <USBPD_CAD_GetMemoryConsumption>
 80015ac:	1820      	adds	r0, r4, r0
 80015ae:	21e1      	movs	r1, #225	; 0xe1
 80015b0:	0109      	lsls	r1, r1, #4
 80015b2:	1840      	adds	r0, r0, r1
 80015b4:	bd10      	pop	{r4, pc}

080015b6 <PE_Trace_Empty>:
 80015b6:	4770      	bx	lr

080015b8 <PE_Send_CtrlMessage>:
 80015b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80015ba:	2501      	movs	r5, #1
 80015bc:	0004      	movs	r4, r0
 80015be:	000f      	movs	r7, r1
 80015c0:	0016      	movs	r6, r2
 80015c2:	6860      	ldr	r0, [r4, #4]
 80015c4:	6800      	ldr	r0, [r0, #0]
 80015c6:	0b00      	lsrs	r0, r0, #12
 80015c8:	4028      	ands	r0, r5
 80015ca:	d014      	beq.n	80015f6 <PE_Send_CtrlMessage+0x3e>
 80015cc:	a808      	add	r0, sp, #32
 80015ce:	7800      	ldrb	r0, [r0, #0]
 80015d0:	9001      	str	r0, [sp, #4]
 80015d2:	2002      	movs	r0, #2
 80015d4:	9000      	str	r0, [sp, #0]
 80015d6:	48a2      	ldr	r0, [pc, #648]	; (8001860 <.text_5>)
 80015d8:	1823      	adds	r3, r4, r0
 80015da:	0032      	movs	r2, r6
 80015dc:	0039      	movs	r1, r7
 80015de:	7c20      	ldrb	r0, [r4, #16]
 80015e0:	f004 f99e 	bl	8005920 <USBPD_PRL_SendMessage>
 80015e4:	2803      	cmp	r0, #3
 80015e6:	d0ec      	beq.n	80015c2 <PE_Send_CtrlMessage+0xa>
 80015e8:	0039      	movs	r1, r7
 80015ea:	2810      	cmp	r0, #16
 80015ec:	d00e      	beq.n	800160c <PE_Send_CtrlMessage+0x54>
 80015ee:	2e0d      	cmp	r6, #13
 80015f0:	d104      	bne.n	80015fc <PE_Send_CtrlMessage+0x44>
 80015f2:	2201      	movs	r2, #1
 80015f4:	e003      	b.n	80015fe <PE_Send_CtrlMessage+0x46>
 80015f6:	7460      	strb	r0, [r4, #17]
 80015f8:	2010      	movs	r0, #16
 80015fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80015fc:	2200      	movs	r2, #0
 80015fe:	466b      	mov	r3, sp
 8001600:	7a1b      	ldrb	r3, [r3, #8]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	0003      	movs	r3, r0
 8001606:	0020      	movs	r0, r4
 8001608:	f000 fc22 	bl	8001e50 <PE_CheckSendMessageStatus>
 800160c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800160e <PE_Send_DataMessage>:
 800160e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	0004      	movs	r4, r0
 8001614:	2000      	movs	r0, #0
 8001616:	4e93      	ldr	r6, [pc, #588]	; (8001864 <.text_6>)
 8001618:	e00c      	b.n	8001634 <PE_Send_DataMessage+0x26>
 800161a:	2100      	movs	r1, #0
 800161c:	0082      	lsls	r2, r0, #2
 800161e:	18a2      	adds	r2, r4, r2
 8001620:	1855      	adds	r5, r2, r1
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	00cf      	lsls	r7, r1, #3
 8001626:	40fa      	lsrs	r2, r7
 8001628:	55aa      	strb	r2, [r5, r6]
 800162a:	1c49      	adds	r1, r1, #1
 800162c:	2904      	cmp	r1, #4
 800162e:	d3f5      	bcc.n	800161c <PE_Send_DataMessage+0xe>
 8001630:	1d1b      	adds	r3, r3, #4
 8001632:	1c40      	adds	r0, r0, #1
 8001634:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001636:	4288      	cmp	r0, r1
 8001638:	d3ef      	bcc.n	800161a <PE_Send_DataMessage+0xc>
 800163a:	6860      	ldr	r0, [r4, #4]
 800163c:	6800      	ldr	r0, [r0, #0]
 800163e:	04c1      	lsls	r1, r0, #19
 8001640:	0fc9      	lsrs	r1, r1, #31
 8001642:	d01f      	beq.n	8001684 <PE_Send_DataMessage+0x76>
 8001644:	a80c      	add	r0, sp, #48	; 0x30
 8001646:	7800      	ldrb	r0, [r0, #0]
 8001648:	9001      	str	r0, [sp, #4]
 800164a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800164c:	0080      	lsls	r0, r0, #2
 800164e:	1c80      	adds	r0, r0, #2
 8001650:	b280      	uxth	r0, r0
 8001652:	9000      	str	r0, [sp, #0]
 8001654:	1eb0      	subs	r0, r6, #2
 8001656:	1823      	adds	r3, r4, r0
 8001658:	4668      	mov	r0, sp
 800165a:	7c02      	ldrb	r2, [r0, #16]
 800165c:	7b01      	ldrb	r1, [r0, #12]
 800165e:	7c20      	ldrb	r0, [r4, #16]
 8001660:	f004 f95e 	bl	8005920 <USBPD_PRL_SendMessage>
 8001664:	2803      	cmp	r0, #3
 8001666:	d0e8      	beq.n	800163a <PE_Send_DataMessage+0x2c>
 8001668:	4669      	mov	r1, sp
 800166a:	7b09      	ldrb	r1, [r1, #12]
 800166c:	2810      	cmp	r0, #16
 800166e:	d007      	beq.n	8001680 <PE_Send_DataMessage+0x72>
 8001670:	aa0b      	add	r2, sp, #44	; 0x2c
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	9200      	str	r2, [sp, #0]
 8001676:	0003      	movs	r3, r0
 8001678:	2200      	movs	r2, #0
 800167a:	0020      	movs	r0, r4
 800167c:	f000 fbe8 	bl	8001e50 <PE_CheckSendMessageStatus>
 8001680:	b005      	add	sp, #20
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001684:	2010      	movs	r0, #16
 8001686:	e7fb      	b.n	8001680 <PE_Send_DataMessage+0x72>

08001688 <PE_Check_ExtendedMessage>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	0004      	movs	r4, r0
 800168c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800168e:	7881      	ldrb	r1, [r0, #2]
 8001690:	78c0      	ldrb	r0, [r0, #3]
 8001692:	0200      	lsls	r0, r0, #8
 8001694:	1808      	adds	r0, r1, r0
 8001696:	4974      	ldr	r1, [pc, #464]	; (8001868 <.text_7>)
 8001698:	1861      	adds	r1, r4, r1
 800169a:	8008      	strh	r0, [r1, #0]
 800169c:	2234      	movs	r2, #52	; 0x34
 800169e:	5ca2      	ldrb	r2, [r4, r2]
 80016a0:	06d2      	lsls	r2, r2, #27
 80016a2:	0ed2      	lsrs	r2, r2, #27
 80016a4:	708a      	strb	r2, [r1, #2]
 80016a6:	2501      	movs	r5, #1
 80016a8:	0403      	lsls	r3, r0, #16
 80016aa:	0e9b      	lsrs	r3, r3, #26
 80016ac:	2201      	movs	r2, #1
 80016ae:	401a      	ands	r2, r3
 80016b0:	0403      	lsls	r3, r0, #16
 80016b2:	0edb      	lsrs	r3, r3, #27
 80016b4:	071b      	lsls	r3, r3, #28
 80016b6:	d003      	beq.n	80016c0 <PE_Check_ExtendedMessage+0x38>
 80016b8:	0013      	movs	r3, r2
 80016ba:	d001      	beq.n	80016c0 <PE_Check_ExtendedMessage+0x38>
 80016bc:	2034      	movs	r0, #52	; 0x34
 80016be:	e09e      	b.n	80017fe <PE_Check_ExtendedMessage+0x176>
 80016c0:	05c6      	lsls	r6, r0, #23
 80016c2:	0df6      	lsrs	r6, r6, #23
 80016c4:	2300      	movs	r3, #0
 80016c6:	0407      	lsls	r7, r0, #16
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	d10d      	bne.n	80016e8 <PE_Check_ExtendedMessage+0x60>
 80016cc:	4867      	ldr	r0, [pc, #412]	; (800186c <.text_8>)
 80016ce:	5226      	strh	r6, [r4, r0]
 80016d0:	4866      	ldr	r0, [pc, #408]	; (800186c <.text_8>)
 80016d2:	5a20      	ldrh	r0, [r4, r0]
 80016d4:	4283      	cmp	r3, r0
 80016d6:	d21b      	bcs.n	8001710 <PE_Check_ExtendedMessage+0x88>
 80016d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016da:	1d00      	adds	r0, r0, #4
 80016dc:	5cc0      	ldrb	r0, [r0, r3]
 80016de:	4a64      	ldr	r2, [pc, #400]	; (8001870 <.text_9>)
 80016e0:	18a2      	adds	r2, r4, r2
 80016e2:	54d0      	strb	r0, [r2, r3]
 80016e4:	1c5b      	adds	r3, r3, #1
 80016e6:	e7f3      	b.n	80016d0 <PE_Check_ExtendedMessage+0x48>
 80016e8:	27f8      	movs	r7, #248	; 0xf8
 80016ea:	01ff      	lsls	r7, r7, #7
 80016ec:	4007      	ands	r7, r0
 80016ee:	d106      	bne.n	80016fe <PE_Check_ExtendedMessage+0x76>
 80016f0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80016f2:	0440      	lsls	r0, r0, #17
 80016f4:	0f40      	lsrs	r0, r0, #29
 80016f6:	2807      	cmp	r0, #7
 80016f8:	d30a      	bcc.n	8001710 <PE_Check_ExtendedMessage+0x88>
 80016fa:	2e1a      	cmp	r6, #26
 80016fc:	d908      	bls.n	8001710 <PE_Check_ExtendedMessage+0x88>
 80016fe:	2a00      	cmp	r2, #0
 8001700:	d106      	bne.n	8001710 <PE_Check_ExtendedMessage+0x88>
 8001702:	485a      	ldr	r0, [pc, #360]	; (800186c <.text_8>)
 8001704:	5a20      	ldrh	r0, [r4, r0]
 8001706:	42b0      	cmp	r0, r6
 8001708:	d202      	bcs.n	8001710 <PE_Check_ExtendedMessage+0x88>
 800170a:	83e3      	strh	r3, [r4, #30]
 800170c:	2037      	movs	r0, #55	; 0x37
 800170e:	e076      	b.n	80017fe <PE_Check_ExtendedMessage+0x176>
 8001710:	7889      	ldrb	r1, [r1, #2]
 8001712:	2603      	movs	r6, #3
 8001714:	7f22      	ldrb	r2, [r4, #28]
 8001716:	2a00      	cmp	r2, #0
 8001718:	d039      	beq.n	800178e <PE_Check_ExtendedMessage+0x106>
 800171a:	2901      	cmp	r1, #1
 800171c:	d008      	beq.n	8001730 <PE_Check_ExtendedMessage+0xa8>
 800171e:	2902      	cmp	r1, #2
 8001720:	d01c      	beq.n	800175c <PE_Check_ExtendedMessage+0xd4>
 8001722:	2905      	cmp	r1, #5
 8001724:	d02a      	beq.n	800177c <PE_Check_ExtendedMessage+0xf4>
 8001726:	2907      	cmp	r1, #7
 8001728:	d023      	beq.n	8001772 <PE_Check_ExtendedMessage+0xea>
 800172a:	290f      	cmp	r1, #15
 800172c:	d00b      	beq.n	8001746 <PE_Check_ExtendedMessage+0xbe>
 800172e:	e094      	b.n	800185a <PE_Check_ExtendedMessage+0x1d2>
 8001730:	2318      	movs	r3, #24
 8001732:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001734:	1d02      	adds	r2, r0, #4
 8001736:	2108      	movs	r1, #8
 8001738:	7c20      	ldrb	r0, [r4, #16]
 800173a:	68a7      	ldr	r7, [r4, #8]
 800173c:	69bf      	ldr	r7, [r7, #24]
 800173e:	47b8      	blx	r7
 8001740:	7466      	strb	r6, [r4, #17]
 8001742:	2147      	movs	r1, #71	; 0x47
 8001744:	e014      	b.n	8001770 <PE_Check_ExtendedMessage+0xe8>
 8001746:	2318      	movs	r3, #24
 8001748:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800174a:	1d02      	adds	r2, r0, #4
 800174c:	2113      	movs	r1, #19
 800174e:	7c20      	ldrb	r0, [r4, #16]
 8001750:	68a7      	ldr	r7, [r4, #8]
 8001752:	69bf      	ldr	r7, [r7, #24]
 8001754:	47b8      	blx	r7
 8001756:	7466      	strb	r6, [r4, #17]
 8001758:	2162      	movs	r1, #98	; 0x62
 800175a:	e009      	b.n	8001770 <PE_Check_ExtendedMessage+0xe8>
 800175c:	2307      	movs	r3, #7
 800175e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001760:	1d02      	adds	r2, r0, #4
 8001762:	2109      	movs	r1, #9
 8001764:	7c20      	ldrb	r0, [r4, #16]
 8001766:	68a7      	ldr	r7, [r4, #8]
 8001768:	69bf      	ldr	r7, [r7, #24]
 800176a:	47b8      	blx	r7
 800176c:	7466      	strb	r6, [r4, #17]
 800176e:	214e      	movs	r1, #78	; 0x4e
 8001770:	e2c7      	b.n	8001d02 <.text_21>
 8001772:	231a      	movs	r3, #26
 8001774:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001776:	1d02      	adds	r2, r0, #4
 8001778:	210d      	movs	r1, #13
 800177a:	e003      	b.n	8001784 <PE_Check_ExtendedMessage+0xfc>
 800177c:	2309      	movs	r3, #9
 800177e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001780:	1d02      	adds	r2, r0, #4
 8001782:	2111      	movs	r1, #17
 8001784:	7c20      	ldrb	r0, [r4, #16]
 8001786:	68a7      	ldr	r7, [r4, #8]
 8001788:	69bf      	ldr	r7, [r7, #24]
 800178a:	47b8      	blx	r7
 800178c:	e063      	b.n	8001856 <PE_Check_ExtendedMessage+0x1ce>
 800178e:	1ec8      	subs	r0, r1, #3
 8001790:	2808      	cmp	r0, #8
 8001792:	d862      	bhi.n	800185a <PE_Check_ExtendedMessage+0x1d2>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <PE_Check_ExtendedMessage+0x114>)
 8001796:	5c12      	ldrb	r2, [r2, r0]
 8001798:	4497      	add	pc, r2
 800179a:	bf00      	nop
 800179c:	46be280a 	.word	0x46be280a
 80017a0:	669884be 	.word	0x669884be
 80017a4:	006e      	.short	0x006e
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	8900      	ldrh	r0, [r0, #8]
 80017aa:	0b00      	lsrs	r0, r0, #12
 80017ac:	4228      	tst	r0, r5
 80017ae:	d054      	beq.n	800185a <PE_Check_ExtendedMessage+0x1d2>
 80017b0:	2301      	movs	r3, #1
 80017b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017b4:	1d02      	adds	r2, r0, #4
 80017b6:	2110      	movs	r1, #16
 80017b8:	7c20      	ldrb	r0, [r4, #16]
 80017ba:	68a5      	ldr	r5, [r4, #8]
 80017bc:	69ad      	ldr	r5, [r5, #24]
 80017be:	47a8      	blx	r5
 80017c0:	203a      	movs	r0, #58	; 0x3a
 80017c2:	e01c      	b.n	80017fe <PE_Check_ExtendedMessage+0x176>
 80017c4:	6820      	ldr	r0, [r4, #0]
 80017c6:	8900      	ldrh	r0, [r0, #8]
 80017c8:	0b00      	lsrs	r0, r0, #12
 80017ca:	4228      	tst	r0, r5
 80017cc:	d045      	beq.n	800185a <PE_Check_ExtendedMessage+0x1d2>
 80017ce:	2301      	movs	r3, #1
 80017d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017d2:	1d02      	adds	r2, r0, #4
 80017d4:	210e      	movs	r1, #14
 80017d6:	7c20      	ldrb	r0, [r4, #16]
 80017d8:	68a5      	ldr	r5, [r4, #8]
 80017da:	69ad      	ldr	r5, [r5, #24]
 80017dc:	47a8      	blx	r5
 80017de:	203b      	movs	r0, #59	; 0x3b
 80017e0:	e00d      	b.n	80017fe <PE_Check_ExtendedMessage+0x176>
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	8900      	ldrh	r0, [r0, #8]
 80017e6:	0980      	lsrs	r0, r0, #6
 80017e8:	4228      	tst	r0, r5
 80017ea:	d036      	beq.n	800185a <PE_Check_ExtendedMessage+0x1d2>
 80017ec:	2302      	movs	r3, #2
 80017ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017f0:	1d02      	adds	r2, r0, #4
 80017f2:	210c      	movs	r1, #12
 80017f4:	7c20      	ldrb	r0, [r4, #16]
 80017f6:	68a5      	ldr	r5, [r4, #8]
 80017f8:	69ad      	ldr	r5, [r5, #24]
 80017fa:	47a8      	blx	r5
 80017fc:	203c      	movs	r0, #60	; 0x3c
 80017fe:	7460      	strb	r0, [r4, #17]
 8001800:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	8900      	ldrh	r0, [r0, #8]
 8001806:	0a80      	lsrs	r0, r0, #10
 8001808:	e00d      	b.n	8001826 <PE_Check_ExtendedMessage+0x19e>
 800180a:	68a0      	ldr	r0, [r4, #8]
 800180c:	6905      	ldr	r5, [r0, #16]
 800180e:	2d00      	cmp	r5, #0
 8001810:	d024      	beq.n	800185c <PE_Check_ExtendedMessage+0x1d4>
 8001812:	4816      	ldr	r0, [pc, #88]	; (800186c <.text_8>)
 8001814:	5a23      	ldrh	r3, [r4, r0]
 8001816:	4816      	ldr	r0, [pc, #88]	; (8001870 <.text_9>)
 8001818:	1822      	adds	r2, r4, r0
 800181a:	7c20      	ldrb	r0, [r4, #16]
 800181c:	47a8      	blx	r5
 800181e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	8900      	ldrh	r0, [r0, #8]
 8001824:	0a40      	lsrs	r0, r0, #9
 8001826:	4228      	tst	r0, r5
 8001828:	d017      	beq.n	800185a <PE_Check_ExtendedMessage+0x1d2>
 800182a:	68a0      	ldr	r0, [r4, #8]
 800182c:	6900      	ldr	r0, [r0, #16]
 800182e:	2800      	cmp	r0, #0
 8001830:	d109      	bne.n	8001846 <PE_Check_ExtendedMessage+0x1be>
 8001832:	e012      	b.n	800185a <PE_Check_ExtendedMessage+0x1d2>
 8001834:	6820      	ldr	r0, [r4, #0]
 8001836:	8900      	ldrh	r0, [r0, #8]
 8001838:	0a40      	lsrs	r0, r0, #9
 800183a:	4228      	tst	r0, r5
 800183c:	d00e      	beq.n	800185c <PE_Check_ExtendedMessage+0x1d4>
 800183e:	68a0      	ldr	r0, [r4, #8]
 8001840:	6900      	ldr	r0, [r0, #16]
 8001842:	2800      	cmp	r0, #0
 8001844:	d00a      	beq.n	800185c <PE_Check_ExtendedMessage+0x1d4>
 8001846:	4809      	ldr	r0, [pc, #36]	; (800186c <.text_8>)
 8001848:	5a23      	ldrh	r3, [r4, r0]
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <.text_9>)
 800184c:	1822      	adds	r2, r4, r0
 800184e:	7c20      	ldrb	r0, [r4, #16]
 8001850:	68a5      	ldr	r5, [r4, #8]
 8001852:	692d      	ldr	r5, [r5, #16]
 8001854:	47a8      	blx	r5
 8001856:	7466      	strb	r6, [r4, #17]
 8001858:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800185a:	7465      	strb	r5, [r4, #17]
 800185c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08001860 <.text_5>:
 8001860:	00000263 	.word	0x00000263

08001864 <.text_6>:
 8001864:	00000265 	.word	0x00000265

08001868 <.text_7>:
 8001868:	0000025a 	.word	0x0000025a

0800186c <.text_8>:
 800186c:	0000048e 	.word	0x0000048e

08001870 <.text_9>:
 8001870:	00000281 	.word	0x00000281

08001874 <PE_Send_ExtendedMessage>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800187a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800187c:	0004      	movs	r4, r0
 800187e:	000d      	movs	r5, r1
 8001880:	4668      	mov	r0, sp
 8001882:	7202      	strb	r2, [r0, #8]
 8001884:	9303      	str	r3, [sp, #12]
 8001886:	6860      	ldr	r0, [r4, #4]
 8001888:	6800      	ldr	r0, [r0, #0]
 800188a:	04c1      	lsls	r1, r0, #19
 800188c:	0fc9      	lsrs	r1, r1, #31
 800188e:	d019      	beq.n	80018c4 <PE_Send_ExtendedMessage+0x50>
 8001890:	9601      	str	r6, [sp, #4]
 8001892:	9700      	str	r7, [sp, #0]
 8001894:	9b03      	ldr	r3, [sp, #12]
 8001896:	4668      	mov	r0, sp
 8001898:	7a00      	ldrb	r0, [r0, #8]
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	4302      	orrs	r2, r0
 800189e:	0029      	movs	r1, r5
 80018a0:	7c20      	ldrb	r0, [r4, #16]
 80018a2:	f004 f83d 	bl	8005920 <USBPD_PRL_SendMessage>
 80018a6:	2803      	cmp	r0, #3
 80018a8:	d0ed      	beq.n	8001886 <PE_Send_ExtendedMessage+0x12>
 80018aa:	0029      	movs	r1, r5
 80018ac:	2810      	cmp	r0, #16
 80018ae:	d007      	beq.n	80018c0 <PE_Send_ExtendedMessage+0x4c>
 80018b0:	aa0b      	add	r2, sp, #44	; 0x2c
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	9200      	str	r2, [sp, #0]
 80018b6:	0003      	movs	r3, r0
 80018b8:	2200      	movs	r2, #0
 80018ba:	0020      	movs	r0, r4
 80018bc:	f000 fac8 	bl	8001e50 <PE_CheckSendMessageStatus>
 80018c0:	b005      	add	sp, #20
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	2011      	movs	r0, #17
 80018c6:	7460      	strb	r0, [r4, #17]
 80018c8:	2010      	movs	r0, #16
 80018ca:	e7f9      	b.n	80018c0 <PE_Send_ExtendedMessage+0x4c>

080018cc <PE_SubStateMachine_ExtendedMessages>:
 80018cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	0004      	movs	r4, r0
 80018d2:	2702      	movs	r7, #2
 80018d4:	4889      	ldr	r0, [pc, #548]	; (8001afc <.text_12>)
 80018d6:	1820      	adds	r0, r4, r0
 80018d8:	9000      	str	r0, [sp, #0]
 80018da:	2039      	movs	r0, #57	; 0x39
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	466a      	mov	r2, sp
 80018e0:	7211      	strb	r1, [r2, #8]
 80018e2:	4a87      	ldr	r2, [pc, #540]	; (8001b00 <.text_13>)
 80018e4:	2500      	movs	r5, #0
 80018e6:	2603      	movs	r6, #3
 80018e8:	7c63      	ldrb	r3, [r4, #17]
 80018ea:	2b31      	cmp	r3, #49	; 0x31
 80018ec:	d010      	beq.n	8001910 <PE_SubStateMachine_ExtendedMessages+0x44>
 80018ee:	2b33      	cmp	r3, #51	; 0x33
 80018f0:	d075      	beq.n	80019de <PE_SubStateMachine_ExtendedMessages+0x112>
 80018f2:	2b34      	cmp	r3, #52	; 0x34
 80018f4:	d07c      	beq.n	80019f0 <PE_SubStateMachine_ExtendedMessages+0x124>
 80018f6:	2b35      	cmp	r3, #53	; 0x35
 80018f8:	d100      	bne.n	80018fc <PE_SubStateMachine_ExtendedMessages+0x30>
 80018fa:	e0a8      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x182>
 80018fc:	2b36      	cmp	r3, #54	; 0x36
 80018fe:	d100      	bne.n	8001902 <PE_SubStateMachine_ExtendedMessages+0x36>
 8001900:	e0be      	b.n	8001a80 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 8001902:	2b37      	cmp	r3, #55	; 0x37
 8001904:	d100      	bne.n	8001908 <PE_SubStateMachine_ExtendedMessages+0x3c>
 8001906:	e0be      	b.n	8001a86 <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001908:	2b38      	cmp	r3, #56	; 0x38
 800190a:	d100      	bne.n	800190e <PE_SubStateMachine_ExtendedMessages+0x42>
 800190c:	e0ef      	b.n	8001aee <PE_SubStateMachine_ExtendedMessages+0x222>
 800190e:	e0f2      	b.n	8001af6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001910:	487c      	ldr	r0, [pc, #496]	; (8001b04 <.text_14>)
 8001912:	1820      	adds	r0, r4, r0
 8001914:	9004      	str	r0, [sp, #16]
 8001916:	4669      	mov	r1, sp
 8001918:	730d      	strb	r5, [r1, #12]
 800191a:	497b      	ldr	r1, [pc, #492]	; (8001b08 <.text_15>)
 800191c:	5265      	strh	r5, [r4, r1]
 800191e:	7c20      	ldrb	r0, [r4, #16]
 8001920:	f7ff fa64 	bl	8000dec <PE_Get_UnchunkedSupport>
 8001924:	2801      	cmp	r0, #1
 8001926:	d107      	bne.n	8001938 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001928:	4878      	ldr	r0, [pc, #480]	; (8001b0c <.text_16>)
 800192a:	1820      	adds	r0, r4, r0
 800192c:	7005      	strb	r5, [r0, #0]
 800192e:	7045      	strb	r5, [r0, #1]
 8001930:	4877      	ldr	r0, [pc, #476]	; (8001b10 <.text_17>)
 8001932:	1820      	adds	r0, r4, r0
 8001934:	9004      	str	r0, [sp, #16]
 8001936:	e028      	b.n	800198a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001938:	4976      	ldr	r1, [pc, #472]	; (8001b14 <.text_18>)
 800193a:	1861      	adds	r1, r4, r1
 800193c:	72cd      	strb	r5, [r1, #11]
 800193e:	4975      	ldr	r1, [pc, #468]	; (8001b14 <.text_18>)
 8001940:	1861      	adds	r1, r4, r1
 8001942:	730d      	strb	r5, [r1, #12]
 8001944:	7c20      	ldrb	r0, [r4, #16]
 8001946:	f7ff fa51 	bl	8000dec <PE_Get_UnchunkedSupport>
 800194a:	2800      	cmp	r0, #0
 800194c:	d106      	bne.n	800195c <PE_SubStateMachine_ExtendedMessages+0x90>
 800194e:	4871      	ldr	r0, [pc, #452]	; (8001b14 <.text_18>)
 8001950:	1820      	adds	r0, r4, r0
 8001952:	7b01      	ldrb	r1, [r0, #12]
 8001954:	466a      	mov	r2, sp
 8001956:	7a12      	ldrb	r2, [r2, #8]
 8001958:	430a      	orrs	r2, r1
 800195a:	7302      	strb	r2, [r0, #12]
 800195c:	486a      	ldr	r0, [pc, #424]	; (8001b08 <.text_15>)
 800195e:	1820      	adds	r0, r4, r0
 8001960:	8841      	ldrh	r1, [r0, #2]
 8001962:	291b      	cmp	r1, #27
 8001964:	d30e      	bcc.n	8001984 <PE_SubStateMachine_ExtendedMessages+0xb8>
 8001966:	486a      	ldr	r0, [pc, #424]	; (8001b10 <.text_17>)
 8001968:	1820      	adds	r0, r4, r0
 800196a:	5d40      	ldrb	r0, [r0, r5]
 800196c:	9900      	ldr	r1, [sp, #0]
 800196e:	5548      	strb	r0, [r1, r5]
 8001970:	1c6d      	adds	r5, r5, #1
 8001972:	2d1a      	cmp	r5, #26
 8001974:	d209      	bcs.n	800198a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001976:	e7f6      	b.n	8001966 <PE_SubStateMachine_ExtendedMessages+0x9a>
 8001978:	4965      	ldr	r1, [pc, #404]	; (8001b10 <.text_17>)
 800197a:	1861      	adds	r1, r4, r1
 800197c:	5d49      	ldrb	r1, [r1, r5]
 800197e:	9a00      	ldr	r2, [sp, #0]
 8001980:	5551      	strb	r1, [r2, r5]
 8001982:	1c6d      	adds	r5, r5, #1
 8001984:	8841      	ldrh	r1, [r0, #2]
 8001986:	428d      	cmp	r5, r1
 8001988:	d3f6      	bcc.n	8001978 <PE_SubStateMachine_ExtendedMessages+0xac>
 800198a:	2001      	movs	r0, #1
 800198c:	6961      	ldr	r1, [r4, #20]
 800198e:	0949      	lsrs	r1, r1, #5
 8001990:	4001      	ands	r1, r0
 8001992:	d00a      	beq.n	80019aa <PE_SubStateMachine_ExtendedMessages+0xde>
 8001994:	6861      	ldr	r1, [r4, #4]
 8001996:	6809      	ldr	r1, [r1, #0]
 8001998:	0889      	lsrs	r1, r1, #2
 800199a:	4001      	ands	r1, r0
 800199c:	d002      	beq.n	80019a4 <PE_SubStateMachine_ExtendedMessages+0xd8>
 800199e:	4669      	mov	r1, sp
 80019a0:	7308      	strb	r0, [r1, #12]
 80019a2:	e001      	b.n	80019a8 <PE_SubStateMachine_ExtendedMessages+0xdc>
 80019a4:	4669      	mov	r1, sp
 80019a6:	730f      	strb	r7, [r1, #12]
 80019a8:	2633      	movs	r6, #51	; 0x33
 80019aa:	4668      	mov	r0, sp
 80019ac:	7b00      	ldrb	r0, [r0, #12]
 80019ae:	9002      	str	r0, [sp, #8]
 80019b0:	9601      	str	r6, [sp, #4]
 80019b2:	4855      	ldr	r0, [pc, #340]	; (8001b08 <.text_15>)
 80019b4:	1820      	adds	r0, r4, r0
 80019b6:	8840      	ldrh	r0, [r0, #2]
 80019b8:	1d00      	adds	r0, r0, #4
 80019ba:	b280      	uxth	r0, r0
 80019bc:	9000      	str	r0, [sp, #0]
 80019be:	9b04      	ldr	r3, [sp, #16]
 80019c0:	4854      	ldr	r0, [pc, #336]	; (8001b14 <.text_18>)
 80019c2:	1820      	adds	r0, r4, r0
 80019c4:	78c2      	ldrb	r2, [r0, #3]
 80019c6:	2033      	movs	r0, #51	; 0x33
 80019c8:	5c21      	ldrb	r1, [r4, r0]
 80019ca:	0020      	movs	r0, r4
 80019cc:	f7ff ff52 	bl	8001874 <PE_Send_ExtendedMessage>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d103      	bne.n	80019dc <PE_SubStateMachine_ExtendedMessages+0x110>
 80019d4:	484f      	ldr	r0, [pc, #316]	; (8001b14 <.text_18>)
 80019d6:	1820      	adds	r0, r4, r0
 80019d8:	7940      	ldrb	r0, [r0, #5]
 80019da:	7720      	strb	r0, [r4, #28]
 80019dc:	e08b      	b.n	8001af6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019de:	83e2      	strh	r2, [r4, #30]
 80019e0:	271b      	movs	r7, #27
 80019e2:	494c      	ldr	r1, [pc, #304]	; (8001b14 <.text_18>)
 80019e4:	1861      	adds	r1, r4, r1
 80019e6:	78c9      	ldrb	r1, [r1, #3]
 80019e8:	2904      	cmp	r1, #4
 80019ea:	d151      	bne.n	8001a90 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019ec:	2074      	movs	r0, #116	; 0x74
 80019ee:	e04f      	b.n	8001a90 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019f0:	4848      	ldr	r0, [pc, #288]	; (8001b14 <.text_18>)
 80019f2:	5a20      	ldrh	r0, [r4, r0]
 80019f4:	0440      	lsls	r0, r0, #17
 80019f6:	0f02      	lsrs	r2, r0, #28
 80019f8:	211a      	movs	r1, #26
 80019fa:	4351      	muls	r1, r2
 80019fc:	4842      	ldr	r0, [pc, #264]	; (8001b08 <.text_15>)
 80019fe:	1820      	adds	r0, r4, r0
 8001a00:	8843      	ldrh	r3, [r0, #2]
 8001a02:	4299      	cmp	r1, r3
 8001a04:	da01      	bge.n	8001a0a <PE_SubStateMachine_ExtendedMessages+0x13e>
 8001a06:	2a0a      	cmp	r2, #10
 8001a08:	d301      	bcc.n	8001a0e <PE_SubStateMachine_ExtendedMessages+0x142>
 8001a0a:	7466      	strb	r6, [r4, #17]
 8001a0c:	e01d      	b.n	8001a4a <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001a0e:	1a5a      	subs	r2, r3, r1
 8001a10:	2a1a      	cmp	r2, #26
 8001a12:	d202      	bcs.n	8001a1a <PE_SubStateMachine_ExtendedMessages+0x14e>
 8001a14:	1a5b      	subs	r3, r3, r1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	e000      	b.n	8001a1c <PE_SubStateMachine_ExtendedMessages+0x150>
 8001a1a:	231a      	movs	r3, #26
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	e006      	b.n	8001a2e <PE_SubStateMachine_ExtendedMessages+0x162>
 8001a20:	4e3b      	ldr	r6, [pc, #236]	; (8001b10 <.text_17>)
 8001a22:	19a6      	adds	r6, r4, r6
 8001a24:	188f      	adds	r7, r1, r2
 8001a26:	5df6      	ldrb	r6, [r6, r7]
 8001a28:	9f00      	ldr	r7, [sp, #0]
 8001a2a:	54be      	strb	r6, [r7, r2]
 8001a2c:	1c52      	adds	r2, r2, #1
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3f6      	bcc.n	8001a20 <PE_SubStateMachine_ExtendedMessages+0x154>
 8001a32:	4934      	ldr	r1, [pc, #208]	; (8001b04 <.text_14>)
 8001a34:	1863      	adds	r3, r4, r1
 8001a36:	8842      	ldrh	r2, [r0, #2]
 8001a38:	4836      	ldr	r0, [pc, #216]	; (8001b14 <.text_18>)
 8001a3a:	5a20      	ldrh	r0, [r4, r0]
 8001a3c:	0440      	lsls	r0, r0, #17
 8001a3e:	0f01      	lsrs	r1, r0, #28
 8001a40:	7c20      	ldrb	r0, [r4, #16]
 8001a42:	f004 fc0e 	bl	8006262 <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001a46:	2035      	movs	r0, #53	; 0x35
 8001a48:	7460      	strb	r0, [r4, #17]
 8001a4a:	2700      	movs	r7, #0
 8001a4c:	e053      	b.n	8001af6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a4e:	6960      	ldr	r0, [r4, #20]
 8001a50:	0681      	lsls	r1, r0, #26
 8001a52:	0fc9      	lsrs	r1, r1, #31
 8001a54:	d001      	beq.n	8001a5a <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001a56:	2036      	movs	r0, #54	; 0x36
 8001a58:	e000      	b.n	8001a5c <PE_SubStateMachine_ExtendedMessages+0x190>
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	492a      	ldr	r1, [pc, #168]	; (8001b08 <.text_15>)
 8001a5e:	1866      	adds	r6, r4, r1
 8001a60:	9502      	str	r5, [sp, #8]
 8001a62:	9001      	str	r0, [sp, #4]
 8001a64:	8870      	ldrh	r0, [r6, #2]
 8001a66:	9000      	str	r0, [sp, #0]
 8001a68:	4826      	ldr	r0, [pc, #152]	; (8001b04 <.text_14>)
 8001a6a:	1823      	adds	r3, r4, r0
 8001a6c:	3809      	subs	r0, #9
 8001a6e:	1820      	adds	r0, r4, r0
 8001a70:	78c2      	ldrb	r2, [r0, #3]
 8001a72:	2030      	movs	r0, #48	; 0x30
 8001a74:	5c21      	ldrb	r1, [r4, r0]
 8001a76:	0020      	movs	r0, r4
 8001a78:	f7ff fefc 	bl	8001874 <PE_Send_ExtendedMessage>
 8001a7c:	8035      	strh	r5, [r6, #0]
 8001a7e:	e03a      	b.n	8001af6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a80:	83e2      	strh	r2, [r4, #30]
 8001a82:	271b      	movs	r7, #27
 8001a84:	e004      	b.n	8001a90 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001a86:	8be0      	ldrh	r0, [r4, #30]
 8001a88:	020b      	lsls	r3, r1, #8
 8001a8a:	4298      	cmp	r0, r3
 8001a8c:	d102      	bne.n	8001a94 <PE_SubStateMachine_ExtendedMessages+0x1c8>
 8001a8e:	200f      	movs	r0, #15
 8001a90:	7460      	strb	r0, [r4, #17]
 8001a92:	e030      	b.n	8001af6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a94:	83e2      	strh	r2, [r4, #30]
 8001a96:	271b      	movs	r7, #27
 8001a98:	481a      	ldr	r0, [pc, #104]	; (8001b04 <.text_14>)
 8001a9a:	1825      	adds	r5, r4, r0
 8001a9c:	0029      	movs	r1, r5
 8001a9e:	7c20      	ldrb	r0, [r4, #16]
 8001aa0:	f004 fc07 	bl	80062b2 <USBPD_PRL_PrepareChunkRequest>
 8001aa4:	6860      	ldr	r0, [r4, #4]
 8001aa6:	6800      	ldr	r0, [r0, #0]
 8001aa8:	04c1      	lsls	r1, r0, #19
 8001aaa:	0fc9      	lsrs	r1, r1, #31
 8001aac:	d012      	beq.n	8001ad4 <PE_SubStateMachine_ExtendedMessages+0x208>
 8001aae:	2000      	movs	r0, #0
 8001ab0:	9001      	str	r0, [sp, #4]
 8001ab2:	2006      	movs	r0, #6
 8001ab4:	9000      	str	r0, [sp, #0]
 8001ab6:	002b      	movs	r3, r5
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <.text_18>)
 8001aba:	1820      	adds	r0, r4, r0
 8001abc:	7880      	ldrb	r0, [r0, #2]
 8001abe:	4669      	mov	r1, sp
 8001ac0:	7a0a      	ldrb	r2, [r1, #8]
 8001ac2:	4302      	orrs	r2, r0
 8001ac4:	2030      	movs	r0, #48	; 0x30
 8001ac6:	5c21      	ldrb	r1, [r4, r0]
 8001ac8:	7c20      	ldrb	r0, [r4, #16]
 8001aca:	f003 ff29 	bl	8005920 <USBPD_PRL_SendMessage>
 8001ace:	2803      	cmp	r0, #3
 8001ad0:	d0e8      	beq.n	8001aa4 <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001ad2:	e002      	b.n	8001ada <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001ad4:	2011      	movs	r0, #17
 8001ad6:	7460      	strb	r0, [r4, #17]
 8001ad8:	2010      	movs	r0, #16
 8001ada:	2139      	movs	r1, #57	; 0x39
 8001adc:	9100      	str	r1, [sp, #0]
 8001ade:	0003      	movs	r3, r0
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2030      	movs	r0, #48	; 0x30
 8001ae4:	5c21      	ldrb	r1, [r4, r0]
 8001ae6:	0020      	movs	r0, r4
 8001ae8:	f000 f9b2 	bl	8001e50 <PE_CheckSendMessageStatus>
 8001aec:	e003      	b.n	8001af6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001aee:	7466      	strb	r6, [r4, #17]
 8001af0:	2700      	movs	r7, #0
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <.text_15>)
 8001af4:	5225      	strh	r5, [r4, r0]
 8001af6:	0038      	movs	r0, r7
 8001af8:	b005      	add	sp, #20
 8001afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001afc <.text_12>:
 8001afc:	00000267 	.word	0x00000267

08001b00 <.text_13>:
 8001b00:	0000801b 	.word	0x0000801b

08001b04 <.text_14>:
 8001b04:	00000263 	.word	0x00000263

08001b08 <.text_15>:
 8001b08:	0000048e 	.word	0x0000048e

08001b0c <.text_16>:
 8001b0c:	00000387 	.word	0x00000387

08001b10 <.text_17>:
 8001b10:	00000385 	.word	0x00000385

08001b14 <.text_18>:
 8001b14:	0000025a 	.word	0x0000025a

08001b18 <PE_ManageRXEvent>:
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	2130      	movs	r1, #48	; 0x30
 8001b1c:	5c41      	ldrb	r1, [r0, r1]
 8001b1e:	2231      	movs	r2, #49	; 0x31
 8001b20:	5481      	strb	r1, [r0, r2]
 8001b22:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8001b24:	0bca      	lsrs	r2, r1, #15
 8001b26:	d002      	beq.n	8001b2e <PE_ManageRXEvent+0x16>
 8001b28:	f7ff fdae 	bl	8001688 <PE_Check_ExtendedMessage>
 8001b2c:	bd01      	pop	{r0, pc}
 8001b2e:	22f0      	movs	r2, #240	; 0xf0
 8001b30:	0212      	lsls	r2, r2, #8
 8001b32:	400a      	ands	r2, r1
 8001b34:	d102      	bne.n	8001b3c <PE_ManageRXEvent+0x24>
 8001b36:	f000 f805 	bl	8001b44 <PE_Check_ControlMessage>
 8001b3a:	bd01      	pop	{r0, pc}
 8001b3c:	f000 f8e5 	bl	8001d0a <PE_Check_DataMessage>
 8001b40:	bd01      	pop	{r0, pc}
	...

08001b44 <PE_Check_ControlMessage>:
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	0004      	movs	r4, r0
 8001b48:	272a      	movs	r7, #42	; 0x2a
 8001b4a:	2603      	movs	r6, #3
 8001b4c:	2501      	movs	r5, #1
 8001b4e:	200b      	movs	r0, #11
 8001b50:	2134      	movs	r1, #52	; 0x34
 8001b52:	5c61      	ldrb	r1, [r4, r1]
 8001b54:	06c9      	lsls	r1, r1, #27
 8001b56:	0ec9      	lsrs	r1, r1, #27
 8001b58:	1e49      	subs	r1, r1, #1
 8001b5a:	2917      	cmp	r1, #23
 8001b5c:	d900      	bls.n	8001b60 <PE_Check_ControlMessage+0x1c>
 8001b5e:	e0c7      	b.n	8001cf0 <PE_Check_ControlMessage+0x1ac>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <PE_Check_ControlMessage+0x24>)
 8001b62:	5c52      	ldrb	r2, [r2, r1]
 8001b64:	0052      	lsls	r2, r2, #1
 8001b66:	4497      	add	pc, r2
 8001b68:	c0c00bcb 	.word	0xc0c00bcb
 8001b6c:	5b22c020 	.word	0x5b22c020
 8001b70:	c0413449 	.word	0xc0413449
 8001b74:	bec3c319 	.word	0xbec3c319
 8001b78:	9fb7936f 	.word	0x9fb7936f
 8001b7c:	bac383b0 	.word	0xbac383b0
 8001b80:	6860      	ldr	r0, [r4, #4]
 8001b82:	6800      	ldr	r0, [r0, #0]
 8001b84:	0880      	lsrs	r0, r0, #2
 8001b86:	4005      	ands	r5, r0
 8001b88:	d000      	beq.n	8001b8c <PE_Check_ControlMessage+0x48>
 8001b8a:	e0b9      	b.n	8001d00 <PE_Check_ControlMessage+0x1bc>
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	7720      	strb	r0, [r4, #28]
 8001b90:	212b      	movs	r1, #43	; 0x2b
 8001b92:	7c20      	ldrb	r0, [r4, #16]
 8001b94:	f7fe fcc8 	bl	8000528 <USBPD_PE_Notification>
 8001b98:	2098      	movs	r0, #152	; 0x98
 8001b9a:	e0a7      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001b9c:	7726      	strb	r6, [r4, #28]
 8001b9e:	2132      	movs	r1, #50	; 0x32
 8001ba0:	7c20      	ldrb	r0, [r4, #16]
 8001ba2:	f7fe fcc1 	bl	8000528 <USBPD_PE_Notification>
 8001ba6:	2010      	movs	r0, #16
 8001ba8:	e0a0      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001baa:	2133      	movs	r1, #51	; 0x33
 8001bac:	e09c      	b.n	8001ce8 <PE_Check_ControlMessage+0x1a4>
 8001bae:	2006      	movs	r0, #6
 8001bb0:	7720      	strb	r0, [r4, #28]
 8001bb2:	6860      	ldr	r0, [r4, #4]
 8001bb4:	6800      	ldr	r0, [r0, #0]
 8001bb6:	0881      	lsrs	r1, r0, #2
 8001bb8:	4029      	ands	r1, r5
 8001bba:	d104      	bne.n	8001bc6 <PE_Check_ControlMessage+0x82>
 8001bbc:	6821      	ldr	r1, [r4, #0]
 8001bbe:	6849      	ldr	r1, [r1, #4]
 8001bc0:	08c9      	lsrs	r1, r1, #3
 8001bc2:	4029      	ands	r1, r5
 8001bc4:	d039      	beq.n	8001c3a <PE_Check_ControlMessage+0xf6>
 8001bc6:	210c      	movs	r1, #12
 8001bc8:	7c20      	ldrb	r0, [r4, #16]
 8001bca:	f7fe fcad 	bl	8000528 <USBPD_PE_Notification>
 8001bce:	204c      	movs	r0, #76	; 0x4c
 8001bd0:	e08c      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4028      	ands	r0, r5
 8001bda:	d00a      	beq.n	8001bf2 <PE_Check_ControlMessage+0xae>
 8001bdc:	2008      	movs	r0, #8
 8001bde:	7720      	strb	r0, [r4, #28]
 8001be0:	213c      	movs	r1, #60	; 0x3c
 8001be2:	7c20      	ldrb	r0, [r4, #16]
 8001be4:	f7fe fca0 	bl	8000528 <USBPD_PE_Notification>
 8001be8:	2022      	movs	r0, #34	; 0x22
 8001bea:	e07f      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001bec:	68a0      	ldr	r0, [r4, #8]
 8001bee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d07d      	beq.n	8001cf0 <PE_Check_ControlMessage+0x1ac>
 8001bf4:	2011      	movs	r0, #17
 8001bf6:	7720      	strb	r0, [r4, #28]
 8001bf8:	209d      	movs	r0, #157	; 0x9d
 8001bfa:	e077      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001bfc:	2123      	movs	r1, #35	; 0x23
 8001bfe:	7c20      	ldrb	r0, [r4, #16]
 8001c00:	f7fe fc92 	bl	8000528 <USBPD_PE_Notification>
 8001c04:	6960      	ldr	r0, [r4, #20]
 8001c06:	05c0      	lsls	r0, r0, #23
 8001c08:	0f40      	lsrs	r0, r0, #29
 8001c0a:	d001      	beq.n	8001c10 <PE_Check_ControlMessage+0xcc>
 8001c0c:	200f      	movs	r0, #15
 8001c0e:	e06d      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001c10:	68a0      	ldr	r0, [r4, #8]
 8001c12:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d06b      	beq.n	8001cf0 <PE_Check_ControlMessage+0x1ac>
 8001c18:	2010      	movs	r0, #16
 8001c1a:	7720      	strb	r0, [r4, #28]
 8001c1c:	2093      	movs	r0, #147	; 0x93
 8001c1e:	e065      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001c20:	6860      	ldr	r0, [r4, #4]
 8001c22:	6800      	ldr	r0, [r0, #0]
 8001c24:	0541      	lsls	r1, r0, #21
 8001c26:	0f49      	lsrs	r1, r1, #29
 8001c28:	2903      	cmp	r1, #3
 8001c2a:	d163      	bne.n	8001cf4 <PE_Check_ControlMessage+0x1b0>
 8001c2c:	0881      	lsrs	r1, r0, #2
 8001c2e:	4029      	ands	r1, r5
 8001c30:	d004      	beq.n	8001c3c <PE_Check_ControlMessage+0xf8>
 8001c32:	6821      	ldr	r1, [r4, #0]
 8001c34:	6849      	ldr	r1, [r1, #4]
 8001c36:	08c9      	lsrs	r1, r1, #3
 8001c38:	4029      	ands	r1, r5
 8001c3a:	d05b      	beq.n	8001cf4 <PE_Check_ControlMessage+0x1b0>
 8001c3c:	2007      	movs	r0, #7
 8001c3e:	7720      	strb	r0, [r4, #28]
 8001c40:	201d      	movs	r0, #29
 8001c42:	7460      	strb	r0, [r4, #17]
 8001c44:	2106      	movs	r1, #6
 8001c46:	e04f      	b.n	8001ce8 <PE_Check_ControlMessage+0x1a4>
 8001c48:	6820      	ldr	r0, [r4, #0]
 8001c4a:	8901      	ldrh	r1, [r0, #8]
 8001c4c:	08c9      	lsrs	r1, r1, #3
 8001c4e:	4229      	tst	r1, r5
 8001c50:	d053      	beq.n	8001cfa <PE_Check_ControlMessage+0x1b6>
 8001c52:	6861      	ldr	r1, [r4, #4]
 8001c54:	6809      	ldr	r1, [r1, #0]
 8001c56:	0889      	lsrs	r1, r1, #2
 8001c58:	4029      	ands	r1, r5
 8001c5a:	d103      	bne.n	8001c64 <PE_Check_ControlMessage+0x120>
 8001c5c:	6840      	ldr	r0, [r0, #4]
 8001c5e:	08c0      	lsrs	r0, r0, #3
 8001c60:	4028      	ands	r0, r5
 8001c62:	d04a      	beq.n	8001cfa <PE_Check_ControlMessage+0x1b6>
 8001c64:	200a      	movs	r0, #10
 8001c66:	7720      	strb	r0, [r4, #28]
 8001c68:	2063      	movs	r0, #99	; 0x63
 8001c6a:	7460      	strb	r0, [r4, #17]
 8001c6c:	2146      	movs	r1, #70	; 0x46
 8001c6e:	e03b      	b.n	8001ce8 <PE_Check_ControlMessage+0x1a4>
 8001c70:	6860      	ldr	r0, [r4, #4]
 8001c72:	6800      	ldr	r0, [r0, #0]
 8001c74:	0880      	lsrs	r0, r0, #2
 8001c76:	4028      	ands	r0, r5
 8001c78:	d004      	beq.n	8001c84 <PE_Check_ControlMessage+0x140>
 8001c7a:	6820      	ldr	r0, [r4, #0]
 8001c7c:	6840      	ldr	r0, [r0, #4]
 8001c7e:	08c0      	lsrs	r0, r0, #3
 8001c80:	4028      	ands	r0, r5
 8001c82:	d03a      	beq.n	8001cfa <PE_Check_ControlMessage+0x1b6>
 8001c84:	205f      	movs	r0, #95	; 0x5f
 8001c86:	7720      	strb	r0, [r4, #28]
 8001c88:	2064      	movs	r0, #100	; 0x64
 8001c8a:	7460      	strb	r0, [r4, #17]
 8001c8c:	2160      	movs	r1, #96	; 0x60
 8001c8e:	e02b      	b.n	8001ce8 <PE_Check_ControlMessage+0x1a4>
 8001c90:	6821      	ldr	r1, [r4, #0]
 8001c92:	8909      	ldrh	r1, [r1, #8]
 8001c94:	0949      	lsrs	r1, r1, #5
 8001c96:	4229      	tst	r1, r5
 8001c98:	d02f      	beq.n	8001cfa <PE_Check_ControlMessage+0x1b6>
 8001c9a:	7720      	strb	r0, [r4, #28]
 8001c9c:	214d      	movs	r1, #77	; 0x4d
 8001c9e:	7c20      	ldrb	r0, [r4, #16]
 8001ca0:	f7fe fc42 	bl	8000528 <USBPD_PE_Notification>
 8001ca4:	2030      	movs	r0, #48	; 0x30
 8001ca6:	e021      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001ca8:	6821      	ldr	r1, [r4, #0]
 8001caa:	8909      	ldrh	r1, [r1, #8]
 8001cac:	0889      	lsrs	r1, r1, #2
 8001cae:	4229      	tst	r1, r5
 8001cb0:	d023      	beq.n	8001cfa <PE_Check_ControlMessage+0x1b6>
 8001cb2:	7720      	strb	r0, [r4, #28]
 8001cb4:	2149      	movs	r1, #73	; 0x49
 8001cb6:	7c20      	ldrb	r0, [r4, #16]
 8001cb8:	f7fe fc36 	bl	8000528 <USBPD_PE_Notification>
 8001cbc:	6860      	ldr	r0, [r4, #4]
 8001cbe:	6800      	ldr	r0, [r0, #0]
 8001cc0:	0880      	lsrs	r0, r0, #2
 8001cc2:	4005      	ands	r5, r0
 8001cc4:	d011      	beq.n	8001cea <PE_Check_ControlMessage+0x1a6>
 8001cc6:	202d      	movs	r0, #45	; 0x2d
 8001cc8:	e010      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001cca:	6820      	ldr	r0, [r4, #0]
 8001ccc:	8900      	ldrh	r0, [r0, #8]
 8001cce:	09c0      	lsrs	r0, r0, #7
 8001cd0:	4228      	tst	r0, r5
 8001cd2:	d012      	beq.n	8001cfa <PE_Check_ControlMessage+0x1b6>
 8001cd4:	202f      	movs	r0, #47	; 0x2f
 8001cd6:	e009      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001cd8:	2009      	movs	r0, #9
 8001cda:	7720      	strb	r0, [r4, #28]
 8001cdc:	e00d      	b.n	8001cfa <PE_Check_ControlMessage+0x1b6>
 8001cde:	200f      	movs	r0, #15
 8001ce0:	7720      	strb	r0, [r4, #28]
 8001ce2:	204b      	movs	r0, #75	; 0x4b
 8001ce4:	e002      	b.n	8001cec <PE_Check_ControlMessage+0x1a8>
 8001ce6:	2159      	movs	r1, #89	; 0x59
 8001ce8:	e00b      	b.n	8001d02 <.text_21>
 8001cea:	2011      	movs	r0, #17
 8001cec:	7460      	strb	r0, [r4, #17]
 8001cee:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001cf0:	6860      	ldr	r0, [r4, #4]
 8001cf2:	6800      	ldr	r0, [r0, #0]
 8001cf4:	4006      	ands	r6, r0
 8001cf6:	2e02      	cmp	r6, #2
 8001cf8:	d101      	bne.n	8001cfe <PE_Check_ControlMessage+0x1ba>
 8001cfa:	7465      	strb	r5, [r4, #17]
 8001cfc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001cfe:	7467      	strb	r7, [r4, #17]
 8001d00:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001d02 <.text_21>:
 8001d02:	7c20      	ldrb	r0, [r4, #16]
 8001d04:	f7fe fc10 	bl	8000528 <USBPD_PE_Notification>
 8001d08:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001d0a <PE_Check_DataMessage>:
 8001d0a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001d0c:	0004      	movs	r4, r0
 8001d0e:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001d10:	2501      	movs	r5, #1
 8001d12:	2603      	movs	r6, #3
 8001d14:	2700      	movs	r7, #0
 8001d16:	06c1      	lsls	r1, r0, #27
 8001d18:	0ec9      	lsrs	r1, r1, #27
 8001d1a:	2901      	cmp	r1, #1
 8001d1c:	d027      	beq.n	8001d6e <PE_Check_DataMessage+0x64>
 8001d1e:	2902      	cmp	r1, #2
 8001d20:	d009      	beq.n	8001d36 <PE_Check_DataMessage+0x2c>
 8001d22:	2903      	cmp	r1, #3
 8001d24:	d03b      	beq.n	8001d9e <PE_Check_DataMessage+0x94>
 8001d26:	2906      	cmp	r1, #6
 8001d28:	d077      	beq.n	8001e1a <PE_Check_DataMessage+0x110>
 8001d2a:	2907      	cmp	r1, #7
 8001d2c:	d100      	bne.n	8001d30 <PE_Check_DataMessage+0x26>
 8001d2e:	e083      	b.n	8001e38 <PE_Check_DataMessage+0x12e>
 8001d30:	290f      	cmp	r1, #15
 8001d32:	d06e      	beq.n	8001e12 <PE_Check_DataMessage+0x108>
 8001d34:	e089      	b.n	8001e4a <PE_Check_DataMessage+0x140>
 8001d36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d38:	7881      	ldrb	r1, [r0, #2]
 8001d3a:	78c2      	ldrb	r2, [r0, #3]
 8001d3c:	0212      	lsls	r2, r2, #8
 8001d3e:	1889      	adds	r1, r1, r2
 8001d40:	7902      	ldrb	r2, [r0, #4]
 8001d42:	0412      	lsls	r2, r2, #16
 8001d44:	1889      	adds	r1, r1, r2
 8001d46:	7940      	ldrb	r0, [r0, #5]
 8001d48:	0600      	lsls	r0, r0, #24
 8001d4a:	1808      	adds	r0, r1, r0
 8001d4c:	9000      	str	r0, [sp, #0]
 8001d4e:	6860      	ldr	r0, [r4, #4]
 8001d50:	6800      	ldr	r0, [r0, #0]
 8001d52:	0880      	lsrs	r0, r0, #2
 8001d54:	4028      	ands	r0, r5
 8001d56:	d07a      	beq.n	8001e4e <PE_Check_DataMessage+0x144>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	466a      	mov	r2, sp
 8001d5c:	2106      	movs	r1, #6
 8001d5e:	7c20      	ldrb	r0, [r4, #16]
 8001d60:	68a6      	ldr	r6, [r4, #8]
 8001d62:	69b6      	ldr	r6, [r6, #24]
 8001d64:	47b0      	blx	r6
 8001d66:	7725      	strb	r5, [r4, #28]
 8001d68:	84a7      	strh	r7, [r4, #36]	; 0x24
 8001d6a:	2009      	movs	r0, #9
 8001d6c:	e06e      	b.n	8001e4c <PE_Check_DataMessage+0x142>
 8001d6e:	6861      	ldr	r1, [r4, #4]
 8001d70:	6809      	ldr	r1, [r1, #0]
 8001d72:	0889      	lsrs	r1, r1, #2
 8001d74:	400d      	ands	r5, r1
 8001d76:	d16a      	bne.n	8001e4e <PE_Check_DataMessage+0x144>
 8001d78:	0980      	lsrs	r0, r0, #6
 8001d7a:	4006      	ands	r6, r0
 8001d7c:	0031      	movs	r1, r6
 8001d7e:	7c20      	ldrb	r0, [r4, #16]
 8001d80:	f7fe ff8c 	bl	8000c9c <PE_ExtRevisionInteroperability>
 8001d84:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001d86:	0440      	lsls	r0, r0, #17
 8001d88:	0f40      	lsrs	r0, r0, #29
 8001d8a:	0083      	lsls	r3, r0, #2
 8001d8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d8e:	1c82      	adds	r2, r0, #2
 8001d90:	2104      	movs	r1, #4
 8001d92:	7c20      	ldrb	r0, [r4, #16]
 8001d94:	68a5      	ldr	r5, [r4, #8]
 8001d96:	69ad      	ldr	r5, [r5, #24]
 8001d98:	47a8      	blx	r5
 8001d9a:	2044      	movs	r0, #68	; 0x44
 8001d9c:	e056      	b.n	8001e4c <PE_Check_DataMessage+0x142>
 8001d9e:	9701      	str	r7, [sp, #4]
 8001da0:	9700      	str	r7, [sp, #0]
 8001da2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001da4:	7881      	ldrb	r1, [r0, #2]
 8001da6:	78c2      	ldrb	r2, [r0, #3]
 8001da8:	0212      	lsls	r2, r2, #8
 8001daa:	1889      	adds	r1, r1, r2
 8001dac:	7902      	ldrb	r2, [r0, #4]
 8001dae:	0412      	lsls	r2, r2, #16
 8001db0:	1889      	adds	r1, r1, r2
 8001db2:	7940      	ldrb	r0, [r0, #5]
 8001db4:	0600      	lsls	r0, r0, #24
 8001db6:	180d      	adds	r5, r1, r0
 8001db8:	466b      	mov	r3, sp
 8001dba:	aa01      	add	r2, sp, #4
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	7c20      	ldrb	r0, [r4, #16]
 8001dc0:	68a7      	ldr	r7, [r4, #8]
 8001dc2:	697f      	ldr	r7, [r7, #20]
 8001dc4:	47b8      	blx	r7
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	9800      	ldr	r0, [sp, #0]
 8001dca:	f7ff fb93 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d11d      	bne.n	8001e0e <PE_Check_DataMessage+0x104>
 8001dd2:	6860      	ldr	r0, [r4, #4]
 8001dd4:	6800      	ldr	r0, [r0, #0]
 8001dd6:	0540      	lsls	r0, r0, #21
 8001dd8:	0f40      	lsrs	r0, r0, #29
 8001dda:	2803      	cmp	r0, #3
 8001ddc:	d117      	bne.n	8001e0e <PE_Check_DataMessage+0x104>
 8001dde:	9801      	ldr	r0, [sp, #4]
 8001de0:	4938      	ldr	r1, [pc, #224]	; (8001ec4 <.text_24>)
 8001de2:	4288      	cmp	r0, r1
 8001de4:	d113      	bne.n	8001e0e <PE_Check_DataMessage+0x104>
 8001de6:	0f28      	lsrs	r0, r5, #28
 8001de8:	2805      	cmp	r0, #5
 8001dea:	d00e      	beq.n	8001e0a <PE_Check_DataMessage+0x100>
 8001dec:	2808      	cmp	r0, #8
 8001dee:	d00a      	beq.n	8001e06 <PE_Check_DataMessage+0xfc>
 8001df0:	2809      	cmp	r0, #9
 8001df2:	d003      	beq.n	8001dfc <PE_Check_DataMessage+0xf2>
 8001df4:	280a      	cmp	r0, #10
 8001df6:	d12a      	bne.n	8001e4e <PE_Check_DataMessage+0x144>
 8001df8:	2166      	movs	r1, #102	; 0x66
 8001dfa:	e000      	b.n	8001dfe <PE_Check_DataMessage+0xf4>
 8001dfc:	2165      	movs	r1, #101	; 0x65
 8001dfe:	7c20      	ldrb	r0, [r4, #16]
 8001e00:	f7fe fb92 	bl	8000528 <USBPD_PE_Notification>
 8001e04:	e003      	b.n	8001e0e <PE_Check_DataMessage+0x104>
 8001e06:	2029      	movs	r0, #41	; 0x29
 8001e08:	e020      	b.n	8001e4c <PE_Check_DataMessage+0x142>
 8001e0a:	2027      	movs	r0, #39	; 0x27
 8001e0c:	e01e      	b.n	8001e4c <PE_Check_DataMessage+0x142>
 8001e0e:	7466      	strb	r6, [r4, #17]
 8001e10:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001e12:	0020      	movs	r0, r4
 8001e14:	f003 fb26 	bl	8005464 <PE_Check_DataMessageVDM>
 8001e18:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001e1a:	6820      	ldr	r0, [r4, #0]
 8001e1c:	8900      	ldrh	r0, [r0, #8]
 8001e1e:	0900      	lsrs	r0, r0, #4
 8001e20:	4228      	tst	r0, r5
 8001e22:	d010      	beq.n	8001e46 <PE_Check_DataMessage+0x13c>
 8001e24:	2304      	movs	r3, #4
 8001e26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e28:	1c82      	adds	r2, r0, #2
 8001e2a:	210b      	movs	r1, #11
 8001e2c:	7c20      	ldrb	r0, [r4, #16]
 8001e2e:	68a5      	ldr	r5, [r4, #8]
 8001e30:	69ad      	ldr	r5, [r5, #24]
 8001e32:	47a8      	blx	r5
 8001e34:	202c      	movs	r0, #44	; 0x2c
 8001e36:	e009      	b.n	8001e4c <PE_Check_DataMessage+0x142>
 8001e38:	6820      	ldr	r0, [r4, #0]
 8001e3a:	8900      	ldrh	r0, [r0, #8]
 8001e3c:	0a00      	lsrs	r0, r0, #8
 8001e3e:	4228      	tst	r0, r5
 8001e40:	d001      	beq.n	8001e46 <PE_Check_DataMessage+0x13c>
 8001e42:	203d      	movs	r0, #61	; 0x3d
 8001e44:	e002      	b.n	8001e4c <PE_Check_DataMessage+0x142>
 8001e46:	7465      	strb	r5, [r4, #17]
 8001e48:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001e4a:	2011      	movs	r0, #17
 8001e4c:	7460      	strb	r0, [r4, #17]
 8001e4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001e50 <PE_CheckSendMessageStatus>:
 8001e50:	b510      	push	{r4, lr}
 8001e52:	000c      	movs	r4, r1
 8001e54:	2110      	movs	r1, #16
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d006      	beq.n	8001e68 <PE_CheckSendMessageStatus+0x18>
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d00e      	beq.n	8001e7c <PE_CheckSendMessageStatus+0x2c>
 8001e5e:	2b07      	cmp	r3, #7
 8001e60:	d011      	beq.n	8001e86 <PE_CheckSendMessageStatus+0x36>
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	d008      	beq.n	8001e78 <PE_CheckSendMessageStatus+0x28>
 8001e66:	e02a      	b.n	8001ebe <PE_CheckSendMessageStatus+0x6e>
 8001e68:	9902      	ldr	r1, [sp, #8]
 8001e6a:	7441      	strb	r1, [r0, #17]
 8001e6c:	6941      	ldr	r1, [r0, #20]
 8001e6e:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <.text_25>)
 8001e70:	400a      	ands	r2, r1
 8001e72:	6142      	str	r2, [r0, #20]
 8001e74:	2100      	movs	r1, #0
 8001e76:	e022      	b.n	8001ebe <PE_CheckSendMessageStatus+0x6e>
 8001e78:	2109      	movs	r1, #9
 8001e7a:	e020      	b.n	8001ebe <PE_CheckSendMessageStatus+0x6e>
 8001e7c:	6942      	ldr	r2, [r0, #20]
 8001e7e:	024b      	lsls	r3, r1, #9
 8001e80:	4313      	orrs	r3, r2
 8001e82:	6143      	str	r3, [r0, #20]
 8001e84:	e01b      	b.n	8001ebe <PE_CheckSendMessageStatus+0x6e>
 8001e86:	2c00      	cmp	r4, #0
 8001e88:	d005      	beq.n	8001e96 <PE_CheckSendMessageStatus+0x46>
 8001e8a:	2a01      	cmp	r2, #1
 8001e8c:	d101      	bne.n	8001e92 <PE_CheckSendMessageStatus+0x42>
 8001e8e:	2299      	movs	r2, #153	; 0x99
 8001e90:	e014      	b.n	8001ebc <PE_CheckSendMessageStatus+0x6c>
 8001e92:	2107      	movs	r1, #7
 8001e94:	e013      	b.n	8001ebe <PE_CheckSendMessageStatus+0x6e>
 8001e96:	6844      	ldr	r4, [r0, #4]
 8001e98:	6824      	ldr	r4, [r4, #0]
 8001e9a:	0a24      	lsrs	r4, r4, #8
 8001e9c:	4023      	ands	r3, r4
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d003      	beq.n	8001eaa <PE_CheckSendMessageStatus+0x5a>
 8001ea2:	2a01      	cmp	r2, #1
 8001ea4:	d109      	bne.n	8001eba <PE_CheckSendMessageStatus+0x6a>
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	e008      	b.n	8001ebc <PE_CheckSendMessageStatus+0x6c>
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	d1fb      	bne.n	8001ea6 <PE_CheckSendMessageStatus+0x56>
 8001eae:	6882      	ldr	r2, [r0, #8]
 8001eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d0f7      	beq.n	8001ea6 <PE_CheckSendMessageStatus+0x56>
 8001eb6:	2292      	movs	r2, #146	; 0x92
 8001eb8:	e000      	b.n	8001ebc <PE_CheckSendMessageStatus+0x6c>
 8001eba:	2211      	movs	r2, #17
 8001ebc:	7442      	strb	r2, [r0, #17]
 8001ebe:	0008      	movs	r0, r1
 8001ec0:	bd10      	pop	{r4, pc}
	...

08001ec4 <.text_24>:
 8001ec4:	00001388 	.word	0x00001388

08001ec8 <.text_25>:
 8001ec8:	ffffbfff 	.word	0xffffbfff

08001ecc <USBPD_PE_StateMachine_SNK>:
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	b08e      	sub	sp, #56	; 0x38
 8001ed0:	0004      	movs	r4, r0
 8001ed2:	482e      	ldr	r0, [pc, #184]	; (8001f8c <USBPD_PE_StateMachine_SNK+0xc0>)
 8001ed4:	00a1      	lsls	r1, r4, #2
 8001ed6:	5845      	ldr	r5, [r0, r1]
 8001ed8:	2000      	movs	r0, #0
 8001eda:	9004      	str	r0, [sp, #16]
 8001edc:	8be8      	ldrh	r0, [r5, #30]
 8001ede:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8001ee0:	050a      	lsls	r2, r1, #20
 8001ee2:	0f52      	lsrs	r2, r2, #29
 8001ee4:	1880      	adds	r0, r0, r2
 8001ee6:	06c9      	lsls	r1, r1, #27
 8001ee8:	0ec9      	lsrs	r1, r1, #27
 8001eea:	1846      	adds	r6, r0, r1
 8001eec:	b2b6      	uxth	r6, r6
 8001eee:	7c68      	ldrb	r0, [r5, #17]
 8001ef0:	2848      	cmp	r0, #72	; 0x48
 8001ef2:	d133      	bne.n	8001f5c <USBPD_PE_StateMachine_SNK+0x90>
 8001ef4:	0028      	movs	r0, r5
 8001ef6:	f7fe fe69 	bl	8000bcc <PE_Reset_ZI>
 8001efa:	0028      	movs	r0, r5
 8001efc:	f7fe fe9c 	bl	8000c38 <PE_Reset_Counter>
 8001f00:	6828      	ldr	r0, [r5, #0]
 8001f02:	7900      	ldrb	r0, [r0, #4]
 8001f04:	0783      	lsls	r3, r0, #30
 8001f06:	0f9b      	lsrs	r3, r3, #30
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	7c28      	ldrb	r0, [r5, #16]
 8001f0e:	f003 fc92 	bl	8005836 <USBPD_PRL_SetHeader>
 8001f12:	6868      	ldr	r0, [r5, #4]
 8001f14:	6801      	ldr	r1, [r0, #0]
 8001f16:	2208      	movs	r2, #8
 8001f18:	4391      	bics	r1, r2
 8001f1a:	6001      	str	r1, [r0, #0]
 8001f1c:	6868      	ldr	r0, [r5, #4]
 8001f1e:	6801      	ldr	r1, [r0, #0]
 8001f20:	2203      	movs	r2, #3
 8001f22:	4391      	bics	r1, r2
 8001f24:	682a      	ldr	r2, [r5, #0]
 8001f26:	7912      	ldrb	r2, [r2, #4]
 8001f28:	0792      	lsls	r2, r2, #30
 8001f2a:	0f92      	lsrs	r2, r2, #30
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	6002      	str	r2, [r0, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	7c28      	ldrb	r0, [r5, #16]
 8001f34:	f003 fcf0 	bl	8005918 <USBPD_PRL_SOPCapability>
 8001f38:	7c28      	ldrb	r0, [r5, #16]
 8001f3a:	f003 ff59 	bl	8005df0 <USBPD_PRL_Reset>
 8001f3e:	203e      	movs	r0, #62	; 0x3e
 8001f40:	7468      	strb	r0, [r5, #17]
 8001f42:	7ca9      	ldrb	r1, [r5, #18]
 8001f44:	293e      	cmp	r1, #62	; 0x3e
 8001f46:	d009      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x90>
 8001f48:	74a8      	strb	r0, [r5, #18]
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	9000      	str	r0, [sp, #0]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	223e      	movs	r2, #62	; 0x3e
 8001f52:	7c29      	ldrb	r1, [r5, #16]
 8001f54:	2004      	movs	r0, #4
 8001f56:	4fba      	ldr	r7, [pc, #744]	; (8002240 <__iar_annotation$$branch+0x52>)
 8001f58:	683f      	ldr	r7, [r7, #0]
 8001f5a:	47b8      	blx	r7
 8001f5c:	6968      	ldr	r0, [r5, #20]
 8001f5e:	0341      	lsls	r1, r0, #13
 8001f60:	0fc9      	lsrs	r1, r1, #31
 8001f62:	d006      	beq.n	8001f72 <USBPD_PE_StateMachine_SNK+0xa6>
 8001f64:	49b7      	ldr	r1, [pc, #732]	; (8002244 <__iar_annotation$$branch+0x56>)
 8001f66:	4001      	ands	r1, r0
 8001f68:	6169      	str	r1, [r5, #20]
 8001f6a:	2164      	movs	r1, #100	; 0x64
 8001f6c:	7c28      	ldrb	r0, [r5, #16]
 8001f6e:	f7fe fadb 	bl	8000528 <USBPD_PE_Notification>
 8001f72:	0028      	movs	r0, r5
 8001f74:	f7fe fd0c 	bl	8000990 <PE_Get_RxEvent>
 8001f78:	4669      	mov	r1, sp
 8001f7a:	7308      	strb	r0, [r1, #12]
 8001f7c:	4668      	mov	r0, sp
 8001f7e:	7b00      	ldrb	r0, [r0, #12]
 8001f80:	2803      	cmp	r0, #3
 8001f82:	d105      	bne.n	8001f90 <USBPD_PE_StateMachine_SNK+0xc4>
 8001f84:	2001      	movs	r0, #1
 8001f86:	b00f      	add	sp, #60	; 0x3c
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000228 	.word	0x20000228
 8001f90:	4668      	mov	r0, sp
 8001f92:	7344      	strb	r4, [r0, #13]
 8001f94:	9606      	str	r6, [sp, #24]
 8001f96:	2402      	movs	r4, #2
 8001f98:	6868      	ldr	r0, [r5, #4]
 8001f9a:	6800      	ldr	r0, [r0, #0]
 8001f9c:	04c1      	lsls	r1, r0, #19
 8001f9e:	0fc9      	lsrs	r1, r1, #31
 8001fa0:	d100      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0xd8>
 8001fa2:	e170      	b.n	8002286 <__iar_annotation$$branch+0x98>
 8001fa4:	6968      	ldr	r0, [r5, #20]
 8001fa6:	0381      	lsls	r1, r0, #14
 8001fa8:	0fc9      	lsrs	r1, r1, #31
 8001faa:	d014      	beq.n	8001fd6 <USBPD_PE_StateMachine_SNK+0x10a>
 8001fac:	21a7      	movs	r1, #167	; 0xa7
 8001fae:	7469      	strb	r1, [r5, #17]
 8001fb0:	4aa5      	ldr	r2, [pc, #660]	; (8002248 <__iar_annotation$$branch+0x5a>)
 8001fb2:	4002      	ands	r2, r0
 8001fb4:	616a      	str	r2, [r5, #20]
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	2232      	movs	r2, #50	; 0x32
 8001fba:	54a8      	strb	r0, [r5, r2]
 8001fbc:	7ca8      	ldrb	r0, [r5, #18]
 8001fbe:	28a7      	cmp	r0, #167	; 0xa7
 8001fc0:	d02b      	beq.n	800201a <USBPD_PE_StateMachine_SNK+0x14e>
 8001fc2:	74a9      	strb	r1, [r5, #18]
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	9000      	str	r0, [sp, #0]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	22a7      	movs	r2, #167	; 0xa7
 8001fcc:	7c29      	ldrb	r1, [r5, #16]
 8001fce:	2004      	movs	r0, #4
 8001fd0:	4e9b      	ldr	r6, [pc, #620]	; (8002240 <__iar_annotation$$branch+0x52>)
 8001fd2:	6836      	ldr	r6, [r6, #0]
 8001fd4:	47b0      	blx	r6
 8001fd6:	2032      	movs	r0, #50	; 0x32
 8001fd8:	5c28      	ldrb	r0, [r5, r0]
 8001fda:	280f      	cmp	r0, #15
 8001fdc:	d001      	beq.n	8001fe2 <USBPD_PE_StateMachine_SNK+0x116>
 8001fde:	2814      	cmp	r0, #20
 8001fe0:	d11b      	bne.n	800201a <USBPD_PE_StateMachine_SNK+0x14e>
 8001fe2:	4668      	mov	r0, sp
 8001fe4:	7b00      	ldrb	r0, [r0, #12]
 8001fe6:	2814      	cmp	r0, #20
 8001fe8:	d005      	beq.n	8001ff6 <USBPD_PE_StateMachine_SNK+0x12a>
 8001fea:	2014      	movs	r0, #20
 8001fec:	4669      	mov	r1, sp
 8001fee:	7308      	strb	r0, [r1, #12]
 8001ff0:	0028      	movs	r0, r5
 8001ff2:	f7fe fd04 	bl	80009fe <PE_Clear_RxEvent>
 8001ff6:	2032      	movs	r0, #50	; 0x32
 8001ff8:	5c2a      	ldrb	r2, [r5, r0]
 8001ffa:	746a      	strb	r2, [r5, #17]
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	2132      	movs	r1, #50	; 0x32
 8002000:	5468      	strb	r0, [r5, r1]
 8002002:	7ca8      	ldrb	r0, [r5, #18]
 8002004:	4290      	cmp	r0, r2
 8002006:	d008      	beq.n	800201a <USBPD_PE_StateMachine_SNK+0x14e>
 8002008:	74aa      	strb	r2, [r5, #18]
 800200a:	2000      	movs	r0, #0
 800200c:	9000      	str	r0, [sp, #0]
 800200e:	2300      	movs	r3, #0
 8002010:	7c29      	ldrb	r1, [r5, #16]
 8002012:	2004      	movs	r0, #4
 8002014:	4e8a      	ldr	r6, [pc, #552]	; (8002240 <__iar_annotation$$branch+0x52>)
 8002016:	6836      	ldr	r6, [r6, #0]
 8002018:	47b0      	blx	r6
 800201a:	4668      	mov	r0, sp
 800201c:	7b00      	ldrb	r0, [r0, #12]
 800201e:	2811      	cmp	r0, #17
 8002020:	d11e      	bne.n	8002060 <USBPD_PE_StateMachine_SNK+0x194>
 8002022:	6868      	ldr	r0, [r5, #4]
 8002024:	6800      	ldr	r0, [r0, #0]
 8002026:	0701      	lsls	r1, r0, #28
 8002028:	0fc9      	lsrs	r1, r1, #31
 800202a:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800202c:	0680      	lsls	r0, r0, #26
 800202e:	0fc2      	lsrs	r2, r0, #31
 8002030:	4291      	cmp	r1, r2
 8002032:	d115      	bne.n	8002060 <USBPD_PE_StateMachine_SNK+0x194>
 8002034:	2014      	movs	r0, #20
 8002036:	4669      	mov	r1, sp
 8002038:	7308      	strb	r0, [r1, #12]
 800203a:	0028      	movs	r0, r5
 800203c:	f7fe fcdf 	bl	80009fe <PE_Clear_RxEvent>
 8002040:	2092      	movs	r0, #146	; 0x92
 8002042:	7468      	strb	r0, [r5, #17]
 8002044:	7ca8      	ldrb	r0, [r5, #18]
 8002046:	2892      	cmp	r0, #146	; 0x92
 8002048:	d00a      	beq.n	8002060 <USBPD_PE_StateMachine_SNK+0x194>
 800204a:	2092      	movs	r0, #146	; 0x92
 800204c:	74a8      	strb	r0, [r5, #18]
 800204e:	2000      	movs	r0, #0
 8002050:	9000      	str	r0, [sp, #0]
 8002052:	2300      	movs	r3, #0
 8002054:	2292      	movs	r2, #146	; 0x92
 8002056:	7c29      	ldrb	r1, [r5, #16]
 8002058:	2004      	movs	r0, #4
 800205a:	4e79      	ldr	r6, [pc, #484]	; (8002240 <__iar_annotation$$branch+0x52>)
 800205c:	6836      	ldr	r6, [r6, #0]
 800205e:	47b0      	blx	r6
 8002060:	9806      	ldr	r0, [sp, #24]
 8002062:	2800      	cmp	r0, #0
 8002064:	d001      	beq.n	800206a <USBPD_PE_StateMachine_SNK+0x19e>
 8002066:	2001      	movs	r0, #1
 8002068:	9004      	str	r0, [sp, #16]
 800206a:	7c68      	ldrb	r0, [r5, #17]
 800206c:	4669      	mov	r1, sp
 800206e:	7008      	strb	r0, [r1, #0]
 8002070:	4f76      	ldr	r7, [pc, #472]	; (800224c <__iar_annotation$$branch+0x5e>)
 8002072:	20f0      	movs	r0, #240	; 0xf0
 8002074:	0200      	lsls	r0, r0, #8
 8002076:	4e76      	ldr	r6, [pc, #472]	; (8002250 <__iar_annotation$$branch+0x62>)
 8002078:	2104      	movs	r1, #4
 800207a:	466a      	mov	r2, sp
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	2a00      	cmp	r2, #0
 8002080:	d100      	bne.n	8002084 <USBPD_PE_StateMachine_SNK+0x1b8>
 8002082:	e104      	b.n	800228e <__iar_annotation$$branch+0xa0>
 8002084:	1e52      	subs	r2, r2, #1
 8002086:	d041      	beq.n	800210c <__iar_annotation$$branch+0x8>
 8002088:	1e92      	subs	r2, r2, #2
 800208a:	2a01      	cmp	r2, #1
 800208c:	d800      	bhi.n	8002090 <USBPD_PE_StateMachine_SNK+0x1c4>
 800208e:	e34e      	b.n	800272e <__iar_annotation$$branch+0x540>
 8002090:	1e92      	subs	r2, r2, #2
 8002092:	d100      	bne.n	8002096 <USBPD_PE_StateMachine_SNK+0x1ca>
 8002094:	e228      	b.n	80024e8 <__iar_annotation$$branch+0x2fa>
 8002096:	3a0a      	subs	r2, #10
 8002098:	d100      	bne.n	800209c <USBPD_PE_StateMachine_SNK+0x1d0>
 800209a:	e22a      	b.n	80024f2 <__iar_annotation$$branch+0x304>
 800209c:	1e52      	subs	r2, r2, #1
 800209e:	d100      	bne.n	80020a2 <USBPD_PE_StateMachine_SNK+0x1d6>
 80020a0:	e2c4      	b.n	800262c <__iar_annotation$$branch+0x43e>
 80020a2:	1e52      	subs	r2, r2, #1
 80020a4:	d100      	bne.n	80020a8 <USBPD_PE_StateMachine_SNK+0x1dc>
 80020a6:	e2ce      	b.n	8002646 <__iar_annotation$$branch+0x458>
 80020a8:	1ed2      	subs	r2, r2, #3
 80020aa:	d100      	bne.n	80020ae <USBPD_PE_StateMachine_SNK+0x1e2>
 80020ac:	e255      	b.n	800255a <__iar_annotation$$branch+0x36c>
 80020ae:	1f12      	subs	r2, r2, #4
 80020b0:	2a01      	cmp	r2, #1
 80020b2:	d92b      	bls.n	800210c <__iar_annotation$$branch+0x8>
 80020b4:	1e92      	subs	r2, r2, #2
 80020b6:	d100      	bne.n	80020ba <USBPD_PE_StateMachine_SNK+0x1ee>
 80020b8:	e2fd      	b.n	80026b6 <__iar_annotation$$branch+0x4c8>
 80020ba:	1ed2      	subs	r2, r2, #3
 80020bc:	d026      	beq.n	800210c <__iar_annotation$$branch+0x8>
 80020be:	1e52      	subs	r2, r2, #1
 80020c0:	d101      	bne.n	80020c6 <__iar_annotation$$branch+0x4>

080020c2 <__iar_annotation$$branch>:
 80020c2:	f000 fbee 	bl	80028a2 <__iar_annotation$$branch+0x6b4>
 80020c6:	1f12      	subs	r2, r2, #4
 80020c8:	d100      	bne.n	80020cc <__iar_annotation$$branch+0xa>
 80020ca:	e340      	b.n	800274e <__iar_annotation$$branch+0x560>
 80020cc:	1f52      	subs	r2, r2, #5
 80020ce:	2a02      	cmp	r2, #2
 80020d0:	d91c      	bls.n	800210c <__iar_annotation$$branch+0x8>
 80020d2:	1ed2      	subs	r2, r2, #3
 80020d4:	d100      	bne.n	80020d8 <__iar_annotation$$branch+0x16>
 80020d6:	e321      	b.n	800271c <__iar_annotation$$branch+0x52e>
 80020d8:	1e52      	subs	r2, r2, #1
 80020da:	d101      	bne.n	80020e0 <__iar_annotation$$branch+0x4>

080020dc <__iar_annotation$$branch>:
 80020dc:	f000 fc63 	bl	80029a6 <__iar_annotation$$branch+0x7b8>
 80020e0:	1e52      	subs	r2, r2, #1
 80020e2:	d013      	beq.n	800210c <__iar_annotation$$branch+0x8>
 80020e4:	1e92      	subs	r2, r2, #2
 80020e6:	d101      	bne.n	80020ec <__iar_annotation$$branch+0x4>

080020e8 <__iar_annotation$$branch>:
 80020e8:	f000 fcaa 	bl	8002a40 <__iar_annotation$$branch+0x852>
 80020ec:	1e52      	subs	r2, r2, #1
 80020ee:	2a01      	cmp	r2, #1
 80020f0:	d90c      	bls.n	800210c <__iar_annotation$$branch+0x8>
 80020f2:	1e92      	subs	r2, r2, #2
 80020f4:	d001      	beq.n	80020fa <__iar_annotation$$branch+0x12>
 80020f6:	1e92      	subs	r2, r2, #2
 80020f8:	2a05      	cmp	r2, #5
 80020fa:	d801      	bhi.n	8002100 <__iar_annotation$$branch+0x4>

080020fc <__iar_annotation$$branch>:
 80020fc:	f000 fce6 	bl	8002acc <__iar_annotation$$branch+0x8de>
 8002100:	1f92      	subs	r2, r2, #6
 8002102:	d101      	bne.n	8002108 <__iar_annotation$$branch+0x4>

08002104 <__iar_annotation$$branch>:
 8002104:	f000 fcb0 	bl	8002a68 <__iar_annotation$$branch+0x87a>
 8002108:	1e52      	subs	r2, r2, #1
 800210a:	2a03      	cmp	r2, #3
 800210c:	d801      	bhi.n	8002112 <__iar_annotation$$branch+0x4>

0800210e <__iar_annotation$$branch>:
 800210e:	f000 fce1 	bl	8002ad4 <__iar_annotation$$branch+0x8e6>
 8002112:	1f12      	subs	r2, r2, #4
 8002114:	d100      	bne.n	8002118 <__iar_annotation$$branch+0xa>
 8002116:	e0d2      	b.n	80022be <__iar_annotation$$branch+0xd0>
 8002118:	1e92      	subs	r2, r2, #2
 800211a:	d100      	bne.n	800211e <__iar_annotation$$branch+0x10>
 800211c:	e24d      	b.n	80025ba <__iar_annotation$$branch+0x3cc>
 800211e:	1ed2      	subs	r2, r2, #3
 8002120:	d100      	bne.n	8002124 <__iar_annotation$$branch+0x16>
 8002122:	e0e4      	b.n	80022ee <__iar_annotation$$branch+0x100>
 8002124:	1e52      	subs	r2, r2, #1
 8002126:	d100      	bne.n	800212a <__iar_annotation$$branch+0x1c>
 8002128:	e123      	b.n	8002372 <__iar_annotation$$branch+0x184>
 800212a:	1e52      	subs	r2, r2, #1
 800212c:	d100      	bne.n	8002130 <__iar_annotation$$branch+0x22>
 800212e:	e132      	b.n	8002396 <__iar_annotation$$branch+0x1a8>
 8002130:	1e52      	subs	r2, r2, #1
 8002132:	d100      	bne.n	8002136 <__iar_annotation$$branch+0x28>
 8002134:	e14b      	b.n	80023ce <__iar_annotation$$branch+0x1e0>
 8002136:	1e52      	subs	r2, r2, #1
 8002138:	d100      	bne.n	800213c <__iar_annotation$$branch+0x2e>
 800213a:	e19b      	b.n	8002474 <__iar_annotation$$branch+0x286>
 800213c:	1e92      	subs	r2, r2, #2
 800213e:	d0a5      	beq.n	800208c <USBPD_PE_StateMachine_SNK+0x1c0>
 8002140:	1e92      	subs	r2, r2, #2
 8002142:	d0e3      	beq.n	800210c <__iar_annotation$$branch+0x8>
 8002144:	1e52      	subs	r2, r2, #1
 8002146:	d101      	bne.n	800214c <__iar_annotation$$branch+0x4>

08002148 <__iar_annotation$$branch>:
 8002148:	f000 fc0f 	bl	800296a <__iar_annotation$$branch+0x77c>
 800214c:	1f12      	subs	r2, r2, #4
 800214e:	d100      	bne.n	8002152 <__iar_annotation$$branch+0xa>
 8002150:	e294      	b.n	800267c <__iar_annotation$$branch+0x48e>
 8002152:	1ed2      	subs	r2, r2, #3
 8002154:	d100      	bne.n	8002158 <__iar_annotation$$branch+0x10>
 8002156:	e35e      	b.n	8002816 <__iar_annotation$$branch+0x628>
 8002158:	1f52      	subs	r2, r2, #5
 800215a:	d100      	bne.n	800215e <__iar_annotation$$branch+0x16>
 800215c:	e3b2      	b.n	80028c4 <__iar_annotation$$branch+0x6d6>
 800215e:	1e52      	subs	r2, r2, #1
 8002160:	d100      	bne.n	8002164 <__iar_annotation$$branch+0x1c>
 8002162:	e329      	b.n	80027b8 <__iar_annotation$$branch+0x5ca>
 8002164:	3a09      	subs	r2, #9
 8002166:	2a02      	cmp	r2, #2
 8002168:	d9d0      	bls.n	800210c <__iar_annotation$$branch+0x8>
 800216a:	1ed2      	subs	r2, r2, #3
 800216c:	d101      	bne.n	8002172 <__iar_annotation$$branch+0x4>

0800216e <__iar_annotation$$branch>:
 800216e:	f000 fc2b 	bl	80029c8 <__iar_annotation$$branch+0x7da>
 8002172:	1e52      	subs	r2, r2, #1
 8002174:	d101      	bne.n	800217a <__iar_annotation$$branch+0x4>

08002176 <__iar_annotation$$branch>:
 8002176:	f000 fc39 	bl	80029ec <__iar_annotation$$branch+0x7fe>
 800217a:	1e52      	subs	r2, r2, #1
 800217c:	2a01      	cmp	r2, #1
 800217e:	d9c5      	bls.n	800210c <__iar_annotation$$branch+0x8>
 8002180:	3a0d      	subs	r2, #13
 8002182:	d0c3      	beq.n	800210c <__iar_annotation$$branch+0x8>
 8002184:	3a12      	subs	r2, #18
 8002186:	d101      	bne.n	800218c <__iar_annotation$$branch+0x4>

08002188 <__iar_annotation$$branch>:
 8002188:	f000 fcbc 	bl	8002b04 <__iar_annotation$$branch+0x916>
 800218c:	3a0c      	subs	r2, #12
 800218e:	d100      	bne.n	8002192 <__iar_annotation$$branch+0xa>
 8002190:	e089      	b.n	80022a6 <__iar_annotation$$branch+0xb8>
 8002192:	1e52      	subs	r2, r2, #1
 8002194:	2a02      	cmp	r2, #2
 8002196:	d9b9      	bls.n	800210c <__iar_annotation$$branch+0x8>
 8002198:	1f52      	subs	r2, r2, #5
 800219a:	d100      	bne.n	800219e <__iar_annotation$$branch+0x16>
 800219c:	e29a      	b.n	80026d4 <__iar_annotation$$branch+0x4e6>
 800219e:	1e52      	subs	r2, r2, #1
 80021a0:	d0b4      	beq.n	800210c <__iar_annotation$$branch+0x8>
 80021a2:	1e52      	subs	r2, r2, #1
 80021a4:	d100      	bne.n	80021a8 <__iar_annotation$$branch+0x20>
 80021a6:	e19f      	b.n	80024e8 <__iar_annotation$$branch+0x2fa>
 80021a8:	1e52      	subs	r2, r2, #1
 80021aa:	d100      	bne.n	80021ae <__iar_annotation$$branch+0x26>
 80021ac:	e1e9      	b.n	8002582 <__iar_annotation$$branch+0x394>
 80021ae:	1e52      	subs	r2, r2, #1
 80021b0:	2a08      	cmp	r2, #8
 80021b2:	d801      	bhi.n	80021b8 <__iar_annotation$$branch+0x4>

080021b4 <__iar_annotation$$branch>:
 80021b4:	f000 fc93 	bl	8002ade <__iar_annotation$$branch+0x8f0>
 80021b8:	3a0b      	subs	r2, #11
 80021ba:	d101      	bne.n	80021c0 <__iar_annotation$$branch+0x4>

080021bc <__iar_annotation$$branch>:
 80021bc:	f000 fca8 	bl	8002b10 <__iar_annotation$$branch+0x922>
 80021c0:	a903      	add	r1, sp, #12
 80021c2:	0028      	movs	r0, r5
 80021c4:	f002 fa38 	bl	8004638 <PE_StateMachine_VDM>
 80021c8:	0004      	movs	r4, r0
 80021ca:	7c6a      	ldrb	r2, [r5, #17]
 80021cc:	7ca8      	ldrb	r0, [r5, #18]
 80021ce:	4290      	cmp	r0, r2
 80021d0:	d008      	beq.n	80021e4 <__iar_annotation$$branch+0x28>
 80021d2:	74aa      	strb	r2, [r5, #18]
 80021d4:	2000      	movs	r0, #0
 80021d6:	9000      	str	r0, [sp, #0]
 80021d8:	2300      	movs	r3, #0
 80021da:	7c29      	ldrb	r1, [r5, #16]
 80021dc:	2004      	movs	r0, #4
 80021de:	4e18      	ldr	r6, [pc, #96]	; (8002240 <__iar_annotation$$branch+0x52>)
 80021e0:	6836      	ldr	r6, [r6, #0]
 80021e2:	47b0      	blx	r6
 80021e4:	4e16      	ldr	r6, [pc, #88]	; (8002240 <__iar_annotation$$branch+0x52>)
 80021e6:	4668      	mov	r0, sp
 80021e8:	7b00      	ldrb	r0, [r0, #12]
 80021ea:	2814      	cmp	r0, #20
 80021ec:	d101      	bne.n	80021f2 <__iar_annotation$$branch+0x4>

080021ee <__iar_annotation$$branch>:
 80021ee:	f000 fc9c 	bl	8002b2a <__iar_annotation$$branch+0x93c>
 80021f2:	0028      	movs	r0, r5
 80021f4:	f7fe fc4a 	bl	8000a8c <PE_Check_AMSConflict>
 80021f8:	2815      	cmp	r0, #21
 80021fa:	d109      	bne.n	8002210 <__iar_annotation$$branch+0x22>
 80021fc:	4668      	mov	r0, sp
 80021fe:	7b00      	ldrb	r0, [r0, #12]
 8002200:	2814      	cmp	r0, #20
 8002202:	d005      	beq.n	8002210 <__iar_annotation$$branch+0x22>
 8002204:	2014      	movs	r0, #20
 8002206:	4669      	mov	r1, sp
 8002208:	7308      	strb	r0, [r1, #12]
 800220a:	0028      	movs	r0, r5
 800220c:	f7fe fbf7 	bl	80009fe <PE_Clear_RxEvent>
 8002210:	7c6a      	ldrb	r2, [r5, #17]
 8002212:	7ca8      	ldrb	r0, [r5, #18]
 8002214:	4290      	cmp	r0, r2
 8002216:	d007      	beq.n	8002228 <__iar_annotation$$branch+0x3a>
 8002218:	74aa      	strb	r2, [r5, #18]
 800221a:	2000      	movs	r0, #0
 800221c:	9000      	str	r0, [sp, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	7c29      	ldrb	r1, [r5, #16]
 8002222:	2004      	movs	r0, #4
 8002224:	6834      	ldr	r4, [r6, #0]
 8002226:	47a0      	blx	r4
 8002228:	2400      	movs	r4, #0
 800222a:	6968      	ldr	r0, [r5, #20]
 800222c:	49aa      	ldr	r1, [pc, #680]	; (80024d8 <__iar_annotation$$branch+0x2ea>)
 800222e:	4001      	ands	r1, r0
 8002230:	6169      	str	r1, [r5, #20]
 8002232:	9804      	ldr	r0, [sp, #16]
 8002234:	2800      	cmp	r0, #0
 8002236:	d022      	beq.n	800227e <__iar_annotation$$branch+0x90>
 8002238:	48a8      	ldr	r0, [pc, #672]	; (80024dc <__iar_annotation$$branch+0x2ee>)
 800223a:	6800      	ldr	r0, [r0, #0]
 800223c:	49a8      	ldr	r1, [pc, #672]	; (80024e0 <__iar_annotation$$branch+0x2f2>)
 800223e:	e009      	b.n	8002254 <__iar_annotation$$branch+0x66>
 8002240:	20000000 	.word	0x20000000
 8002244:	fffbffff 	.word	0xfffbffff
 8002248:	fffdffff 	.word	0xfffdffff
 800224c:	000081f4 	.word	0x000081f4
 8002250:	0000801b 	.word	0x0000801b
 8002254:	4288      	cmp	r0, r1
 8002256:	d012      	beq.n	800227e <__iar_annotation$$branch+0x90>
 8002258:	48a2      	ldr	r0, [pc, #648]	; (80024e4 <__iar_annotation$$branch+0x2f6>)
 800225a:	7c29      	ldrb	r1, [r5, #16]
 800225c:	0089      	lsls	r1, r1, #2
 800225e:	5841      	ldr	r1, [r0, r1]
 8002260:	694a      	ldr	r2, [r1, #20]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	031b      	lsls	r3, r3, #12
 8002266:	18d2      	adds	r2, r2, r3
 8002268:	614a      	str	r2, [r1, #20]
 800226a:	7c29      	ldrb	r1, [r5, #16]
 800226c:	0089      	lsls	r1, r1, #2
 800226e:	5840      	ldr	r0, [r0, r1]
 8002270:	6941      	ldr	r1, [r0, #20]
 8002272:	0cca      	lsrs	r2, r1, #19
 8002274:	2a08      	cmp	r2, #8
 8002276:	d302      	bcc.n	800227e <__iar_annotation$$branch+0x90>
 8002278:	0349      	lsls	r1, r1, #13
 800227a:	0b49      	lsrs	r1, r1, #13
 800227c:	6141      	str	r1, [r0, #20]
 800227e:	2c00      	cmp	r4, #0
 8002280:	d100      	bne.n	8002284 <__iar_annotation$$branch+0x96>
 8002282:	e688      	b.n	8001f96 <USBPD_PE_StateMachine_SNK+0xca>
 8002284:	e001      	b.n	800228a <__iar_annotation$$branch+0x9c>
 8002286:	2400      	movs	r4, #0
 8002288:	43e4      	mvns	r4, r4
 800228a:	0020      	movs	r0, r4
 800228c:	e67b      	b.n	8001f86 <USBPD_PE_StateMachine_SNK+0xba>
 800228e:	6868      	ldr	r0, [r5, #4]
 8002290:	6801      	ldr	r1, [r0, #0]
 8002292:	2210      	movs	r2, #16
 8002294:	4391      	bics	r1, r2
 8002296:	6001      	str	r1, [r0, #0]
 8002298:	215f      	movs	r1, #95	; 0x5f
 800229a:	7c28      	ldrb	r0, [r5, #16]
 800229c:	f7fe f944 	bl	8000528 <USBPD_PE_Notification>
 80022a0:	2400      	movs	r4, #0
 80022a2:	43e4      	mvns	r4, r4
 80022a4:	e791      	b.n	80021ca <__iar_annotation$$branch+0xe>
 80022a6:	6868      	ldr	r0, [r5, #4]
 80022a8:	6801      	ldr	r1, [r0, #0]
 80022aa:	2210      	movs	r2, #16
 80022ac:	4391      	bics	r1, r2
 80022ae:	6001      	str	r1, [r0, #0]
 80022b0:	68a8      	ldr	r0, [r5, #8]
 80022b2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80022b4:	2900      	cmp	r1, #0
 80022b6:	d0f3      	beq.n	80022a0 <__iar_annotation$$branch+0xb2>
 80022b8:	7c28      	ldrb	r0, [r5, #16]
 80022ba:	4788      	blx	r1
 80022bc:	e7f0      	b.n	80022a0 <__iar_annotation$$branch+0xb2>
 80022be:	6868      	ldr	r0, [r5, #4]
 80022c0:	6801      	ldr	r1, [r0, #0]
 80022c2:	2201      	movs	r2, #1
 80022c4:	0b0b      	lsrs	r3, r1, #12
 80022c6:	4013      	ands	r3, r2
 80022c8:	d0ec      	beq.n	80022a4 <__iar_annotation$$branch+0xb6>
 80022ca:	078b      	lsls	r3, r1, #30
 80022cc:	0f9b      	lsrs	r3, r3, #30
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <__iar_annotation$$branch+0xe8>
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <__iar_annotation$$branch+0xea>
 80022d6:	2320      	movs	r3, #32
 80022d8:	2420      	movs	r4, #32
 80022da:	43a1      	bics	r1, r4
 80022dc:	430b      	orrs	r3, r1
 80022de:	6003      	str	r3, [r0, #0]
 80022e0:	772a      	strb	r2, [r5, #28]
 80022e2:	83ef      	strh	r7, [r5, #30]
 80022e4:	24fa      	movs	r4, #250	; 0xfa
 80022e6:	0064      	lsls	r4, r4, #1
 80022e8:	2043      	movs	r0, #67	; 0x43
 80022ea:	7468      	strb	r0, [r5, #17]
 80022ec:	e76d      	b.n	80021ca <__iar_annotation$$branch+0xe>
 80022ee:	4668      	mov	r0, sp
 80022f0:	7b00      	ldrb	r0, [r0, #12]
 80022f2:	2811      	cmp	r0, #17
 80022f4:	d135      	bne.n	8002362 <__iar_annotation$$branch+0x174>
 80022f6:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80022f8:	0bc2      	lsrs	r2, r0, #15
 80022fa:	d12c      	bne.n	8002356 <__iar_annotation$$branch+0x168>
 80022fc:	2607      	movs	r6, #7
 80022fe:	0b02      	lsrs	r2, r0, #12
 8002300:	4232      	tst	r2, r6
 8002302:	d028      	beq.n	8002356 <__iar_annotation$$branch+0x168>
 8002304:	06c2      	lsls	r2, r0, #27
 8002306:	0ed2      	lsrs	r2, r2, #27
 8002308:	2a01      	cmp	r2, #1
 800230a:	d124      	bne.n	8002356 <__iar_annotation$$branch+0x168>
 800230c:	2200      	movs	r2, #0
 800230e:	4bc5      	ldr	r3, [pc, #788]	; (8002624 <__iar_annotation$$branch+0x436>)
 8002310:	18eb      	adds	r3, r5, r3
 8002312:	709a      	strb	r2, [r3, #2]
 8002314:	696a      	ldr	r2, [r5, #20]
 8002316:	4311      	orrs	r1, r2
 8002318:	6169      	str	r1, [r5, #20]
 800231a:	0600      	lsls	r0, r0, #24
 800231c:	0f81      	lsrs	r1, r0, #30
 800231e:	4668      	mov	r0, sp
 8002320:	7b40      	ldrb	r0, [r0, #13]
 8002322:	f7fe fcbb 	bl	8000c9c <PE_ExtRevisionInteroperability>
 8002326:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002328:	0b00      	lsrs	r0, r0, #12
 800232a:	4006      	ands	r6, r0
 800232c:	00b3      	lsls	r3, r6, #2
 800232e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002330:	1c82      	adds	r2, r0, #2
 8002332:	2104      	movs	r1, #4
 8002334:	7c28      	ldrb	r0, [r5, #16]
 8002336:	68ae      	ldr	r6, [r5, #8]
 8002338:	69b6      	ldr	r6, [r6, #24]
 800233a:	47b0      	blx	r6
 800233c:	2001      	movs	r0, #1
 800233e:	7728      	strb	r0, [r5, #28]
 8002340:	6868      	ldr	r0, [r5, #4]
 8002342:	6801      	ldr	r1, [r0, #0]
 8002344:	2210      	movs	r2, #16
 8002346:	4391      	bics	r1, r2
 8002348:	6001      	str	r1, [r0, #0]
 800234a:	2044      	movs	r0, #68	; 0x44
 800234c:	7468      	strb	r0, [r5, #17]
 800234e:	4668      	mov	r0, sp
 8002350:	7b00      	ldrb	r0, [r0, #12]
 8002352:	2814      	cmp	r0, #20
 8002354:	d005      	beq.n	8002362 <__iar_annotation$$branch+0x174>
 8002356:	2014      	movs	r0, #20
 8002358:	4669      	mov	r1, sp
 800235a:	7308      	strb	r0, [r1, #12]
 800235c:	0028      	movs	r0, r5
 800235e:	f7fe fb4e 	bl	80009fe <PE_Clear_RxEvent>
 8002362:	8be8      	ldrh	r0, [r5, #30]
 8002364:	03a1      	lsls	r1, r4, #14
 8002366:	4288      	cmp	r0, r1
 8002368:	d102      	bne.n	8002370 <__iar_annotation$$branch+0x182>
 800236a:	200f      	movs	r0, #15
 800236c:	7468      	strb	r0, [r5, #17]
 800236e:	2400      	movs	r4, #0
 8002370:	e72b      	b.n	80021ca <__iar_annotation$$branch+0xe>
 8002372:	466a      	mov	r2, sp
 8002374:	0029      	movs	r1, r5
 8002376:	3118      	adds	r1, #24
 8002378:	7c28      	ldrb	r0, [r5, #16]
 800237a:	68ab      	ldr	r3, [r5, #8]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4798      	blx	r3
 8002380:	6968      	ldr	r0, [r5, #20]
 8002382:	2118      	movs	r1, #24
 8002384:	4388      	bics	r0, r1
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	00c9      	lsls	r1, r1, #3
 800238a:	2218      	movs	r2, #24
 800238c:	400a      	ands	r2, r1
 800238e:	4302      	orrs	r2, r0
 8002390:	616a      	str	r2, [r5, #20]
 8002392:	2045      	movs	r0, #69	; 0x45
 8002394:	e7ea      	b.n	800236c <__iar_annotation$$branch+0x17e>
 8002396:	6968      	ldr	r0, [r5, #20]
 8002398:	0401      	lsls	r1, r0, #16
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	d001      	beq.n	80023a2 <__iar_annotation$$branch+0x1b4>
 800239e:	2002      	movs	r0, #2
 80023a0:	e000      	b.n	80023a4 <__iar_annotation$$branch+0x1b6>
 80023a2:	2000      	movs	r0, #0
 80023a4:	9002      	str	r0, [sp, #8]
 80023a6:	2046      	movs	r0, #70	; 0x46
 80023a8:	9001      	str	r0, [sp, #4]
 80023aa:	2001      	movs	r0, #1
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	002b      	movs	r3, r5
 80023b0:	3318      	adds	r3, #24
 80023b2:	2202      	movs	r2, #2
 80023b4:	2100      	movs	r1, #0
 80023b6:	0028      	movs	r0, r5
 80023b8:	f7ff f929 	bl	800160e <PE_Send_DataMessage>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d105      	bne.n	80023cc <__iar_annotation$$branch+0x1de>
 80023c0:	6968      	ldr	r0, [r5, #20]
 80023c2:	4999      	ldr	r1, [pc, #612]	; (8002628 <__iar_annotation$$branch+0x43a>)
 80023c4:	4001      	ands	r1, r0
 80023c6:	6169      	str	r1, [r5, #20]
 80023c8:	83ee      	strh	r6, [r5, #30]
 80023ca:	241b      	movs	r4, #27
 80023cc:	e6fd      	b.n	80021ca <__iar_annotation$$branch+0xe>
 80023ce:	4669      	mov	r1, sp
 80023d0:	7b09      	ldrb	r1, [r1, #12]
 80023d2:	2911      	cmp	r1, #17
 80023d4:	d148      	bne.n	8002468 <__iar_annotation$$branch+0x27a>
 80023d6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80023d8:	4201      	tst	r1, r0
 80023da:	d145      	bne.n	8002468 <__iar_annotation$$branch+0x27a>
 80023dc:	20fa      	movs	r0, #250	; 0xfa
 80023de:	0040      	lsls	r0, r0, #1
 80023e0:	261f      	movs	r6, #31
 80023e2:	221f      	movs	r2, #31
 80023e4:	400a      	ands	r2, r1
 80023e6:	1e92      	subs	r2, r2, #2
 80023e8:	2a01      	cmp	r2, #1
 80023ea:	d917      	bls.n	800241c <__iar_annotation$$branch+0x22e>
 80023ec:	1e92      	subs	r2, r2, #2
 80023ee:	d001      	beq.n	80023f4 <__iar_annotation$$branch+0x206>
 80023f0:	3a08      	subs	r2, #8
 80023f2:	d125      	bne.n	8002440 <__iar_annotation$$branch+0x252>
 80023f4:	686a      	ldr	r2, [r5, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	0552      	lsls	r2, r2, #21
 80023fa:	0f52      	lsrs	r2, r2, #29
 80023fc:	2a03      	cmp	r2, #3
 80023fe:	d004      	beq.n	800240a <__iar_annotation$$branch+0x21c>
 8002400:	2143      	movs	r1, #67	; 0x43
 8002402:	7469      	strb	r1, [r5, #17]
 8002404:	83ef      	strh	r7, [r5, #30]
 8002406:	0004      	movs	r4, r0
 8002408:	e014      	b.n	8002434 <__iar_annotation$$branch+0x246>
 800240a:	4031      	ands	r1, r6
 800240c:	290c      	cmp	r1, #12
 800240e:	d101      	bne.n	8002414 <__iar_annotation$$branch+0x226>
 8002410:	2049      	movs	r0, #73	; 0x49
 8002412:	e000      	b.n	8002416 <__iar_annotation$$branch+0x228>
 8002414:	2003      	movs	r0, #3
 8002416:	7468      	strb	r0, [r5, #17]
 8002418:	2400      	movs	r4, #0
 800241a:	e00b      	b.n	8002434 <__iar_annotation$$branch+0x246>
 800241c:	83ef      	strh	r7, [r5, #30]
 800241e:	0004      	movs	r4, r0
 8002420:	2104      	movs	r1, #4
 8002422:	0028      	movs	r0, r5
 8002424:	f7ff f813 	bl	800144e <PE_SetPowerNegotiation>
 8002428:	2047      	movs	r0, #71	; 0x47
 800242a:	7468      	strb	r0, [r5, #17]
 800242c:	4668      	mov	r0, sp
 800242e:	7b00      	ldrb	r0, [r0, #12]
 8002430:	2814      	cmp	r0, #20
 8002432:	d005      	beq.n	8002440 <__iar_annotation$$branch+0x252>
 8002434:	2014      	movs	r0, #20
 8002436:	4669      	mov	r1, sp
 8002438:	7308      	strb	r0, [r1, #12]
 800243a:	0028      	movs	r0, r5
 800243c:	f7fe fadf 	bl	80009fe <PE_Clear_RxEvent>
 8002440:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002442:	4006      	ands	r6, r0
 8002444:	2e02      	cmp	r6, #2
 8002446:	d009      	beq.n	800245c <__iar_annotation$$branch+0x26e>
 8002448:	2e03      	cmp	r6, #3
 800244a:	d009      	beq.n	8002460 <__iar_annotation$$branch+0x272>
 800244c:	2e04      	cmp	r6, #4
 800244e:	d003      	beq.n	8002458 <__iar_annotation$$branch+0x26a>
 8002450:	2e0c      	cmp	r6, #12
 8002452:	d109      	bne.n	8002468 <__iar_annotation$$branch+0x27a>
 8002454:	2103      	movs	r1, #3
 8002456:	e004      	b.n	8002462 <__iar_annotation$$branch+0x274>
 8002458:	2102      	movs	r1, #2
 800245a:	e002      	b.n	8002462 <__iar_annotation$$branch+0x274>
 800245c:	2104      	movs	r1, #4
 800245e:	e000      	b.n	8002462 <__iar_annotation$$branch+0x274>
 8002460:	2101      	movs	r1, #1
 8002462:	7c28      	ldrb	r0, [r5, #16]
 8002464:	f7fe f860 	bl	8000528 <USBPD_PE_Notification>
 8002468:	8be8      	ldrh	r0, [r5, #30]
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	0209      	lsls	r1, r1, #8
 800246e:	4288      	cmp	r0, r1
 8002470:	d1ac      	bne.n	80023cc <__iar_annotation$$branch+0x1de>
 8002472:	e77a      	b.n	800236a <__iar_annotation$$branch+0x17c>
 8002474:	4668      	mov	r0, sp
 8002476:	7b00      	ldrb	r0, [r0, #12]
 8002478:	2811      	cmp	r0, #17
 800247a:	d1f5      	bne.n	8002468 <__iar_annotation$$branch+0x27a>
 800247c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800247e:	49a3      	ldr	r1, [pc, #652]	; (800270c <__iar_annotation$$branch+0x51e>)
 8002480:	4001      	ands	r1, r0
 8002482:	2906      	cmp	r1, #6
 8002484:	d1f0      	bne.n	8002468 <__iar_annotation$$branch+0x27a>
 8002486:	2014      	movs	r0, #20
 8002488:	4669      	mov	r1, sp
 800248a:	7308      	strb	r0, [r1, #12]
 800248c:	0028      	movs	r0, r5
 800248e:	f7fe fab6 	bl	80009fe <PE_Clear_RxEvent>
 8002492:	2103      	movs	r1, #3
 8002494:	0028      	movs	r0, r5
 8002496:	f7fe ffda 	bl	800144e <PE_SetPowerNegotiation>
 800249a:	2110      	movs	r1, #16
 800249c:	7c28      	ldrb	r0, [r5, #16]
 800249e:	f7fe f843 	bl	8000528 <USBPD_PE_Notification>
 80024a2:	6868      	ldr	r0, [r5, #4]
 80024a4:	6800      	ldr	r0, [r0, #0]
 80024a6:	0401      	lsls	r1, r0, #16
 80024a8:	0fc9      	lsrs	r1, r1, #31
 80024aa:	d002      	beq.n	80024b2 <__iar_annotation$$branch+0x2c4>
 80024ac:	6828      	ldr	r0, [r5, #0]
 80024ae:	6801      	ldr	r1, [r0, #0]
 80024b0:	e000      	b.n	80024b4 <__iar_annotation$$branch+0x2c6>
 80024b2:	2101      	movs	r1, #1
 80024b4:	4668      	mov	r0, sp
 80024b6:	7b40      	ldrb	r0, [r0, #13]
 80024b8:	f003 fa2e 	bl	8005918 <USBPD_PRL_SOPCapability>
 80024bc:	2000      	movs	r0, #0
 80024be:	84a8      	strh	r0, [r5, #36]	; 0x24
 80024c0:	2003      	movs	r0, #3
 80024c2:	6969      	ldr	r1, [r5, #20]
 80024c4:	08c9      	lsrs	r1, r1, #3
 80024c6:	4001      	ands	r1, r0
 80024c8:	2903      	cmp	r1, #3
 80024ca:	d101      	bne.n	80024d0 <__iar_annotation$$branch+0x2e2>
 80024cc:	4990      	ldr	r1, [pc, #576]	; (8002710 <__iar_annotation$$branch+0x522>)
 80024ce:	84a9      	strh	r1, [r5, #36]	; 0x24
 80024d0:	7468      	strb	r0, [r5, #17]
 80024d2:	2400      	movs	r4, #0
 80024d4:	e7c8      	b.n	8002468 <__iar_annotation$$branch+0x27a>
 80024d6:	bf00      	nop
 80024d8:	ffffdfff 	.word	0xffffdfff
 80024dc:	20000224 	.word	0x20000224
 80024e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80024e4:	20000228 	.word	0x20000228
 80024e8:	a903      	add	r1, sp, #12
 80024ea:	0028      	movs	r0, r5
 80024ec:	f001 fbd6 	bl	8003c9c <PE_StateMachine_VDMCable>
 80024f0:	e66a      	b.n	80021c8 <__iar_annotation$$branch+0xc>
 80024f2:	2601      	movs	r6, #1
 80024f4:	6868      	ldr	r0, [r5, #4]
 80024f6:	6800      	ldr	r0, [r0, #0]
 80024f8:	0bc0      	lsrs	r0, r0, #15
 80024fa:	4030      	ands	r0, r6
 80024fc:	d006      	beq.n	800250c <__iar_annotation$$branch+0x31e>
 80024fe:	68a8      	ldr	r0, [r5, #8]
 8002500:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002502:	2a00      	cmp	r2, #0
 8002504:	d002      	beq.n	800250c <__iar_annotation$$branch+0x31e>
 8002506:	2100      	movs	r1, #0
 8002508:	7c28      	ldrb	r0, [r5, #16]
 800250a:	4790      	blx	r2
 800250c:	6868      	ldr	r0, [r5, #4]
 800250e:	6801      	ldr	r1, [r0, #0]
 8002510:	2210      	movs	r2, #16
 8002512:	4391      	bics	r1, r2
 8002514:	6001      	str	r1, [r0, #0]
 8002516:	2101      	movs	r1, #1
 8002518:	0028      	movs	r0, r5
 800251a:	f7fe ff98 	bl	800144e <PE_SetPowerNegotiation>
 800251e:	4841      	ldr	r0, [pc, #260]	; (8002624 <__iar_annotation$$branch+0x436>)
 8002520:	1829      	adds	r1, r5, r0
 8002522:	7888      	ldrb	r0, [r1, #2]
 8002524:	2803      	cmp	r0, #3
 8002526:	d309      	bcc.n	800253c <__iar_annotation$$branch+0x34e>
 8002528:	6968      	ldr	r0, [r5, #20]
 800252a:	0880      	lsrs	r0, r0, #2
 800252c:	4006      	ands	r6, r0
 800252e:	d003      	beq.n	8002538 <__iar_annotation$$branch+0x34a>
 8002530:	68a8      	ldr	r0, [r5, #8]
 8002532:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002534:	2800      	cmp	r0, #0
 8002536:	d171      	bne.n	800261c <__iar_annotation$$branch+0x42e>
 8002538:	2000      	movs	r0, #0
 800253a:	e6d6      	b.n	80022ea <__iar_annotation$$branch+0xfc>
 800253c:	1c40      	adds	r0, r0, #1
 800253e:	7088      	strb	r0, [r1, #2]
 8002540:	2105      	movs	r1, #5
 8002542:	0028      	movs	r0, r5
 8002544:	f7fe f9f6 	bl	8000934 <PE_Send_RESET>
 8002548:	4872      	ldr	r0, [pc, #456]	; (8002714 <__iar_annotation$$branch+0x526>)
 800254a:	83e8      	strh	r0, [r5, #30]
 800254c:	2201      	movs	r2, #1
 800254e:	2101      	movs	r1, #1
 8002550:	0028      	movs	r0, r5
 8002552:	f7fe ff73 	bl	800143c <PE_CallHardResetCallback>
 8002556:	209b      	movs	r0, #155	; 0x9b
 8002558:	e708      	b.n	800236c <__iar_annotation$$branch+0x17e>
 800255a:	6868      	ldr	r0, [r5, #4]
 800255c:	6800      	ldr	r0, [r0, #0]
 800255e:	0401      	lsls	r1, r0, #16
 8002560:	0fc9      	lsrs	r1, r1, #31
 8002562:	d006      	beq.n	8002572 <__iar_annotation$$branch+0x384>
 8002564:	68a8      	ldr	r0, [r5, #8]
 8002566:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002568:	2a00      	cmp	r2, #0
 800256a:	d002      	beq.n	8002572 <__iar_annotation$$branch+0x384>
 800256c:	2100      	movs	r1, #0
 800256e:	7c28      	ldrb	r0, [r5, #16]
 8002570:	4790      	blx	r2
 8002572:	2200      	movs	r2, #0
 8002574:	2101      	movs	r1, #1
 8002576:	0028      	movs	r0, r5
 8002578:	f7fe ff60 	bl	800143c <PE_CallHardResetCallback>
 800257c:	4865      	ldr	r0, [pc, #404]	; (8002714 <__iar_annotation$$branch+0x526>)
 800257e:	83e8      	strh	r0, [r5, #30]
 8002580:	e7e9      	b.n	8002556 <__iar_annotation$$branch+0x368>
 8002582:	2100      	movs	r1, #0
 8002584:	4668      	mov	r0, sp
 8002586:	7b40      	ldrb	r0, [r0, #13]
 8002588:	68aa      	ldr	r2, [r5, #8]
 800258a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800258c:	4790      	blx	r2
 800258e:	2801      	cmp	r0, #1
 8002590:	d10d      	bne.n	80025ae <__iar_annotation$$branch+0x3c0>
 8002592:	4861      	ldr	r0, [pc, #388]	; (8002718 <__iar_annotation$$branch+0x52a>)
 8002594:	83e8      	strh	r0, [r5, #30]
 8002596:	2169      	movs	r1, #105	; 0x69
 8002598:	4668      	mov	r0, sp
 800259a:	7b40      	ldrb	r0, [r0, #13]
 800259c:	f7fd ffc4 	bl	8000528 <USBPD_PE_Notification>
 80025a0:	2040      	movs	r0, #64	; 0x40
 80025a2:	7468      	strb	r0, [r5, #17]
 80025a4:	2400      	movs	r4, #0
 80025a6:	2113      	movs	r1, #19
 80025a8:	7c28      	ldrb	r0, [r5, #16]
 80025aa:	f7fd ffbd 	bl	8000528 <USBPD_PE_Notification>
 80025ae:	8be8      	ldrh	r0, [r5, #30]
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0209      	lsls	r1, r1, #8
 80025b4:	4288      	cmp	r0, r1
 80025b6:	d160      	bne.n	800267a <__iar_annotation$$branch+0x48c>
 80025b8:	e01e      	b.n	80025f8 <__iar_annotation$$branch+0x40a>
 80025ba:	2101      	movs	r1, #1
 80025bc:	4668      	mov	r0, sp
 80025be:	7b40      	ldrb	r0, [r0, #13]
 80025c0:	68aa      	ldr	r2, [r5, #8]
 80025c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c4:	4790      	blx	r2
 80025c6:	2801      	cmp	r0, #1
 80025c8:	d111      	bne.n	80025ee <__iar_annotation$$branch+0x400>
 80025ca:	0028      	movs	r0, r5
 80025cc:	f7fe fac5 	bl	8000b5a <PE_Reset_HardReset>
 80025d0:	2205      	movs	r2, #5
 80025d2:	2100      	movs	r1, #0
 80025d4:	0028      	movs	r0, r5
 80025d6:	f7fe ff31 	bl	800143c <PE_CallHardResetCallback>
 80025da:	2168      	movs	r1, #104	; 0x68
 80025dc:	4668      	mov	r0, sp
 80025de:	7b40      	ldrb	r0, [r0, #13]
 80025e0:	f7fd ffa2 	bl	8000528 <USBPD_PE_Notification>
 80025e4:	83ef      	strh	r7, [r5, #30]
 80025e6:	24fa      	movs	r4, #250	; 0xfa
 80025e8:	0064      	lsls	r4, r4, #1
 80025ea:	2043      	movs	r0, #67	; 0x43
 80025ec:	7468      	strb	r0, [r5, #17]
 80025ee:	8be8      	ldrh	r0, [r5, #30]
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0209      	lsls	r1, r1, #8
 80025f4:	4288      	cmp	r0, r1
 80025f6:	d140      	bne.n	800267a <__iar_annotation$$branch+0x48c>
 80025f8:	2206      	movs	r2, #6
 80025fa:	2100      	movs	r1, #0
 80025fc:	0028      	movs	r0, r5
 80025fe:	f7fe ff1d 	bl	800143c <PE_CallHardResetCallback>
 8002602:	4808      	ldr	r0, [pc, #32]	; (8002624 <__iar_annotation$$branch+0x436>)
 8002604:	1828      	adds	r0, r5, r0
 8002606:	7880      	ldrb	r0, [r0, #2]
 8002608:	2803      	cmp	r0, #3
 800260a:	d200      	bcs.n	800260e <__iar_annotation$$branch+0x420>
 800260c:	e6ad      	b.n	800236a <__iar_annotation$$branch+0x17c>
 800260e:	6968      	ldr	r0, [r5, #20]
 8002610:	0741      	lsls	r1, r0, #29
 8002612:	0fc9      	lsrs	r1, r1, #31
 8002614:	d004      	beq.n	8002620 <__iar_annotation$$branch+0x432>
 8002616:	68a8      	ldr	r0, [r5, #8]
 8002618:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800261a:	2800      	cmp	r0, #0
 800261c:	d000      	beq.n	8002620 <__iar_annotation$$branch+0x432>
 800261e:	e0f8      	b.n	8002812 <__iar_annotation$$branch+0x624>
 8002620:	2000      	movs	r0, #0
 8002622:	e6a3      	b.n	800236c <__iar_annotation$$branch+0x17e>
 8002624:	0000025e 	.word	0x0000025e
 8002628:	ffff7fff 	.word	0xffff7fff
 800262c:	2000      	movs	r0, #0
 800262e:	9000      	str	r0, [sp, #0]
 8002630:	2303      	movs	r3, #3
 8002632:	2203      	movs	r2, #3
 8002634:	2100      	movs	r1, #0
 8002636:	0028      	movs	r0, r5
 8002638:	f7fe ffbe 	bl	80015b8 <PE_Send_CtrlMessage>
 800263c:	2800      	cmp	r0, #0
 800263e:	d11c      	bne.n	800267a <__iar_annotation$$branch+0x48c>
 8002640:	2001      	movs	r0, #1
 8002642:	7728      	strb	r0, [r5, #28]
 8002644:	e64d      	b.n	80022e2 <__iar_annotation$$branch+0xf4>
 8002646:	6868      	ldr	r0, [r5, #4]
 8002648:	6800      	ldr	r0, [r0, #0]
 800264a:	0540      	lsls	r0, r0, #21
 800264c:	0f40      	lsrs	r0, r0, #29
 800264e:	2804      	cmp	r0, #4
 8002650:	d100      	bne.n	8002654 <__iar_annotation$$branch+0x466>
 8002652:	e68a      	b.n	800236a <__iar_annotation$$branch+0x17c>
 8002654:	2000      	movs	r0, #0
 8002656:	9000      	str	r0, [sp, #0]
 8002658:	2350      	movs	r3, #80	; 0x50
 800265a:	220d      	movs	r2, #13
 800265c:	2031      	movs	r0, #49	; 0x31
 800265e:	5c29      	ldrb	r1, [r5, r0]
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ffa9 	bl	80015b8 <PE_Send_CtrlMessage>
 8002666:	2800      	cmp	r0, #0
 8002668:	d107      	bne.n	800267a <__iar_annotation$$branch+0x48c>
 800266a:	2003      	movs	r0, #3
 800266c:	7728      	strb	r0, [r5, #28]
 800266e:	83ee      	strh	r6, [r5, #30]
 8002670:	241b      	movs	r4, #27
 8002672:	2130      	movs	r1, #48	; 0x30
 8002674:	7c28      	ldrb	r0, [r5, #16]
 8002676:	f7fd ff57 	bl	8000528 <USBPD_PE_Notification>
 800267a:	e5a6      	b.n	80021ca <__iar_annotation$$branch+0xe>
 800267c:	4668      	mov	r0, sp
 800267e:	7b00      	ldrb	r0, [r0, #12]
 8002680:	2814      	cmp	r0, #20
 8002682:	d017      	beq.n	80026b4 <__iar_annotation$$branch+0x4c6>
 8002684:	2030      	movs	r0, #48	; 0x30
 8002686:	5c28      	ldrb	r0, [r5, r0]
 8002688:	2131      	movs	r1, #49	; 0x31
 800268a:	5c69      	ldrb	r1, [r5, r1]
 800268c:	4288      	cmp	r0, r1
 800268e:	d111      	bne.n	80026b4 <__iar_annotation$$branch+0x4c6>
 8002690:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002692:	491e      	ldr	r1, [pc, #120]	; (800270c <__iar_annotation$$branch+0x51e>)
 8002694:	4001      	ands	r1, r0
 8002696:	2903      	cmp	r1, #3
 8002698:	d10c      	bne.n	80026b4 <__iar_annotation$$branch+0x4c6>
 800269a:	2001      	movs	r0, #1
 800269c:	7728      	strb	r0, [r5, #28]
 800269e:	83ef      	strh	r7, [r5, #30]
 80026a0:	24fa      	movs	r4, #250	; 0xfa
 80026a2:	0064      	lsls	r4, r4, #1
 80026a4:	2043      	movs	r0, #67	; 0x43
 80026a6:	7468      	strb	r0, [r5, #17]
 80026a8:	2014      	movs	r0, #20
 80026aa:	4669      	mov	r1, sp
 80026ac:	7308      	strb	r0, [r1, #12]
 80026ae:	0028      	movs	r0, r5
 80026b0:	f7fe f9a5 	bl	80009fe <PE_Clear_RxEvent>
 80026b4:	e6d8      	b.n	8002468 <__iar_annotation$$branch+0x27a>
 80026b6:	9400      	str	r4, [sp, #0]
 80026b8:	2343      	movs	r3, #67	; 0x43
 80026ba:	2207      	movs	r2, #7
 80026bc:	2100      	movs	r1, #0
 80026be:	0028      	movs	r0, r5
 80026c0:	f7fe ff7a 	bl	80015b8 <PE_Send_CtrlMessage>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d11f      	bne.n	8002708 <__iar_annotation$$branch+0x51a>
 80026c8:	2006      	movs	r0, #6
 80026ca:	7728      	strb	r0, [r5, #28]
 80026cc:	83ee      	strh	r6, [r5, #30]
 80026ce:	241b      	movs	r4, #27
 80026d0:	210b      	movs	r1, #11
 80026d2:	e7cf      	b.n	8002674 <__iar_annotation$$branch+0x486>
 80026d4:	4668      	mov	r0, sp
 80026d6:	7b00      	ldrb	r0, [r0, #12]
 80026d8:	2811      	cmp	r0, #17
 80026da:	d115      	bne.n	8002708 <__iar_annotation$$branch+0x51a>
 80026dc:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026de:	490b      	ldr	r1, [pc, #44]	; (800270c <__iar_annotation$$branch+0x51e>)
 80026e0:	4001      	ands	r1, r0
 80026e2:	2906      	cmp	r1, #6
 80026e4:	d110      	bne.n	8002708 <__iar_annotation$$branch+0x51a>
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	7c28      	ldrb	r0, [r5, #16]
 80026ea:	f7fd ff1d 	bl	8000528 <USBPD_PE_Notification>
 80026ee:	2003      	movs	r0, #3
 80026f0:	7468      	strb	r0, [r5, #17]
 80026f2:	2400      	movs	r4, #0
 80026f4:	4668      	mov	r0, sp
 80026f6:	7b00      	ldrb	r0, [r0, #12]
 80026f8:	2814      	cmp	r0, #20
 80026fa:	d005      	beq.n	8002708 <__iar_annotation$$branch+0x51a>
 80026fc:	2014      	movs	r0, #20
 80026fe:	4669      	mov	r1, sp
 8002700:	7308      	strb	r0, [r1, #12]
 8002702:	0028      	movs	r0, r5
 8002704:	f7fe f97b 	bl	80009fe <PE_Clear_RxEvent>
 8002708:	e55f      	b.n	80021ca <__iar_annotation$$branch+0xe>
 800270a:	bf00      	nop
 800270c:	0000f01f 	.word	0x0000f01f
 8002710:	0000a328 	.word	0x0000a328
 8002714:	000083e8 	.word	0x000083e8
 8002718:	000088e3 	.word	0x000088e3
 800271c:	2000      	movs	r0, #0
 800271e:	9000      	str	r0, [sp, #0]
 8002720:	2303      	movs	r3, #3
 8002722:	2204      	movs	r2, #4
 8002724:	2100      	movs	r1, #0
 8002726:	0028      	movs	r0, r5
 8002728:	f7fe ff46 	bl	80015b8 <PE_Send_CtrlMessage>
 800272c:	e54d      	b.n	80021ca <__iar_annotation$$branch+0xe>
 800272e:	4668      	mov	r0, sp
 8002730:	7800      	ldrb	r0, [r0, #0]
 8002732:	2804      	cmp	r0, #4
 8002734:	d006      	beq.n	8002744 <__iar_annotation$$branch+0x556>
 8002736:	2000      	movs	r0, #0
 8002738:	7728      	strb	r0, [r5, #28]
 800273a:	7469      	strb	r1, [r5, #17]
 800273c:	2120      	movs	r1, #32
 800273e:	7c28      	ldrb	r0, [r5, #16]
 8002740:	f7fd fef2 	bl	8000528 <USBPD_PE_Notification>
 8002744:	a903      	add	r1, sp, #12
 8002746:	0028      	movs	r0, r5
 8002748:	f000 fa12 	bl	8002b70 <PE_StateMachine_SNK_ReadyWait>
 800274c:	e53c      	b.n	80021c8 <__iar_annotation$$branch+0xc>
 800274e:	68a8      	ldr	r0, [r5, #8]
 8002750:	6881      	ldr	r1, [r0, #8]
 8002752:	2900      	cmp	r1, #0
 8002754:	d02e      	beq.n	80027b4 <__iar_annotation$$branch+0x5c6>
 8002756:	4668      	mov	r0, sp
 8002758:	7b40      	ldrb	r0, [r0, #13]
 800275a:	4788      	blx	r1
 800275c:	280a      	cmp	r0, #10
 800275e:	d002      	beq.n	8002766 <__iar_annotation$$branch+0x578>
 8002760:	280d      	cmp	r0, #13
 8002762:	d022      	beq.n	80027aa <__iar_annotation$$branch+0x5bc>
 8002764:	e026      	b.n	80027b4 <__iar_annotation$$branch+0x5c6>
 8002766:	2201      	movs	r2, #1
 8002768:	2100      	movs	r1, #0
 800276a:	7c28      	ldrb	r0, [r5, #16]
 800276c:	68ab      	ldr	r3, [r5, #8]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	4798      	blx	r3
 8002772:	2000      	movs	r0, #0
 8002774:	9000      	str	r0, [sp, #0]
 8002776:	2359      	movs	r3, #89	; 0x59
 8002778:	2203      	movs	r2, #3
 800277a:	2100      	movs	r1, #0
 800277c:	0028      	movs	r0, r5
 800277e:	f7fe ff1b 	bl	80015b8 <PE_Send_CtrlMessage>
 8002782:	2800      	cmp	r0, #0
 8002784:	d110      	bne.n	80027a8 <__iar_annotation$$branch+0x5ba>
 8002786:	2008      	movs	r0, #8
 8002788:	7728      	strb	r0, [r5, #28]
 800278a:	6868      	ldr	r0, [r5, #4]
 800278c:	6801      	ldr	r1, [r0, #0]
 800278e:	2210      	movs	r2, #16
 8002790:	430a      	orrs	r2, r1
 8002792:	6002      	str	r2, [r0, #0]
 8002794:	2206      	movs	r2, #6
 8002796:	2100      	movs	r1, #0
 8002798:	7c28      	ldrb	r0, [r5, #16]
 800279a:	68ab      	ldr	r3, [r5, #8]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	4798      	blx	r3
 80027a0:	48b0      	ldr	r0, [pc, #704]	; (8002a64 <__iar_annotation$$branch+0x876>)
 80027a2:	83e8      	strh	r0, [r5, #30]
 80027a4:	24e1      	movs	r4, #225	; 0xe1
 80027a6:	00a4      	lsls	r4, r4, #2
 80027a8:	e50f      	b.n	80021ca <__iar_annotation$$branch+0xe>
 80027aa:	2000      	movs	r0, #0
 80027ac:	9000      	str	r0, [sp, #0]
 80027ae:	2303      	movs	r3, #3
 80027b0:	220c      	movs	r2, #12
 80027b2:	e7b7      	b.n	8002724 <__iar_annotation$$branch+0x536>
 80027b4:	202a      	movs	r0, #42	; 0x2a
 80027b6:	e5d9      	b.n	800236c <__iar_annotation$$branch+0x17e>
 80027b8:	4668      	mov	r0, sp
 80027ba:	7b00      	ldrb	r0, [r0, #12]
 80027bc:	2811      	cmp	r0, #17
 80027be:	d119      	bne.n	80027f4 <__iar_annotation$$branch+0x606>
 80027c0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80027c2:	49c1      	ldr	r1, [pc, #772]	; (8002ac8 <__iar_annotation$$branch+0x8da>)
 80027c4:	4001      	ands	r1, r0
 80027c6:	2906      	cmp	r1, #6
 80027c8:	d114      	bne.n	80027f4 <__iar_annotation$$branch+0x606>
 80027ca:	7f28      	ldrb	r0, [r5, #28]
 80027cc:	2809      	cmp	r0, #9
 80027ce:	d005      	beq.n	80027dc <__iar_annotation$$branch+0x5ee>
 80027d0:	2209      	movs	r2, #9
 80027d2:	2100      	movs	r1, #0
 80027d4:	7c28      	ldrb	r0, [r5, #16]
 80027d6:	68ab      	ldr	r3, [r5, #8]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	4798      	blx	r3
 80027dc:	2053      	movs	r0, #83	; 0x53
 80027de:	7468      	strb	r0, [r5, #17]
 80027e0:	4668      	mov	r0, sp
 80027e2:	7b00      	ldrb	r0, [r0, #12]
 80027e4:	2814      	cmp	r0, #20
 80027e6:	d005      	beq.n	80027f4 <__iar_annotation$$branch+0x606>
 80027e8:	2014      	movs	r0, #20
 80027ea:	4669      	mov	r1, sp
 80027ec:	7308      	strb	r0, [r1, #12]
 80027ee:	0028      	movs	r0, r5
 80027f0:	f7fe f905 	bl	80009fe <PE_Clear_RxEvent>
 80027f4:	8be8      	ldrh	r0, [r5, #30]
 80027f6:	03a1      	lsls	r1, r4, #14
 80027f8:	4288      	cmp	r0, r1
 80027fa:	d1d5      	bne.n	80027a8 <__iar_annotation$$branch+0x5ba>
 80027fc:	220f      	movs	r2, #15
 80027fe:	2100      	movs	r1, #0
 8002800:	7c28      	ldrb	r0, [r5, #16]
 8002802:	68ab      	ldr	r3, [r5, #8]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	4798      	blx	r3
 8002808:	68a8      	ldr	r0, [r5, #8]
 800280a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800280c:	2800      	cmp	r0, #0
 800280e:	d100      	bne.n	8002812 <__iar_annotation$$branch+0x624>
 8002810:	e5ab      	b.n	800236a <__iar_annotation$$branch+0x17c>
 8002812:	2092      	movs	r0, #146	; 0x92
 8002814:	e5aa      	b.n	800236c <__iar_annotation$$branch+0x17e>
 8002816:	0028      	movs	r0, r5
 8002818:	f7fe fe19 	bl	800144e <PE_SetPowerNegotiation>
 800281c:	220a      	movs	r2, #10
 800281e:	2100      	movs	r1, #0
 8002820:	7c28      	ldrb	r0, [r5, #16]
 8002822:	68ab      	ldr	r3, [r5, #8]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	4798      	blx	r3
 8002828:	6868      	ldr	r0, [r5, #4]
 800282a:	7800      	ldrb	r0, [r0, #0]
 800282c:	0780      	lsls	r0, r0, #30
 800282e:	0f80      	lsrs	r0, r0, #30
 8002830:	2802      	cmp	r0, #2
 8002832:	d102      	bne.n	800283a <__iar_annotation$$branch+0x64c>
 8002834:	7c28      	ldrb	r0, [r5, #16]
 8002836:	f003 f84c 	bl	80058d2 <USBPD_PRL_SRCSetSinkNG>
 800283a:	2101      	movs	r1, #1
 800283c:	0028      	movs	r0, r5
 800283e:	f7fe f899 	bl	8000974 <PE_ChangePowerRole>
 8002842:	7f28      	ldrb	r0, [r5, #28]
 8002844:	2809      	cmp	r0, #9
 8002846:	d005      	beq.n	8002854 <__iar_annotation$$branch+0x666>
 8002848:	220b      	movs	r2, #11
 800284a:	2101      	movs	r1, #1
 800284c:	7c28      	ldrb	r0, [r5, #16]
 800284e:	68ab      	ldr	r3, [r5, #8]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	4798      	blx	r3
 8002854:	2000      	movs	r0, #0
 8002856:	9000      	str	r0, [sp, #0]
 8002858:	235b      	movs	r3, #91	; 0x5b
 800285a:	2206      	movs	r2, #6
 800285c:	2100      	movs	r1, #0
 800285e:	0028      	movs	r0, r5
 8002860:	f7fe feaa 	bl	80015b8 <PE_Send_CtrlMessage>
 8002864:	2800      	cmp	r0, #0
 8002866:	d108      	bne.n	800287a <__iar_annotation$$branch+0x68c>
 8002868:	220c      	movs	r2, #12
 800286a:	2100      	movs	r1, #0
 800286c:	7c28      	ldrb	r0, [r5, #16]
 800286e:	68ab      	ldr	r3, [r5, #8]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	4798      	blx	r3
 8002874:	48bd      	ldr	r0, [pc, #756]	; (8002b6c <.text_3>)
 8002876:	83e8      	strh	r0, [r5, #30]
 8002878:	2414      	movs	r4, #20
 800287a:	7c68      	ldrb	r0, [r5, #17]
 800287c:	285b      	cmp	r0, #91	; 0x5b
 800287e:	d00f      	beq.n	80028a0 <__iar_annotation$$branch+0x6b2>
 8002880:	2100      	movs	r1, #0
 8002882:	0028      	movs	r0, r5
 8002884:	f7fe f876 	bl	8000974 <PE_ChangePowerRole>
 8002888:	2206      	movs	r2, #6
 800288a:	2101      	movs	r1, #1
 800288c:	7c28      	ldrb	r0, [r5, #16]
 800288e:	68ab      	ldr	r3, [r5, #8]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	4798      	blx	r3
 8002894:	2207      	movs	r2, #7
 8002896:	2100      	movs	r1, #0
 8002898:	7c28      	ldrb	r0, [r5, #16]
 800289a:	68ab      	ldr	r3, [r5, #8]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	4798      	blx	r3
 80028a0:	e493      	b.n	80021ca <__iar_annotation$$branch+0xe>
 80028a2:	9400      	str	r4, [sp, #0]
 80028a4:	2358      	movs	r3, #88	; 0x58
 80028a6:	220a      	movs	r2, #10
 80028a8:	2100      	movs	r1, #0
 80028aa:	0028      	movs	r0, r5
 80028ac:	f7fe fe84 	bl	80015b8 <PE_Send_CtrlMessage>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d105      	bne.n	80028c0 <__iar_annotation$$branch+0x6d2>
 80028b4:	2008      	movs	r0, #8
 80028b6:	7728      	strb	r0, [r5, #28]
 80028b8:	83ee      	strh	r6, [r5, #30]
 80028ba:	241b      	movs	r4, #27
 80028bc:	2202      	movs	r2, #2
 80028be:	e7ea      	b.n	8002896 <__iar_annotation$$branch+0x6a8>
 80028c0:	220f      	movs	r2, #15
 80028c2:	e7e8      	b.n	8002896 <__iar_annotation$$branch+0x6a8>
 80028c4:	4669      	mov	r1, sp
 80028c6:	7b09      	ldrb	r1, [r1, #12]
 80028c8:	2911      	cmp	r1, #17
 80028ca:	d10c      	bne.n	80028e6 <__iar_annotation$$branch+0x6f8>
 80028cc:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80028ce:	4201      	tst	r1, r0
 80028d0:	d109      	bne.n	80028e6 <__iar_annotation$$branch+0x6f8>
 80028d2:	06c8      	lsls	r0, r1, #27
 80028d4:	0ec0      	lsrs	r0, r0, #27
 80028d6:	2803      	cmp	r0, #3
 80028d8:	d006      	beq.n	80028e8 <__iar_annotation$$branch+0x6fa>
 80028da:	2804      	cmp	r0, #4
 80028dc:	d02d      	beq.n	800293a <__iar_annotation$$branch+0x74c>
 80028de:	280c      	cmp	r0, #12
 80028e0:	d029      	beq.n	8002936 <__iar_annotation$$branch+0x748>
 80028e2:	2810      	cmp	r0, #16
 80028e4:	d032      	beq.n	800294c <__iar_annotation$$branch+0x75e>
 80028e6:	e0a5      	b.n	8002a34 <__iar_annotation$$branch+0x846>
 80028e8:	6868      	ldr	r0, [r5, #4]
 80028ea:	6801      	ldr	r1, [r0, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	430a      	orrs	r2, r1
 80028f0:	6002      	str	r2, [r0, #0]
 80028f2:	485c      	ldr	r0, [pc, #368]	; (8002a64 <__iar_annotation$$branch+0x876>)
 80028f4:	83e8      	strh	r0, [r5, #30]
 80028f6:	24e1      	movs	r4, #225	; 0xe1
 80028f8:	00a4      	lsls	r4, r4, #2
 80028fa:	7f28      	ldrb	r0, [r5, #28]
 80028fc:	2809      	cmp	r0, #9
 80028fe:	d005      	beq.n	800290c <__iar_annotation$$branch+0x71e>
 8002900:	2206      	movs	r2, #6
 8002902:	2100      	movs	r1, #0
 8002904:	7c28      	ldrb	r0, [r5, #16]
 8002906:	68ab      	ldr	r3, [r5, #8]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	4798      	blx	r3
 800290c:	2104      	movs	r1, #4
 800290e:	0028      	movs	r0, r5
 8002910:	f7fe fd9d 	bl	800144e <PE_SetPowerNegotiation>
 8002914:	213a      	movs	r1, #58	; 0x3a
 8002916:	7c28      	ldrb	r0, [r5, #16]
 8002918:	f7fd fe06 	bl	8000528 <USBPD_PE_Notification>
 800291c:	4668      	mov	r0, sp
 800291e:	7b00      	ldrb	r0, [r0, #12]
 8002920:	2814      	cmp	r0, #20
 8002922:	d005      	beq.n	8002930 <__iar_annotation$$branch+0x742>
 8002924:	2014      	movs	r0, #20
 8002926:	4669      	mov	r1, sp
 8002928:	7308      	strb	r0, [r1, #12]
 800292a:	0028      	movs	r0, r5
 800292c:	f7fe f867 	bl	80009fe <PE_Clear_RxEvent>
 8002930:	2059      	movs	r0, #89	; 0x59
 8002932:	7468      	strb	r0, [r5, #17]
 8002934:	e07e      	b.n	8002a34 <__iar_annotation$$branch+0x846>
 8002936:	213b      	movs	r1, #59	; 0x3b
 8002938:	e000      	b.n	800293c <__iar_annotation$$branch+0x74e>
 800293a:	2116      	movs	r1, #22
 800293c:	7c28      	ldrb	r0, [r5, #16]
 800293e:	f7fd fdf3 	bl	8000528 <USBPD_PE_Notification>
 8002942:	4668      	mov	r0, sp
 8002944:	7b00      	ldrb	r0, [r0, #12]
 8002946:	2814      	cmp	r0, #20
 8002948:	d108      	bne.n	800295c <__iar_annotation$$branch+0x76e>
 800294a:	e070      	b.n	8002a2e <__iar_annotation$$branch+0x840>
 800294c:	2117      	movs	r1, #23
 800294e:	7c28      	ldrb	r0, [r5, #16]
 8002950:	f7fd fdea 	bl	8000528 <USBPD_PE_Notification>
 8002954:	4668      	mov	r0, sp
 8002956:	7b00      	ldrb	r0, [r0, #12]
 8002958:	2814      	cmp	r0, #20
 800295a:	d068      	beq.n	8002a2e <__iar_annotation$$branch+0x840>
 800295c:	2014      	movs	r0, #20
 800295e:	4669      	mov	r1, sp
 8002960:	7308      	strb	r0, [r1, #12]
 8002962:	0028      	movs	r0, r5
 8002964:	f7fe f84b 	bl	80009fe <PE_Clear_RxEvent>
 8002968:	e061      	b.n	8002a2e <__iar_annotation$$branch+0x840>
 800296a:	2000      	movs	r0, #0
 800296c:	9005      	str	r0, [sp, #20]
 800296e:	ab05      	add	r3, sp, #20
 8002970:	aa07      	add	r2, sp, #28
 8002972:	2100      	movs	r1, #0
 8002974:	7c28      	ldrb	r0, [r5, #16]
 8002976:	68ae      	ldr	r6, [r5, #8]
 8002978:	6976      	ldr	r6, [r6, #20]
 800297a:	47b0      	blx	r6
 800297c:	2104      	movs	r1, #4
 800297e:	9805      	ldr	r0, [sp, #20]
 8002980:	f7fe fdb8 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 8002984:	2800      	cmp	r0, #0
 8002986:	d001      	beq.n	800298c <__iar_annotation$$branch+0x79e>
 8002988:	2003      	movs	r0, #3
 800298a:	e4ae      	b.n	80022ea <__iar_annotation$$branch+0xfc>
 800298c:	9002      	str	r0, [sp, #8]
 800298e:	2003      	movs	r0, #3
 8002990:	9001      	str	r0, [sp, #4]
 8002992:	9805      	ldr	r0, [sp, #20]
 8002994:	0880      	lsrs	r0, r0, #2
 8002996:	9000      	str	r0, [sp, #0]
 8002998:	ab07      	add	r3, sp, #28
 800299a:	2201      	movs	r2, #1
 800299c:	2100      	movs	r1, #0
 800299e:	0028      	movs	r0, r5
 80029a0:	f7fe fe35 	bl	800160e <PE_Send_DataMessage>
 80029a4:	e77c      	b.n	80028a0 <__iar_annotation$$branch+0x6b2>
 80029a6:	2000      	movs	r0, #0
 80029a8:	9002      	str	r0, [sp, #8]
 80029aa:	2003      	movs	r0, #3
 80029ac:	9001      	str	r0, [sp, #4]
 80029ae:	2001      	movs	r0, #1
 80029b0:	9000      	str	r0, [sp, #0]
 80029b2:	002b      	movs	r3, r5
 80029b4:	332c      	adds	r3, #44	; 0x2c
 80029b6:	2206      	movs	r2, #6
 80029b8:	2100      	movs	r1, #0
 80029ba:	0028      	movs	r0, r5
 80029bc:	f7fe fe27 	bl	800160e <PE_Send_DataMessage>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d1ef      	bne.n	80029a4 <__iar_annotation$$branch+0x7b6>
 80029c4:	215d      	movs	r1, #93	; 0x5d
 80029c6:	e655      	b.n	8002674 <__iar_annotation$$branch+0x486>
 80029c8:	9400      	str	r4, [sp, #0]
 80029ca:	2366      	movs	r3, #102	; 0x66
 80029cc:	2214      	movs	r2, #20
 80029ce:	2100      	movs	r1, #0
 80029d0:	0028      	movs	r0, r5
 80029d2:	f7fe fdf1 	bl	80015b8 <PE_Send_CtrlMessage>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d107      	bne.n	80029ea <__iar_annotation$$branch+0x7fc>
 80029da:	83ee      	strh	r6, [r5, #30]
 80029dc:	241b      	movs	r4, #27
 80029de:	214a      	movs	r1, #74	; 0x4a
 80029e0:	7c28      	ldrb	r0, [r5, #16]
 80029e2:	f7fd fda1 	bl	8000528 <USBPD_PE_Notification>
 80029e6:	200b      	movs	r0, #11
 80029e8:	7728      	strb	r0, [r5, #28]
 80029ea:	e759      	b.n	80028a0 <__iar_annotation$$branch+0x6b2>
 80029ec:	4668      	mov	r0, sp
 80029ee:	7b00      	ldrb	r0, [r0, #12]
 80029f0:	2811      	cmp	r0, #17
 80029f2:	d11f      	bne.n	8002a34 <__iar_annotation$$branch+0x846>
 80029f4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80029f6:	0bc1      	lsrs	r1, r0, #15
 80029f8:	d01c      	beq.n	8002a34 <__iar_annotation$$branch+0x846>
 80029fa:	06c0      	lsls	r0, r0, #27
 80029fc:	0ec0      	lsrs	r0, r0, #27
 80029fe:	280c      	cmp	r0, #12
 8002a00:	d118      	bne.n	8002a34 <__iar_annotation$$branch+0x846>
 8002a02:	2304      	movs	r3, #4
 8002a04:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002a06:	1d02      	adds	r2, r0, #4
 8002a08:	210a      	movs	r1, #10
 8002a0a:	7c28      	ldrb	r0, [r5, #16]
 8002a0c:	68ac      	ldr	r4, [r5, #8]
 8002a0e:	69a4      	ldr	r4, [r4, #24]
 8002a10:	47a0      	blx	r4
 8002a12:	4668      	mov	r0, sp
 8002a14:	7b00      	ldrb	r0, [r0, #12]
 8002a16:	2814      	cmp	r0, #20
 8002a18:	d005      	beq.n	8002a26 <__iar_annotation$$branch+0x838>
 8002a1a:	2014      	movs	r0, #20
 8002a1c:	4669      	mov	r1, sp
 8002a1e:	7308      	strb	r0, [r1, #12]
 8002a20:	0028      	movs	r0, r5
 8002a22:	f7fd ffec 	bl	80009fe <PE_Clear_RxEvent>
 8002a26:	214b      	movs	r1, #75	; 0x4b
 8002a28:	7c28      	ldrb	r0, [r5, #16]
 8002a2a:	f7fd fd7d 	bl	8000528 <USBPD_PE_Notification>
 8002a2e:	2003      	movs	r0, #3
 8002a30:	7468      	strb	r0, [r5, #17]
 8002a32:	2400      	movs	r4, #0
 8002a34:	8be8      	ldrh	r0, [r5, #30]
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0209      	lsls	r1, r1, #8
 8002a3a:	4288      	cmp	r0, r1
 8002a3c:	d1d5      	bne.n	80029ea <__iar_annotation$$branch+0x7fc>
 8002a3e:	e041      	b.n	8002ac4 <__iar_annotation$$branch+0x8d6>
 8002a40:	4891      	ldr	r0, [pc, #580]	; (8002c88 <.text_5>)
 8002a42:	182f      	adds	r7, r5, r0
 8002a44:	9400      	str	r4, [sp, #0]
 8002a46:	2339      	movs	r3, #57	; 0x39
 8002a48:	783a      	ldrb	r2, [r7, #0]
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	0028      	movs	r0, r5
 8002a4e:	f7fe fdb3 	bl	80015b8 <PE_Send_CtrlMessage>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d1c9      	bne.n	80029ea <__iar_annotation$$branch+0x7fc>
 8002a56:	7878      	ldrb	r0, [r7, #1]
 8002a58:	7728      	strb	r0, [r5, #28]
 8002a5a:	2144      	movs	r1, #68	; 0x44
 8002a5c:	7c28      	ldrb	r0, [r5, #16]
 8002a5e:	f7fd fd63 	bl	8000528 <USBPD_PE_Notification>
 8002a62:	e4b1      	b.n	80023c8 <__iar_annotation$$branch+0x1da>
 8002a64:	00008384 	.word	0x00008384
 8002a68:	4668      	mov	r0, sp
 8002a6a:	7b00      	ldrb	r0, [r0, #12]
 8002a6c:	2814      	cmp	r0, #20
 8002a6e:	d024      	beq.n	8002aba <__iar_annotation$$branch+0x8cc>
 8002a70:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002a72:	0bc0      	lsrs	r0, r0, #15
 8002a74:	d00e      	beq.n	8002a94 <__iar_annotation$$branch+0x8a6>
 8002a76:	0028      	movs	r0, r5
 8002a78:	f7fe fe06 	bl	8001688 <PE_Check_ExtendedMessage>
 8002a7c:	4668      	mov	r0, sp
 8002a7e:	7b00      	ldrb	r0, [r0, #12]
 8002a80:	2814      	cmp	r0, #20
 8002a82:	d005      	beq.n	8002a90 <__iar_annotation$$branch+0x8a2>
 8002a84:	2014      	movs	r0, #20
 8002a86:	4669      	mov	r1, sp
 8002a88:	7308      	strb	r0, [r1, #12]
 8002a8a:	0028      	movs	r0, r5
 8002a8c:	f7fd ffb7 	bl	80009fe <PE_Clear_RxEvent>
 8002a90:	2000      	movs	r0, #0
 8002a92:	83e8      	strh	r0, [r5, #30]
 8002a94:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002a96:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__iar_annotation$$branch+0x8da>)
 8002a98:	4001      	ands	r1, r0
 8002a9a:	2910      	cmp	r1, #16
 8002a9c:	d10d      	bne.n	8002aba <__iar_annotation$$branch+0x8cc>
 8002a9e:	2003      	movs	r0, #3
 8002aa0:	7468      	strb	r0, [r5, #17]
 8002aa2:	2400      	movs	r4, #0
 8002aa4:	4668      	mov	r0, sp
 8002aa6:	7b00      	ldrb	r0, [r0, #12]
 8002aa8:	2814      	cmp	r0, #20
 8002aaa:	d005      	beq.n	8002ab8 <__iar_annotation$$branch+0x8ca>
 8002aac:	2014      	movs	r0, #20
 8002aae:	4669      	mov	r1, sp
 8002ab0:	7308      	strb	r0, [r1, #12]
 8002ab2:	0028      	movs	r0, r5
 8002ab4:	f7fd ffa3 	bl	80009fe <PE_Clear_RxEvent>
 8002ab8:	83ec      	strh	r4, [r5, #30]
 8002aba:	8be8      	ldrh	r0, [r5, #30]
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	0209      	lsls	r1, r1, #8
 8002ac0:	4288      	cmp	r0, r1
 8002ac2:	d11c      	bne.n	8002afe <__iar_annotation$$branch+0x910>
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	e451      	b.n	800236c <__iar_annotation$$branch+0x17e>
 8002ac8:	0000f01f 	.word	0x0000f01f
 8002acc:	0028      	movs	r0, r5
 8002ace:	f7fe fefd 	bl	80018cc <PE_SubStateMachine_ExtendedMessages>
 8002ad2:	e63b      	b.n	800274c <__iar_annotation$$branch+0x55e>
 8002ad4:	a903      	add	r1, sp, #12
 8002ad6:	0028      	movs	r0, r5
 8002ad8:	f7fe f99a 	bl	8000e10 <PE_SubStateMachine_Generic>
 8002adc:	e636      	b.n	800274c <__iar_annotation$$branch+0x55e>
 8002ade:	a903      	add	r1, sp, #12
 8002ae0:	0028      	movs	r0, r5
 8002ae2:	f001 fa1b 	bl	8003f1c <PE_SubStateMachine_VconnSwap>
 8002ae6:	0004      	movs	r4, r0
 8002ae8:	6868      	ldr	r0, [r5, #4]
 8002aea:	6800      	ldr	r0, [r0, #0]
 8002aec:	0401      	lsls	r1, r0, #16
 8002aee:	0fc9      	lsrs	r1, r1, #31
 8002af0:	d006      	beq.n	8002b00 <__iar_annotation$$branch+0x912>
 8002af2:	6828      	ldr	r0, [r5, #0]
 8002af4:	6801      	ldr	r1, [r0, #0]
 8002af6:	4668      	mov	r0, sp
 8002af8:	7b40      	ldrb	r0, [r0, #13]
 8002afa:	f002 ff0d 	bl	8005918 <USBPD_PRL_SOPCapability>
 8002afe:	e6cf      	b.n	80028a0 <__iar_annotation$$branch+0x6b2>
 8002b00:	2101      	movs	r1, #1
 8002b02:	e7f8      	b.n	8002af6 <__iar_annotation$$branch+0x908>
 8002b04:	4668      	mov	r0, sp
 8002b06:	7b01      	ldrb	r1, [r0, #12]
 8002b08:	0028      	movs	r0, r5
 8002b0a:	f002 fc67 	bl	80053dc <PE_StateMachine_UVDM>
 8002b0e:	e6c7      	b.n	80028a0 <__iar_annotation$$branch+0x6b2>
 8002b10:	2000      	movs	r0, #0
 8002b12:	9000      	str	r0, [sp, #0]
 8002b14:	2358      	movs	r3, #88	; 0x58
 8002b16:	2213      	movs	r2, #19
 8002b18:	2100      	movs	r1, #0
 8002b1a:	0028      	movs	r0, r5
 8002b1c:	f7fe fd4c 	bl	80015b8 <PE_Send_CtrlMessage>
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d1f4      	bne.n	8002b0e <__iar_annotation$$branch+0x920>
 8002b24:	2009      	movs	r0, #9
 8002b26:	7728      	strb	r0, [r5, #28]
 8002b28:	e44e      	b.n	80023c8 <__iar_annotation$$branch+0x1da>
 8002b2a:	6968      	ldr	r0, [r5, #20]
 8002b2c:	2701      	movs	r7, #1
 8002b2e:	0b41      	lsrs	r1, r0, #13
 8002b30:	4039      	ands	r1, r7
 8002b32:	d019      	beq.n	8002b68 <__iar_annotation$$branch>
 8002b34:	0b80      	lsrs	r0, r0, #14
 8002b36:	4038      	ands	r0, r7
 8002b38:	d007      	beq.n	8002b4a <__iar_annotation$$branch+0x95c>
 8002b3a:	215b      	movs	r1, #91	; 0x5b
 8002b3c:	7c28      	ldrb	r0, [r5, #16]
 8002b3e:	f7fd fcf3 	bl	8000528 <USBPD_PE_Notification>
 8002b42:	6968      	ldr	r0, [r5, #20]
 8002b44:	4951      	ldr	r1, [pc, #324]	; (8002c8c <.text_6>)
 8002b46:	4001      	ands	r1, r0
 8002b48:	6169      	str	r1, [r5, #20]
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	7468      	strb	r0, [r5, #17]
 8002b4e:	7ca9      	ldrb	r1, [r5, #18]
 8002b50:	2903      	cmp	r1, #3
 8002b52:	d008      	beq.n	8002b66 <__iar_annotation$$branch+0x978>
 8002b54:	74a8      	strb	r0, [r5, #18]
 8002b56:	2000      	movs	r0, #0
 8002b58:	9000      	str	r0, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	7c29      	ldrb	r1, [r5, #16]
 8002b60:	2004      	movs	r0, #4
 8002b62:	6834      	ldr	r4, [r6, #0]
 8002b64:	47a0      	blx	r4
 8002b66:	2401      	movs	r4, #1

08002b68 <__iar_annotation$$branch>:
 8002b68:	f7ff fb5f 	bl	800222a <__iar_annotation$$branch+0x3c>

08002b6c <.text_3>:
 8002b6c:	00008014 	.word	0x00008014

08002b70 <PE_StateMachine_SNK_ReadyWait>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	0004      	movs	r4, r0
 8002b74:	000d      	movs	r5, r1
 8002b76:	2702      	movs	r7, #2
 8002b78:	7828      	ldrb	r0, [r5, #0]
 8002b7a:	2814      	cmp	r0, #20
 8002b7c:	d00b      	beq.n	8002b96 <PE_StateMachine_SNK_ReadyWait+0x26>
 8002b7e:	0020      	movs	r0, r4
 8002b80:	f7fe ffca 	bl	8001b18 <PE_ManageRXEvent>
 8002b84:	7828      	ldrb	r0, [r5, #0]
 8002b86:	2814      	cmp	r0, #20
 8002b88:	d07b      	beq.n	8002c82 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b8a:	2014      	movs	r0, #20
 8002b8c:	7028      	strb	r0, [r5, #0]
 8002b8e:	0020      	movs	r0, r4
 8002b90:	f7fd ff35 	bl	80009fe <PE_Clear_RxEvent>
 8002b94:	e075      	b.n	8002c82 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b96:	6961      	ldr	r1, [r4, #20]
 8002b98:	0cc8      	lsrs	r0, r1, #19
 8002b9a:	250f      	movs	r5, #15
 8002b9c:	03be      	lsls	r6, r7, #14
 8002b9e:	2700      	movs	r7, #0
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d020      	beq.n	8002be6 <PE_StateMachine_SNK_ReadyWait+0x76>
 8002ba4:	8c21      	ldrh	r1, [r4, #32]
 8002ba6:	42b1      	cmp	r1, r6
 8002ba8:	d110      	bne.n	8002bcc <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002baa:	7465      	strb	r5, [r4, #17]
 8002bac:	9700      	str	r7, [sp, #0]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2270      	movs	r2, #112	; 0x70
 8002bb2:	7c21      	ldrb	r1, [r4, #16]
 8002bb4:	2009      	movs	r0, #9
 8002bb6:	4d36      	ldr	r5, [pc, #216]	; (8002c90 <.text_7>)
 8002bb8:	682d      	ldr	r5, [r5, #0]
 8002bba:	47a8      	blx	r5
 8002bbc:	2098      	movs	r0, #152	; 0x98
 8002bbe:	0080      	lsls	r0, r0, #2
 8002bc0:	5c20      	ldrb	r0, [r4, r0]
 8002bc2:	1c40      	adds	r0, r0, #1
 8002bc4:	2198      	movs	r1, #152	; 0x98
 8002bc6:	0089      	lsls	r1, r1, #2
 8002bc8:	5460      	strb	r0, [r4, r1]
 8002bca:	e05a      	b.n	8002c82 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002bcc:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002bce:	0509      	lsls	r1, r1, #20
 8002bd0:	0f49      	lsrs	r1, r1, #29
 8002bd2:	180a      	adds	r2, r1, r0
 8002bd4:	2333      	movs	r3, #51	; 0x33
 8002bd6:	435a      	muls	r2, r3
 8002bd8:	4316      	orrs	r6, r2
 8002bda:	8426      	strh	r6, [r4, #32]
 8002bdc:	180f      	adds	r7, r1, r0
 8002bde:	2033      	movs	r0, #51	; 0x33
 8002be0:	4347      	muls	r7, r0
 8002be2:	b2bf      	uxth	r7, r7
 8002be4:	e04d      	b.n	8002c82 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002be6:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002be8:	42b0      	cmp	r0, r6
 8002bea:	d104      	bne.n	8002bf6 <PE_StateMachine_SNK_ReadyWait+0x86>
 8002bec:	2045      	movs	r0, #69	; 0x45
 8002bee:	7460      	strb	r0, [r4, #17]
 8002bf0:	430e      	orrs	r6, r1
 8002bf2:	6166      	str	r6, [r4, #20]
 8002bf4:	e045      	b.n	8002c82 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002bf6:	7c20      	ldrb	r0, [r4, #16]
 8002bf8:	f7fd ff26 	bl	8000a48 <PE_PRL_Control_RxEvent>
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d128      	bne.n	8002c52 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002c00:	2032      	movs	r0, #50	; 0x32
 8002c02:	5c20      	ldrb	r0, [r4, r0]
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d024      	beq.n	8002c52 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002c08:	6860      	ldr	r0, [r4, #4]
 8002c0a:	6800      	ldr	r0, [r0, #0]
 8002c0c:	2103      	movs	r1, #3
 8002c0e:	2203      	movs	r2, #3
 8002c10:	4002      	ands	r2, r0
 8002c12:	2a01      	cmp	r2, #1
 8002c14:	d007      	beq.n	8002c26 <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002c16:	4001      	ands	r1, r0
 8002c18:	2902      	cmp	r1, #2
 8002c1a:	d11a      	bne.n	8002c52 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002c1c:	7c20      	ldrb	r0, [r4, #16]
 8002c1e:	f002 fe6f 	bl	8005900 <USBPD_PRL_IsResistor_SinkTxOK>
 8002c22:	2801      	cmp	r0, #1
 8002c24:	d115      	bne.n	8002c52 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002c26:	2033      	movs	r0, #51	; 0x33
 8002c28:	5c20      	ldrb	r0, [r4, r0]
 8002c2a:	2131      	movs	r1, #49	; 0x31
 8002c2c:	5460      	strb	r0, [r4, r1]
 8002c2e:	2032      	movs	r0, #50	; 0x32
 8002c30:	5c20      	ldrb	r0, [r4, r0]
 8002c32:	7460      	strb	r0, [r4, #17]
 8002c34:	2845      	cmp	r0, #69	; 0x45
 8002c36:	d102      	bne.n	8002c3e <PE_StateMachine_SNK_ReadyWait+0xce>
 8002c38:	6960      	ldr	r0, [r4, #20]
 8002c3a:	4306      	orrs	r6, r0
 8002c3c:	6166      	str	r6, [r4, #20]
 8002c3e:	2132      	movs	r1, #50	; 0x32
 8002c40:	5467      	strb	r7, [r4, r1]
 8002c42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c44:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002c46:	6960      	ldr	r0, [r4, #20]
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	01c9      	lsls	r1, r1, #7
 8002c4c:	4301      	orrs	r1, r0
 8002c4e:	6161      	str	r1, [r4, #20]
 8002c50:	e017      	b.n	8002c82 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002c52:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002c54:	42b0      	cmp	r0, r6
 8002c56:	d109      	bne.n	8002c6c <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002c58:	8467      	strh	r7, [r4, #34]	; 0x22
 8002c5a:	2098      	movs	r0, #152	; 0x98
 8002c5c:	0080      	lsls	r0, r0, #2
 8002c5e:	1820      	adds	r0, r4, r0
 8002c60:	7881      	ldrb	r1, [r0, #2]
 8002c62:	1c49      	adds	r1, r1, #1
 8002c64:	7081      	strb	r1, [r0, #2]
 8002c66:	2005      	movs	r0, #5
 8002c68:	7460      	strb	r0, [r4, #17]
 8002c6a:	e00a      	b.n	8002c82 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002c6c:	0020      	movs	r0, r4
 8002c6e:	f7fe fc15 	bl	800149c <PE_CalculateMinTiming>
 8002c72:	2132      	movs	r1, #50	; 0x32
 8002c74:	5c61      	ldrb	r1, [r4, r1]
 8002c76:	2900      	cmp	r1, #0
 8002c78:	d002      	beq.n	8002c80 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002c7a:	280f      	cmp	r0, #15
 8002c7c:	d300      	bcc.n	8002c80 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002c7e:	200f      	movs	r0, #15
 8002c80:	0007      	movs	r7, r0
 8002c82:	0038      	movs	r0, r7
 8002c84:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002c88 <.text_5>:
 8002c88:	0000025e 	.word	0x0000025e

08002c8c <.text_6>:
 8002c8c:	ffffbfff 	.word	0xffffbfff

08002c90 <.text_7>:
 8002c90:	20000000 	.word	0x20000000

08002c94 <USBPD_PE_StateMachine_SRC>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	0005      	movs	r5, r0
 8002c9a:	482e      	ldr	r0, [pc, #184]	; (8002d54 <USBPD_PE_StateMachine_SRC+0xc0>)
 8002c9c:	00a9      	lsls	r1, r5, #2
 8002c9e:	5844      	ldr	r4, [r0, r1]
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	9004      	str	r0, [sp, #16]
 8002ca4:	8be0      	ldrh	r0, [r4, #30]
 8002ca6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002ca8:	050a      	lsls	r2, r1, #20
 8002caa:	0f52      	lsrs	r2, r2, #29
 8002cac:	1880      	adds	r0, r0, r2
 8002cae:	06c9      	lsls	r1, r1, #27
 8002cb0:	0ec9      	lsrs	r1, r1, #27
 8002cb2:	1846      	adds	r6, r0, r1
 8002cb4:	b2b6      	uxth	r6, r6
 8002cb6:	7c60      	ldrb	r0, [r4, #17]
 8002cb8:	2848      	cmp	r0, #72	; 0x48
 8002cba:	d134      	bne.n	8002d26 <USBPD_PE_StateMachine_SRC+0x92>
 8002cbc:	0020      	movs	r0, r4
 8002cbe:	f7fd ff85 	bl	8000bcc <PE_Reset_ZI>
 8002cc2:	0020      	movs	r0, r4
 8002cc4:	f7fd ffb8 	bl	8000c38 <PE_Reset_Counter>
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	7900      	ldrb	r0, [r0, #4]
 8002ccc:	0783      	lsls	r3, r0, #30
 8002cce:	0f9b      	lsrs	r3, r3, #30
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	7c20      	ldrb	r0, [r4, #16]
 8002cd6:	f002 fdae 	bl	8005836 <USBPD_PRL_SetHeader>
 8002cda:	6860      	ldr	r0, [r4, #4]
 8002cdc:	6801      	ldr	r1, [r0, #0]
 8002cde:	2208      	movs	r2, #8
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	6002      	str	r2, [r0, #0]
 8002ce4:	6860      	ldr	r0, [r4, #4]
 8002ce6:	6801      	ldr	r1, [r0, #0]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4391      	bics	r1, r2
 8002cec:	6822      	ldr	r2, [r4, #0]
 8002cee:	7912      	ldrb	r2, [r2, #4]
 8002cf0:	0792      	lsls	r2, r2, #30
 8002cf2:	0f92      	lsrs	r2, r2, #30
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	6002      	str	r2, [r0, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	7c20      	ldrb	r0, [r4, #16]
 8002cfc:	f002 fe0c 	bl	8005918 <USBPD_PRL_SOPCapability>
 8002d00:	7c20      	ldrb	r0, [r4, #16]
 8002d02:	f003 f875 	bl	8005df0 <USBPD_PRL_Reset>
 8002d06:	2002      	movs	r0, #2
 8002d08:	7460      	strb	r0, [r4, #17]
 8002d0a:	7ca0      	ldrb	r0, [r4, #18]
 8002d0c:	2802      	cmp	r0, #2
 8002d0e:	d00a      	beq.n	8002d26 <USBPD_PE_StateMachine_SRC+0x92>
 8002d10:	2002      	movs	r0, #2
 8002d12:	74a0      	strb	r0, [r4, #18]
 8002d14:	2000      	movs	r0, #0
 8002d16:	9000      	str	r0, [sp, #0]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	7c21      	ldrb	r1, [r4, #16]
 8002d1e:	2004      	movs	r0, #4
 8002d20:	4fc3      	ldr	r7, [pc, #780]	; (8003030 <__iar_annotation$$branch+0x82>)
 8002d22:	683f      	ldr	r7, [r7, #0]
 8002d24:	47b8      	blx	r7
 8002d26:	6960      	ldr	r0, [r4, #20]
 8002d28:	0341      	lsls	r1, r0, #13
 8002d2a:	0fc9      	lsrs	r1, r1, #31
 8002d2c:	d006      	beq.n	8002d3c <USBPD_PE_StateMachine_SRC+0xa8>
 8002d2e:	49c1      	ldr	r1, [pc, #772]	; (8003034 <__iar_annotation$$branch+0x86>)
 8002d30:	4001      	ands	r1, r0
 8002d32:	6161      	str	r1, [r4, #20]
 8002d34:	2164      	movs	r1, #100	; 0x64
 8002d36:	7c20      	ldrb	r0, [r4, #16]
 8002d38:	f7fd fbf6 	bl	8000528 <USBPD_PE_Notification>
 8002d3c:	0020      	movs	r0, r4
 8002d3e:	f7fd fe27 	bl	8000990 <PE_Get_RxEvent>
 8002d42:	4669      	mov	r1, sp
 8002d44:	7308      	strb	r0, [r1, #12]
 8002d46:	4668      	mov	r0, sp
 8002d48:	7b00      	ldrb	r0, [r0, #12]
 8002d4a:	2803      	cmp	r0, #3
 8002d4c:	d104      	bne.n	8002d58 <USBPD_PE_StateMachine_SRC+0xc4>
 8002d4e:	2001      	movs	r0, #1
 8002d50:	b009      	add	sp, #36	; 0x24
 8002d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d54:	20000228 	.word	0x20000228
 8002d58:	4668      	mov	r0, sp
 8002d5a:	7345      	strb	r5, [r0, #13]
 8002d5c:	9607      	str	r6, [sp, #28]
 8002d5e:	6860      	ldr	r0, [r4, #4]
 8002d60:	6800      	ldr	r0, [r0, #0]
 8002d62:	04c1      	lsls	r1, r0, #19
 8002d64:	0fc9      	lsrs	r1, r1, #31
 8002d66:	d100      	bne.n	8002d6a <USBPD_PE_StateMachine_SRC+0xd6>
 8002d68:	e170      	b.n	800304c <__iar_annotation$$branch+0x9e>
 8002d6a:	6960      	ldr	r0, [r4, #20]
 8002d6c:	0381      	lsls	r1, r0, #14
 8002d6e:	0fc9      	lsrs	r1, r1, #31
 8002d70:	d100      	bne.n	8002d74 <USBPD_PE_StateMachine_SRC+0xe0>
 8002d72:	e179      	b.n	8003068 <__iar_annotation$$branch+0xba>
 8002d74:	4668      	mov	r0, sp
 8002d76:	7b40      	ldrb	r0, [r0, #13]
 8002d78:	f002 fdc6 	bl	8005908 <USBPD_PRL_FastRoleSwapSignalling>
 8002d7c:	20a6      	movs	r0, #166	; 0xa6
 8002d7e:	7460      	strb	r0, [r4, #17]
 8002d80:	2109      	movs	r1, #9
 8002d82:	7721      	strb	r1, [r4, #28]
 8002d84:	2100      	movs	r1, #0
 8002d86:	2232      	movs	r2, #50	; 0x32
 8002d88:	54a1      	strb	r1, [r4, r2]
 8002d8a:	6961      	ldr	r1, [r4, #20]
 8002d8c:	4aaa      	ldr	r2, [pc, #680]	; (8003038 <__iar_annotation$$branch+0x8a>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	6162      	str	r2, [r4, #20]
 8002d92:	49aa      	ldr	r1, [pc, #680]	; (800303c <__iar_annotation$$branch+0x8e>)
 8002d94:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002d96:	7ca1      	ldrb	r1, [r4, #18]
 8002d98:	29a6      	cmp	r1, #166	; 0xa6
 8002d9a:	d000      	beq.n	8002d9e <USBPD_PE_StateMachine_SRC+0x10a>
 8002d9c:	e15a      	b.n	8003054 <__iar_annotation$$branch+0xa6>
 8002d9e:	2502      	movs	r5, #2
 8002da0:	4668      	mov	r0, sp
 8002da2:	7b00      	ldrb	r0, [r0, #12]
 8002da4:	2811      	cmp	r0, #17
 8002da6:	d11e      	bne.n	8002de6 <USBPD_PE_StateMachine_SRC+0x152>
 8002da8:	6860      	ldr	r0, [r4, #4]
 8002daa:	6800      	ldr	r0, [r0, #0]
 8002dac:	0701      	lsls	r1, r0, #28
 8002dae:	0fc9      	lsrs	r1, r1, #31
 8002db0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002db2:	0680      	lsls	r0, r0, #26
 8002db4:	0fc2      	lsrs	r2, r0, #31
 8002db6:	4291      	cmp	r1, r2
 8002db8:	d115      	bne.n	8002de6 <USBPD_PE_StateMachine_SRC+0x152>
 8002dba:	2014      	movs	r0, #20
 8002dbc:	4669      	mov	r1, sp
 8002dbe:	7308      	strb	r0, [r1, #12]
 8002dc0:	0020      	movs	r0, r4
 8002dc2:	f7fd fe1c 	bl	80009fe <PE_Clear_RxEvent>
 8002dc6:	2092      	movs	r0, #146	; 0x92
 8002dc8:	7460      	strb	r0, [r4, #17]
 8002dca:	7ca0      	ldrb	r0, [r4, #18]
 8002dcc:	2892      	cmp	r0, #146	; 0x92
 8002dce:	d00a      	beq.n	8002de6 <USBPD_PE_StateMachine_SRC+0x152>
 8002dd0:	2092      	movs	r0, #146	; 0x92
 8002dd2:	74a0      	strb	r0, [r4, #18]
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	9000      	str	r0, [sp, #0]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2292      	movs	r2, #146	; 0x92
 8002ddc:	7c21      	ldrb	r1, [r4, #16]
 8002dde:	2004      	movs	r0, #4
 8002de0:	4e93      	ldr	r6, [pc, #588]	; (8003030 <__iar_annotation$$branch+0x82>)
 8002de2:	6836      	ldr	r6, [r6, #0]
 8002de4:	47b0      	blx	r6
 8002de6:	9807      	ldr	r0, [sp, #28]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d001      	beq.n	8002df0 <USBPD_PE_StateMachine_SRC+0x15c>
 8002dec:	2001      	movs	r0, #1
 8002dee:	9004      	str	r0, [sp, #16]
 8002df0:	7c60      	ldrb	r0, [r4, #17]
 8002df2:	4993      	ldr	r1, [pc, #588]	; (8003040 <__iar_annotation$$branch+0x92>)
 8002df4:	1866      	adds	r6, r4, r1
 8002df6:	4f93      	ldr	r7, [pc, #588]	; (8003044 <__iar_annotation$$branch+0x96>)
 8002df8:	4993      	ldr	r1, [pc, #588]	; (8003048 <__iar_annotation$$branch+0x9a>)
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	d100      	bne.n	8002e00 <USBPD_PE_StateMachine_SRC+0x16c>
 8002dfe:	e158      	b.n	80030b2 <__iar_annotation$$branch+0x104>
 8002e00:	1e42      	subs	r2, r0, #1
 8002e02:	d069      	beq.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002e04:	1e52      	subs	r2, r2, #1
 8002e06:	d100      	bne.n	8002e0a <USBPD_PE_StateMachine_SRC+0x176>
 8002e08:	e16b      	b.n	80030e2 <__iar_annotation$$branch+0x134>
 8002e0a:	1e52      	subs	r2, r2, #1
 8002e0c:	2a01      	cmp	r2, #1
 8002e0e:	d801      	bhi.n	8002e14 <__iar_annotation$$branch+0x4>

08002e10 <__iar_annotation$$branch>:
 8002e10:	f000 fdbf 	bl	8003992 <__iar_annotation$$branch+0x9e4>
 8002e14:	1e92      	subs	r2, r2, #2
 8002e16:	d100      	bne.n	8002e1a <__iar_annotation$$branch+0xa>
 8002e18:	e1ab      	b.n	8003172 <__iar_annotation$$branch+0x1c4>
 8002e1a:	1e52      	subs	r2, r2, #1
 8002e1c:	d100      	bne.n	8002e20 <__iar_annotation$$branch+0x10>
 8002e1e:	e1ad      	b.n	800317c <__iar_annotation$$branch+0x1ce>
 8002e20:	1e52      	subs	r2, r2, #1
 8002e22:	d100      	bne.n	8002e26 <__iar_annotation$$branch+0x16>
 8002e24:	e1b2      	b.n	800318c <__iar_annotation$$branch+0x1de>
 8002e26:	1e52      	subs	r2, r2, #1
 8002e28:	d100      	bne.n	8002e2c <__iar_annotation$$branch+0x1c>
 8002e2a:	e20e      	b.n	800324a <__iar_annotation$$branch+0x29c>
 8002e2c:	1e52      	subs	r2, r2, #1
 8002e2e:	d100      	bne.n	8002e32 <__iar_annotation$$branch+0x22>
 8002e30:	e250      	b.n	80032d4 <__iar_annotation$$branch+0x326>
 8002e32:	1ed2      	subs	r2, r2, #3
 8002e34:	d100      	bne.n	8002e38 <__iar_annotation$$branch+0x28>
 8002e36:	e2a6      	b.n	8003386 <__iar_annotation$$branch+0x3d8>
 8002e38:	1e52      	subs	r2, r2, #1
 8002e3a:	d100      	bne.n	8002e3e <__iar_annotation$$branch+0x2e>
 8002e3c:	e2b6      	b.n	80033ac <__iar_annotation$$branch+0x3fe>
 8002e3e:	1e52      	subs	r2, r2, #1
 8002e40:	d100      	bne.n	8002e44 <__iar_annotation$$branch+0x34>
 8002e42:	e13f      	b.n	80030c4 <__iar_annotation$$branch+0x116>
 8002e44:	1e52      	subs	r2, r2, #1
 8002e46:	d100      	bne.n	8002e4a <__iar_annotation$$branch+0x3a>
 8002e48:	e33e      	b.n	80034c8 <__iar_annotation$$branch+0x51a>
 8002e4a:	1e52      	subs	r2, r2, #1
 8002e4c:	d100      	bne.n	8002e50 <__iar_annotation$$branch+0x40>
 8002e4e:	e2f7      	b.n	8003440 <__iar_annotation$$branch+0x492>
 8002e50:	1e52      	subs	r2, r2, #1
 8002e52:	d100      	bne.n	8002e56 <__iar_annotation$$branch+0x46>
 8002e54:	e2fd      	b.n	8003452 <__iar_annotation$$branch+0x4a4>
 8002e56:	1e52      	subs	r2, r2, #1
 8002e58:	d100      	bne.n	8002e5c <__iar_annotation$$branch+0x4c>
 8002e5a:	e309      	b.n	8003470 <__iar_annotation$$branch+0x4c2>
 8002e5c:	1e52      	subs	r2, r2, #1
 8002e5e:	d100      	bne.n	8002e62 <__iar_annotation$$branch+0x52>
 8002e60:	e3ba      	b.n	80035d8 <__iar_annotation$$branch+0x62a>
 8002e62:	1e52      	subs	r2, r2, #1
 8002e64:	d100      	bne.n	8002e68 <__iar_annotation$$branch+0x58>
 8002e66:	e35c      	b.n	8003522 <__iar_annotation$$branch+0x574>
 8002e68:	1e52      	subs	r2, r2, #1
 8002e6a:	d100      	bne.n	8002e6e <__iar_annotation$$branch+0x5e>
 8002e6c:	e363      	b.n	8003536 <__iar_annotation$$branch+0x588>
 8002e6e:	1e52      	subs	r2, r2, #1
 8002e70:	d100      	bne.n	8002e74 <__iar_annotation$$branch+0x64>
 8002e72:	e202      	b.n	800327a <__iar_annotation$$branch+0x2cc>
 8002e74:	1e52      	subs	r2, r2, #1
 8002e76:	d100      	bne.n	8002e7a <__iar_annotation$$branch+0x6a>
 8002e78:	e37d      	b.n	8003576 <__iar_annotation$$branch+0x5c8>
 8002e7a:	1e52      	subs	r2, r2, #1
 8002e7c:	2a01      	cmp	r2, #1
 8002e7e:	d92b      	bls.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002e80:	1e92      	subs	r2, r2, #2
 8002e82:	d101      	bne.n	8002e88 <__iar_annotation$$branch+0x4>

08002e84 <__iar_annotation$$branch>:
 8002e84:	f000 fbd2 	bl	800362c <__iar_annotation$$branch+0x67e>
 8002e88:	1e52      	subs	r2, r2, #1
 8002e8a:	d101      	bne.n	8002e90 <__iar_annotation$$branch+0x4>

08002e8c <__iar_annotation$$branch>:
 8002e8c:	f000 fbde 	bl	800364c <__iar_annotation$$branch+0x69e>
 8002e90:	1e92      	subs	r2, r2, #2
 8002e92:	d021      	beq.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002e94:	1e52      	subs	r2, r2, #1
 8002e96:	d101      	bne.n	8002e9c <__iar_annotation$$branch+0x4>

08002e98 <__iar_annotation$$branch>:
 8002e98:	f000 fcb5 	bl	8003806 <__iar_annotation$$branch+0x858>
 8002e9c:	1e52      	subs	r2, r2, #1
 8002e9e:	d101      	bne.n	8002ea4 <__iar_annotation$$branch+0x4>

08002ea0 <__iar_annotation$$branch>:
 8002ea0:	f000 fcc7 	bl	8003832 <__iar_annotation$$branch+0x884>
 8002ea4:	1e52      	subs	r2, r2, #1
 8002ea6:	d101      	bne.n	8002eac <__iar_annotation$$branch+0x4>

08002ea8 <__iar_annotation$$branch>:
 8002ea8:	f000 fd13 	bl	80038d2 <__iar_annotation$$branch+0x924>
 8002eac:	1e52      	subs	r2, r2, #1
 8002eae:	d101      	bne.n	8002eb4 <__iar_annotation$$branch+0x4>

08002eb0 <__iar_annotation$$branch>:
 8002eb0:	f000 fd3c 	bl	800392c <__iar_annotation$$branch+0x97e>
 8002eb4:	1e52      	subs	r2, r2, #1
 8002eb6:	d101      	bne.n	8002ebc <__iar_annotation$$branch+0x4>

08002eb8 <__iar_annotation$$branch>:
 8002eb8:	f000 fc12 	bl	80036e0 <__iar_annotation$$branch+0x732>
 8002ebc:	1e92      	subs	r2, r2, #2
 8002ebe:	d101      	bne.n	8002ec4 <__iar_annotation$$branch+0x4>

08002ec0 <__iar_annotation$$branch>:
 8002ec0:	f000 fc37 	bl	8003732 <__iar_annotation$$branch+0x784>
 8002ec4:	1e52      	subs	r2, r2, #1
 8002ec6:	d101      	bne.n	8002ecc <__iar_annotation$$branch+0x4>

08002ec8 <__iar_annotation$$branch>:
 8002ec8:	f000 fc5b 	bl	8003782 <__iar_annotation$$branch+0x7d4>
 8002ecc:	1e52      	subs	r2, r2, #1
 8002ece:	d101      	bne.n	8002ed4 <__iar_annotation$$branch+0x4>

08002ed0 <__iar_annotation$$branch>:
 8002ed0:	f000 fc76 	bl	80037c0 <__iar_annotation$$branch+0x812>
 8002ed4:	1e52      	subs	r2, r2, #1
 8002ed6:	2a02      	cmp	r2, #2
 8002ed8:	d801      	bhi.n	8002ede <__iar_annotation$$branch+0x4>

08002eda <__iar_annotation$$branch>:
 8002eda:	f000 fe4a 	bl	8003b72 <__iar_annotation$$branch+0xbc4>
 8002ede:	1ed2      	subs	r2, r2, #3
 8002ee0:	d101      	bne.n	8002ee6 <__iar_annotation$$branch+0x4>

08002ee2 <__iar_annotation$$branch>:
 8002ee2:	f000 fc21 	bl	8003728 <__iar_annotation$$branch+0x77a>
 8002ee6:	1e52      	subs	r2, r2, #1
 8002ee8:	d101      	bne.n	8002eee <__iar_annotation$$branch+0x4>

08002eea <__iar_annotation$$branch>:
 8002eea:	f000 fdc4 	bl	8003a76 <__iar_annotation$$branch+0xac8>
 8002eee:	1e52      	subs	r2, r2, #1
 8002ef0:	d0f2      	beq.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002ef2:	1e52      	subs	r2, r2, #1
 8002ef4:	d101      	bne.n	8002efa <__iar_annotation$$branch+0x4>

08002ef6 <__iar_annotation$$branch>:
 8002ef6:	f000 fdcf 	bl	8003a98 <__iar_annotation$$branch+0xaea>
 8002efa:	1e52      	subs	r2, r2, #1
 8002efc:	d101      	bne.n	8002f02 <__iar_annotation$$branch+0x4>

08002efe <__iar_annotation$$branch>:
 8002efe:	f000 fdfd 	bl	8003afc <__iar_annotation$$branch+0xb4e>
 8002f02:	1e52      	subs	r2, r2, #1
 8002f04:	2a01      	cmp	r2, #1
 8002f06:	d9e7      	bls.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002f08:	1e92      	subs	r2, r2, #2
 8002f0a:	d001      	beq.n	8002f10 <__iar_annotation$$branch+0x12>
 8002f0c:	1e92      	subs	r2, r2, #2
 8002f0e:	2a05      	cmp	r2, #5
 8002f10:	d801      	bhi.n	8002f16 <__iar_annotation$$branch+0x4>

08002f12 <__iar_annotation$$branch>:
 8002f12:	f000 fe2a 	bl	8003b6a <__iar_annotation$$branch+0xbbc>
 8002f16:	1f92      	subs	r2, r2, #6
 8002f18:	d101      	bne.n	8002f1e <__iar_annotation$$branch+0x4>

08002f1a <__iar_annotation$$branch>:
 8002f1a:	f000 fe00 	bl	8003b1e <__iar_annotation$$branch+0xb70>
 8002f1e:	1e52      	subs	r2, r2, #1
 8002f20:	2a03      	cmp	r2, #3
 8002f22:	d9d9      	bls.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002f24:	3a11      	subs	r2, #17
 8002f26:	d0d7      	beq.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002f28:	1e52      	subs	r2, r2, #1
 8002f2a:	d100      	bne.n	8002f2e <__iar_annotation$$branch+0x14>
 8002f2c:	e17b      	b.n	8003226 <__iar_annotation$$branch+0x278>
 8002f2e:	3a0f      	subs	r2, #15
 8002f30:	d101      	bne.n	8002f36 <__iar_annotation$$branch+0x4>

08002f32 <__iar_annotation$$branch>:
 8002f32:	f000 fd16 	bl	8003962 <__iar_annotation$$branch+0x9b4>
 8002f36:	1fd2      	subs	r2, r2, #7
 8002f38:	2a01      	cmp	r2, #1
 8002f3a:	d9cd      	bls.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002f3c:	1f52      	subs	r2, r2, #5
 8002f3e:	2a01      	cmp	r2, #1
 8002f40:	d9ca      	bls.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002f42:	3a0d      	subs	r2, #13
 8002f44:	d0c8      	beq.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002f46:	3a12      	subs	r2, #18
 8002f48:	d101      	bne.n	8002f4e <__iar_annotation$$branch+0x4>

08002f4a <__iar_annotation$$branch>:
 8002f4a:	f000 fe47 	bl	8003bdc <__iar_annotation$$branch+0x62>
 8002f4e:	3a0c      	subs	r2, #12
 8002f50:	d100      	bne.n	8002f54 <__iar_annotation$$branch+0xa>
 8002f52:	e0ba      	b.n	80030ca <__iar_annotation$$branch+0x11c>
 8002f54:	1e52      	subs	r2, r2, #1
 8002f56:	2a02      	cmp	r2, #2
 8002f58:	d9be      	bls.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002f5a:	1ed2      	subs	r2, r2, #3
 8002f5c:	d100      	bne.n	8002f60 <__iar_annotation$$branch+0x16>
 8002f5e:	e241      	b.n	80033e4 <__iar_annotation$$branch+0x436>
 8002f60:	1e52      	subs	r2, r2, #1
 8002f62:	d100      	bne.n	8002f66 <__iar_annotation$$branch+0x1c>
 8002f64:	e258      	b.n	8003418 <__iar_annotation$$branch+0x46a>
 8002f66:	1e92      	subs	r2, r2, #2
 8002f68:	d0b6      	beq.n	8002ed8 <__iar_annotation$$branch+0x8>
 8002f6a:	1e52      	subs	r2, r2, #1
 8002f6c:	d100      	bne.n	8002f70 <__iar_annotation$$branch+0x26>
 8002f6e:	e100      	b.n	8003172 <__iar_annotation$$branch+0x1c4>
 8002f70:	1e92      	subs	r2, r2, #2
 8002f72:	2a08      	cmp	r2, #8
 8002f74:	d801      	bhi.n	8002f7a <__iar_annotation$$branch+0x4>

08002f76 <__iar_annotation$$branch>:
 8002f76:	f000 fe02 	bl	8003b7e <__iar_annotation$$branch+0x4>
 8002f7a:	3a0a      	subs	r2, #10
 8002f7c:	d101      	bne.n	8002f82 <__iar_annotation$$branch+0x4>

08002f7e <__iar_annotation$$branch>:
 8002f7e:	f000 fe11 	bl	8003ba4 <__iar_annotation$$branch+0x2a>
 8002f82:	a903      	add	r1, sp, #12
 8002f84:	0020      	movs	r0, r4
 8002f86:	f001 fb57 	bl	8004638 <PE_StateMachine_VDM>
 8002f8a:	0005      	movs	r5, r0
 8002f8c:	7c62      	ldrb	r2, [r4, #17]
 8002f8e:	4e28      	ldr	r6, [pc, #160]	; (8003030 <__iar_annotation$$branch+0x82>)
 8002f90:	7ca0      	ldrb	r0, [r4, #18]
 8002f92:	4290      	cmp	r0, r2
 8002f94:	d007      	beq.n	8002fa6 <__iar_annotation$$branch+0x28>
 8002f96:	74a2      	strb	r2, [r4, #18]
 8002f98:	2000      	movs	r0, #0
 8002f9a:	9000      	str	r0, [sp, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	7c21      	ldrb	r1, [r4, #16]
 8002fa0:	2004      	movs	r0, #4
 8002fa2:	6837      	ldr	r7, [r6, #0]
 8002fa4:	47b8      	blx	r7
 8002fa6:	4668      	mov	r0, sp
 8002fa8:	7b00      	ldrb	r0, [r0, #12]
 8002faa:	2814      	cmp	r0, #20
 8002fac:	d101      	bne.n	8002fb2 <__iar_annotation$$branch+0x4>

08002fae <__iar_annotation$$branch>:
 8002fae:	f000 fe1b 	bl	8003be8 <__iar_annotation$$branch+0x6e>
 8002fb2:	0020      	movs	r0, r4
 8002fb4:	f7fd fd6a 	bl	8000a8c <PE_Check_AMSConflict>
 8002fb8:	2815      	cmp	r0, #21
 8002fba:	d109      	bne.n	8002fd0 <__iar_annotation$$branch+0x22>
 8002fbc:	4668      	mov	r0, sp
 8002fbe:	7b00      	ldrb	r0, [r0, #12]
 8002fc0:	2814      	cmp	r0, #20
 8002fc2:	d005      	beq.n	8002fd0 <__iar_annotation$$branch+0x22>
 8002fc4:	2014      	movs	r0, #20
 8002fc6:	4669      	mov	r1, sp
 8002fc8:	7308      	strb	r0, [r1, #12]
 8002fca:	0020      	movs	r0, r4
 8002fcc:	f7fd fd17 	bl	80009fe <PE_Clear_RxEvent>
 8002fd0:	7c62      	ldrb	r2, [r4, #17]
 8002fd2:	7ca0      	ldrb	r0, [r4, #18]
 8002fd4:	4290      	cmp	r0, r2
 8002fd6:	d007      	beq.n	8002fe8 <__iar_annotation$$branch+0x3a>
 8002fd8:	74a2      	strb	r2, [r4, #18]
 8002fda:	2000      	movs	r0, #0
 8002fdc:	9000      	str	r0, [sp, #0]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	7c21      	ldrb	r1, [r4, #16]
 8002fe2:	2004      	movs	r0, #4
 8002fe4:	6835      	ldr	r5, [r6, #0]
 8002fe6:	47a8      	blx	r5
 8002fe8:	2500      	movs	r5, #0
 8002fea:	6960      	ldr	r0, [r4, #20]
 8002fec:	4980      	ldr	r1, [pc, #512]	; (80031f0 <__iar_annotation$$branch+0x242>)
 8002fee:	4001      	ands	r1, r0
 8002ff0:	6161      	str	r1, [r4, #20]
 8002ff2:	9804      	ldr	r0, [sp, #16]
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d017      	beq.n	8003028 <__iar_annotation$$branch+0x7a>
 8002ff8:	487e      	ldr	r0, [pc, #504]	; (80031f4 <__iar_annotation$$branch+0x246>)
 8002ffa:	6800      	ldr	r0, [r0, #0]
 8002ffc:	497e      	ldr	r1, [pc, #504]	; (80031f8 <__iar_annotation$$branch+0x24a>)
 8002ffe:	4288      	cmp	r0, r1
 8003000:	d012      	beq.n	8003028 <__iar_annotation$$branch+0x7a>
 8003002:	487e      	ldr	r0, [pc, #504]	; (80031fc <__iar_annotation$$branch+0x24e>)
 8003004:	7c21      	ldrb	r1, [r4, #16]
 8003006:	0089      	lsls	r1, r1, #2
 8003008:	5841      	ldr	r1, [r0, r1]
 800300a:	694a      	ldr	r2, [r1, #20]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	031b      	lsls	r3, r3, #12
 8003010:	18d2      	adds	r2, r2, r3
 8003012:	614a      	str	r2, [r1, #20]
 8003014:	7c21      	ldrb	r1, [r4, #16]
 8003016:	0089      	lsls	r1, r1, #2
 8003018:	5840      	ldr	r0, [r0, r1]
 800301a:	6941      	ldr	r1, [r0, #20]
 800301c:	0cca      	lsrs	r2, r1, #19
 800301e:	2a08      	cmp	r2, #8
 8003020:	d302      	bcc.n	8003028 <__iar_annotation$$branch+0x7a>
 8003022:	0349      	lsls	r1, r1, #13
 8003024:	0b49      	lsrs	r1, r1, #13
 8003026:	6141      	str	r1, [r0, #20]
 8003028:	2d00      	cmp	r5, #0
 800302a:	d100      	bne.n	800302e <__iar_annotation$$branch+0x80>
 800302c:	e697      	b.n	8002d5e <USBPD_PE_StateMachine_SRC+0xca>
 800302e:	e00f      	b.n	8003050 <__iar_annotation$$branch+0xa2>
 8003030:	20000000 	.word	0x20000000
 8003034:	fffbffff 	.word	0xfffbffff
 8003038:	fffdffff 	.word	0xfffdffff
 800303c:	00008011 	.word	0x00008011
 8003040:	0000025e 	.word	0x0000025e
 8003044:	0000801b 	.word	0x0000801b
 8003048:	0000f01f 	.word	0x0000f01f
 800304c:	2500      	movs	r5, #0
 800304e:	43ed      	mvns	r5, r5
 8003050:	0028      	movs	r0, r5
 8003052:	e67d      	b.n	8002d50 <USBPD_PE_StateMachine_SRC+0xbc>
 8003054:	74a0      	strb	r0, [r4, #18]
 8003056:	2000      	movs	r0, #0
 8003058:	9000      	str	r0, [sp, #0]
 800305a:	2300      	movs	r3, #0
 800305c:	22a6      	movs	r2, #166	; 0xa6
 800305e:	7c21      	ldrb	r1, [r4, #16]
 8003060:	2004      	movs	r0, #4
 8003062:	4d67      	ldr	r5, [pc, #412]	; (8003200 <__iar_annotation$$branch+0x252>)
 8003064:	682d      	ldr	r5, [r5, #0]
 8003066:	47a8      	blx	r5
 8003068:	2502      	movs	r5, #2
 800306a:	2032      	movs	r0, #50	; 0x32
 800306c:	5c20      	ldrb	r0, [r4, r0]
 800306e:	280f      	cmp	r0, #15
 8003070:	d001      	beq.n	8003076 <__iar_annotation$$branch+0xc8>
 8003072:	2814      	cmp	r0, #20
 8003074:	d11c      	bne.n	80030b0 <__iar_annotation$$branch+0x102>
 8003076:	4668      	mov	r0, sp
 8003078:	7b00      	ldrb	r0, [r0, #12]
 800307a:	2814      	cmp	r0, #20
 800307c:	d005      	beq.n	800308a <__iar_annotation$$branch+0xdc>
 800307e:	2014      	movs	r0, #20
 8003080:	4669      	mov	r1, sp
 8003082:	7308      	strb	r0, [r1, #12]
 8003084:	0020      	movs	r0, r4
 8003086:	f7fd fcba 	bl	80009fe <PE_Clear_RxEvent>
 800308a:	2032      	movs	r0, #50	; 0x32
 800308c:	5c22      	ldrb	r2, [r4, r0]
 800308e:	7462      	strb	r2, [r4, #17]
 8003090:	2000      	movs	r0, #0
 8003092:	2332      	movs	r3, #50	; 0x32
 8003094:	54e0      	strb	r0, [r4, r3]
 8003096:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003098:	7ca0      	ldrb	r0, [r4, #18]
 800309a:	4290      	cmp	r0, r2
 800309c:	d008      	beq.n	80030b0 <__iar_annotation$$branch+0x102>
 800309e:	74a2      	strb	r2, [r4, #18]
 80030a0:	2000      	movs	r0, #0
 80030a2:	9000      	str	r0, [sp, #0]
 80030a4:	2300      	movs	r3, #0
 80030a6:	7c21      	ldrb	r1, [r4, #16]
 80030a8:	2004      	movs	r0, #4
 80030aa:	4e55      	ldr	r6, [pc, #340]	; (8003200 <__iar_annotation$$branch+0x252>)
 80030ac:	6836      	ldr	r6, [r6, #0]
 80030ae:	47b0      	blx	r6
 80030b0:	e676      	b.n	8002da0 <USBPD_PE_StateMachine_SRC+0x10c>
 80030b2:	6860      	ldr	r0, [r4, #4]
 80030b4:	6801      	ldr	r1, [r0, #0]
 80030b6:	2210      	movs	r2, #16
 80030b8:	4391      	bics	r1, r2
 80030ba:	6001      	str	r1, [r0, #0]
 80030bc:	215f      	movs	r1, #95	; 0x5f
 80030be:	7c20      	ldrb	r0, [r4, #16]
 80030c0:	f7fd fa32 	bl	8000528 <USBPD_PE_Notification>
 80030c4:	2500      	movs	r5, #0
 80030c6:	43ed      	mvns	r5, r5
 80030c8:	e760      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 80030ca:	6860      	ldr	r0, [r4, #4]
 80030cc:	6801      	ldr	r1, [r0, #0]
 80030ce:	2210      	movs	r2, #16
 80030d0:	4391      	bics	r1, r2
 80030d2:	6001      	str	r1, [r0, #0]
 80030d4:	68a0      	ldr	r0, [r4, #8]
 80030d6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80030d8:	2900      	cmp	r1, #0
 80030da:	d0f3      	beq.n	80030c4 <__iar_annotation$$branch+0x116>
 80030dc:	7c20      	ldrb	r0, [r4, #16]
 80030de:	4788      	blx	r1
 80030e0:	e7f0      	b.n	80030c4 <__iar_annotation$$branch+0x116>
 80030e2:	2701      	movs	r7, #1
 80030e4:	6860      	ldr	r0, [r4, #4]
 80030e6:	6800      	ldr	r0, [r0, #0]
 80030e8:	0bc0      	lsrs	r0, r0, #15
 80030ea:	4038      	ands	r0, r7
 80030ec:	d002      	beq.n	80030f4 <__iar_annotation$$branch+0x146>
 80030ee:	6820      	ldr	r0, [r4, #0]
 80030f0:	6801      	ldr	r1, [r0, #0]
 80030f2:	e000      	b.n	80030f6 <__iar_annotation$$branch+0x148>
 80030f4:	2101      	movs	r1, #1
 80030f6:	4668      	mov	r0, sp
 80030f8:	7b40      	ldrb	r0, [r0, #13]
 80030fa:	f002 fc0d 	bl	8005918 <USBPD_PRL_SOPCapability>
 80030fe:	6860      	ldr	r0, [r4, #4]
 8003100:	6801      	ldr	r1, [r0, #0]
 8003102:	0b0a      	lsrs	r2, r1, #12
 8003104:	403a      	ands	r2, r7
 8003106:	d02f      	beq.n	8003168 <__iar_annotation$$branch+0x1ba>
 8003108:	078a      	lsls	r2, r1, #30
 800310a:	0f92      	lsrs	r2, r2, #30
 800310c:	2a01      	cmp	r2, #1
 800310e:	d101      	bne.n	8003114 <__iar_annotation$$branch+0x166>
 8003110:	2200      	movs	r2, #0
 8003112:	e000      	b.n	8003116 <__iar_annotation$$branch+0x168>
 8003114:	2220      	movs	r2, #32
 8003116:	2320      	movs	r3, #32
 8003118:	4399      	bics	r1, r3
 800311a:	430a      	orrs	r2, r1
 800311c:	6002      	str	r2, [r0, #0]
 800311e:	2000      	movs	r0, #0
 8003120:	70f0      	strb	r0, [r6, #3]
 8003122:	2101      	movs	r1, #1
 8003124:	0020      	movs	r0, r4
 8003126:	f7fe f992 	bl	800144e <PE_SetPowerNegotiation>
 800312a:	6860      	ldr	r0, [r4, #4]
 800312c:	6800      	ldr	r0, [r0, #0]
 800312e:	0901      	lsrs	r1, r0, #4
 8003130:	4039      	ands	r1, r7
 8003132:	d005      	beq.n	8003140 <__iar_annotation$$branch+0x192>
 8003134:	48b5      	ldr	r0, [pc, #724]	; (800340c <__iar_annotation$$branch+0x45e>)
 8003136:	83e0      	strh	r0, [r4, #30]
 8003138:	2514      	movs	r5, #20
 800313a:	2006      	movs	r0, #6
 800313c:	7460      	strb	r0, [r4, #17]
 800313e:	e725      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 8003140:	0bc0      	lsrs	r0, r0, #15
 8003142:	4007      	ands	r7, r0
 8003144:	d00a      	beq.n	800315c <__iar_annotation$$branch+0x1ae>
 8003146:	6820      	ldr	r0, [r4, #0]
 8003148:	7800      	ldrb	r0, [r0, #0]
 800314a:	0780      	lsls	r0, r0, #30
 800314c:	d400      	bmi.n	8003150 <__iar_annotation$$branch+0x1a2>
 800314e:	e092      	b.n	8003276 <__iar_annotation$$branch+0x2c8>
 8003150:	7930      	ldrb	r0, [r6, #4]
 8003152:	2814      	cmp	r0, #20
 8003154:	d300      	bcc.n	8003158 <__iar_annotation$$branch+0x1aa>
 8003156:	e08e      	b.n	8003276 <__iar_annotation$$branch+0x2c8>
 8003158:	68e1      	ldr	r1, [r4, #12]
 800315a:	2900      	cmp	r1, #0
 800315c:	d100      	bne.n	8003160 <__iar_annotation$$branch+0x1b2>
 800315e:	e08a      	b.n	8003276 <__iar_annotation$$branch+0x2c8>
 8003160:	1c40      	adds	r0, r0, #1
 8003162:	7130      	strb	r0, [r6, #4]
 8003164:	2005      	movs	r0, #5
 8003166:	e7e9      	b.n	800313c <__iar_annotation$$branch+0x18e>
 8003168:	2121      	movs	r1, #33	; 0x21
 800316a:	7c20      	ldrb	r0, [r4, #16]
 800316c:	f7fd f9dc 	bl	8000528 <USBPD_PE_Notification>
 8003170:	e057      	b.n	8003222 <__iar_annotation$$branch+0x274>
 8003172:	a903      	add	r1, sp, #12
 8003174:	0020      	movs	r0, r4
 8003176:	f000 fd91 	bl	8003c9c <PE_StateMachine_VDMCable>
 800317a:	e706      	b.n	8002f8a <__iar_annotation$$branch+0xc>
 800317c:	8be0      	ldrh	r0, [r4, #30]
 800317e:	03a9      	lsls	r1, r5, #14
 8003180:	4288      	cmp	r0, r1
 8003182:	d102      	bne.n	800318a <__iar_annotation$$branch+0x1dc>
 8003184:	2007      	movs	r0, #7
 8003186:	7460      	strb	r0, [r4, #17]
 8003188:	2500      	movs	r5, #0
 800318a:	e6ff      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 800318c:	6960      	ldr	r0, [r4, #20]
 800318e:	0740      	lsls	r0, r0, #29
 8003190:	0fc1      	lsrs	r1, r0, #31
 8003192:	0020      	movs	r0, r4
 8003194:	f000 fd4c 	bl	8003c30 <PE_Send_SRCCapabilities>
 8003198:	2805      	cmp	r0, #5
 800319a:	d002      	beq.n	80031a2 <__iar_annotation$$branch+0x1f4>
 800319c:	2809      	cmp	r0, #9
 800319e:	d0f4      	beq.n	800318a <__iar_annotation$$branch+0x1dc>
 80031a0:	e011      	b.n	80031c6 <__iar_annotation$$branch+0x218>
 80031a2:	2001      	movs	r0, #1
 80031a4:	7720      	strb	r0, [r4, #28]
 80031a6:	6960      	ldr	r0, [r4, #20]
 80031a8:	2104      	movs	r1, #4
 80031aa:	4301      	orrs	r1, r0
 80031ac:	6161      	str	r1, [r4, #20]
 80031ae:	2000      	movs	r0, #0
 80031b0:	70f0      	strb	r0, [r6, #3]
 80031b2:	70b0      	strb	r0, [r6, #2]
 80031b4:	83e7      	strh	r7, [r4, #30]
 80031b6:	251b      	movs	r5, #27
 80031b8:	2016      	movs	r0, #22
 80031ba:	7460      	strb	r0, [r4, #17]
 80031bc:	210f      	movs	r1, #15
 80031be:	7c20      	ldrb	r0, [r4, #16]
 80031c0:	f7fd f9b2 	bl	8000528 <USBPD_PE_Notification>
 80031c4:	e6e2      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 80031c6:	6960      	ldr	r0, [r4, #20]
 80031c8:	0741      	lsls	r1, r0, #29
 80031ca:	0fc9      	lsrs	r1, r1, #31
 80031cc:	d11a      	bne.n	8003204 <__iar_annotation$$branch+0x256>
 80031ce:	78f0      	ldrb	r0, [r6, #3]
 80031d0:	2833      	cmp	r0, #51	; 0x33
 80031d2:	d222      	bcs.n	800321a <__iar_annotation$$branch+0x26c>
 80031d4:	488e      	ldr	r0, [pc, #568]	; (8003410 <__iar_annotation$$branch+0x462>)
 80031d6:	83e0      	strh	r0, [r4, #30]
 80031d8:	2596      	movs	r5, #150	; 0x96
 80031da:	2008      	movs	r0, #8
 80031dc:	7460      	strb	r0, [r4, #17]
 80031de:	488d      	ldr	r0, [pc, #564]	; (8003414 <__iar_annotation$$branch+0x466>)
 80031e0:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80031e2:	4201      	tst	r1, r0
 80031e4:	d002      	beq.n	80031ec <__iar_annotation$$branch+0x23e>
 80031e6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80031e8:	0005      	movs	r5, r0
 80031ea:	400d      	ands	r5, r1
 80031ec:	e6ce      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 80031ee:	bf00      	nop
 80031f0:	ffffdfff 	.word	0xffffdfff
 80031f4:	20000224 	.word	0x20000224
 80031f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80031fc:	20000228 	.word	0x20000228
 8003200:	20000000 	.word	0x20000000
 8003204:	6860      	ldr	r0, [r4, #4]
 8003206:	7800      	ldrb	r0, [r0, #0]
 8003208:	0780      	lsls	r0, r0, #30
 800320a:	0f80      	lsrs	r0, r0, #30
 800320c:	2802      	cmp	r0, #2
 800320e:	d102      	bne.n	8003216 <__iar_annotation$$branch+0x268>
 8003210:	7c20      	ldrb	r0, [r4, #16]
 8003212:	f002 fb62 	bl	80058da <USBPD_PRL_SRCReleaseSinkNG>
 8003216:	2011      	movs	r0, #17
 8003218:	e7b5      	b.n	8003186 <__iar_annotation$$branch+0x1d8>
 800321a:	2121      	movs	r1, #33	; 0x21
 800321c:	7c20      	ldrb	r0, [r4, #16]
 800321e:	f7fd f983 	bl	8000528 <USBPD_PE_Notification>
 8003222:	2000      	movs	r0, #0
 8003224:	e78a      	b.n	800313c <__iar_annotation$$branch+0x18e>
 8003226:	2100      	movs	r1, #0
 8003228:	0020      	movs	r0, r4
 800322a:	f000 fd01 	bl	8003c30 <PE_Send_SRCCapabilities>
 800322e:	2805      	cmp	r0, #5
 8003230:	d107      	bne.n	8003242 <__iar_annotation$$branch+0x294>
 8003232:	2104      	movs	r1, #4
 8003234:	0020      	movs	r0, r4
 8003236:	f7fe f90a 	bl	800144e <PE_SetPowerNegotiation>
 800323a:	2001      	movs	r0, #1
 800323c:	7720      	strb	r0, [r4, #28]
 800323e:	83e7      	strh	r7, [r4, #30]
 8003240:	e7ba      	b.n	80031b8 <__iar_annotation$$branch+0x20a>
 8003242:	2000      	movs	r0, #0
 8003244:	7720      	strb	r0, [r4, #28]
 8003246:	2011      	movs	r0, #17
 8003248:	e778      	b.n	800313c <__iar_annotation$$branch+0x18e>
 800324a:	03a8      	lsls	r0, r5, #14
 800324c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800324e:	4281      	cmp	r1, r0
 8003250:	d106      	bne.n	8003260 <__iar_annotation$$branch+0x2b2>
 8003252:	2100      	movs	r1, #0
 8003254:	8461      	strh	r1, [r4, #34]	; 0x22
 8003256:	7931      	ldrb	r1, [r6, #4]
 8003258:	1c49      	adds	r1, r1, #1
 800325a:	7131      	strb	r1, [r6, #4]
 800325c:	2105      	movs	r1, #5
 800325e:	7461      	strb	r1, [r4, #17]
 8003260:	8be1      	ldrh	r1, [r4, #30]
 8003262:	4281      	cmp	r1, r0
 8003264:	d1c2      	bne.n	80031ec <__iar_annotation$$branch+0x23e>
 8003266:	6820      	ldr	r0, [r4, #0]
 8003268:	6840      	ldr	r0, [r0, #4]
 800326a:	0601      	lsls	r1, r0, #24
 800326c:	0fc9      	lsrs	r1, r1, #31
 800326e:	d002      	beq.n	8003276 <__iar_annotation$$branch+0x2c8>
 8003270:	78f0      	ldrb	r0, [r6, #3]
 8003272:	1c40      	adds	r0, r0, #1
 8003274:	70f0      	strb	r0, [r6, #3]
 8003276:	2007      	movs	r0, #7
 8003278:	e760      	b.n	800313c <__iar_annotation$$branch+0x18e>
 800327a:	4668      	mov	r0, sp
 800327c:	7b00      	ldrb	r0, [r0, #12]
 800327e:	2811      	cmp	r0, #17
 8003280:	d109      	bne.n	8003296 <__iar_annotation$$branch+0x2e8>
 8003282:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003284:	0bc1      	lsrs	r1, r0, #15
 8003286:	d106      	bne.n	8003296 <__iar_annotation$$branch+0x2e8>
 8003288:	0b01      	lsrs	r1, r0, #12
 800328a:	0749      	lsls	r1, r1, #29
 800328c:	d100      	bne.n	8003290 <__iar_annotation$$branch+0x2e2>
 800328e:	e115      	b.n	80034bc <__iar_annotation$$branch+0x50e>
 8003290:	06c0      	lsls	r0, r0, #27
 8003292:	0ec0      	lsrs	r0, r0, #27
 8003294:	2802      	cmp	r0, #2
 8003296:	d000      	beq.n	800329a <__iar_annotation$$branch+0x2ec>
 8003298:	e110      	b.n	80034bc <__iar_annotation$$branch+0x50e>
 800329a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800329c:	7881      	ldrb	r1, [r0, #2]
 800329e:	78c2      	ldrb	r2, [r0, #3]
 80032a0:	0212      	lsls	r2, r2, #8
 80032a2:	1889      	adds	r1, r1, r2
 80032a4:	7902      	ldrb	r2, [r0, #4]
 80032a6:	0412      	lsls	r2, r2, #16
 80032a8:	1889      	adds	r1, r1, r2
 80032aa:	7940      	ldrb	r0, [r0, #5]
 80032ac:	0600      	lsls	r0, r0, #24
 80032ae:	1808      	adds	r0, r1, r0
 80032b0:	9000      	str	r0, [sp, #0]
 80032b2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80032b4:	0600      	lsls	r0, r0, #24
 80032b6:	0f81      	lsrs	r1, r0, #30
 80032b8:	7c20      	ldrb	r0, [r4, #16]
 80032ba:	f7fd fcef 	bl	8000c9c <PE_ExtRevisionInteroperability>
 80032be:	2304      	movs	r3, #4
 80032c0:	466a      	mov	r2, sp
 80032c2:	2106      	movs	r1, #6
 80032c4:	7c20      	ldrb	r0, [r4, #16]
 80032c6:	68a5      	ldr	r5, [r4, #8]
 80032c8:	69ad      	ldr	r5, [r5, #24]
 80032ca:	47a8      	blx	r5
 80032cc:	2009      	movs	r0, #9
 80032ce:	7460      	strb	r0, [r4, #17]
 80032d0:	2500      	movs	r5, #0
 80032d2:	e0e9      	b.n	80034a8 <__iar_annotation$$branch+0x4fa>
 80032d4:	9502      	str	r5, [sp, #8]
 80032d6:	2703      	movs	r7, #3
 80032d8:	2507      	movs	r5, #7
 80032da:	a901      	add	r1, sp, #4
 80032dc:	7c20      	ldrb	r0, [r4, #16]
 80032de:	68a2      	ldr	r2, [r4, #8]
 80032e0:	69d2      	ldr	r2, [r2, #28]
 80032e2:	4790      	blx	r2
 80032e4:	280a      	cmp	r0, #10
 80032e6:	d010      	beq.n	800330a <__iar_annotation$$branch+0x35c>
 80032e8:	280b      	cmp	r0, #11
 80032ea:	d037      	beq.n	800335c <__iar_annotation$$branch+0x3ae>
 80032ec:	280d      	cmp	r0, #13
 80032ee:	6860      	ldr	r0, [r4, #4]
 80032f0:	6800      	ldr	r0, [r0, #0]
 80032f2:	d138      	bne.n	8003366 <__iar_annotation$$branch+0x3b8>
 80032f4:	0a00      	lsrs	r0, r0, #8
 80032f6:	4005      	ands	r5, r0
 80032f8:	2d03      	cmp	r5, #3
 80032fa:	d101      	bne.n	8003300 <__iar_annotation$$branch+0x352>
 80032fc:	2303      	movs	r3, #3
 80032fe:	e000      	b.n	8003302 <__iar_annotation$$branch+0x354>
 8003300:	230e      	movs	r3, #14
 8003302:	2000      	movs	r0, #0
 8003304:	9000      	str	r0, [sp, #0]
 8003306:	220c      	movs	r2, #12
 8003308:	e037      	b.n	800337a <__iar_annotation$$branch+0x3cc>
 800330a:	48ab      	ldr	r0, [pc, #684]	; (80035b8 <__iar_annotation$$branch+0x60a>)
 800330c:	83e0      	strh	r0, [r4, #30]
 800330e:	201e      	movs	r0, #30
 8003310:	9002      	str	r0, [sp, #8]
 8003312:	6860      	ldr	r0, [r4, #4]
 8003314:	6800      	ldr	r0, [r0, #0]
 8003316:	0a00      	lsrs	r0, r0, #8
 8003318:	4005      	ands	r5, r0
 800331a:	2d01      	cmp	r5, #1
 800331c:	d00c      	beq.n	8003338 <__iar_annotation$$branch+0x38a>
 800331e:	9801      	ldr	r0, [sp, #4]
 8003320:	2803      	cmp	r0, #3
 8003322:	d109      	bne.n	8003338 <__iar_annotation$$branch+0x38a>
 8003324:	6960      	ldr	r0, [r4, #20]
 8003326:	08c0      	lsrs	r0, r0, #3
 8003328:	4007      	ands	r7, r0
 800332a:	2f03      	cmp	r7, #3
 800332c:	d104      	bne.n	8003338 <__iar_annotation$$branch+0x38a>
 800332e:	2080      	movs	r0, #128	; 0x80
 8003330:	0200      	lsls	r0, r0, #8
 8003332:	83e0      	strh	r0, [r4, #30]
 8003334:	2000      	movs	r0, #0
 8003336:	9002      	str	r0, [sp, #8]
 8003338:	2000      	movs	r0, #0
 800333a:	9000      	str	r0, [sp, #0]
 800333c:	230c      	movs	r3, #12
 800333e:	2203      	movs	r2, #3
 8003340:	2100      	movs	r1, #0
 8003342:	0020      	movs	r0, r4
 8003344:	f7fe f938 	bl	80015b8 <PE_Send_CtrlMessage>
 8003348:	6960      	ldr	r0, [r4, #20]
 800334a:	2118      	movs	r1, #24
 800334c:	4388      	bics	r0, r1
 800334e:	9901      	ldr	r1, [sp, #4]
 8003350:	00c9      	lsls	r1, r1, #3
 8003352:	2218      	movs	r2, #24
 8003354:	400a      	ands	r2, r1
 8003356:	4302      	orrs	r2, r0
 8003358:	6162      	str	r2, [r4, #20]
 800335a:	e012      	b.n	8003382 <__iar_annotation$$branch+0x3d4>
 800335c:	2000      	movs	r0, #0
 800335e:	9000      	str	r0, [sp, #0]
 8003360:	230c      	movs	r3, #12
 8003362:	2202      	movs	r2, #2
 8003364:	e009      	b.n	800337a <__iar_annotation$$branch+0x3cc>
 8003366:	0a00      	lsrs	r0, r0, #8
 8003368:	4005      	ands	r5, r0
 800336a:	2d03      	cmp	r5, #3
 800336c:	d101      	bne.n	8003372 <__iar_annotation$$branch+0x3c4>
 800336e:	2303      	movs	r3, #3
 8003370:	e000      	b.n	8003374 <__iar_annotation$$branch+0x3c6>
 8003372:	230e      	movs	r3, #14
 8003374:	2000      	movs	r0, #0
 8003376:	9000      	str	r0, [sp, #0]
 8003378:	2204      	movs	r2, #4
 800337a:	2100      	movs	r1, #0
 800337c:	0020      	movs	r0, r4
 800337e:	f7fe f91b 	bl	80015b8 <PE_Send_CtrlMessage>
 8003382:	9d02      	ldr	r5, [sp, #8]
 8003384:	e602      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 8003386:	8be0      	ldrh	r0, [r4, #30]
 8003388:	03a9      	lsls	r1, r5, #14
 800338a:	4288      	cmp	r0, r1
 800338c:	d1fa      	bne.n	8003384 <__iar_annotation$$branch+0x3d6>
 800338e:	2104      	movs	r1, #4
 8003390:	0020      	movs	r0, r4
 8003392:	f7fe f85c 	bl	800144e <PE_SetPowerNegotiation>
 8003396:	68a0      	ldr	r0, [r4, #8]
 8003398:	6801      	ldr	r1, [r0, #0]
 800339a:	2900      	cmp	r1, #0
 800339c:	d0f2      	beq.n	8003384 <__iar_annotation$$branch+0x3d6>
 800339e:	7c20      	ldrb	r0, [r4, #16]
 80033a0:	4788      	blx	r1
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d000      	beq.n	80033a8 <__iar_annotation$$branch+0x3fa>
 80033a6:	e2da      	b.n	800395e <__iar_annotation$$branch+0x9b0>
 80033a8:	200d      	movs	r0, #13
 80033aa:	e6c7      	b.n	800313c <__iar_annotation$$branch+0x18e>
 80033ac:	2000      	movs	r0, #0
 80033ae:	9000      	str	r0, [sp, #0]
 80033b0:	2303      	movs	r3, #3
 80033b2:	2206      	movs	r2, #6
 80033b4:	2100      	movs	r1, #0
 80033b6:	0020      	movs	r0, r4
 80033b8:	f7fe f8fe 	bl	80015b8 <PE_Send_CtrlMessage>
 80033bc:	2800      	cmp	r0, #0
 80033be:	d110      	bne.n	80033e2 <__iar_annotation$$branch+0x434>
 80033c0:	2103      	movs	r1, #3
 80033c2:	0020      	movs	r0, r4
 80033c4:	f7fe f843 	bl	800144e <PE_SetPowerNegotiation>
 80033c8:	2110      	movs	r1, #16
 80033ca:	7c20      	ldrb	r0, [r4, #16]
 80033cc:	f7fd f8ac 	bl	8000528 <USBPD_PE_Notification>
 80033d0:	2000      	movs	r0, #0
 80033d2:	84a0      	strh	r0, [r4, #36]	; 0x24
 80033d4:	6960      	ldr	r0, [r4, #20]
 80033d6:	06c0      	lsls	r0, r0, #27
 80033d8:	0f80      	lsrs	r0, r0, #30
 80033da:	2803      	cmp	r0, #3
 80033dc:	d101      	bne.n	80033e2 <__iar_annotation$$branch+0x434>
 80033de:	4877      	ldr	r0, [pc, #476]	; (80035bc <__iar_annotation$$branch+0x60e>)
 80033e0:	84a0      	strh	r0, [r4, #36]	; 0x24
 80033e2:	e5d3      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 80033e4:	2001      	movs	r0, #1
 80033e6:	9000      	str	r0, [sp, #0]
 80033e8:	2397      	movs	r3, #151	; 0x97
 80033ea:	2202      	movs	r2, #2
 80033ec:	2100      	movs	r1, #0
 80033ee:	0020      	movs	r0, r4
 80033f0:	f7fe f8e2 	bl	80015b8 <PE_Send_CtrlMessage>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d1f4      	bne.n	80033e2 <__iar_annotation$$branch+0x434>
 80033f8:	7725      	strb	r5, [r4, #28]
 80033fa:	2129      	movs	r1, #41	; 0x29
 80033fc:	7c20      	ldrb	r0, [r4, #16]
 80033fe:	f7fd f893 	bl	8000528 <USBPD_PE_Notification>
 8003402:	486f      	ldr	r0, [pc, #444]	; (80035c0 <__iar_annotation$$branch+0x612>)
 8003404:	83e0      	strh	r0, [r4, #30]
 8003406:	4d6f      	ldr	r5, [pc, #444]	; (80035c4 <__iar_annotation$$branch+0x616>)
 8003408:	e5c0      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 800340a:	bf00      	nop
 800340c:	00008014 	.word	0x00008014
 8003410:	00008096 	.word	0x00008096
 8003414:	00007fff 	.word	0x00007fff
 8003418:	8be0      	ldrh	r0, [r4, #30]
 800341a:	03a9      	lsls	r1, r5, #14
 800341c:	4288      	cmp	r0, r1
 800341e:	d1f3      	bne.n	8003408 <__iar_annotation$$branch+0x45a>
 8003420:	212a      	movs	r1, #42	; 0x2a
 8003422:	7c20      	ldrb	r0, [r4, #16]
 8003424:	f7fd f880 	bl	8000528 <USBPD_PE_Notification>
 8003428:	2000      	movs	r0, #0
 800342a:	9000      	str	r0, [sp, #0]
 800342c:	2303      	movs	r3, #3
 800342e:	2206      	movs	r2, #6
 8003430:	2100      	movs	r1, #0
 8003432:	0020      	movs	r0, r4
 8003434:	f7fe f8c0 	bl	80015b8 <PE_Send_CtrlMessage>
 8003438:	2800      	cmp	r0, #0
 800343a:	d109      	bne.n	8003450 <__iar_annotation$$branch+0x4a2>
 800343c:	212e      	movs	r1, #46	; 0x2e
 800343e:	e6be      	b.n	80031be <__iar_annotation$$branch+0x210>
 8003440:	2000      	movs	r0, #0
 8003442:	9000      	str	r0, [sp, #0]
 8003444:	2307      	movs	r3, #7
 8003446:	2203      	movs	r2, #3
 8003448:	2100      	movs	r1, #0
 800344a:	0020      	movs	r0, r4
 800344c:	f7fe f8b4 	bl	80015b8 <PE_Send_CtrlMessage>
 8003450:	e59c      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 8003452:	2000      	movs	r0, #0
 8003454:	9000      	str	r0, [sp, #0]
 8003456:	2312      	movs	r3, #18
 8003458:	220d      	movs	r2, #13
 800345a:	2031      	movs	r0, #49	; 0x31
 800345c:	5c21      	ldrb	r1, [r4, r0]
 800345e:	0020      	movs	r0, r4
 8003460:	f7fe f8aa 	bl	80015b8 <PE_Send_CtrlMessage>
 8003464:	2800      	cmp	r0, #0
 8003466:	d1f3      	bne.n	8003450 <__iar_annotation$$branch+0x4a2>
 8003468:	83e7      	strh	r7, [r4, #30]
 800346a:	251b      	movs	r5, #27
 800346c:	2130      	movs	r1, #48	; 0x30
 800346e:	e6a6      	b.n	80031be <__iar_annotation$$branch+0x210>
 8003470:	4668      	mov	r0, sp
 8003472:	7b00      	ldrb	r0, [r0, #12]
 8003474:	2814      	cmp	r0, #20
 8003476:	d021      	beq.n	80034bc <__iar_annotation$$branch+0x50e>
 8003478:	2030      	movs	r0, #48	; 0x30
 800347a:	5c20      	ldrb	r0, [r4, r0]
 800347c:	2231      	movs	r2, #49	; 0x31
 800347e:	5ca2      	ldrb	r2, [r4, r2]
 8003480:	4290      	cmp	r0, r2
 8003482:	d11b      	bne.n	80034bc <__iar_annotation$$branch+0x50e>
 8003484:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003486:	4001      	ands	r1, r0
 8003488:	2903      	cmp	r1, #3
 800348a:	d117      	bne.n	80034bc <__iar_annotation$$branch+0x50e>
 800348c:	2131      	movs	r1, #49	; 0x31
 800348e:	7c20      	ldrb	r0, [r4, #16]
 8003490:	f7fd f84a 	bl	8000528 <USBPD_PE_Notification>
 8003494:	2030      	movs	r0, #48	; 0x30
 8003496:	5c20      	ldrb	r0, [r4, r0]
 8003498:	2800      	cmp	r0, #0
 800349a:	d102      	bne.n	80034a2 <__iar_annotation$$branch+0x4f4>
 800349c:	2007      	movs	r0, #7
 800349e:	7460      	strb	r0, [r4, #17]
 80034a0:	e002      	b.n	80034a8 <__iar_annotation$$branch+0x4fa>
 80034a2:	2003      	movs	r0, #3
 80034a4:	7460      	strb	r0, [r4, #17]
 80034a6:	2500      	movs	r5, #0
 80034a8:	4668      	mov	r0, sp
 80034aa:	7b00      	ldrb	r0, [r0, #12]
 80034ac:	2814      	cmp	r0, #20
 80034ae:	d005      	beq.n	80034bc <__iar_annotation$$branch+0x50e>
 80034b0:	2014      	movs	r0, #20
 80034b2:	4669      	mov	r1, sp
 80034b4:	7308      	strb	r0, [r1, #12]
 80034b6:	0020      	movs	r0, r4
 80034b8:	f7fd faa1 	bl	80009fe <PE_Clear_RxEvent>
 80034bc:	8be0      	ldrh	r0, [r4, #30]
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	0209      	lsls	r1, r1, #8
 80034c2:	4288      	cmp	r0, r1
 80034c4:	d1c4      	bne.n	8003450 <__iar_annotation$$branch+0x4a2>
 80034c6:	e24a      	b.n	800395e <__iar_annotation$$branch+0x9b0>
 80034c8:	6860      	ldr	r0, [r4, #4]
 80034ca:	7800      	ldrb	r0, [r0, #0]
 80034cc:	0780      	lsls	r0, r0, #30
 80034ce:	0f80      	lsrs	r0, r0, #30
 80034d0:	2802      	cmp	r0, #2
 80034d2:	d102      	bne.n	80034da <__iar_annotation$$branch+0x52c>
 80034d4:	7c20      	ldrb	r0, [r4, #16]
 80034d6:	f002 fa00 	bl	80058da <USBPD_PRL_SRCReleaseSinkNG>
 80034da:	2105      	movs	r1, #5
 80034dc:	0020      	movs	r0, r4
 80034de:	f7fd fa29 	bl	8000934 <PE_Send_RESET>
 80034e2:	6860      	ldr	r0, [r4, #4]
 80034e4:	6801      	ldr	r1, [r0, #0]
 80034e6:	2210      	movs	r2, #16
 80034e8:	4391      	bics	r1, r2
 80034ea:	6001      	str	r1, [r0, #0]
 80034ec:	78b0      	ldrb	r0, [r6, #2]
 80034ee:	1c40      	adds	r0, r0, #1
 80034f0:	70b0      	strb	r0, [r6, #2]
 80034f2:	6961      	ldr	r1, [r4, #20]
 80034f4:	4834      	ldr	r0, [pc, #208]	; (80035c8 <__iar_annotation$$branch+0x61a>)
 80034f6:	4008      	ands	r0, r1
 80034f8:	6160      	str	r0, [r4, #20]
 80034fa:	2100      	movs	r1, #0
 80034fc:	2232      	movs	r2, #50	; 0x32
 80034fe:	54a1      	strb	r1, [r4, r2]
 8003500:	4932      	ldr	r1, [pc, #200]	; (80035cc <__iar_annotation$$branch+0x61e>)
 8003502:	4001      	ands	r1, r0
 8003504:	6161      	str	r1, [r4, #20]
 8003506:	2202      	movs	r2, #2
 8003508:	2101      	movs	r1, #1
 800350a:	0020      	movs	r0, r4
 800350c:	f7fd ff96 	bl	800143c <PE_CallHardResetCallback>
 8003510:	2169      	movs	r1, #105	; 0x69
 8003512:	4668      	mov	r0, sp
 8003514:	7b40      	ldrb	r0, [r0, #13]
 8003516:	f7fd f807 	bl	8000528 <USBPD_PE_Notification>
 800351a:	83e7      	strh	r7, [r4, #30]
 800351c:	251b      	movs	r5, #27
 800351e:	2015      	movs	r0, #21
 8003520:	e60c      	b.n	800313c <__iar_annotation$$branch+0x18e>
 8003522:	6860      	ldr	r0, [r4, #4]
 8003524:	7800      	ldrb	r0, [r0, #0]
 8003526:	0780      	lsls	r0, r0, #30
 8003528:	0f80      	lsrs	r0, r0, #30
 800352a:	2802      	cmp	r0, #2
 800352c:	d1f0      	bne.n	8003510 <__iar_annotation$$branch+0x562>
 800352e:	7c20      	ldrb	r0, [r4, #16]
 8003530:	f002 f9d3 	bl	80058da <USBPD_PRL_SRCReleaseSinkNG>
 8003534:	e7ec      	b.n	8003510 <__iar_annotation$$branch+0x562>
 8003536:	8be0      	ldrh	r0, [r4, #30]
 8003538:	03a9      	lsls	r1, r5, #14
 800353a:	4288      	cmp	r0, r1
 800353c:	d11a      	bne.n	8003574 <__iar_annotation$$branch+0x5c6>
 800353e:	6960      	ldr	r0, [r4, #20]
 8003540:	78b1      	ldrb	r1, [r6, #2]
 8003542:	2903      	cmp	r1, #3
 8003544:	d303      	bcc.n	800354e <__iar_annotation$$branch+0x5a0>
 8003546:	0741      	lsls	r1, r0, #29
 8003548:	0fc9      	lsrs	r1, r1, #31
 800354a:	d130      	bne.n	80035ae <__iar_annotation$$branch+0x600>
 800354c:	e669      	b.n	8003222 <__iar_annotation$$branch+0x274>
 800354e:	4920      	ldr	r1, [pc, #128]	; (80035d0 <__iar_annotation$$branch+0x622>)
 8003550:	83e1      	strh	r1, [r4, #30]
 8003552:	2117      	movs	r1, #23
 8003554:	7461      	strb	r1, [r4, #17]
 8003556:	2500      	movs	r5, #0
 8003558:	0540      	lsls	r0, r0, #21
 800355a:	0f80      	lsrs	r0, r0, #30
 800355c:	1e42      	subs	r2, r0, #1
 800355e:	4192      	sbcs	r2, r2
 8003560:	0fd2      	lsrs	r2, r2, #31
 8003562:	2101      	movs	r1, #1
 8003564:	0020      	movs	r0, r4
 8003566:	f7fd ff69 	bl	800143c <PE_CallHardResetCallback>
 800356a:	2203      	movs	r2, #3
 800356c:	2101      	movs	r1, #1
 800356e:	0020      	movs	r0, r4
 8003570:	f7fd ff64 	bl	800143c <PE_CallHardResetCallback>
 8003574:	e50a      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 8003576:	2100      	movs	r1, #0
 8003578:	4668      	mov	r0, sp
 800357a:	7b40      	ldrb	r0, [r0, #13]
 800357c:	68a2      	ldr	r2, [r4, #8]
 800357e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003580:	4790      	blx	r2
 8003582:	2801      	cmp	r0, #1
 8003584:	d105      	bne.n	8003592 <__iar_annotation$$branch+0x5e4>
 8003586:	4813      	ldr	r0, [pc, #76]	; (80035d4 <__iar_annotation$$branch+0x626>)
 8003588:	83e0      	strh	r0, [r4, #30]
 800358a:	25c8      	movs	r5, #200	; 0xc8
 800358c:	00ad      	lsls	r5, r5, #2
 800358e:	2013      	movs	r0, #19
 8003590:	7460      	strb	r0, [r4, #17]
 8003592:	8be0      	ldrh	r0, [r4, #30]
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	0209      	lsls	r1, r1, #8
 8003598:	4288      	cmp	r0, r1
 800359a:	d1eb      	bne.n	8003574 <__iar_annotation$$branch+0x5c6>
 800359c:	2206      	movs	r2, #6
 800359e:	2101      	movs	r1, #1
 80035a0:	0020      	movs	r0, r4
 80035a2:	f7fd ff4b 	bl	800143c <PE_CallHardResetCallback>
 80035a6:	6960      	ldr	r0, [r4, #20]
 80035a8:	0741      	lsls	r1, r0, #29
 80035aa:	0fc9      	lsrs	r1, r1, #31
 80035ac:	d003      	beq.n	80035b6 <__iar_annotation$$branch+0x608>
 80035ae:	68a0      	ldr	r0, [r4, #8]
 80035b0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d137      	bne.n	8003626 <__iar_annotation$$branch+0x678>
 80035b6:	e634      	b.n	8003222 <__iar_annotation$$branch+0x274>
 80035b8:	0000801e 	.word	0x0000801e
 80035bc:	0000b6b0 	.word	0x0000b6b0
 80035c0:	00008226 	.word	0x00008226
 80035c4:	00000226 	.word	0x00000226
 80035c8:	fffff9ff 	.word	0xfffff9ff
 80035cc:	fffffe3f 	.word	0xfffffe3f
 80035d0:	0000828a 	.word	0x0000828a
 80035d4:	00008320 	.word	0x00008320
 80035d8:	8be0      	ldrh	r0, [r4, #30]
 80035da:	03a9      	lsls	r1, r5, #14
 80035dc:	4288      	cmp	r0, r1
 80035de:	d1c9      	bne.n	8003574 <__iar_annotation$$branch+0x5c6>
 80035e0:	2204      	movs	r2, #4
 80035e2:	2101      	movs	r1, #1
 80035e4:	0020      	movs	r0, r4
 80035e6:	f7fd ff29 	bl	800143c <PE_CallHardResetCallback>
 80035ea:	2101      	movs	r1, #1
 80035ec:	4668      	mov	r0, sp
 80035ee:	7b40      	ldrb	r0, [r0, #13]
 80035f0:	68a2      	ldr	r2, [r4, #8]
 80035f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035f4:	4790      	blx	r2
 80035f6:	2801      	cmp	r0, #1
 80035f8:	d10d      	bne.n	8003616 <__iar_annotation$$branch+0x668>
 80035fa:	0020      	movs	r0, r4
 80035fc:	f7fd faad 	bl	8000b5a <PE_Reset_HardReset>
 8003600:	2168      	movs	r1, #104	; 0x68
 8003602:	4668      	mov	r0, sp
 8003604:	7b40      	ldrb	r0, [r0, #13]
 8003606:	f7fc ff8f 	bl	8000528 <USBPD_PE_Notification>
 800360a:	2205      	movs	r2, #5
 800360c:	2101      	movs	r1, #1
 800360e:	0020      	movs	r0, r4
 8003610:	f7fd ff14 	bl	800143c <PE_CallHardResetCallback>
 8003614:	e62f      	b.n	8003276 <__iar_annotation$$branch+0x2c8>
 8003616:	2206      	movs	r2, #6
 8003618:	2101      	movs	r1, #1
 800361a:	0020      	movs	r0, r4
 800361c:	f7fd ff0e 	bl	800143c <PE_CallHardResetCallback>
 8003620:	68a0      	ldr	r0, [r4, #8]
 8003622:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003624:	2800      	cmp	r0, #0
 8003626:	d000      	beq.n	800362a <__iar_annotation$$branch+0x67c>
 8003628:	e2d6      	b.n	8003bd8 <__iar_annotation$$branch+0x5e>
 800362a:	e5ac      	b.n	8003186 <__iar_annotation$$branch+0x1d8>
 800362c:	2001      	movs	r0, #1
 800362e:	9000      	str	r0, [sp, #0]
 8003630:	231b      	movs	r3, #27
 8003632:	2207      	movs	r2, #7
 8003634:	2100      	movs	r1, #0
 8003636:	0020      	movs	r0, r4
 8003638:	f7fd ffbe 	bl	80015b8 <PE_Send_CtrlMessage>
 800363c:	2800      	cmp	r0, #0
 800363e:	d199      	bne.n	8003574 <__iar_annotation$$branch+0x5c6>
 8003640:	2006      	movs	r0, #6
 8003642:	7720      	strb	r0, [r4, #28]
 8003644:	83e7      	strh	r7, [r4, #30]
 8003646:	251b      	movs	r5, #27
 8003648:	210b      	movs	r1, #11
 800364a:	e5b8      	b.n	80031be <__iar_annotation$$branch+0x210>
 800364c:	4668      	mov	r0, sp
 800364e:	7b00      	ldrb	r0, [r0, #12]
 8003650:	2811      	cmp	r0, #17
 8003652:	d13e      	bne.n	80036d2 <__iar_annotation$$branch+0x724>
 8003654:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003656:	0bc1      	lsrs	r1, r0, #15
 8003658:	d11f      	bne.n	800369a <__iar_annotation$$branch+0x6ec>
 800365a:	0441      	lsls	r1, r0, #17
 800365c:	0f49      	lsrs	r1, r1, #29
 800365e:	d01c      	beq.n	800369a <__iar_annotation$$branch+0x6ec>
 8003660:	06c0      	lsls	r0, r0, #27
 8003662:	0ec0      	lsrs	r0, r0, #27
 8003664:	2801      	cmp	r0, #1
 8003666:	d118      	bne.n	800369a <__iar_annotation$$branch+0x6ec>
 8003668:	008b      	lsls	r3, r1, #2
 800366a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800366c:	1c82      	adds	r2, r0, #2
 800366e:	2104      	movs	r1, #4
 8003670:	7c20      	ldrb	r0, [r4, #16]
 8003672:	68a5      	ldr	r5, [r4, #8]
 8003674:	69ad      	ldr	r5, [r5, #24]
 8003676:	47a8      	blx	r5
 8003678:	2003      	movs	r0, #3
 800367a:	7460      	strb	r0, [r4, #17]
 800367c:	2500      	movs	r5, #0
 800367e:	4668      	mov	r0, sp
 8003680:	7b00      	ldrb	r0, [r0, #12]
 8003682:	2814      	cmp	r0, #20
 8003684:	d005      	beq.n	8003692 <__iar_annotation$$branch+0x6e4>
 8003686:	2014      	movs	r0, #20
 8003688:	4669      	mov	r1, sp
 800368a:	7308      	strb	r0, [r1, #12]
 800368c:	0020      	movs	r0, r4
 800368e:	f7fd f9b6 	bl	80009fe <PE_Clear_RxEvent>
 8003692:	210d      	movs	r1, #13
 8003694:	7c20      	ldrb	r0, [r4, #16]
 8003696:	f7fc ff47 	bl	8000528 <USBPD_PE_Notification>
 800369a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800369c:	21f0      	movs	r1, #240	; 0xf0
 800369e:	0209      	lsls	r1, r1, #8
 80036a0:	4001      	ands	r1, r0
 80036a2:	d116      	bne.n	80036d2 <__iar_annotation$$branch+0x724>
 80036a4:	06c0      	lsls	r0, r0, #27
 80036a6:	0ec0      	lsrs	r0, r0, #27
 80036a8:	2804      	cmp	r0, #4
 80036aa:	d001      	beq.n	80036b0 <__iar_annotation$$branch+0x702>
 80036ac:	2810      	cmp	r0, #16
 80036ae:	d110      	bne.n	80036d2 <__iar_annotation$$branch+0x724>
 80036b0:	2003      	movs	r0, #3
 80036b2:	7460      	strb	r0, [r4, #17]
 80036b4:	2500      	movs	r5, #0
 80036b6:	4668      	mov	r0, sp
 80036b8:	7b00      	ldrb	r0, [r0, #12]
 80036ba:	2814      	cmp	r0, #20
 80036bc:	d005      	beq.n	80036ca <__iar_annotation$$branch+0x71c>
 80036be:	2014      	movs	r0, #20
 80036c0:	4669      	mov	r1, sp
 80036c2:	7308      	strb	r0, [r1, #12]
 80036c4:	0020      	movs	r0, r4
 80036c6:	f7fd f99a 	bl	80009fe <PE_Clear_RxEvent>
 80036ca:	210e      	movs	r1, #14
 80036cc:	7c20      	ldrb	r0, [r4, #16]
 80036ce:	f7fc ff2b 	bl	8000528 <USBPD_PE_Notification>
 80036d2:	8be0      	ldrh	r0, [r4, #30]
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	0209      	lsls	r1, r1, #8
 80036d8:	4288      	cmp	r0, r1
 80036da:	d11f      	bne.n	800371c <__iar_annotation$$branch+0x76e>
 80036dc:	2003      	movs	r0, #3
 80036de:	e552      	b.n	8003186 <__iar_annotation$$branch+0x1d8>
 80036e0:	68a0      	ldr	r0, [r4, #8]
 80036e2:	6881      	ldr	r1, [r0, #8]
 80036e4:	2900      	cmp	r1, #0
 80036e6:	d01f      	beq.n	8003728 <__iar_annotation$$branch+0x77a>
 80036e8:	7c20      	ldrb	r0, [r4, #16]
 80036ea:	4788      	blx	r1
 80036ec:	280a      	cmp	r0, #10
 80036ee:	d002      	beq.n	80036f6 <__iar_annotation$$branch+0x748>
 80036f0:	280d      	cmp	r0, #13
 80036f2:	d014      	beq.n	800371e <__iar_annotation$$branch+0x770>
 80036f4:	e018      	b.n	8003728 <__iar_annotation$$branch+0x77a>
 80036f6:	1cf8      	adds	r0, r7, #3
 80036f8:	83e0      	strh	r0, [r4, #30]
 80036fa:	251e      	movs	r5, #30
 80036fc:	2000      	movs	r0, #0
 80036fe:	9000      	str	r0, [sp, #0]
 8003700:	2324      	movs	r3, #36	; 0x24
 8003702:	2203      	movs	r2, #3
 8003704:	2100      	movs	r1, #0
 8003706:	0020      	movs	r0, r4
 8003708:	f7fd ff56 	bl	80015b8 <PE_Send_CtrlMessage>
 800370c:	2800      	cmp	r0, #0
 800370e:	d105      	bne.n	800371c <__iar_annotation$$branch+0x76e>
 8003710:	2201      	movs	r2, #1
 8003712:	2101      	movs	r1, #1
 8003714:	7c20      	ldrb	r0, [r4, #16]
 8003716:	68a3      	ldr	r3, [r4, #8]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	4798      	blx	r3
 800371c:	e436      	b.n	8002f8c <__iar_annotation$$branch+0xe>
 800371e:	2000      	movs	r0, #0
 8003720:	9000      	str	r0, [sp, #0]
 8003722:	2303      	movs	r3, #3
 8003724:	220c      	movs	r2, #12
 8003726:	e68f      	b.n	8003448 <__iar_annotation$$branch+0x49a>
 8003728:	2000      	movs	r0, #0
 800372a:	9000      	str	r0, [sp, #0]
 800372c:	2303      	movs	r3, #3
 800372e:	2204      	movs	r2, #4
 8003730:	e68a      	b.n	8003448 <__iar_annotation$$branch+0x49a>
 8003732:	8be0      	ldrh	r0, [r4, #30]
 8003734:	03a9      	lsls	r1, r5, #14
 8003736:	4288      	cmp	r0, r1
 8003738:	d1f0      	bne.n	800371c <__iar_annotation$$branch+0x76e>
 800373a:	2104      	movs	r1, #4
 800373c:	0020      	movs	r0, r4
 800373e:	f7fd fe86 	bl	800144e <PE_SetPowerNegotiation>
 8003742:	6860      	ldr	r0, [r4, #4]
 8003744:	6801      	ldr	r1, [r0, #0]
 8003746:	2210      	movs	r2, #16
 8003748:	430a      	orrs	r2, r1
 800374a:	6002      	str	r2, [r0, #0]
 800374c:	2206      	movs	r2, #6
 800374e:	2101      	movs	r1, #1
 8003750:	7c20      	ldrb	r0, [r4, #16]
 8003752:	68a3      	ldr	r3, [r4, #8]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	4798      	blx	r3
 8003758:	2207      	movs	r2, #7
 800375a:	2101      	movs	r1, #1
 800375c:	7c20      	ldrb	r0, [r4, #16]
 800375e:	68a3      	ldr	r3, [r4, #8]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	4798      	blx	r3
 8003764:	2100      	movs	r1, #0
 8003766:	7c20      	ldrb	r0, [r4, #16]
 8003768:	f002 f881 	bl	800586e <USBPD_PRL_SetHeaderPowerRole>
 800376c:	2000      	movs	r0, #0
 800376e:	9000      	str	r0, [sp, #0]
 8003770:	2325      	movs	r3, #37	; 0x25
 8003772:	2206      	movs	r2, #6
 8003774:	2100      	movs	r1, #0
 8003776:	0020      	movs	r0, r4
 8003778:	f7fd ff1e 	bl	80015b8 <PE_Send_CtrlMessage>
 800377c:	2800      	cmp	r0, #0
 800377e:	d1cd      	bne.n	800371c <__iar_annotation$$branch+0x76e>
 8003780:	e0c9      	b.n	8003916 <__iar_annotation$$branch+0x968>
 8003782:	4668      	mov	r0, sp
 8003784:	7b00      	ldrb	r0, [r0, #12]
 8003786:	2811      	cmp	r0, #17
 8003788:	d10b      	bne.n	80037a2 <__iar_annotation$$branch+0x7f4>
 800378a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800378c:	4001      	ands	r1, r0
 800378e:	2906      	cmp	r1, #6
 8003790:	d107      	bne.n	80037a2 <__iar_annotation$$branch+0x7f4>
 8003792:	2014      	movs	r0, #20
 8003794:	4669      	mov	r1, sp
 8003796:	7308      	strb	r0, [r1, #12]
 8003798:	0020      	movs	r0, r4
 800379a:	f7fd f930 	bl	80009fe <PE_Clear_RxEvent>
 800379e:	2026      	movs	r0, #38	; 0x26
 80037a0:	7460      	strb	r0, [r4, #17]
 80037a2:	8be0      	ldrh	r0, [r4, #30]
 80037a4:	03a9      	lsls	r1, r5, #14
 80037a6:	4288      	cmp	r0, r1
 80037a8:	d1b8      	bne.n	800371c <__iar_annotation$$branch+0x76e>
 80037aa:	68a3      	ldr	r3, [r4, #8]
 80037ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d000      	beq.n	80037b4 <__iar_annotation$$branch+0x806>
 80037b2:	e211      	b.n	8003bd8 <__iar_annotation$$branch+0x5e>
 80037b4:	220a      	movs	r2, #10
 80037b6:	2101      	movs	r1, #1
 80037b8:	7c20      	ldrb	r0, [r4, #16]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	4798      	blx	r3
 80037be:	e0ce      	b.n	800395e <__iar_annotation$$branch+0x9b0>
 80037c0:	2100      	movs	r1, #0
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fd f8d6 	bl	8000974 <PE_ChangePowerRole>
 80037c8:	220d      	movs	r2, #13
 80037ca:	2100      	movs	r1, #0
 80037cc:	7c20      	ldrb	r0, [r4, #16]
 80037ce:	68a3      	ldr	r3, [r4, #8]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	4798      	blx	r3
 80037d4:	2114      	movs	r1, #20
 80037d6:	7c20      	ldrb	r0, [r4, #16]
 80037d8:	f7fc fea6 	bl	8000528 <USBPD_PE_Notification>
 80037dc:	220e      	movs	r2, #14
 80037de:	2100      	movs	r1, #0
 80037e0:	7c20      	ldrb	r0, [r4, #16]
 80037e2:	68a3      	ldr	r3, [r4, #8]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	4798      	blx	r3
 80037e8:	6860      	ldr	r0, [r4, #4]
 80037ea:	7800      	ldrb	r0, [r0, #0]
 80037ec:	0780      	lsls	r0, r0, #30
 80037ee:	0f80      	lsrs	r0, r0, #30
 80037f0:	2801      	cmp	r0, #1
 80037f2:	d104      	bne.n	80037fe <__iar_annotation$$branch+0x850>
 80037f4:	2101      	movs	r1, #1
 80037f6:	4668      	mov	r0, sp
 80037f8:	7b40      	ldrb	r0, [r0, #13]
 80037fa:	f002 f88d 	bl	8005918 <USBPD_PRL_SOPCapability>
 80037fe:	0020      	movs	r0, r4
 8003800:	f7fd fa22 	bl	8000c48 <PE_Reset_StateMachine>
 8003804:	e4c0      	b.n	8003188 <__iar_annotation$$branch+0x1da>
 8003806:	2001      	movs	r0, #1
 8003808:	9000      	str	r0, [sp, #0]
 800380a:	231f      	movs	r3, #31
 800380c:	220a      	movs	r2, #10
 800380e:	2100      	movs	r1, #0
 8003810:	0020      	movs	r0, r4
 8003812:	f7fd fed1 	bl	80015b8 <PE_Send_CtrlMessage>
 8003816:	2800      	cmp	r0, #0
 8003818:	d1c6      	bne.n	80037a8 <__iar_annotation$$branch+0x7fa>
 800381a:	2008      	movs	r0, #8
 800381c:	7720      	strb	r0, [r4, #28]
 800381e:	83e7      	strh	r7, [r4, #30]
 8003820:	251b      	movs	r5, #27
 8003822:	2202      	movs	r2, #2
 8003824:	2101      	movs	r1, #1
 8003826:	7c20      	ldrb	r0, [r4, #16]
 8003828:	68a3      	ldr	r3, [r4, #8]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	4798      	blx	r3
 800382e:	2139      	movs	r1, #57	; 0x39
 8003830:	e4c5      	b.n	80031be <__iar_annotation$$branch+0x210>
 8003832:	4668      	mov	r0, sp
 8003834:	7b00      	ldrb	r0, [r0, #12]
 8003836:	2811      	cmp	r0, #17
 8003838:	d145      	bne.n	80038c6 <__iar_annotation$$branch+0x918>
 800383a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800383c:	391f      	subs	r1, #31
 800383e:	4001      	ands	r1, r0
 8003840:	d141      	bne.n	80038c6 <__iar_annotation$$branch+0x918>
 8003842:	06c0      	lsls	r0, r0, #27
 8003844:	0ec0      	lsrs	r0, r0, #27
 8003846:	2803      	cmp	r0, #3
 8003848:	d006      	beq.n	8003858 <__iar_annotation$$branch+0x8aa>
 800384a:	2804      	cmp	r0, #4
 800384c:	d012      	beq.n	8003874 <__iar_annotation$$branch+0x8c6>
 800384e:	280c      	cmp	r0, #12
 8003850:	d008      	beq.n	8003864 <__iar_annotation$$branch+0x8b6>
 8003852:	2810      	cmp	r0, #16
 8003854:	d020      	beq.n	8003898 <__iar_annotation$$branch+0x8ea>
 8003856:	e036      	b.n	80038c6 <__iar_annotation$$branch+0x918>
 8003858:	213a      	movs	r1, #58	; 0x3a
 800385a:	7c20      	ldrb	r0, [r4, #16]
 800385c:	f7fc fe64 	bl	8000528 <USBPD_PE_Notification>
 8003860:	2020      	movs	r0, #32
 8003862:	e012      	b.n	800388a <__iar_annotation$$branch+0x8dc>
 8003864:	2205      	movs	r2, #5
 8003866:	2101      	movs	r1, #1
 8003868:	7c20      	ldrb	r0, [r4, #16]
 800386a:	68a3      	ldr	r3, [r4, #8]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	4798      	blx	r3
 8003870:	213b      	movs	r1, #59	; 0x3b
 8003872:	e006      	b.n	8003882 <__iar_annotation$$branch+0x8d4>
 8003874:	2204      	movs	r2, #4
 8003876:	2101      	movs	r1, #1
 8003878:	7c20      	ldrb	r0, [r4, #16]
 800387a:	68a3      	ldr	r3, [r4, #8]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	4798      	blx	r3
 8003880:	2116      	movs	r1, #22
 8003882:	7c20      	ldrb	r0, [r4, #16]
 8003884:	f7fc fe50 	bl	8000528 <USBPD_PE_Notification>
 8003888:	2003      	movs	r0, #3
 800388a:	7460      	strb	r0, [r4, #17]
 800388c:	2500      	movs	r5, #0
 800388e:	4668      	mov	r0, sp
 8003890:	7b00      	ldrb	r0, [r0, #12]
 8003892:	2814      	cmp	r0, #20
 8003894:	d111      	bne.n	80038ba <__iar_annotation$$branch+0x90c>
 8003896:	e016      	b.n	80038c6 <__iar_annotation$$branch+0x918>
 8003898:	2204      	movs	r2, #4
 800389a:	2101      	movs	r1, #1
 800389c:	7c20      	ldrb	r0, [r4, #16]
 800389e:	68a3      	ldr	r3, [r4, #8]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	4798      	blx	r3
 80038a4:	2117      	movs	r1, #23
 80038a6:	7c20      	ldrb	r0, [r4, #16]
 80038a8:	f7fc fe3e 	bl	8000528 <USBPD_PE_Notification>
 80038ac:	2003      	movs	r0, #3
 80038ae:	7460      	strb	r0, [r4, #17]
 80038b0:	2500      	movs	r5, #0
 80038b2:	4668      	mov	r0, sp
 80038b4:	7b00      	ldrb	r0, [r0, #12]
 80038b6:	2814      	cmp	r0, #20
 80038b8:	d005      	beq.n	80038c6 <__iar_annotation$$branch+0x918>
 80038ba:	2014      	movs	r0, #20
 80038bc:	4669      	mov	r1, sp
 80038be:	7308      	strb	r0, [r1, #12]
 80038c0:	0020      	movs	r0, r4
 80038c2:	f7fd f89c 	bl	80009fe <PE_Clear_RxEvent>
 80038c6:	8be0      	ldrh	r0, [r4, #30]
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	0209      	lsls	r1, r1, #8
 80038cc:	4288      	cmp	r0, r1
 80038ce:	d12c      	bne.n	800392a <__iar_annotation$$branch+0x97c>
 80038d0:	e704      	b.n	80036dc <__iar_annotation$$branch+0x72e>
 80038d2:	6860      	ldr	r0, [r4, #4]
 80038d4:	6801      	ldr	r1, [r0, #0]
 80038d6:	2210      	movs	r2, #16
 80038d8:	430a      	orrs	r2, r1
 80038da:	6002      	str	r2, [r0, #0]
 80038dc:	7f20      	ldrb	r0, [r4, #28]
 80038de:	2809      	cmp	r0, #9
 80038e0:	d005      	beq.n	80038ee <__iar_annotation$$branch+0x940>
 80038e2:	2206      	movs	r2, #6
 80038e4:	2101      	movs	r1, #1
 80038e6:	7c20      	ldrb	r0, [r4, #16]
 80038e8:	68a3      	ldr	r3, [r4, #8]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	4798      	blx	r3
 80038ee:	2207      	movs	r2, #7
 80038f0:	2101      	movs	r1, #1
 80038f2:	7c20      	ldrb	r0, [r4, #16]
 80038f4:	68a3      	ldr	r3, [r4, #8]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	4798      	blx	r3
 80038fa:	2100      	movs	r1, #0
 80038fc:	7c20      	ldrb	r0, [r4, #16]
 80038fe:	f001 ffb6 	bl	800586e <USBPD_PRL_SetHeaderPowerRole>
 8003902:	2000      	movs	r0, #0
 8003904:	9000      	str	r0, [sp, #0]
 8003906:	2321      	movs	r3, #33	; 0x21
 8003908:	2206      	movs	r2, #6
 800390a:	2100      	movs	r1, #0
 800390c:	0020      	movs	r0, r4
 800390e:	f7fd fe53 	bl	80015b8 <PE_Send_CtrlMessage>
 8003912:	2800      	cmp	r0, #0
 8003914:	d109      	bne.n	800392a <__iar_annotation$$branch+0x97c>
 8003916:	2208      	movs	r2, #8
 8003918:	2101      	movs	r1, #1
 800391a:	7c20      	ldrb	r0, [r4, #16]
 800391c:	68a3      	ldr	r3, [r4, #8]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	4798      	blx	r3
 8003922:	48c2      	ldr	r0, [pc, #776]	; (8003c2c <.text_3>)
 8003924:	83e0      	strh	r0, [r4, #30]
 8003926:	25eb      	movs	r5, #235	; 0xeb
 8003928:	006d      	lsls	r5, r5, #1
 800392a:	e6f7      	b.n	800371c <__iar_annotation$$branch+0x76e>
 800392c:	4668      	mov	r0, sp
 800392e:	7b00      	ldrb	r0, [r0, #12]
 8003930:	2811      	cmp	r0, #17
 8003932:	d10b      	bne.n	800394c <__iar_annotation$$branch+0x99e>
 8003934:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003936:	4001      	ands	r1, r0
 8003938:	2906      	cmp	r1, #6
 800393a:	d107      	bne.n	800394c <__iar_annotation$$branch+0x99e>
 800393c:	2026      	movs	r0, #38	; 0x26
 800393e:	7460      	strb	r0, [r4, #17]
 8003940:	2014      	movs	r0, #20
 8003942:	4669      	mov	r1, sp
 8003944:	7308      	strb	r0, [r1, #12]
 8003946:	0020      	movs	r0, r4
 8003948:	f7fd f859 	bl	80009fe <PE_Clear_RxEvent>
 800394c:	8be0      	ldrh	r0, [r4, #30]
 800394e:	03a9      	lsls	r1, r5, #14
 8003950:	4288      	cmp	r0, r1
 8003952:	d1ea      	bne.n	800392a <__iar_annotation$$branch+0x97c>
 8003954:	68a0      	ldr	r0, [r4, #8]
 8003956:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003958:	2800      	cmp	r0, #0
 800395a:	d000      	beq.n	800395e <__iar_annotation$$branch+0x9b0>
 800395c:	e13c      	b.n	8003bd8 <__iar_annotation$$branch+0x5e>
 800395e:	200f      	movs	r0, #15
 8003960:	e6bd      	b.n	80036de <__iar_annotation$$branch+0x730>
 8003962:	8be0      	ldrh	r0, [r4, #30]
 8003964:	03a9      	lsls	r1, r5, #14
 8003966:	4288      	cmp	r0, r1
 8003968:	d1df      	bne.n	800392a <__iar_annotation$$branch+0x97c>
 800396a:	220e      	movs	r2, #14
 800396c:	2101      	movs	r1, #1
 800396e:	7c20      	ldrb	r0, [r4, #16]
 8003970:	68a3      	ldr	r3, [r4, #8]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	4798      	blx	r3
 8003976:	6860      	ldr	r0, [r4, #4]
 8003978:	7800      	ldrb	r0, [r0, #0]
 800397a:	0780      	lsls	r0, r0, #30
 800397c:	0f80      	lsrs	r0, r0, #30
 800397e:	2802      	cmp	r0, #2
 8003980:	d102      	bne.n	8003988 <__iar_annotation$$branch+0x9da>
 8003982:	7c20      	ldrb	r0, [r4, #16]
 8003984:	f001 ffa9 	bl	80058da <USBPD_PRL_SRCReleaseSinkNG>
 8003988:	0020      	movs	r0, r4
 800398a:	f7fd f95d 	bl	8000c48 <PE_Reset_StateMachine>
 800398e:	2115      	movs	r1, #21
 8003990:	e74e      	b.n	8003830 <__iar_annotation$$branch+0x882>
 8003992:	2803      	cmp	r0, #3
 8003994:	d110      	bne.n	80039b8 <__iar_annotation$$branch+0xa0a>
 8003996:	2000      	movs	r0, #0
 8003998:	7720      	strb	r0, [r4, #28]
 800399a:	6860      	ldr	r0, [r4, #4]
 800399c:	7800      	ldrb	r0, [r0, #0]
 800399e:	0780      	lsls	r0, r0, #30
 80039a0:	0f80      	lsrs	r0, r0, #30
 80039a2:	2802      	cmp	r0, #2
 80039a4:	d102      	bne.n	80039ac <__iar_annotation$$branch+0x9fe>
 80039a6:	7c20      	ldrb	r0, [r4, #16]
 80039a8:	f001 ff97 	bl	80058da <USBPD_PRL_SRCReleaseSinkNG>
 80039ac:	2004      	movs	r0, #4
 80039ae:	7460      	strb	r0, [r4, #17]
 80039b0:	2167      	movs	r1, #103	; 0x67
 80039b2:	7c20      	ldrb	r0, [r4, #16]
 80039b4:	f7fc fdb8 	bl	8000528 <USBPD_PE_Notification>
 80039b8:	4668      	mov	r0, sp
 80039ba:	7b00      	ldrb	r0, [r0, #12]
 80039bc:	2814      	cmp	r0, #20
 80039be:	d00d      	beq.n	80039dc <__iar_annotation$$branch+0xa2e>
 80039c0:	0020      	movs	r0, r4
 80039c2:	f7fe f8a9 	bl	8001b18 <PE_ManageRXEvent>
 80039c6:	4668      	mov	r0, sp
 80039c8:	7b00      	ldrb	r0, [r0, #12]
 80039ca:	2814      	cmp	r0, #20
 80039cc:	d005      	beq.n	80039da <__iar_annotation$$branch+0xa2c>
 80039ce:	2014      	movs	r0, #20
 80039d0:	4669      	mov	r1, sp
 80039d2:	7308      	strb	r0, [r1, #12]
 80039d4:	0020      	movs	r0, r4
 80039d6:	f7fd f812 	bl	80009fe <PE_Clear_RxEvent>
 80039da:	e69f      	b.n	800371c <__iar_annotation$$branch+0x76e>
 80039dc:	6960      	ldr	r0, [r4, #20]
 80039de:	0cc0      	lsrs	r0, r0, #19
 80039e0:	03ad      	lsls	r5, r5, #14
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d01e      	beq.n	8003a24 <__iar_annotation$$branch+0xa76>
 80039e6:	8c21      	ldrh	r1, [r4, #32]
 80039e8:	42a9      	cmp	r1, r5
 80039ea:	d10e      	bne.n	8003a0a <__iar_annotation$$branch+0xa5c>
 80039ec:	200f      	movs	r0, #15
 80039ee:	7460      	strb	r0, [r4, #17]
 80039f0:	2000      	movs	r0, #0
 80039f2:	9000      	str	r0, [sp, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	2270      	movs	r2, #112	; 0x70
 80039f8:	7c21      	ldrb	r1, [r4, #16]
 80039fa:	2009      	movs	r0, #9
 80039fc:	4da2      	ldr	r5, [pc, #648]	; (8003c88 <.text_5>)
 80039fe:	682d      	ldr	r5, [r5, #0]
 8003a00:	47a8      	blx	r5
 8003a02:	78b0      	ldrb	r0, [r6, #2]
 8003a04:	1c40      	adds	r0, r0, #1
 8003a06:	70b0      	strb	r0, [r6, #2]
 8003a08:	e6fc      	b.n	8003804 <__iar_annotation$$branch+0x856>
 8003a0a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003a0c:	0509      	lsls	r1, r1, #20
 8003a0e:	0f49      	lsrs	r1, r1, #29
 8003a10:	180a      	adds	r2, r1, r0
 8003a12:	2333      	movs	r3, #51	; 0x33
 8003a14:	435a      	muls	r2, r3
 8003a16:	4315      	orrs	r5, r2
 8003a18:	8425      	strh	r5, [r4, #32]
 8003a1a:	180d      	adds	r5, r1, r0
 8003a1c:	2033      	movs	r0, #51	; 0x33
 8003a1e:	4345      	muls	r5, r0
 8003a20:	b2ad      	uxth	r5, r5
 8003a22:	e67b      	b.n	800371c <__iar_annotation$$branch+0x76e>
 8003a24:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8003a26:	42a8      	cmp	r0, r5
 8003a28:	d099      	beq.n	800395e <__iar_annotation$$branch+0x9b0>
 8003a2a:	7c20      	ldrb	r0, [r4, #16]
 8003a2c:	f7fd f80c 	bl	8000a48 <PE_PRL_Control_RxEvent>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d112      	bne.n	8003a5a <__iar_annotation$$branch+0xaac>
 8003a34:	2032      	movs	r0, #50	; 0x32
 8003a36:	5c20      	ldrb	r0, [r4, r0]
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d00e      	beq.n	8003a5a <__iar_annotation$$branch+0xaac>
 8003a3c:	2133      	movs	r1, #51	; 0x33
 8003a3e:	5c61      	ldrb	r1, [r4, r1]
 8003a40:	2231      	movs	r2, #49	; 0x31
 8003a42:	54a1      	strb	r1, [r4, r2]
 8003a44:	7460      	strb	r0, [r4, #17]
 8003a46:	2000      	movs	r0, #0
 8003a48:	2132      	movs	r1, #50	; 0x32
 8003a4a:	5460      	strb	r0, [r4, r1]
 8003a4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003a4e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003a50:	6960      	ldr	r0, [r4, #20]
 8003a52:	0869      	lsrs	r1, r5, #1
 8003a54:	4301      	orrs	r1, r0
 8003a56:	6161      	str	r1, [r4, #20]
 8003a58:	e6d4      	b.n	8003804 <__iar_annotation$$branch+0x856>
 8003a5a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8003a5c:	42a8      	cmp	r0, r5
 8003a5e:	d106      	bne.n	8003a6e <__iar_annotation$$branch+0xac0>
 8003a60:	2000      	movs	r0, #0
 8003a62:	8460      	strh	r0, [r4, #34]	; 0x22
 8003a64:	7930      	ldrb	r0, [r6, #4]
 8003a66:	1c40      	adds	r0, r0, #1
 8003a68:	7130      	strb	r0, [r6, #4]
 8003a6a:	2005      	movs	r0, #5
 8003a6c:	e637      	b.n	80036de <__iar_annotation$$branch+0x730>
 8003a6e:	0020      	movs	r0, r4
 8003a70:	f7fd fd14 	bl	800149c <PE_CalculateMinTiming>
 8003a74:	e081      	b.n	8003b7a <__iar_annotation$$branch>
 8003a76:	2000      	movs	r0, #0
 8003a78:	9002      	str	r0, [sp, #8]
 8003a7a:	2003      	movs	r0, #3
 8003a7c:	9001      	str	r0, [sp, #4]
 8003a7e:	2001      	movs	r0, #1
 8003a80:	9000      	str	r0, [sp, #0]
 8003a82:	0023      	movs	r3, r4
 8003a84:	332c      	adds	r3, #44	; 0x2c
 8003a86:	2206      	movs	r2, #6
 8003a88:	2100      	movs	r1, #0
 8003a8a:	0020      	movs	r0, r4
 8003a8c:	f7fd fdbf 	bl	800160e <PE_Send_DataMessage>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1c6      	bne.n	8003a22 <__iar_annotation$$branch+0xa74>
 8003a94:	215d      	movs	r1, #93	; 0x5d
 8003a96:	e6cb      	b.n	8003830 <__iar_annotation$$branch+0x882>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	9005      	str	r0, [sp, #20]
 8003a9c:	ab05      	add	r3, sp, #20
 8003a9e:	aa06      	add	r2, sp, #24
 8003aa0:	210a      	movs	r1, #10
 8003aa2:	4668      	mov	r0, sp
 8003aa4:	7b40      	ldrb	r0, [r0, #13]
 8003aa6:	68a7      	ldr	r7, [r4, #8]
 8003aa8:	697f      	ldr	r7, [r7, #20]
 8003aaa:	47b8      	blx	r7
 8003aac:	2104      	movs	r1, #4
 8003aae:	9805      	ldr	r0, [sp, #20]
 8003ab0:	f7fd fd20 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d11f      	bne.n	8003af8 <__iar_annotation$$branch+0xb4a>
 8003ab8:	71f0      	strb	r0, [r6, #7]
 8003aba:	7230      	strb	r0, [r6, #8]
 8003abc:	7c20      	ldrb	r0, [r4, #16]
 8003abe:	f7fd f995 	bl	8000dec <PE_Get_UnchunkedSupport>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d103      	bne.n	8003ace <__iar_annotation$$branch+0xb20>
 8003ac6:	7a30      	ldrb	r0, [r6, #8]
 8003ac8:	2180      	movs	r1, #128	; 0x80
 8003aca:	4301      	orrs	r1, r0
 8003acc:	7231      	strb	r1, [r6, #8]
 8003ace:	9a05      	ldr	r2, [sp, #20]
 8003ad0:	a906      	add	r1, sp, #24
 8003ad2:	486e      	ldr	r0, [pc, #440]	; (8003c8c <.text_6>)
 8003ad4:	1820      	adds	r0, r4, r0
 8003ad6:	f015 fc85 	bl	80193e4 <__aeabi_memcpy>
 8003ada:	2000      	movs	r0, #0
 8003adc:	9002      	str	r0, [sp, #8]
 8003ade:	2003      	movs	r0, #3
 8003ae0:	9001      	str	r0, [sp, #4]
 8003ae2:	2008      	movs	r0, #8
 8003ae4:	9000      	str	r0, [sp, #0]
 8003ae6:	486a      	ldr	r0, [pc, #424]	; (8003c90 <.text_7>)
 8003ae8:	1823      	adds	r3, r4, r0
 8003aea:	220c      	movs	r2, #12
 8003aec:	2100      	movs	r1, #0
 8003aee:	0020      	movs	r0, r4
 8003af0:	f7fd fec0 	bl	8001874 <PE_Send_ExtendedMessage>
 8003af4:	214c      	movs	r1, #76	; 0x4c
 8003af6:	e69b      	b.n	8003830 <__iar_annotation$$branch+0x882>
 8003af8:	2001      	movs	r0, #1
 8003afa:	e511      	b.n	8003520 <__iar_annotation$$branch+0x572>
 8003afc:	2001      	movs	r0, #1
 8003afe:	9000      	str	r0, [sp, #0]
 8003b00:	2339      	movs	r3, #57	; 0x39
 8003b02:	7832      	ldrb	r2, [r6, #0]
 8003b04:	2033      	movs	r0, #51	; 0x33
 8003b06:	5c21      	ldrb	r1, [r4, r0]
 8003b08:	0020      	movs	r0, r4
 8003b0a:	f7fd fd55 	bl	80015b8 <PE_Send_CtrlMessage>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d145      	bne.n	8003b9e <__iar_annotation$$branch+0x24>
 8003b12:	7870      	ldrb	r0, [r6, #1]
 8003b14:	7720      	strb	r0, [r4, #28]
 8003b16:	83e7      	strh	r7, [r4, #30]
 8003b18:	251b      	movs	r5, #27
 8003b1a:	2144      	movs	r1, #68	; 0x44
 8003b1c:	e688      	b.n	8003830 <__iar_annotation$$branch+0x882>
 8003b1e:	8be0      	ldrh	r0, [r4, #30]
 8003b20:	03a9      	lsls	r1, r5, #14
 8003b22:	4288      	cmp	r0, r1
 8003b24:	d104      	bne.n	8003b30 <__iar_annotation$$branch+0xb82>
 8003b26:	4668      	mov	r0, sp
 8003b28:	7b00      	ldrb	r0, [r0, #12]
 8003b2a:	2814      	cmp	r0, #20
 8003b2c:	d100      	bne.n	8003b30 <__iar_annotation$$branch+0xb82>
 8003b2e:	e5d5      	b.n	80036dc <__iar_annotation$$branch+0x72e>
 8003b30:	4668      	mov	r0, sp
 8003b32:	7b00      	ldrb	r0, [r0, #12]
 8003b34:	2814      	cmp	r0, #20
 8003b36:	d032      	beq.n	8003b9e <__iar_annotation$$branch+0x24>
 8003b38:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003b3a:	0bc1      	lsrs	r1, r0, #15
 8003b3c:	d003      	beq.n	8003b46 <__iar_annotation$$branch+0xb98>
 8003b3e:	0020      	movs	r0, r4
 8003b40:	f7fd fda2 	bl	8001688 <PE_Check_ExtendedMessage>
 8003b44:	e73f      	b.n	80039c6 <__iar_annotation$$branch+0xa18>
 8003b46:	06c0      	lsls	r0, r0, #27
 8003b48:	0ec0      	lsrs	r0, r0, #27
 8003b4a:	2810      	cmp	r0, #16
 8003b4c:	d000      	beq.n	8003b50 <__iar_annotation$$branch+0xba2>
 8003b4e:	e5c5      	b.n	80036dc <__iar_annotation$$branch+0x72e>
 8003b50:	2014      	movs	r0, #20
 8003b52:	4669      	mov	r1, sp
 8003b54:	7308      	strb	r0, [r1, #12]
 8003b56:	0020      	movs	r0, r4
 8003b58:	f7fc ff51 	bl	80009fe <PE_Clear_RxEvent>
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	83e0      	strh	r0, [r4, #30]
 8003b60:	2003      	movs	r0, #3
 8003b62:	7460      	strb	r0, [r4, #17]
 8003b64:	2500      	movs	r5, #0
 8003b66:	2159      	movs	r1, #89	; 0x59
 8003b68:	e662      	b.n	8003830 <__iar_annotation$$branch+0x882>
 8003b6a:	0020      	movs	r0, r4
 8003b6c:	f7fd feae 	bl	80018cc <PE_SubStateMachine_ExtendedMessages>
 8003b70:	e003      	b.n	8003b7a <__iar_annotation$$branch>
 8003b72:	a903      	add	r1, sp, #12
 8003b74:	0020      	movs	r0, r4
 8003b76:	f7fd f94b 	bl	8000e10 <PE_SubStateMachine_Generic>

08003b7a <__iar_annotation$$branch>:
 8003b7a:	f7ff fa06 	bl	8002f8a <__iar_annotation$$branch+0xc>
 8003b7e:	a903      	add	r1, sp, #12
 8003b80:	0020      	movs	r0, r4
 8003b82:	f000 f9cb 	bl	8003f1c <PE_SubStateMachine_VconnSwap>
 8003b86:	0005      	movs	r5, r0
 8003b88:	6860      	ldr	r0, [r4, #4]
 8003b8a:	6800      	ldr	r0, [r0, #0]
 8003b8c:	0401      	lsls	r1, r0, #16
 8003b8e:	0fc9      	lsrs	r1, r1, #31
 8003b90:	d006      	beq.n	8003ba0 <__iar_annotation$$branch+0x26>
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	6801      	ldr	r1, [r0, #0]
 8003b96:	4668      	mov	r0, sp
 8003b98:	7b40      	ldrb	r0, [r0, #13]
 8003b9a:	f001 febd 	bl	8005918 <USBPD_PRL_SOPCapability>
 8003b9e:	e5bd      	b.n	800371c <__iar_annotation$$branch+0x76e>
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	e7f8      	b.n	8003b96 <__iar_annotation$$branch+0x1c>
 8003ba4:	4668      	mov	r0, sp
 8003ba6:	7b00      	ldrb	r0, [r0, #12]
 8003ba8:	2811      	cmp	r0, #17
 8003baa:	d111      	bne.n	8003bd0 <__iar_annotation$$branch+0x56>
 8003bac:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003bae:	4001      	ands	r1, r0
 8003bb0:	2913      	cmp	r1, #19
 8003bb2:	d10d      	bne.n	8003bd0 <__iar_annotation$$branch+0x56>
 8003bb4:	2014      	movs	r0, #20
 8003bb6:	4669      	mov	r1, sp
 8003bb8:	7308      	strb	r0, [r1, #12]
 8003bba:	0020      	movs	r0, r4
 8003bbc:	f7fc ff1f 	bl	80009fe <PE_Clear_RxEvent>
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	9000      	str	r0, [sp, #0]
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	2100      	movs	r1, #0
 8003bca:	0020      	movs	r0, r4
 8003bcc:	f7fd fcf4 	bl	80015b8 <PE_Send_CtrlMessage>
 8003bd0:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003bd2:	03a9      	lsls	r1, r5, #14
 8003bd4:	4288      	cmp	r0, r1
 8003bd6:	d106      	bne.n	8003be6 <__iar_annotation$$branch+0x6c>
 8003bd8:	2092      	movs	r0, #146	; 0x92
 8003bda:	e580      	b.n	80036de <__iar_annotation$$branch+0x730>
 8003bdc:	4668      	mov	r0, sp
 8003bde:	7b01      	ldrb	r1, [r0, #12]
 8003be0:	0020      	movs	r0, r4
 8003be2:	f001 fbfb 	bl	80053dc <PE_StateMachine_UVDM>
 8003be6:	e599      	b.n	800371c <__iar_annotation$$branch+0x76e>
 8003be8:	6960      	ldr	r0, [r4, #20]
 8003bea:	2701      	movs	r7, #1
 8003bec:	0b41      	lsrs	r1, r0, #13
 8003bee:	4039      	ands	r1, r7
 8003bf0:	d019      	beq.n	8003c26 <__iar_annotation$$branch>
 8003bf2:	0b80      	lsrs	r0, r0, #14
 8003bf4:	4038      	ands	r0, r7
 8003bf6:	d007      	beq.n	8003c08 <__iar_annotation$$branch+0x8e>
 8003bf8:	215b      	movs	r1, #91	; 0x5b
 8003bfa:	7c20      	ldrb	r0, [r4, #16]
 8003bfc:	f7fc fc94 	bl	8000528 <USBPD_PE_Notification>
 8003c00:	6960      	ldr	r0, [r4, #20]
 8003c02:	4924      	ldr	r1, [pc, #144]	; (8003c94 <.text_8>)
 8003c04:	4001      	ands	r1, r0
 8003c06:	6161      	str	r1, [r4, #20]
 8003c08:	2003      	movs	r0, #3
 8003c0a:	7460      	strb	r0, [r4, #17]
 8003c0c:	7ca1      	ldrb	r1, [r4, #18]
 8003c0e:	2903      	cmp	r1, #3
 8003c10:	d008      	beq.n	8003c24 <__iar_annotation$$branch+0xaa>
 8003c12:	74a0      	strb	r0, [r4, #18]
 8003c14:	2000      	movs	r0, #0
 8003c16:	9000      	str	r0, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	7c21      	ldrb	r1, [r4, #16]
 8003c1e:	2004      	movs	r0, #4
 8003c20:	6835      	ldr	r5, [r6, #0]
 8003c22:	47a8      	blx	r5
 8003c24:	2501      	movs	r5, #1

08003c26 <__iar_annotation$$branch>:
 8003c26:	f7ff f9e0 	bl	8002fea <__iar_annotation$$branch+0x3c>
	...

08003c2c <.text_3>:
 8003c2c:	000081d6 	.word	0x000081d6

08003c30 <PE_Send_SRCCapabilities>:
 8003c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003c32:	0004      	movs	r4, r0
 8003c34:	000d      	movs	r5, r1
 8003c36:	2000      	movs	r0, #0
 8003c38:	9002      	str	r0, [sp, #8]
 8003c3a:	ab02      	add	r3, sp, #8
 8003c3c:	4816      	ldr	r0, [pc, #88]	; (8003c98 <.text_9>)
 8003c3e:	1822      	adds	r2, r4, r0
 8003c40:	2100      	movs	r1, #0
 8003c42:	7c20      	ldrb	r0, [r4, #16]
 8003c44:	68a6      	ldr	r6, [r4, #8]
 8003c46:	6976      	ldr	r6, [r6, #20]
 8003c48:	47b0      	blx	r6
 8003c4a:	9802      	ldr	r0, [sp, #8]
 8003c4c:	1c80      	adds	r0, r0, #2
 8003c4e:	9002      	str	r0, [sp, #8]
 8003c50:	2104      	movs	r1, #4
 8003c52:	9802      	ldr	r0, [sp, #8]
 8003c54:	f7fd fc4e 	bl	80014f4 <PE_CheckDataSizeFromGetDataInfo>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d113      	bne.n	8003c84 <PE_Send_SRCCapabilities+0x54>
 8003c5c:	6860      	ldr	r0, [r4, #4]
 8003c5e:	6800      	ldr	r0, [r0, #0]
 8003c60:	04c1      	lsls	r1, r0, #19
 8003c62:	0fc9      	lsrs	r1, r1, #31
 8003c64:	d00e      	beq.n	8003c84 <PE_Send_SRCCapabilities+0x54>
 8003c66:	9501      	str	r5, [sp, #4]
 8003c68:	9802      	ldr	r0, [sp, #8]
 8003c6a:	b280      	uxth	r0, r0
 8003c6c:	9000      	str	r0, [sp, #0]
 8003c6e:	4808      	ldr	r0, [pc, #32]	; (8003c90 <.text_7>)
 8003c70:	1823      	adds	r3, r4, r0
 8003c72:	2201      	movs	r2, #1
 8003c74:	2100      	movs	r1, #0
 8003c76:	7c20      	ldrb	r0, [r4, #16]
 8003c78:	f001 fe52 	bl	8005920 <USBPD_PRL_SendMessage>
 8003c7c:	2803      	cmp	r0, #3
 8003c7e:	d0e7      	beq.n	8003c50 <PE_Send_SRCCapabilities+0x20>
 8003c80:	b004      	add	sp, #16
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	2010      	movs	r0, #16
 8003c86:	e7fb      	b.n	8003c80 <PE_Send_SRCCapabilities+0x50>

08003c88 <.text_5>:
 8003c88:	20000000 	.word	0x20000000

08003c8c <.text_6>:
 8003c8c:	00000267 	.word	0x00000267

08003c90 <.text_7>:
 8003c90:	00000263 	.word	0x00000263

08003c94 <.text_8>:
 8003c94:	ffffbfff 	.word	0xffffbfff

08003c98 <.text_9>:
 8003c98:	00000265 	.word	0x00000265

08003c9c <PE_StateMachine_VDMCable>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	0004      	movs	r4, r0
 8003ca2:	2502      	movs	r5, #2
 8003ca4:	2607      	movs	r6, #7
 8003ca6:	7c60      	ldrb	r0, [r4, #17]
 8003ca8:	2805      	cmp	r0, #5
 8003caa:	d002      	beq.n	8003cb2 <PE_StateMachine_VDMCable+0x16>
 8003cac:	289a      	cmp	r0, #154	; 0x9a
 8003cae:	d072      	beq.n	8003d96 <PE_StateMachine_VDMCable+0xfa>
 8003cb0:	e127      	b.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003cb2:	6860      	ldr	r0, [r4, #4]
 8003cb4:	7800      	ldrb	r0, [r0, #0]
 8003cb6:	0781      	lsls	r1, r0, #30
 8003cb8:	0f89      	lsrs	r1, r1, #30
 8003cba:	0020      	movs	r0, r4
 8003cbc:	f000 fa5e 	bl	800417c <PE_ExtRevisionInteroperability_Cable>
 8003cc0:	2094      	movs	r0, #148	; 0x94
 8003cc2:	0080      	lsls	r0, r0, #2
 8003cc4:	5821      	ldr	r1, [r4, r0]
 8003cc6:	201f      	movs	r0, #31
 8003cc8:	4381      	bics	r1, r0
 8003cca:	488f      	ldr	r0, [pc, #572]	; (8003f08 <.text_3>)
 8003ccc:	4308      	orrs	r0, r1
 8003cce:	2194      	movs	r1, #148	; 0x94
 8003cd0:	0089      	lsls	r1, r1, #2
 8003cd2:	5060      	str	r0, [r4, r1]
 8003cd4:	6861      	ldr	r1, [r4, #4]
 8003cd6:	9100      	str	r1, [sp, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	9a00      	ldr	r2, [sp, #0]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	0953      	lsrs	r3, r2, #5
 8003ce0:	400b      	ands	r3, r1
 8003ce2:	4a8a      	ldr	r2, [pc, #552]	; (8003f0c <.text_4>)
 8003ce4:	4002      	ands	r2, r0
 8003ce6:	0358      	lsls	r0, r3, #13
 8003ce8:	4310      	orrs	r0, r2
 8003cea:	22ff      	movs	r2, #255	; 0xff
 8003cec:	0612      	lsls	r2, r2, #24
 8003cee:	4302      	orrs	r2, r0
 8003cf0:	2094      	movs	r0, #148	; 0x94
 8003cf2:	0080      	lsls	r0, r0, #2
 8003cf4:	5022      	str	r2, [r4, r0]
 8003cf6:	9800      	ldr	r0, [sp, #0]
 8003cf8:	6800      	ldr	r0, [r0, #0]
 8003cfa:	0880      	lsrs	r0, r0, #2
 8003cfc:	4001      	ands	r1, r0
 8003cfe:	d003      	beq.n	8003d08 <PE_StateMachine_VDMCable+0x6c>
 8003d00:	6960      	ldr	r0, [r4, #20]
 8003d02:	0741      	lsls	r1, r0, #29
 8003d04:	0fc8      	lsrs	r0, r1, #31
 8003d06:	e000      	b.n	8003d0a <PE_StateMachine_VDMCable+0x6e>
 8003d08:	2002      	movs	r0, #2
 8003d0a:	2194      	movs	r1, #148	; 0x94
 8003d0c:	0089      	lsls	r1, r1, #2
 8003d0e:	1867      	adds	r7, r4, r1
 8003d10:	9002      	str	r0, [sp, #8]
 8003d12:	209a      	movs	r0, #154	; 0x9a
 8003d14:	9001      	str	r0, [sp, #4]
 8003d16:	2001      	movs	r0, #1
 8003d18:	9000      	str	r0, [sp, #0]
 8003d1a:	003b      	movs	r3, r7
 8003d1c:	220f      	movs	r2, #15
 8003d1e:	2101      	movs	r1, #1
 8003d20:	0020      	movs	r0, r4
 8003d22:	f7fd fc74 	bl	800160e <PE_Send_DataMessage>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d109      	bne.n	8003d3e <PE_StateMachine_VDMCable+0xa2>
 8003d2a:	6960      	ldr	r0, [r4, #20]
 8003d2c:	03e9      	lsls	r1, r5, #15
 8003d2e:	4301      	orrs	r1, r0
 8003d30:	6161      	str	r1, [r4, #20]
 8003d32:	2051      	movs	r0, #81	; 0x51
 8003d34:	7720      	strb	r0, [r4, #28]
 8003d36:	4876      	ldr	r0, [pc, #472]	; (8003f10 <.text_5>)
 8003d38:	8460      	strh	r0, [r4, #34]	; 0x22
 8003d3a:	251e      	movs	r5, #30
 8003d3c:	e0e1      	b.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003d3e:	2809      	cmp	r0, #9
 8003d40:	d0fc      	beq.n	8003d3c <PE_StateMachine_VDMCable+0xa0>
 8003d42:	7cb8      	ldrb	r0, [r7, #18]
 8003d44:	2815      	cmp	r0, #21
 8003d46:	d202      	bcs.n	8003d4e <PE_StateMachine_VDMCable+0xb2>
 8003d48:	4872      	ldr	r0, [pc, #456]	; (8003f14 <.text_6>)
 8003d4a:	8460      	strh	r0, [r4, #34]	; 0x22
 8003d4c:	e00a      	b.n	8003d64 <PE_StateMachine_VDMCable+0xc8>
 8003d4e:	68e0      	ldr	r0, [r4, #12]
 8003d50:	6940      	ldr	r0, [r0, #20]
 8003d52:	9000      	str	r0, [sp, #0]
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d005      	beq.n	8003d64 <PE_StateMachine_VDMCable+0xc8>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2205      	movs	r2, #5
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	7c20      	ldrb	r0, [r4, #16]
 8003d60:	9f00      	ldr	r7, [sp, #0]
 8003d62:	47b8      	blx	r7
 8003d64:	6860      	ldr	r0, [r4, #4]
 8003d66:	6800      	ldr	r0, [r0, #0]
 8003d68:	0a00      	lsrs	r0, r0, #8
 8003d6a:	4030      	ands	r0, r6
 8003d6c:	2803      	cmp	r0, #3
 8003d6e:	d100      	bne.n	8003d72 <PE_StateMachine_VDMCable+0xd6>
 8003d70:	e0a4      	b.n	8003ebc <PE_StateMachine_VDMCable+0x220>
 8003d72:	4869      	ldr	r0, [pc, #420]	; (8003f18 <.text_7>)
 8003d74:	8be1      	ldrh	r1, [r4, #30]
 8003d76:	4201      	tst	r1, r0
 8003d78:	d00b      	beq.n	8003d92 <PE_StateMachine_VDMCable+0xf6>
 8003d7a:	2108      	movs	r1, #8
 8003d7c:	7461      	strb	r1, [r4, #17]
 8003d7e:	8be1      	ldrh	r1, [r4, #30]
 8003d80:	4001      	ands	r1, r0
 8003d82:	292d      	cmp	r1, #45	; 0x2d
 8003d84:	d203      	bcs.n	8003d8e <PE_StateMachine_VDMCable+0xf2>
 8003d86:	8be1      	ldrh	r1, [r4, #30]
 8003d88:	0005      	movs	r5, r0
 8003d8a:	400d      	ands	r5, r1
 8003d8c:	e0b9      	b.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003d8e:	252d      	movs	r5, #45	; 0x2d
 8003d90:	e0b7      	b.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003d92:	7466      	strb	r6, [r4, #17]
 8003d94:	e0b5      	b.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003d96:	9101      	str	r1, [sp, #4]
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7fc fe69 	bl	8000a70 <PE_Convert_SOPRxEvent>
 8003d9e:	4669      	mov	r1, sp
 8003da0:	7008      	strb	r0, [r1, #0]
 8003da2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003da4:	2700      	movs	r7, #0
 8003da6:	221f      	movs	r2, #31
 8003da8:	9801      	ldr	r0, [sp, #4]
 8003daa:	7800      	ldrb	r0, [r0, #0]
 8003dac:	466b      	mov	r3, sp
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	4298      	cmp	r0, r3
 8003db2:	d14f      	bne.n	8003e54 <PE_StateMachine_VDMCable+0x1b8>
 8003db4:	0bc8      	lsrs	r0, r1, #15
 8003db6:	d14d      	bne.n	8003e54 <PE_StateMachine_VDMCable+0x1b8>
 8003db8:	0b08      	lsrs	r0, r1, #12
 8003dba:	4230      	tst	r0, r6
 8003dbc:	d04a      	beq.n	8003e54 <PE_StateMachine_VDMCable+0x1b8>
 8003dbe:	201f      	movs	r0, #31
 8003dc0:	4008      	ands	r0, r1
 8003dc2:	280f      	cmp	r0, #15
 8003dc4:	d146      	bne.n	8003e54 <PE_StateMachine_VDMCable+0x1b8>
 8003dc6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003dc8:	7880      	ldrb	r0, [r0, #2]
 8003dca:	9000      	str	r0, [sp, #0]
 8003dcc:	4002      	ands	r2, r0
 8003dce:	2a01      	cmp	r2, #1
 8003dd0:	d13b      	bne.n	8003e4a <PE_StateMachine_VDMCable+0x1ae>
 8003dd2:	0980      	lsrs	r0, r0, #6
 8003dd4:	d039      	beq.n	8003e4a <PE_StateMachine_VDMCable+0x1ae>
 8003dd6:	0608      	lsls	r0, r1, #24
 8003dd8:	0f81      	lsrs	r1, r0, #30
 8003dda:	0020      	movs	r0, r4
 8003ddc:	f000 f9ce 	bl	800417c <PE_ExtRevisionInteroperability_Cable>
 8003de0:	68e0      	ldr	r0, [r4, #12]
 8003de2:	6940      	ldr	r0, [r0, #20]
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d023      	beq.n	8003e30 <PE_StateMachine_VDMCable+0x194>
 8003de8:	9800      	ldr	r0, [sp, #0]
 8003dea:	0985      	lsrs	r5, r0, #6
 8003dec:	07a8      	lsls	r0, r5, #30
 8003dee:	0f80      	lsrs	r0, r0, #30
 8003df0:	2801      	cmp	r0, #1
 8003df2:	d11d      	bne.n	8003e30 <PE_StateMachine_VDMCable+0x194>
 8003df4:	aa03      	add	r2, sp, #12
 8003df6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003df8:	1d81      	adds	r1, r0, #6
 8003dfa:	7c20      	ldrb	r0, [r4, #16]
 8003dfc:	f001 fb9a 	bl	8005534 <PE_SVDM_CheckIdentity>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d111      	bne.n	8003e28 <PE_StateMachine_VDMCable+0x18c>
 8003e04:	ab03      	add	r3, sp, #12
 8003e06:	07aa      	lsls	r2, r5, #30
 8003e08:	0f92      	lsrs	r2, r2, #30
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	7c20      	ldrb	r0, [r4, #16]
 8003e0e:	68e5      	ldr	r5, [r4, #12]
 8003e10:	696d      	ldr	r5, [r5, #20]
 8003e12:	47a8      	blx	r5
 8003e14:	2152      	movs	r1, #82	; 0x52
 8003e16:	7c20      	ldrb	r0, [r4, #16]
 8003e18:	f7fc fb86 	bl	8000528 <USBPD_PE_Notification>
 8003e1c:	2014      	movs	r0, #20
 8003e1e:	2194      	movs	r1, #148	; 0x94
 8003e20:	0089      	lsls	r1, r1, #2
 8003e22:	1861      	adds	r1, r4, r1
 8003e24:	7488      	strb	r0, [r1, #18]
 8003e26:	e003      	b.n	8003e30 <PE_StateMachine_VDMCable+0x194>
 8003e28:	211b      	movs	r1, #27
 8003e2a:	7c20      	ldrb	r0, [r4, #16]
 8003e2c:	f7fc fb7c 	bl	8000528 <USBPD_PE_Notification>
 8003e30:	8467      	strh	r7, [r4, #34]	; 0x22
 8003e32:	6860      	ldr	r0, [r4, #4]
 8003e34:	6800      	ldr	r0, [r0, #0]
 8003e36:	0a00      	lsrs	r0, r0, #8
 8003e38:	4030      	ands	r0, r6
 8003e3a:	2803      	cmp	r0, #3
 8003e3c:	d102      	bne.n	8003e44 <PE_StateMachine_VDMCable+0x1a8>
 8003e3e:	7460      	strb	r0, [r4, #17]
 8003e40:	2500      	movs	r5, #0
 8003e42:	e002      	b.n	8003e4a <PE_StateMachine_VDMCable+0x1ae>
 8003e44:	7466      	strb	r6, [r4, #17]
 8003e46:	2500      	movs	r5, #0
 8003e48:	7727      	strb	r7, [r4, #28]
 8003e4a:	9801      	ldr	r0, [sp, #4]
 8003e4c:	7800      	ldrb	r0, [r0, #0]
 8003e4e:	2814      	cmp	r0, #20
 8003e50:	d119      	bne.n	8003e86 <PE_StateMachine_VDMCable+0x1ea>
 8003e52:	e056      	b.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003e54:	2003      	movs	r0, #3
 8003e56:	400a      	ands	r2, r1
 8003e58:	2a10      	cmp	r2, #16
 8003e5a:	d11b      	bne.n	8003e94 <PE_StateMachine_VDMCable+0x1f8>
 8003e5c:	8467      	strh	r7, [r4, #34]	; 0x22
 8003e5e:	6861      	ldr	r1, [r4, #4]
 8003e60:	6809      	ldr	r1, [r1, #0]
 8003e62:	0a09      	lsrs	r1, r1, #8
 8003e64:	4031      	ands	r1, r6
 8003e66:	2903      	cmp	r1, #3
 8003e68:	d102      	bne.n	8003e70 <PE_StateMachine_VDMCable+0x1d4>
 8003e6a:	7460      	strb	r0, [r4, #17]
 8003e6c:	2500      	movs	r5, #0
 8003e6e:	e002      	b.n	8003e76 <PE_StateMachine_VDMCable+0x1da>
 8003e70:	7466      	strb	r6, [r4, #17]
 8003e72:	2500      	movs	r5, #0
 8003e74:	7727      	strb	r7, [r4, #28]
 8003e76:	2159      	movs	r1, #89	; 0x59
 8003e78:	7c20      	ldrb	r0, [r4, #16]
 8003e7a:	f7fc fb55 	bl	8000528 <USBPD_PE_Notification>
 8003e7e:	9801      	ldr	r0, [sp, #4]
 8003e80:	7800      	ldrb	r0, [r0, #0]
 8003e82:	2814      	cmp	r0, #20
 8003e84:	d03d      	beq.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003e86:	2014      	movs	r0, #20
 8003e88:	9901      	ldr	r1, [sp, #4]
 8003e8a:	7008      	strb	r0, [r1, #0]
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fc fdb6 	bl	80009fe <PE_Clear_RxEvent>
 8003e92:	e036      	b.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003e94:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003e96:	03aa      	lsls	r2, r5, #14
 8003e98:	4291      	cmp	r1, r2
 8003e9a:	d132      	bne.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003e9c:	8467      	strh	r7, [r4, #34]	; 0x22
 8003e9e:	6861      	ldr	r1, [r4, #4]
 8003ea0:	680a      	ldr	r2, [r1, #0]
 8003ea2:	0a13      	lsrs	r3, r2, #8
 8003ea4:	4033      	ands	r3, r6
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d10c      	bne.n	8003ec4 <PE_StateMachine_VDMCable+0x228>
 8003eaa:	68e0      	ldr	r0, [r4, #12]
 8003eac:	6945      	ldr	r5, [r0, #20]
 8003eae:	2d00      	cmp	r5, #0
 8003eb0:	d004      	beq.n	8003ebc <PE_StateMachine_VDMCable+0x220>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	7c20      	ldrb	r0, [r4, #16]
 8003eba:	47a8      	blx	r5
 8003ebc:	2003      	movs	r0, #3
 8003ebe:	7460      	strb	r0, [r4, #17]
 8003ec0:	2500      	movs	r5, #0
 8003ec2:	e01e      	b.n	8003f02 <PE_StateMachine_VDMCable+0x266>
 8003ec4:	0e93      	lsrs	r3, r2, #26
 8003ec6:	4018      	ands	r0, r3
 8003ec8:	2802      	cmp	r0, #2
 8003eca:	d10e      	bne.n	8003eea <PE_StateMachine_VDMCable+0x24e>
 8003ecc:	48b7      	ldr	r0, [pc, #732]	; (80041ac <.text_10>)
 8003ece:	4010      	ands	r0, r2
 8003ed0:	066a      	lsls	r2, r5, #25
 8003ed2:	4302      	orrs	r2, r0
 8003ed4:	600a      	str	r2, [r1, #0]
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	7c20      	ldrb	r0, [r4, #16]
 8003eda:	f001 fcea 	bl	80058b2 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003ede:	480d      	ldr	r0, [pc, #52]	; (8003f14 <.text_6>)
 8003ee0:	8460      	strh	r0, [r4, #34]	; 0x22
 8003ee2:	252d      	movs	r5, #45	; 0x2d
 8003ee4:	2008      	movs	r0, #8
 8003ee6:	7460      	strb	r0, [r4, #17]
 8003ee8:	e00a      	b.n	8003f00 <PE_StateMachine_VDMCable+0x264>
 8003eea:	68e0      	ldr	r0, [r4, #12]
 8003eec:	6945      	ldr	r5, [r0, #20]
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	d004      	beq.n	8003efc <PE_StateMachine_VDMCable+0x260>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	7c20      	ldrb	r0, [r4, #16]
 8003efa:	47a8      	blx	r5
 8003efc:	7466      	strb	r6, [r4, #17]
 8003efe:	2500      	movs	r5, #0
 8003f00:	7727      	strb	r7, [r4, #28]
 8003f02:	0028      	movs	r0, r5
 8003f04:	b00d      	add	sp, #52	; 0x34
 8003f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f08 <.text_3>:
 8003f08:	00008001 	.word	0x00008001

08003f0c <.text_4>:
 8003f0c:	0000983f 	.word	0x0000983f

08003f10 <.text_5>:
 8003f10:	0000801e 	.word	0x0000801e

08003f14 <.text_6>:
 8003f14:	0000802d 	.word	0x0000802d

08003f18 <.text_7>:
 8003f18:	00007fff 	.word	0x00007fff

08003f1c <PE_SubStateMachine_VconnSwap>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	0004      	movs	r4, r0
 8003f20:	2502      	movs	r5, #2
 8003f22:	2703      	movs	r7, #3
 8003f24:	4ea2      	ldr	r6, [pc, #648]	; (80041b0 <.text_11>)
 8003f26:	2014      	movs	r0, #20
 8003f28:	7c62      	ldrb	r2, [r4, #17]
 8003f2a:	2a9d      	cmp	r2, #157	; 0x9d
 8003f2c:	d010      	beq.n	8003f50 <PE_SubStateMachine_VconnSwap+0x34>
 8003f2e:	d30e      	bcc.n	8003f4e <PE_SubStateMachine_VconnSwap+0x32>
 8003f30:	2a9f      	cmp	r2, #159	; 0x9f
 8003f32:	d057      	beq.n	8003fe4 <PE_SubStateMachine_VconnSwap+0xc8>
 8003f34:	d33d      	bcc.n	8003fb2 <PE_SubStateMachine_VconnSwap+0x96>
 8003f36:	2aa1      	cmp	r2, #161	; 0xa1
 8003f38:	d100      	bne.n	8003f3c <PE_SubStateMachine_VconnSwap+0x20>
 8003f3a:	e085      	b.n	8004048 <PE_SubStateMachine_VconnSwap+0x12c>
 8003f3c:	d377      	bcc.n	800402e <PE_SubStateMachine_VconnSwap+0x112>
 8003f3e:	2aa3      	cmp	r2, #163	; 0xa3
 8003f40:	d100      	bne.n	8003f44 <PE_SubStateMachine_VconnSwap+0x28>
 8003f42:	e0a3      	b.n	800408c <PE_SubStateMachine_VconnSwap+0x170>
 8003f44:	d200      	bcs.n	8003f48 <PE_SubStateMachine_VconnSwap+0x2c>
 8003f46:	e08e      	b.n	8004066 <PE_SubStateMachine_VconnSwap+0x14a>
 8003f48:	2aa4      	cmp	r2, #164	; 0xa4
 8003f4a:	d100      	bne.n	8003f4e <PE_SubStateMachine_VconnSwap+0x32>
 8003f4c:	e106      	b.n	800415c <PE_SubStateMachine_VconnSwap+0x240>
 8003f4e:	e113      	b.n	8004178 <PE_SubStateMachine_VconnSwap+0x25c>
 8003f50:	6860      	ldr	r0, [r4, #4]
 8003f52:	6800      	ldr	r0, [r0, #0]
 8003f54:	21b8      	movs	r1, #184	; 0xb8
 8003f56:	0149      	lsls	r1, r1, #5
 8003f58:	4001      	ands	r1, r0
 8003f5a:	2098      	movs	r0, #152	; 0x98
 8003f5c:	0140      	lsls	r0, r0, #5
 8003f5e:	4281      	cmp	r1, r0
 8003f60:	d121      	bne.n	8003fa6 <PE_SubStateMachine_VconnSwap+0x8a>
 8003f62:	7c20      	ldrb	r0, [r4, #16]
 8003f64:	68a1      	ldr	r1, [r4, #8]
 8003f66:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003f68:	4788      	blx	r1
 8003f6a:	280a      	cmp	r0, #10
 8003f6c:	d002      	beq.n	8003f74 <PE_SubStateMachine_VconnSwap+0x58>
 8003f6e:	280d      	cmp	r0, #13
 8003f70:	d007      	beq.n	8003f82 <PE_SubStateMachine_VconnSwap+0x66>
 8003f72:	e00f      	b.n	8003f94 <PE_SubStateMachine_VconnSwap+0x78>
 8003f74:	209e      	movs	r0, #158	; 0x9e
 8003f76:	7460      	strb	r0, [r4, #17]
 8003f78:	6960      	ldr	r0, [r4, #20]
 8003f7a:	02e9      	lsls	r1, r5, #11
 8003f7c:	4301      	orrs	r1, r0
 8003f7e:	6161      	str	r1, [r4, #20]
 8003f80:	e0fa      	b.n	8004178 <PE_SubStateMachine_VconnSwap+0x25c>
 8003f82:	2000      	movs	r0, #0
 8003f84:	9000      	str	r0, [sp, #0]
 8003f86:	2303      	movs	r3, #3
 8003f88:	220c      	movs	r2, #12
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	0020      	movs	r0, r4
 8003f8e:	f7fd fb13 	bl	80015b8 <PE_Send_CtrlMessage>
 8003f92:	e0f1      	b.n	8004178 <PE_SubStateMachine_VconnSwap+0x25c>
 8003f94:	2000      	movs	r0, #0
 8003f96:	9000      	str	r0, [sp, #0]
 8003f98:	2303      	movs	r3, #3
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	f7fd fb0a 	bl	80015b8 <PE_Send_CtrlMessage>
 8003fa4:	e002      	b.n	8003fac <PE_SubStateMachine_VconnSwap+0x90>
 8003fa6:	6960      	ldr	r0, [r4, #20]
 8003fa8:	4006      	ands	r6, r0
 8003faa:	6166      	str	r6, [r4, #20]
 8003fac:	7467      	strb	r7, [r4, #17]
 8003fae:	2500      	movs	r5, #0
 8003fb0:	e0e2      	b.n	8004178 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	9000      	str	r0, [sp, #0]
 8003fb6:	239e      	movs	r3, #158	; 0x9e
 8003fb8:	2203      	movs	r2, #3
 8003fba:	2100      	movs	r1, #0
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7fd fafb 	bl	80015b8 <PE_Send_CtrlMessage>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d1f4      	bne.n	8003fb0 <PE_SubStateMachine_VconnSwap+0x94>
 8003fc6:	6860      	ldr	r0, [r4, #4]
 8003fc8:	6800      	ldr	r0, [r0, #0]
 8003fca:	0401      	lsls	r1, r0, #16
 8003fcc:	0fc9      	lsrs	r1, r1, #31
 8003fce:	d005      	beq.n	8003fdc <PE_SubStateMachine_VconnSwap+0xc0>
 8003fd0:	209f      	movs	r0, #159	; 0x9f
 8003fd2:	7460      	strb	r0, [r4, #17]
 8003fd4:	4877      	ldr	r0, [pc, #476]	; (80041b4 <.text_12>)
 8003fd6:	83e0      	strh	r0, [r4, #30]
 8003fd8:	2596      	movs	r5, #150	; 0x96
 8003fda:	e001      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0xc4>
 8003fdc:	20a0      	movs	r0, #160	; 0xa0
 8003fde:	7460      	strb	r0, [r4, #17]
 8003fe0:	213f      	movs	r1, #63	; 0x3f
 8003fe2:	e0b7      	b.n	8004154 <PE_SubStateMachine_VconnSwap+0x238>
 8003fe4:	8be2      	ldrh	r2, [r4, #30]
 8003fe6:	03ab      	lsls	r3, r5, #14
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d100      	bne.n	8003fee <PE_SubStateMachine_VconnSwap+0xd2>
 8003fec:	e0ac      	b.n	8004148 <PE_SubStateMachine_VconnSwap+0x22c>
 8003fee:	780a      	ldrb	r2, [r1, #0]
 8003ff0:	2a11      	cmp	r2, #17
 8003ff2:	d11b      	bne.n	800402c <PE_SubStateMachine_VconnSwap+0x110>
 8003ff4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003ff6:	4b70      	ldr	r3, [pc, #448]	; (80041b8 <.text_13>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d116      	bne.n	800402c <PE_SubStateMachine_VconnSwap+0x110>
 8003ffe:	7008      	strb	r0, [r1, #0]
 8004000:	0020      	movs	r0, r4
 8004002:	f7fc fcfc 	bl	80009fe <PE_Clear_RxEvent>
 8004006:	68a0      	ldr	r0, [r4, #8]
 8004008:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800400a:	2a00      	cmp	r2, #0
 800400c:	d002      	beq.n	8004014 <PE_SubStateMachine_VconnSwap+0xf8>
 800400e:	2100      	movs	r1, #0
 8004010:	7c20      	ldrb	r0, [r4, #16]
 8004012:	4790      	blx	r2
 8004014:	6960      	ldr	r0, [r4, #20]
 8004016:	4006      	ands	r6, r0
 8004018:	6166      	str	r6, [r4, #20]
 800401a:	7467      	strb	r7, [r4, #17]
 800401c:	2500      	movs	r5, #0
 800401e:	2142      	movs	r1, #66	; 0x42
 8004020:	7c20      	ldrb	r0, [r4, #16]
 8004022:	f7fc fa81 	bl	8000528 <USBPD_PE_Notification>
 8004026:	8465      	strh	r5, [r4, #34]	; 0x22
 8004028:	4964      	ldr	r1, [pc, #400]	; (80041bc <.text_14>)
 800402a:	5465      	strb	r5, [r4, r1]
 800402c:	e0a4      	b.n	8004178 <PE_SubStateMachine_VconnSwap+0x25c>
 800402e:	68a0      	ldr	r0, [r4, #8]
 8004030:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004032:	2a00      	cmp	r2, #0
 8004034:	d002      	beq.n	800403c <PE_SubStateMachine_VconnSwap+0x120>
 8004036:	2101      	movs	r1, #1
 8004038:	7c20      	ldrb	r0, [r4, #16]
 800403a:	4790      	blx	r2
 800403c:	20a1      	movs	r0, #161	; 0xa1
 800403e:	7460      	strb	r0, [r4, #17]
 8004040:	2000      	movs	r0, #0
 8004042:	495e      	ldr	r1, [pc, #376]	; (80041bc <.text_14>)
 8004044:	5460      	strb	r0, [r4, r1]
 8004046:	e097      	b.n	8004178 <PE_SubStateMachine_VconnSwap+0x25c>
 8004048:	2000      	movs	r0, #0
 800404a:	9000      	str	r0, [sp, #0]
 800404c:	2303      	movs	r3, #3
 800404e:	2206      	movs	r2, #6
 8004050:	2100      	movs	r1, #0
 8004052:	0020      	movs	r0, r4
 8004054:	f7fd fab0 	bl	80015b8 <PE_Send_CtrlMessage>
 8004058:	2800      	cmp	r0, #0
 800405a:	d1f4      	bne.n	8004046 <PE_SubStateMachine_VconnSwap+0x12a>
 800405c:	6960      	ldr	r0, [r4, #20]
 800405e:	4006      	ands	r6, r0
 8004060:	6166      	str	r6, [r4, #20]
 8004062:	2142      	movs	r1, #66	; 0x42
 8004064:	e076      	b.n	8004154 <PE_SubStateMachine_VconnSwap+0x238>
 8004066:	2000      	movs	r0, #0
 8004068:	9000      	str	r0, [sp, #0]
 800406a:	23a3      	movs	r3, #163	; 0xa3
 800406c:	220b      	movs	r2, #11
 800406e:	2100      	movs	r1, #0
 8004070:	0020      	movs	r0, r4
 8004072:	f7fd faa1 	bl	80015b8 <PE_Send_CtrlMessage>
 8004076:	2800      	cmp	r0, #0
 8004078:	d1e5      	bne.n	8004046 <PE_SubStateMachine_VconnSwap+0x12a>
 800407a:	6960      	ldr	r0, [r4, #20]
 800407c:	02e9      	lsls	r1, r5, #11
 800407e:	4301      	orrs	r1, r0
 8004080:	6161      	str	r1, [r4, #20]
 8004082:	484f      	ldr	r0, [pc, #316]	; (80041c0 <.text_15>)
 8004084:	83e0      	strh	r0, [r4, #30]
 8004086:	251b      	movs	r5, #27
 8004088:	213e      	movs	r1, #62	; 0x3e
 800408a:	e063      	b.n	8004154 <PE_SubStateMachine_VconnSwap+0x238>
 800408c:	780a      	ldrb	r2, [r1, #0]
 800408e:	2a11      	cmp	r2, #17
 8004090:	d155      	bne.n	800413e <PE_SubStateMachine_VconnSwap+0x222>
 8004092:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8004094:	23f0      	movs	r3, #240	; 0xf0
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	4013      	ands	r3, r2
 800409a:	d150      	bne.n	800413e <PE_SubStateMachine_VconnSwap+0x222>
 800409c:	06d2      	lsls	r2, r2, #27
 800409e:	0ed2      	lsrs	r2, r2, #27
 80040a0:	2a03      	cmp	r2, #3
 80040a2:	d006      	beq.n	80040b2 <PE_SubStateMachine_VconnSwap+0x196>
 80040a4:	2a04      	cmp	r2, #4
 80040a6:	d024      	beq.n	80040f2 <PE_SubStateMachine_VconnSwap+0x1d6>
 80040a8:	2a0c      	cmp	r2, #12
 80040aa:	d014      	beq.n	80040d6 <PE_SubStateMachine_VconnSwap+0x1ba>
 80040ac:	2a10      	cmp	r2, #16
 80040ae:	d02e      	beq.n	800410e <PE_SubStateMachine_VconnSwap+0x1f2>
 80040b0:	e045      	b.n	800413e <PE_SubStateMachine_VconnSwap+0x222>
 80040b2:	6862      	ldr	r2, [r4, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	0413      	lsls	r3, r2, #16
 80040b8:	0fdb      	lsrs	r3, r3, #31
 80040ba:	d001      	beq.n	80040c0 <PE_SubStateMachine_VconnSwap+0x1a4>
 80040bc:	229f      	movs	r2, #159	; 0x9f
 80040be:	e000      	b.n	80040c2 <PE_SubStateMachine_VconnSwap+0x1a6>
 80040c0:	22a0      	movs	r2, #160	; 0xa0
 80040c2:	7462      	strb	r2, [r4, #17]
 80040c4:	780a      	ldrb	r2, [r1, #0]
 80040c6:	2a14      	cmp	r2, #20
 80040c8:	d003      	beq.n	80040d2 <PE_SubStateMachine_VconnSwap+0x1b6>
 80040ca:	7008      	strb	r0, [r1, #0]
 80040cc:	0020      	movs	r0, r4
 80040ce:	f7fc fc96 	bl	80009fe <PE_Clear_RxEvent>
 80040d2:	213f      	movs	r1, #63	; 0x3f
 80040d4:	e030      	b.n	8004138 <PE_SubStateMachine_VconnSwap+0x21c>
 80040d6:	6962      	ldr	r2, [r4, #20]
 80040d8:	4032      	ands	r2, r6
 80040da:	6162      	str	r2, [r4, #20]
 80040dc:	7467      	strb	r7, [r4, #17]
 80040de:	2500      	movs	r5, #0
 80040e0:	780a      	ldrb	r2, [r1, #0]
 80040e2:	2a14      	cmp	r2, #20
 80040e4:	d003      	beq.n	80040ee <PE_SubStateMachine_VconnSwap+0x1d2>
 80040e6:	7008      	strb	r0, [r1, #0]
 80040e8:	0020      	movs	r0, r4
 80040ea:	f7fc fc88 	bl	80009fe <PE_Clear_RxEvent>
 80040ee:	2140      	movs	r1, #64	; 0x40
 80040f0:	e022      	b.n	8004138 <PE_SubStateMachine_VconnSwap+0x21c>
 80040f2:	6962      	ldr	r2, [r4, #20]
 80040f4:	4032      	ands	r2, r6
 80040f6:	6162      	str	r2, [r4, #20]
 80040f8:	7467      	strb	r7, [r4, #17]
 80040fa:	2500      	movs	r5, #0
 80040fc:	780a      	ldrb	r2, [r1, #0]
 80040fe:	2a14      	cmp	r2, #20
 8004100:	d003      	beq.n	800410a <PE_SubStateMachine_VconnSwap+0x1ee>
 8004102:	7008      	strb	r0, [r1, #0]
 8004104:	0020      	movs	r0, r4
 8004106:	f7fc fc7a 	bl	80009fe <PE_Clear_RxEvent>
 800410a:	2141      	movs	r1, #65	; 0x41
 800410c:	e014      	b.n	8004138 <PE_SubStateMachine_VconnSwap+0x21c>
 800410e:	6862      	ldr	r2, [r4, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	0413      	lsls	r3, r2, #16
 8004114:	0fdb      	lsrs	r3, r3, #31
 8004116:	d102      	bne.n	800411e <PE_SubStateMachine_VconnSwap+0x202>
 8004118:	22a4      	movs	r2, #164	; 0xa4
 800411a:	7462      	strb	r2, [r4, #17]
 800411c:	e004      	b.n	8004128 <PE_SubStateMachine_VconnSwap+0x20c>
 800411e:	6962      	ldr	r2, [r4, #20]
 8004120:	4032      	ands	r2, r6
 8004122:	6162      	str	r2, [r4, #20]
 8004124:	7467      	strb	r7, [r4, #17]
 8004126:	2500      	movs	r5, #0
 8004128:	780a      	ldrb	r2, [r1, #0]
 800412a:	2a14      	cmp	r2, #20
 800412c:	d003      	beq.n	8004136 <PE_SubStateMachine_VconnSwap+0x21a>
 800412e:	7008      	strb	r0, [r1, #0]
 8004130:	0020      	movs	r0, r4
 8004132:	f7fc fc64 	bl	80009fe <PE_Clear_RxEvent>
 8004136:	2143      	movs	r1, #67	; 0x43
 8004138:	7c20      	ldrb	r0, [r4, #16]
 800413a:	f7fc f9f5 	bl	8000528 <USBPD_PE_Notification>
 800413e:	8be0      	ldrh	r0, [r4, #30]
 8004140:	2180      	movs	r1, #128	; 0x80
 8004142:	0209      	lsls	r1, r1, #8
 8004144:	4288      	cmp	r0, r1
 8004146:	d117      	bne.n	8004178 <PE_SubStateMachine_VconnSwap+0x25c>
 8004148:	6960      	ldr	r0, [r4, #20]
 800414a:	4006      	ands	r6, r0
 800414c:	6166      	str	r6, [r4, #20]
 800414e:	7467      	strb	r7, [r4, #17]
 8004150:	2500      	movs	r5, #0
 8004152:	211c      	movs	r1, #28
 8004154:	7c20      	ldrb	r0, [r4, #16]
 8004156:	f7fc f9e7 	bl	8000528 <USBPD_PE_Notification>
 800415a:	e00d      	b.n	8004178 <PE_SubStateMachine_VconnSwap+0x25c>
 800415c:	68a0      	ldr	r0, [r4, #8]
 800415e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004160:	2a00      	cmp	r2, #0
 8004162:	d002      	beq.n	800416a <PE_SubStateMachine_VconnSwap+0x24e>
 8004164:	2101      	movs	r1, #1
 8004166:	7c20      	ldrb	r0, [r4, #16]
 8004168:	4790      	blx	r2
 800416a:	6960      	ldr	r0, [r4, #20]
 800416c:	4006      	ands	r6, r0
 800416e:	6166      	str	r6, [r4, #20]
 8004170:	7467      	strb	r7, [r4, #17]
 8004172:	2500      	movs	r5, #0
 8004174:	4813      	ldr	r0, [pc, #76]	; (80041c4 <.text_16>)
 8004176:	8460      	strh	r0, [r4, #34]	; 0x22
 8004178:	0028      	movs	r0, r5
 800417a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800417c <PE_ExtRevisionInteroperability_Cable>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	000a      	movs	r2, r1
 8004180:	6843      	ldr	r3, [r0, #4]
 8004182:	681c      	ldr	r4, [r3, #0]
 8004184:	2103      	movs	r1, #3
 8004186:	2503      	movs	r5, #3
 8004188:	4025      	ands	r5, r4
 800418a:	42aa      	cmp	r2, r5
 800418c:	d300      	bcc.n	8004190 <PE_ExtRevisionInteroperability_Cable+0x14>
 800418e:	002a      	movs	r2, r5
 8004190:	4d06      	ldr	r5, [pc, #24]	; (80041ac <.text_10>)
 8004192:	4025      	ands	r5, r4
 8004194:	0694      	lsls	r4, r2, #26
 8004196:	068a      	lsls	r2, r1, #26
 8004198:	4022      	ands	r2, r4
 800419a:	432a      	orrs	r2, r5
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	0e92      	lsrs	r2, r2, #26
 80041a0:	4011      	ands	r1, r2
 80041a2:	7c00      	ldrb	r0, [r0, #16]
 80041a4:	f001 fb85 	bl	80058b2 <USBPD_PRL_CBL_SetHeaderSpecification>
 80041a8:	bd31      	pop	{r0, r4, r5, pc}
	...

080041ac <.text_10>:
 80041ac:	f3ffffff 	.word	0xf3ffffff

080041b0 <.text_11>:
 80041b0:	ffffefff 	.word	0xffffefff

080041b4 <.text_12>:
 80041b4:	00008096 	.word	0x00008096

080041b8 <.text_13>:
 80041b8:	0000f01f 	.word	0x0000f01f

080041bc <.text_14>:
 80041bc:	00000262 	.word	0x00000262

080041c0 <.text_15>:
 80041c0:	0000801b 	.word	0x0000801b

080041c4 <.text_16>:
 80041c4:	0000802d 	.word	0x0000802d

080041c8 <USBPD_PE_SVDM_RequestIdentity>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	000a      	movs	r2, r1
 80041cc:	49aa      	ldr	r1, [pc, #680]	; (8004478 <.text_8>)
 80041ce:	0083      	lsls	r3, r0, #2
 80041d0:	58cb      	ldr	r3, [r1, r3]
 80041d2:	2110      	movs	r1, #16
 80041d4:	2401      	movs	r4, #1
 80041d6:	681d      	ldr	r5, [r3, #0]
 80041d8:	686d      	ldr	r5, [r5, #4]
 80041da:	0a6d      	lsrs	r5, r5, #9
 80041dc:	4025      	ands	r5, r4
 80041de:	d004      	beq.n	80041ea <USBPD_PE_SVDM_RequestIdentity+0x22>
 80041e0:	68dd      	ldr	r5, [r3, #12]
 80041e2:	2d00      	cmp	r5, #0
 80041e4:	d001      	beq.n	80041ea <USBPD_PE_SVDM_RequestIdentity+0x22>
 80041e6:	2a02      	cmp	r2, #2
 80041e8:	d101      	bne.n	80041ee <USBPD_PE_SVDM_RequestIdentity+0x26>
 80041ea:	2102      	movs	r1, #2
 80041ec:	e02d      	b.n	800424a <USBPD_PE_SVDM_RequestIdentity+0x82>
 80041ee:	2532      	movs	r5, #50	; 0x32
 80041f0:	5d5d      	ldrb	r5, [r3, r5]
 80041f2:	2d00      	cmp	r5, #0
 80041f4:	d104      	bne.n	8004200 <USBPD_PE_SVDM_RequestIdentity+0x38>
 80041f6:	685d      	ldr	r5, [r3, #4]
 80041f8:	682d      	ldr	r5, [r5, #0]
 80041fa:	0b2d      	lsrs	r5, r5, #12
 80041fc:	402c      	ands	r4, r5
 80041fe:	d101      	bne.n	8004204 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 8004200:	2103      	movs	r1, #3
 8004202:	e022      	b.n	800424a <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004204:	2433      	movs	r4, #51	; 0x33
 8004206:	551a      	strb	r2, [r3, r4]
 8004208:	2507      	movs	r5, #7
 800420a:	2a00      	cmp	r2, #0
 800420c:	d002      	beq.n	8004214 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 800420e:	2a01      	cmp	r2, #1
 8004210:	d008      	beq.n	8004224 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 8004212:	e01a      	b.n	800424a <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	0a12      	lsrs	r2, r2, #8
 800421a:	4015      	ands	r5, r2
 800421c:	2d03      	cmp	r5, #3
 800421e:	d114      	bne.n	800424a <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004220:	217d      	movs	r1, #125	; 0x7d
 8004222:	e00c      	b.n	800423e <USBPD_PE_SVDM_RequestIdentity+0x76>
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4eab      	ldr	r6, [pc, #684]	; (80044d8 <.text_10>)
 800422a:	4016      	ands	r6, r2
 800422c:	2782      	movs	r7, #130	; 0x82
 800422e:	007f      	lsls	r7, r7, #1
 8004230:	42be      	cmp	r6, r7
 8004232:	d003      	beq.n	800423c <USBPD_PE_SVDM_RequestIdentity+0x74>
 8004234:	0a12      	lsrs	r2, r2, #8
 8004236:	4015      	ands	r5, r2
 8004238:	2d03      	cmp	r5, #3
 800423a:	d106      	bne.n	800424a <USBPD_PE_SVDM_RequestIdentity+0x82>
 800423c:	2105      	movs	r1, #5
 800423e:	2232      	movs	r2, #50	; 0x32
 8004240:	5499      	strb	r1, [r3, r2]
 8004242:	6899      	ldr	r1, [r3, #8]
 8004244:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004246:	4788      	blx	r1
 8004248:	2100      	movs	r1, #0
 800424a:	0008      	movs	r0, r1
 800424c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800424e <USBPD_PE_SVDM_RequestSVID>:
 800424e:	b570      	push	{r4, r5, r6, lr}
 8004250:	000a      	movs	r2, r1
 8004252:	4989      	ldr	r1, [pc, #548]	; (8004478 <.text_8>)
 8004254:	0083      	lsls	r3, r0, #2
 8004256:	58cb      	ldr	r3, [r1, r3]
 8004258:	2110      	movs	r1, #16
 800425a:	68dc      	ldr	r4, [r3, #12]
 800425c:	2c00      	cmp	r4, #0
 800425e:	d001      	beq.n	8004264 <USBPD_PE_SVDM_RequestSVID+0x16>
 8004260:	2a02      	cmp	r2, #2
 8004262:	d101      	bne.n	8004268 <USBPD_PE_SVDM_RequestSVID+0x1a>
 8004264:	2102      	movs	r1, #2
 8004266:	e020      	b.n	80042aa <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004268:	2432      	movs	r4, #50	; 0x32
 800426a:	5d1c      	ldrb	r4, [r3, r4]
 800426c:	2c00      	cmp	r4, #0
 800426e:	d105      	bne.n	800427c <USBPD_PE_SVDM_RequestSVID+0x2e>
 8004270:	685c      	ldr	r4, [r3, #4]
 8004272:	6825      	ldr	r5, [r4, #0]
 8004274:	2401      	movs	r4, #1
 8004276:	0b2e      	lsrs	r6, r5, #12
 8004278:	4026      	ands	r6, r4
 800427a:	d101      	bne.n	8004280 <USBPD_PE_SVDM_RequestSVID+0x32>
 800427c:	2103      	movs	r1, #3
 800427e:	e014      	b.n	80042aa <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004280:	056d      	lsls	r5, r5, #21
 8004282:	0f6d      	lsrs	r5, r5, #29
 8004284:	2d03      	cmp	r5, #3
 8004286:	d110      	bne.n	80042aa <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004288:	2533      	movs	r5, #51	; 0x33
 800428a:	555a      	strb	r2, [r3, r5]
 800428c:	257f      	movs	r5, #127	; 0x7f
 800428e:	2632      	movs	r6, #50	; 0x32
 8004290:	559d      	strb	r5, [r3, r6]
 8004292:	2a00      	cmp	r2, #0
 8004294:	d005      	beq.n	80042a2 <USBPD_PE_SVDM_RequestSVID+0x54>
 8004296:	2a01      	cmp	r2, #1
 8004298:	d107      	bne.n	80042aa <USBPD_PE_SVDM_RequestSVID+0x5c>
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	0c12      	lsrs	r2, r2, #16
 800429e:	4014      	ands	r4, r2
 80042a0:	d003      	beq.n	80042aa <USBPD_PE_SVDM_RequestSVID+0x5c>
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80042a6:	4788      	blx	r1
 80042a8:	2100      	movs	r1, #0
 80042aa:	0008      	movs	r0, r1
 80042ac:	bd70      	pop	{r4, r5, r6, pc}

080042ae <USBPD_PE_SVDM_RequestMode>:
 80042ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b0:	000b      	movs	r3, r1
 80042b2:	4971      	ldr	r1, [pc, #452]	; (8004478 <.text_8>)
 80042b4:	0084      	lsls	r4, r0, #2
 80042b6:	590c      	ldr	r4, [r1, r4]
 80042b8:	2110      	movs	r1, #16
 80042ba:	68e5      	ldr	r5, [r4, #12]
 80042bc:	2d00      	cmp	r5, #0
 80042be:	d001      	beq.n	80042c4 <USBPD_PE_SVDM_RequestMode+0x16>
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d101      	bne.n	80042c8 <USBPD_PE_SVDM_RequestMode+0x1a>
 80042c4:	2102      	movs	r1, #2
 80042c6:	e023      	b.n	8004310 <USBPD_PE_SVDM_RequestMode+0x62>
 80042c8:	2532      	movs	r5, #50	; 0x32
 80042ca:	5d65      	ldrb	r5, [r4, r5]
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	d105      	bne.n	80042dc <USBPD_PE_SVDM_RequestMode+0x2e>
 80042d0:	6865      	ldr	r5, [r4, #4]
 80042d2:	682e      	ldr	r6, [r5, #0]
 80042d4:	2501      	movs	r5, #1
 80042d6:	0b37      	lsrs	r7, r6, #12
 80042d8:	402f      	ands	r7, r5
 80042da:	d101      	bne.n	80042e0 <USBPD_PE_SVDM_RequestMode+0x32>
 80042dc:	2103      	movs	r1, #3
 80042de:	e017      	b.n	8004310 <USBPD_PE_SVDM_RequestMode+0x62>
 80042e0:	0576      	lsls	r6, r6, #21
 80042e2:	0f76      	lsrs	r6, r6, #29
 80042e4:	2e03      	cmp	r6, #3
 80042e6:	d113      	bne.n	8004310 <USBPD_PE_SVDM_RequestMode+0x62>
 80042e8:	2633      	movs	r6, #51	; 0x33
 80042ea:	55a3      	strb	r3, [r4, r6]
 80042ec:	2681      	movs	r6, #129	; 0x81
 80042ee:	2732      	movs	r7, #50	; 0x32
 80042f0:	55e6      	strb	r6, [r4, r7]
 80042f2:	2696      	movs	r6, #150	; 0x96
 80042f4:	00b6      	lsls	r6, r6, #2
 80042f6:	53a2      	strh	r2, [r4, r6]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <USBPD_PE_SVDM_RequestMode+0x5a>
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <USBPD_PE_SVDM_RequestMode+0x62>
 8004300:	6962      	ldr	r2, [r4, #20]
 8004302:	0c12      	lsrs	r2, r2, #16
 8004304:	4015      	ands	r5, r2
 8004306:	d003      	beq.n	8004310 <USBPD_PE_SVDM_RequestMode+0x62>
 8004308:	68a1      	ldr	r1, [r4, #8]
 800430a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800430c:	4788      	blx	r1
 800430e:	2100      	movs	r1, #0
 8004310:	0008      	movs	r0, r1
 8004312:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004314 <USBPD_PE_SVDM_RequestModeEnter>:
 8004314:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004316:	4858      	ldr	r0, [pc, #352]	; (8004478 <.text_8>)
 8004318:	466c      	mov	r4, sp
 800431a:	7824      	ldrb	r4, [r4, #0]
 800431c:	00a4      	lsls	r4, r4, #2
 800431e:	5904      	ldr	r4, [r0, r4]
 8004320:	2010      	movs	r0, #16
 8004322:	68e5      	ldr	r5, [r4, #12]
 8004324:	2d00      	cmp	r5, #0
 8004326:	d101      	bne.n	800432c <USBPD_PE_SVDM_RequestModeEnter+0x18>
 8004328:	2002      	movs	r0, #2
 800432a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800432c:	2532      	movs	r5, #50	; 0x32
 800432e:	5d65      	ldrb	r5, [r4, r5]
 8004330:	2d00      	cmp	r5, #0
 8004332:	d105      	bne.n	8004340 <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 8004334:	6865      	ldr	r5, [r4, #4]
 8004336:	682e      	ldr	r6, [r5, #0]
 8004338:	2501      	movs	r5, #1
 800433a:	0b37      	lsrs	r7, r6, #12
 800433c:	402f      	ands	r7, r5
 800433e:	d101      	bne.n	8004344 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 8004340:	2003      	movs	r0, #3
 8004342:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004344:	27e1      	movs	r7, #225	; 0xe1
 8004346:	00ff      	lsls	r7, r7, #3
 8004348:	4037      	ands	r7, r6
 800434a:	26c2      	movs	r6, #194	; 0xc2
 800434c:	00b6      	lsls	r6, r6, #2
 800434e:	42b7      	cmp	r7, r6
 8004350:	d11e      	bne.n	8004390 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004352:	2633      	movs	r6, #51	; 0x33
 8004354:	55a1      	strb	r1, [r4, r6]
 8004356:	2682      	movs	r6, #130	; 0x82
 8004358:	2732      	movs	r7, #50	; 0x32
 800435a:	55e6      	strb	r6, [r4, r7]
 800435c:	2696      	movs	r6, #150	; 0x96
 800435e:	00b6      	lsls	r6, r6, #2
 8004360:	53a2      	strh	r2, [r4, r6]
 8004362:	6966      	ldr	r6, [r4, #20]
 8004364:	4aaf      	ldr	r2, [pc, #700]	; (8004624 <.text_13>)
 8004366:	4032      	ands	r2, r6
 8004368:	019e      	lsls	r6, r3, #6
 800436a:	23e0      	movs	r3, #224	; 0xe0
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4033      	ands	r3, r6
 8004370:	4313      	orrs	r3, r2
 8004372:	6163      	str	r3, [r4, #20]
 8004374:	2900      	cmp	r1, #0
 8004376:	d005      	beq.n	8004384 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 8004378:	2902      	cmp	r1, #2
 800437a:	d000      	beq.n	800437e <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 800437c:	d208      	bcs.n	8004390 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 800437e:	0c19      	lsrs	r1, r3, #16
 8004380:	400d      	ands	r5, r1
 8004382:	d005      	beq.n	8004390 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004384:	4668      	mov	r0, sp
 8004386:	7800      	ldrb	r0, [r0, #0]
 8004388:	68a1      	ldr	r1, [r4, #8]
 800438a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800438c:	4788      	blx	r1
 800438e:	2000      	movs	r0, #0
 8004390:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004392 <USBPD_PE_SVDM_RequestModeExit>:
 8004392:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004394:	4838      	ldr	r0, [pc, #224]	; (8004478 <.text_8>)
 8004396:	466c      	mov	r4, sp
 8004398:	7824      	ldrb	r4, [r4, #0]
 800439a:	00a4      	lsls	r4, r4, #2
 800439c:	5904      	ldr	r4, [r0, r4]
 800439e:	2010      	movs	r0, #16
 80043a0:	68e5      	ldr	r5, [r4, #12]
 80043a2:	2d00      	cmp	r5, #0
 80043a4:	d101      	bne.n	80043aa <USBPD_PE_SVDM_RequestModeExit+0x18>
 80043a6:	2002      	movs	r0, #2
 80043a8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80043aa:	2532      	movs	r5, #50	; 0x32
 80043ac:	5d65      	ldrb	r5, [r4, r5]
 80043ae:	2d00      	cmp	r5, #0
 80043b0:	d105      	bne.n	80043be <USBPD_PE_SVDM_RequestModeExit+0x2c>
 80043b2:	6865      	ldr	r5, [r4, #4]
 80043b4:	682e      	ldr	r6, [r5, #0]
 80043b6:	2501      	movs	r5, #1
 80043b8:	0b37      	lsrs	r7, r6, #12
 80043ba:	402f      	ands	r7, r5
 80043bc:	d101      	bne.n	80043c2 <USBPD_PE_SVDM_RequestModeExit+0x30>
 80043be:	2003      	movs	r0, #3
 80043c0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80043c2:	27e1      	movs	r7, #225	; 0xe1
 80043c4:	00ff      	lsls	r7, r7, #3
 80043c6:	4037      	ands	r7, r6
 80043c8:	26c2      	movs	r6, #194	; 0xc2
 80043ca:	00b6      	lsls	r6, r6, #2
 80043cc:	42b7      	cmp	r7, r6
 80043ce:	d11e      	bne.n	800440e <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80043d0:	2633      	movs	r6, #51	; 0x33
 80043d2:	55a1      	strb	r1, [r4, r6]
 80043d4:	2683      	movs	r6, #131	; 0x83
 80043d6:	2732      	movs	r7, #50	; 0x32
 80043d8:	55e6      	strb	r6, [r4, r7]
 80043da:	2696      	movs	r6, #150	; 0x96
 80043dc:	00b6      	lsls	r6, r6, #2
 80043de:	53a2      	strh	r2, [r4, r6]
 80043e0:	6966      	ldr	r6, [r4, #20]
 80043e2:	4a90      	ldr	r2, [pc, #576]	; (8004624 <.text_13>)
 80043e4:	4032      	ands	r2, r6
 80043e6:	019e      	lsls	r6, r3, #6
 80043e8:	23e0      	movs	r3, #224	; 0xe0
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4033      	ands	r3, r6
 80043ee:	4313      	orrs	r3, r2
 80043f0:	6163      	str	r3, [r4, #20]
 80043f2:	2900      	cmp	r1, #0
 80043f4:	d005      	beq.n	8004402 <USBPD_PE_SVDM_RequestModeExit+0x70>
 80043f6:	2902      	cmp	r1, #2
 80043f8:	d000      	beq.n	80043fc <USBPD_PE_SVDM_RequestModeExit+0x6a>
 80043fa:	d208      	bcs.n	800440e <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80043fc:	0c19      	lsrs	r1, r3, #16
 80043fe:	400d      	ands	r5, r1
 8004400:	d005      	beq.n	800440e <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004402:	4668      	mov	r0, sp
 8004404:	7800      	ldrb	r0, [r0, #0]
 8004406:	68a1      	ldr	r1, [r4, #8]
 8004408:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800440a:	4788      	blx	r1
 800440c:	2000      	movs	r0, #0
 800440e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004410 <USBPD_PE_SVDM_RequestSpecific>:
 8004410:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004412:	4819      	ldr	r0, [pc, #100]	; (8004478 <.text_8>)
 8004414:	466c      	mov	r4, sp
 8004416:	7824      	ldrb	r4, [r4, #0]
 8004418:	00a4      	lsls	r4, r4, #2
 800441a:	5904      	ldr	r4, [r0, r4]
 800441c:	2010      	movs	r0, #16
 800441e:	68e5      	ldr	r5, [r4, #12]
 8004420:	2d00      	cmp	r5, #0
 8004422:	d101      	bne.n	8004428 <USBPD_PE_SVDM_RequestSpecific+0x18>
 8004424:	2002      	movs	r0, #2
 8004426:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004428:	2532      	movs	r5, #50	; 0x32
 800442a:	5d65      	ldrb	r5, [r4, r5]
 800442c:	2d00      	cmp	r5, #0
 800442e:	d105      	bne.n	800443c <USBPD_PE_SVDM_RequestSpecific+0x2c>
 8004430:	6865      	ldr	r5, [r4, #4]
 8004432:	682d      	ldr	r5, [r5, #0]
 8004434:	2601      	movs	r6, #1
 8004436:	0b2f      	lsrs	r7, r5, #12
 8004438:	4037      	ands	r7, r6
 800443a:	d101      	bne.n	8004440 <USBPD_PE_SVDM_RequestSpecific+0x30>
 800443c:	2003      	movs	r0, #3
 800443e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004440:	6967      	ldr	r7, [r4, #20]
 8004442:	0c3f      	lsrs	r7, r7, #16
 8004444:	403e      	ands	r6, r7
 8004446:	d101      	bne.n	800444c <USBPD_PE_SVDM_RequestSpecific+0x3c>
 8004448:	000e      	movs	r6, r1
 800444a:	d113      	bne.n	8004474 <USBPD_PE_SVDM_RequestSpecific+0x64>
 800444c:	056d      	lsls	r5, r5, #21
 800444e:	0f6d      	lsrs	r5, r5, #29
 8004450:	2d03      	cmp	r5, #3
 8004452:	d10f      	bne.n	8004474 <USBPD_PE_SVDM_RequestSpecific+0x64>
 8004454:	2033      	movs	r0, #51	; 0x33
 8004456:	5421      	strb	r1, [r4, r0]
 8004458:	2085      	movs	r0, #133	; 0x85
 800445a:	2132      	movs	r1, #50	; 0x32
 800445c:	5460      	strb	r0, [r4, r1]
 800445e:	2095      	movs	r0, #149	; 0x95
 8004460:	0080      	lsls	r0, r0, #2
 8004462:	1820      	adds	r0, r4, r0
 8004464:	6002      	str	r2, [r0, #0]
 8004466:	8083      	strh	r3, [r0, #4]
 8004468:	4668      	mov	r0, sp
 800446a:	7800      	ldrb	r0, [r0, #0]
 800446c:	68a1      	ldr	r1, [r4, #8]
 800446e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004470:	4788      	blx	r1
 8004472:	2000      	movs	r0, #0
 8004474:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004478 <.text_8>:
 8004478:	20000228 	.word	0x20000228

0800447c <USBPD_PE_SVDM_RequestAttention>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	000b      	movs	r3, r1
 8004480:	4969      	ldr	r1, [pc, #420]	; (8004628 <.text_14>)
 8004482:	0084      	lsls	r4, r0, #2
 8004484:	590d      	ldr	r5, [r1, r4]
 8004486:	2110      	movs	r1, #16
 8004488:	68ec      	ldr	r4, [r5, #12]
 800448a:	2c00      	cmp	r4, #0
 800448c:	d001      	beq.n	8004492 <USBPD_PE_SVDM_RequestAttention+0x16>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <USBPD_PE_SVDM_RequestAttention+0x1a>
 8004492:	2102      	movs	r1, #2
 8004494:	e01e      	b.n	80044d4 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004496:	2332      	movs	r3, #50	; 0x32
 8004498:	5ceb      	ldrb	r3, [r5, r3]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800449e:	686b      	ldr	r3, [r5, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	04dc      	lsls	r4, r3, #19
 80044a4:	0fe4      	lsrs	r4, r4, #31
 80044a6:	d101      	bne.n	80044ac <USBPD_PE_SVDM_RequestAttention+0x30>
 80044a8:	2103      	movs	r1, #3
 80044aa:	e013      	b.n	80044d4 <USBPD_PE_SVDM_RequestAttention+0x58>
 80044ac:	055b      	lsls	r3, r3, #21
 80044ae:	0f5b      	lsrs	r3, r3, #29
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d10f      	bne.n	80044d4 <USBPD_PE_SVDM_RequestAttention+0x58>
 80044b4:	2400      	movs	r4, #0
 80044b6:	2333      	movs	r3, #51	; 0x33
 80044b8:	54ec      	strb	r4, [r5, r3]
 80044ba:	2184      	movs	r1, #132	; 0x84
 80044bc:	2332      	movs	r3, #50	; 0x32
 80044be:	54e9      	strb	r1, [r5, r3]
 80044c0:	2195      	movs	r1, #149	; 0x95
 80044c2:	0089      	lsls	r1, r1, #2
 80044c4:	1869      	adds	r1, r5, r1
 80044c6:	2306      	movs	r3, #6
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	808a      	strh	r2, [r1, #4]
 80044cc:	68a9      	ldr	r1, [r5, #8]
 80044ce:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80044d0:	4788      	blx	r1
 80044d2:	2100      	movs	r1, #0
 80044d4:	0008      	movs	r0, r1
 80044d6:	bd32      	pop	{r1, r4, r5, pc}

080044d8 <.text_10>:
 80044d8:	00000704 	.word	0x00000704

080044dc <USBPD_PE_UVDM_RequestMessage>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	000a      	movs	r2, r1
 80044e0:	4951      	ldr	r1, [pc, #324]	; (8004628 <.text_14>)
 80044e2:	0083      	lsls	r3, r0, #2
 80044e4:	58cb      	ldr	r3, [r1, r3]
 80044e6:	2110      	movs	r1, #16
 80044e8:	68dc      	ldr	r4, [r3, #12]
 80044ea:	2c00      	cmp	r4, #0
 80044ec:	d101      	bne.n	80044f2 <USBPD_PE_UVDM_RequestMessage+0x16>
 80044ee:	2102      	movs	r1, #2
 80044f0:	e01d      	b.n	800452e <USBPD_PE_UVDM_RequestMessage+0x52>
 80044f2:	2432      	movs	r4, #50	; 0x32
 80044f4:	5d1c      	ldrb	r4, [r3, r4]
 80044f6:	2c00      	cmp	r4, #0
 80044f8:	d105      	bne.n	8004506 <USBPD_PE_UVDM_RequestMessage+0x2a>
 80044fa:	685c      	ldr	r4, [r3, #4]
 80044fc:	6824      	ldr	r4, [r4, #0]
 80044fe:	2501      	movs	r5, #1
 8004500:	0b26      	lsrs	r6, r4, #12
 8004502:	402e      	ands	r6, r5
 8004504:	d101      	bne.n	800450a <USBPD_PE_UVDM_RequestMessage+0x2e>
 8004506:	2103      	movs	r1, #3
 8004508:	e011      	b.n	800452e <USBPD_PE_UVDM_RequestMessage+0x52>
 800450a:	0be6      	lsrs	r6, r4, #15
 800450c:	4035      	ands	r5, r6
 800450e:	d101      	bne.n	8004514 <USBPD_PE_UVDM_RequestMessage+0x38>
 8004510:	0015      	movs	r5, r2
 8004512:	d10c      	bne.n	800452e <USBPD_PE_UVDM_RequestMessage+0x52>
 8004514:	0564      	lsls	r4, r4, #21
 8004516:	0f64      	lsrs	r4, r4, #29
 8004518:	2c03      	cmp	r4, #3
 800451a:	d108      	bne.n	800452e <USBPD_PE_UVDM_RequestMessage+0x52>
 800451c:	2133      	movs	r1, #51	; 0x33
 800451e:	545a      	strb	r2, [r3, r1]
 8004520:	2186      	movs	r1, #134	; 0x86
 8004522:	2232      	movs	r2, #50	; 0x32
 8004524:	5499      	strb	r1, [r3, r2]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800452a:	4788      	blx	r1
 800452c:	2100      	movs	r1, #0
 800452e:	0008      	movs	r0, r1
 8004530:	bd70      	pop	{r4, r5, r6, pc}

08004532 <PE_Receive_SVDM>:
 8004532:	493e      	ldr	r1, [pc, #248]	; (800462c <.text_15>)
 8004534:	1842      	adds	r2, r0, r1
 8004536:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8004538:	0449      	lsls	r1, r1, #17
 800453a:	0f49      	lsrs	r1, r1, #29
 800453c:	1e49      	subs	r1, r1, #1
 800453e:	7611      	strb	r1, [r2, #24]
 8004540:	2131      	movs	r1, #49	; 0x31
 8004542:	5c41      	ldrb	r1, [r0, r1]
 8004544:	2900      	cmp	r1, #0
 8004546:	d000      	beq.n	800454a <PE_Receive_SVDM+0x18>
 8004548:	4770      	bx	lr
 800454a:	b570      	push	{r4, r5, r6, lr}
 800454c:	2300      	movs	r3, #0
 800454e:	e010      	b.n	8004572 <PE_Receive_SVDM+0x40>
 8004550:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004552:	009c      	lsls	r4, r3, #2
 8004554:	1909      	adds	r1, r1, r4
 8004556:	798c      	ldrb	r4, [r1, #6]
 8004558:	79cd      	ldrb	r5, [r1, #7]
 800455a:	022d      	lsls	r5, r5, #8
 800455c:	1964      	adds	r4, r4, r5
 800455e:	7a0d      	ldrb	r5, [r1, #8]
 8004560:	042d      	lsls	r5, r5, #16
 8004562:	1964      	adds	r4, r4, r5
 8004564:	7a49      	ldrb	r1, [r1, #9]
 8004566:	0609      	lsls	r1, r1, #24
 8004568:	1861      	adds	r1, r4, r1
 800456a:	009c      	lsls	r4, r3, #2
 800456c:	5111      	str	r1, [r2, r4]
 800456e:	1c5b      	adds	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	7e11      	ldrb	r1, [r2, #24]
 8004574:	428b      	cmp	r3, r1
 8004576:	dbeb      	blt.n	8004550 <PE_Receive_SVDM+0x1e>
 8004578:	0004      	movs	r4, r0
 800457a:	2503      	movs	r5, #3
 800457c:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <.text_16>)
 800457e:	482d      	ldr	r0, [pc, #180]	; (8004634 <.text_17>)
 8004580:	2694      	movs	r6, #148	; 0x94
 8004582:	00b6      	lsls	r6, r6, #2
 8004584:	5da6      	ldrb	r6, [r4, r6]
 8004586:	06f6      	lsls	r6, r6, #27
 8004588:	0ef6      	lsrs	r6, r6, #27
 800458a:	1e76      	subs	r6, r6, #1
 800458c:	d00d      	beq.n	80045aa <PE_Receive_SVDM+0x78>
 800458e:	1e76      	subs	r6, r6, #1
 8004590:	d022      	beq.n	80045d8 <PE_Receive_SVDM+0xa6>
 8004592:	1e76      	subs	r6, r6, #1
 8004594:	d025      	beq.n	80045e2 <PE_Receive_SVDM+0xb0>
 8004596:	1e76      	subs	r6, r6, #1
 8004598:	d028      	beq.n	80045ec <PE_Receive_SVDM+0xba>
 800459a:	1e76      	subs	r6, r6, #1
 800459c:	d02b      	beq.n	80045f6 <PE_Receive_SVDM+0xc4>
 800459e:	1e76      	subs	r6, r6, #1
 80045a0:	d02e      	beq.n	8004600 <PE_Receive_SVDM+0xce>
 80045a2:	3e0a      	subs	r6, #10
 80045a4:	2e0f      	cmp	r6, #15
 80045a6:	d937      	bls.n	8004618 <PE_Receive_SVDM+0xe6>
 80045a8:	bd70      	pop	{r4, r5, r6, pc}
 80045aa:	2150      	movs	r1, #80	; 0x50
 80045ac:	7721      	strb	r1, [r4, #28]
 80045ae:	6861      	ldr	r1, [r4, #4]
 80045b0:	680a      	ldr	r2, [r1, #0]
 80045b2:	0693      	lsls	r3, r2, #26
 80045b4:	0fdb      	lsrs	r3, r3, #31
 80045b6:	2694      	movs	r6, #148	; 0x94
 80045b8:	00b6      	lsls	r6, r6, #2
 80045ba:	59a6      	ldr	r6, [r4, r6]
 80045bc:	0b76      	lsrs	r6, r6, #13
 80045be:	4035      	ands	r5, r6
 80045c0:	429d      	cmp	r5, r3
 80045c2:	da00      	bge.n	80045c6 <PE_Receive_SVDM+0x94>
 80045c4:	002b      	movs	r3, r5
 80045c6:	2520      	movs	r5, #32
 80045c8:	43aa      	bics	r2, r5
 80045ca:	015b      	lsls	r3, r3, #5
 80045cc:	402b      	ands	r3, r5
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
 80045d2:	83e0      	strh	r0, [r4, #30]
 80045d4:	2075      	movs	r0, #117	; 0x75
 80045d6:	e023      	b.n	8004620 <PE_Receive_SVDM+0xee>
 80045d8:	2152      	movs	r1, #82	; 0x52
 80045da:	7721      	strb	r1, [r4, #28]
 80045dc:	83e0      	strh	r0, [r4, #30]
 80045de:	2076      	movs	r0, #118	; 0x76
 80045e0:	e01e      	b.n	8004620 <PE_Receive_SVDM+0xee>
 80045e2:	2153      	movs	r1, #83	; 0x53
 80045e4:	7721      	strb	r1, [r4, #28]
 80045e6:	83e0      	strh	r0, [r4, #30]
 80045e8:	2078      	movs	r0, #120	; 0x78
 80045ea:	e019      	b.n	8004620 <PE_Receive_SVDM+0xee>
 80045ec:	2054      	movs	r0, #84	; 0x54
 80045ee:	7720      	strb	r0, [r4, #28]
 80045f0:	83e3      	strh	r3, [r4, #30]
 80045f2:	2079      	movs	r0, #121	; 0x79
 80045f4:	e014      	b.n	8004620 <PE_Receive_SVDM+0xee>
 80045f6:	2055      	movs	r0, #85	; 0x55
 80045f8:	7720      	strb	r0, [r4, #28]
 80045fa:	83e3      	strh	r3, [r4, #30]
 80045fc:	207a      	movs	r0, #122	; 0x7a
 80045fe:	e00f      	b.n	8004620 <PE_Receive_SVDM+0xee>
 8004600:	68e0      	ldr	r0, [r4, #12]
 8004602:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <PE_Receive_SVDM+0xe2>
 8004608:	2900      	cmp	r1, #0
 800460a:	d000      	beq.n	800460e <PE_Receive_SVDM+0xdc>
 800460c:	2101      	movs	r1, #1
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	7c20      	ldrb	r0, [r4, #16]
 8004612:	4798      	blx	r3
 8004614:	7465      	strb	r5, [r4, #17]
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	215a      	movs	r1, #90	; 0x5a
 800461a:	7721      	strb	r1, [r4, #28]
 800461c:	83e0      	strh	r0, [r4, #30]
 800461e:	207b      	movs	r0, #123	; 0x7b
 8004620:	7460      	strb	r0, [r4, #17]
 8004622:	bd70      	pop	{r4, r5, r6, pc}

08004624 <.text_13>:
 8004624:	fffffe3f 	.word	0xfffffe3f

08004628 <.text_14>:
 8004628:	20000228 	.word	0x20000228

0800462c <.text_15>:
 800462c:	00000494 	.word	0x00000494

08004630 <.text_16>:
 8004630:	00008019 	.word	0x00008019

08004634 <.text_17>:
 8004634:	0000800f 	.word	0x0000800f

08004638 <PE_StateMachine_VDM>:
 8004638:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 800463a:	b09c      	sub	sp, #112	; 0x70
 800463c:	0005      	movs	r5, r0
 800463e:	2002      	movs	r0, #2
 8004640:	9004      	str	r0, [sp, #16]
 8004642:	7c6a      	ldrb	r2, [r5, #17]
 8004644:	0010      	movs	r0, r2
 8004646:	3875      	subs	r0, #117	; 0x75
 8004648:	2807      	cmp	r0, #7
 800464a:	d206      	bcs.n	800465a <__iar_annotation$$branch+0x4>
 800464c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800464e:	7800      	ldrb	r0, [r0, #0]
 8004650:	2814      	cmp	r0, #20
 8004652:	d002      	beq.n	800465a <__iar_annotation$$branch+0x4>
 8004654:	2002      	movs	r0, #2

08004656 <__iar_annotation$$branch>:
 8004656:	f000 febc 	bl	80053d2 <__iar_annotation$$branch+0xce4>
 800465a:	2094      	movs	r0, #148	; 0x94
 800465c:	0080      	lsls	r0, r0, #2
 800465e:	182c      	adds	r4, r5, r0
 8004660:	210b      	movs	r1, #11
 8004662:	271e      	movs	r7, #30
 8004664:	201f      	movs	r0, #31
 8004666:	43c0      	mvns	r0, r0
 8004668:	26c0      	movs	r6, #192	; 0xc0
 800466a:	43f6      	mvns	r6, r6
 800466c:	2a75      	cmp	r2, #117	; 0x75
 800466e:	d041      	beq.n	80046f4 <__iar_annotation$$branch+0x6>
 8004670:	2a76      	cmp	r2, #118	; 0x76
 8004672:	d100      	bne.n	8004676 <__iar_annotation$$branch+0x20>
 8004674:	e0bb      	b.n	80047ee <__iar_annotation$$branch+0x100>
 8004676:	2a77      	cmp	r2, #119	; 0x77
 8004678:	d100      	bne.n	800467c <__iar_annotation$$branch+0x26>
 800467a:	e144      	b.n	8004906 <__iar_annotation$$branch+0x218>
 800467c:	2a78      	cmp	r2, #120	; 0x78
 800467e:	d100      	bne.n	8004682 <__iar_annotation$$branch+0x2c>
 8004680:	e1b4      	b.n	80049ec <__iar_annotation$$branch+0x2fe>
 8004682:	2a79      	cmp	r2, #121	; 0x79
 8004684:	d100      	bne.n	8004688 <__iar_annotation$$branch+0x32>
 8004686:	e216      	b.n	8004ab6 <__iar_annotation$$branch+0x3c8>
 8004688:	2a7a      	cmp	r2, #122	; 0x7a
 800468a:	d100      	bne.n	800468e <__iar_annotation$$branch+0x38>
 800468c:	e24b      	b.n	8004b26 <__iar_annotation$$branch+0x438>
 800468e:	2a7b      	cmp	r2, #123	; 0x7b
 8004690:	d100      	bne.n	8004694 <__iar_annotation$$branch+0x3e>
 8004692:	e292      	b.n	8004bba <__iar_annotation$$branch+0x4cc>
 8004694:	2a7d      	cmp	r2, #125	; 0x7d
 8004696:	d100      	bne.n	800469a <__iar_annotation$$branch+0x44>
 8004698:	e2e0      	b.n	8004c5c <__iar_annotation$$branch+0x56e>
 800469a:	2a7f      	cmp	r2, #127	; 0x7f
 800469c:	d100      	bne.n	80046a0 <__iar_annotation$$branch+0x4a>
 800469e:	e352      	b.n	8004d46 <__iar_annotation$$branch+0x658>
 80046a0:	2a81      	cmp	r2, #129	; 0x81
 80046a2:	d100      	bne.n	80046a6 <__iar_annotation$$branch+0x50>
 80046a4:	e3c2      	b.n	8004e2c <__iar_annotation$$branch+0x73e>
 80046a6:	2a82      	cmp	r2, #130	; 0x82
 80046a8:	d101      	bne.n	80046ae <__iar_annotation$$branch+0x4>

080046aa <__iar_annotation$$branch>:
 80046aa:	f000 fc3b 	bl	8004f24 <__iar_annotation$$branch+0x836>
 80046ae:	2a83      	cmp	r2, #131	; 0x83
 80046b0:	d101      	bne.n	80046b6 <__iar_annotation$$branch+0x4>

080046b2 <__iar_annotation$$branch>:
 80046b2:	f000 fcc9 	bl	8005048 <__iar_annotation$$branch+0x95a>
 80046b6:	2a84      	cmp	r2, #132	; 0x84
 80046b8:	d101      	bne.n	80046be <__iar_annotation$$branch+0x4>

080046ba <__iar_annotation$$branch>:
 80046ba:	f000 fe38 	bl	800532e <__iar_annotation$$branch+0xc40>
 80046be:	2a85      	cmp	r2, #133	; 0x85
 80046c0:	d101      	bne.n	80046c6 <__iar_annotation$$branch+0x4>

080046c2 <__iar_annotation$$branch>:
 80046c2:	f000 fd5d 	bl	8005180 <__iar_annotation$$branch+0xa92>
 80046c6:	2a87      	cmp	r2, #135	; 0x87
 80046c8:	d100      	bne.n	80046cc <__iar_annotation$$branch+0xa>
 80046ca:	e2fc      	b.n	8004cc6 <__iar_annotation$$branch+0x5d8>
 80046cc:	2a89      	cmp	r2, #137	; 0x89
 80046ce:	d100      	bne.n	80046d2 <__iar_annotation$$branch+0x10>
 80046d0:	e375      	b.n	8004dbe <__iar_annotation$$branch+0x6d0>
 80046d2:	2a8b      	cmp	r2, #139	; 0x8b
 80046d4:	d101      	bne.n	80046da <__iar_annotation$$branch+0x4>

080046d6 <__iar_annotation$$branch>:
 80046d6:	f000 fbe4 	bl	8004ea2 <__iar_annotation$$branch+0x7b4>
 80046da:	2a8c      	cmp	r2, #140	; 0x8c
 80046dc:	d101      	bne.n	80046e2 <__iar_annotation$$branch+0x4>

080046de <__iar_annotation$$branch>:
 80046de:	f000 fc63 	bl	8004fa8 <__iar_annotation$$branch+0x8ba>
 80046e2:	2a8d      	cmp	r2, #141	; 0x8d
 80046e4:	d101      	bne.n	80046ea <__iar_annotation$$branch+0x4>

080046e6 <__iar_annotation$$branch>:
 80046e6:	f000 fcf7 	bl	80050d8 <__iar_annotation$$branch+0x9ea>
 80046ea:	2a8f      	cmp	r2, #143	; 0x8f
 80046ec:	d101      	bne.n	80046f2 <__iar_annotation$$branch+0x4>

080046ee <__iar_annotation$$branch>:
 80046ee:	f000 fda5 	bl	800523c <__iar_annotation$$branch+0xb4e>
 80046f2:	e2b2      	b.n	8004c5a <__iar_annotation$$branch+0x56c>
 80046f4:	2201      	movs	r2, #1
 80046f6:	9203      	str	r2, [sp, #12]
 80046f8:	03d3      	lsls	r3, r2, #15
 80046fa:	8bea      	ldrh	r2, [r5, #30]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d100      	bne.n	8004702 <__iar_annotation$$branch+0x14>
 8004700:	e262      	b.n	8004bc8 <__iar_annotation$$branch+0x4da>
 8004702:	2701      	movs	r7, #1
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	4010      	ands	r0, r2
 8004708:	4338      	orrs	r0, r7
 800470a:	6020      	str	r0, [r4, #0]
 800470c:	4303      	orrs	r3, r0
 800470e:	6023      	str	r3, [r4, #0]
 8004710:	6868      	ldr	r0, [r5, #4]
 8004712:	6800      	ldr	r0, [r0, #0]
 8004714:	0942      	lsrs	r2, r0, #5
 8004716:	403a      	ands	r2, r7
 8004718:	48c9      	ldr	r0, [pc, #804]	; (8004a40 <__iar_annotation$$branch+0x352>)
 800471a:	4018      	ands	r0, r3
 800471c:	0352      	lsls	r2, r2, #13
 800471e:	4302      	orrs	r2, r0
 8004720:	6022      	str	r2, [r4, #0]
 8004722:	6868      	ldr	r0, [r5, #4]
 8004724:	6800      	ldr	r0, [r0, #0]
 8004726:	4001      	ands	r1, r0
 8004728:	2909      	cmp	r1, #9
 800472a:	d051      	beq.n	80047d0 <__iar_annotation$$branch+0xe2>
 800472c:	68e8      	ldr	r0, [r5, #12]
 800472e:	2800      	cmp	r0, #0
 8004730:	d04e      	beq.n	80047d0 <__iar_annotation$$branch+0xe2>
 8004732:	6803      	ldr	r3, [r0, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d04b      	beq.n	80047d0 <__iar_annotation$$branch+0xe2>
 8004738:	0c10      	lsrs	r0, r2, #16
 800473a:	21ff      	movs	r1, #255	; 0xff
 800473c:	0209      	lsls	r1, r1, #8
 800473e:	4288      	cmp	r0, r1
 8004740:	d146      	bne.n	80047d0 <__iar_annotation$$branch+0xe2>
 8004742:	a90b      	add	r1, sp, #44	; 0x2c
 8004744:	7c28      	ldrb	r0, [r5, #16]
 8004746:	4798      	blx	r3
 8004748:	2803      	cmp	r0, #3
 800474a:	d002      	beq.n	8004752 <__iar_annotation$$branch+0x64>
 800474c:	280f      	cmp	r0, #15
 800474e:	d005      	beq.n	800475c <__iar_annotation$$branch+0x6e>
 8004750:	e03e      	b.n	80047d0 <__iar_annotation$$branch+0xe2>
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	21c0      	movs	r1, #192	; 0xc0
 8004756:	4301      	orrs	r1, r0
 8004758:	6021      	str	r1, [r4, #0]
 800475a:	e03e      	b.n	80047da <__iar_annotation$$branch+0xec>
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	4006      	ands	r6, r0
 8004760:	2040      	movs	r0, #64	; 0x40
 8004762:	4330      	orrs	r0, r6
 8004764:	6020      	str	r0, [r4, #0]
 8004766:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004768:	9015      	str	r0, [sp, #84]	; 0x54
 800476a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800476c:	9016      	str	r0, [sp, #88]	; 0x58
 800476e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004770:	9017      	str	r0, [sp, #92]	; 0x5c
 8004772:	2004      	movs	r0, #4
 8004774:	9003      	str	r0, [sp, #12]
 8004776:	a80b      	add	r0, sp, #44	; 0x2c
 8004778:	2120      	movs	r1, #32
 800477a:	5c40      	ldrb	r0, [r0, r1]
 800477c:	0841      	lsrs	r1, r0, #1
 800477e:	4239      	tst	r1, r7
 8004780:	d003      	beq.n	800478a <__iar_annotation$$branch+0x9c>
 8004782:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004784:	9118      	str	r1, [sp, #96]	; 0x60
 8004786:	2105      	movs	r1, #5
 8004788:	9103      	str	r1, [sp, #12]
 800478a:	08c2      	lsrs	r2, r0, #3
 800478c:	2101      	movs	r1, #1
 800478e:	4011      	ands	r1, r2
 8004790:	d008      	beq.n	80047a4 <__iar_annotation$$branch+0xb6>
 8004792:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004794:	aa14      	add	r2, sp, #80	; 0x50
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	50d6      	str	r6, [r2, r3]
 800479c:	9a03      	ldr	r2, [sp, #12]
 800479e:	1c52      	adds	r2, r2, #1
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	9203      	str	r2, [sp, #12]
 80047a4:	0900      	lsrs	r0, r0, #4
 80047a6:	4238      	tst	r0, r7
 80047a8:	d017      	beq.n	80047da <__iar_annotation$$branch+0xec>
 80047aa:	2900      	cmp	r1, #0
 80047ac:	d007      	beq.n	80047be <__iar_annotation$$branch+0xd0>
 80047ae:	2000      	movs	r0, #0
 80047b0:	a914      	add	r1, sp, #80	; 0x50
 80047b2:	9a03      	ldr	r2, [sp, #12]
 80047b4:	0092      	lsls	r2, r2, #2
 80047b6:	5088      	str	r0, [r1, r2]
 80047b8:	9803      	ldr	r0, [sp, #12]
 80047ba:	1c40      	adds	r0, r0, #1
 80047bc:	9003      	str	r0, [sp, #12]
 80047be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80047c0:	a914      	add	r1, sp, #80	; 0x50
 80047c2:	9a03      	ldr	r2, [sp, #12]
 80047c4:	0092      	lsls	r2, r2, #2
 80047c6:	5088      	str	r0, [r1, r2]
 80047c8:	9803      	ldr	r0, [sp, #12]
 80047ca:	1c40      	adds	r0, r0, #1
 80047cc:	9003      	str	r0, [sp, #12]
 80047ce:	e004      	b.n	80047da <__iar_annotation$$branch+0xec>
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	4006      	ands	r6, r0
 80047d4:	2080      	movs	r0, #128	; 0x80
 80047d6:	4330      	orrs	r0, r6
 80047d8:	6020      	str	r0, [r4, #0]
 80047da:	6820      	ldr	r0, [r4, #0]
 80047dc:	9014      	str	r0, [sp, #80]	; 0x50
 80047de:	2000      	movs	r0, #0
 80047e0:	9002      	str	r0, [sp, #8]
 80047e2:	2003      	movs	r0, #3
 80047e4:	9001      	str	r0, [sp, #4]
 80047e6:	9803      	ldr	r0, [sp, #12]
 80047e8:	9000      	str	r0, [sp, #0]
 80047ea:	ab14      	add	r3, sp, #80	; 0x50
 80047ec:	e22f      	b.n	8004c4e <__iar_annotation$$branch+0x560>
 80047ee:	2201      	movs	r2, #1
 80047f0:	466b      	mov	r3, sp
 80047f2:	731a      	strb	r2, [r3, #12]
 80047f4:	03d2      	lsls	r2, r2, #15
 80047f6:	8beb      	ldrh	r3, [r5, #30]
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d100      	bne.n	80047fe <__iar_annotation$$branch+0x110>
 80047fc:	e1e4      	b.n	8004bc8 <__iar_annotation$$branch+0x4da>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	4018      	ands	r0, r3
 8004802:	2302      	movs	r3, #2
 8004804:	4303      	orrs	r3, r0
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	431a      	orrs	r2, r3
 800480a:	6022      	str	r2, [r4, #0]
 800480c:	6868      	ldr	r0, [r5, #4]
 800480e:	6803      	ldr	r3, [r0, #0]
 8004810:	0698      	lsls	r0, r3, #26
 8004812:	0fc0      	lsrs	r0, r0, #31
 8004814:	4b8a      	ldr	r3, [pc, #552]	; (8004a40 <__iar_annotation$$branch+0x352>)
 8004816:	4013      	ands	r3, r2
 8004818:	0340      	lsls	r0, r0, #13
 800481a:	4318      	orrs	r0, r3
 800481c:	6020      	str	r0, [r4, #0]
 800481e:	686a      	ldr	r2, [r5, #4]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	4011      	ands	r1, r2
 8004824:	2909      	cmp	r1, #9
 8004826:	d05f      	beq.n	80048e8 <__iar_annotation$$branch+0x1fa>
 8004828:	68e9      	ldr	r1, [r5, #12]
 800482a:	684b      	ldr	r3, [r1, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d05b      	beq.n	80048e8 <__iar_annotation$$branch+0x1fa>
 8004830:	0c00      	lsrs	r0, r0, #16
 8004832:	21ff      	movs	r1, #255	; 0xff
 8004834:	0209      	lsls	r1, r1, #8
 8004836:	4288      	cmp	r0, r1
 8004838:	d156      	bne.n	80048e8 <__iar_annotation$$branch+0x1fa>
 800483a:	4882      	ldr	r0, [pc, #520]	; (8004a44 <__iar_annotation$$branch+0x356>)
 800483c:	182a      	adds	r2, r5, r0
 800483e:	a905      	add	r1, sp, #20
 8004840:	7c28      	ldrb	r0, [r5, #16]
 8004842:	4798      	blx	r3
 8004844:	2803      	cmp	r0, #3
 8004846:	d04b      	beq.n	80048e0 <__iar_annotation$$branch+0x1f2>
 8004848:	280f      	cmp	r0, #15
 800484a:	d14d      	bne.n	80048e8 <__iar_annotation$$branch+0x1fa>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	4006      	ands	r6, r0
 8004850:	2040      	movs	r0, #64	; 0x40
 8004852:	4330      	orrs	r0, r6
 8004854:	6020      	str	r0, [r4, #0]
 8004856:	211c      	movs	r1, #28
 8004858:	a806      	add	r0, sp, #24
 800485a:	f014 fdce 	bl	80193fa <__aeabi_memclr>
 800485e:	2300      	movs	r3, #0
 8004860:	2200      	movs	r2, #0
 8004862:	a806      	add	r0, sp, #24
 8004864:	9000      	str	r0, [sp, #0]
 8004866:	e014      	b.n	8004892 <__iar_annotation$$branch+0x1a4>
 8004868:	005f      	lsls	r7, r3, #1
 800486a:	5bf6      	ldrh	r6, [r6, r7]
 800486c:	0436      	lsls	r6, r6, #16
 800486e:	430e      	orrs	r6, r1
 8004870:	6006      	str	r6, [r0, #0]
 8004872:	e00d      	b.n	8004890 <__iar_annotation$$branch+0x1a2>
 8004874:	1c52      	adds	r2, r2, #1
 8004876:	9800      	ldr	r0, [sp, #0]
 8004878:	1d00      	adds	r0, r0, #4
 800487a:	0859      	lsrs	r1, r3, #1
 800487c:	0089      	lsls	r1, r1, #2
 800487e:	1840      	adds	r0, r0, r1
 8004880:	07d9      	lsls	r1, r3, #31
 8004882:	6801      	ldr	r1, [r0, #0]
 8004884:	9e05      	ldr	r6, [sp, #20]
 8004886:	d5ef      	bpl.n	8004868 <__iar_annotation$$branch+0x17a>
 8004888:	005f      	lsls	r7, r3, #1
 800488a:	5bf6      	ldrh	r6, [r6, r7]
 800488c:	4331      	orrs	r1, r6
 800488e:	6001      	str	r1, [r0, #0]
 8004890:	1c5b      	adds	r3, r3, #1
 8004892:	486d      	ldr	r0, [pc, #436]	; (8004a48 <__iar_annotation$$branch+0x35a>)
 8004894:	1828      	adds	r0, r5, r0
 8004896:	7840      	ldrb	r0, [r0, #1]
 8004898:	4283      	cmp	r3, r0
 800489a:	d201      	bcs.n	80048a0 <__iar_annotation$$branch+0x1b2>
 800489c:	2b0c      	cmp	r3, #12
 800489e:	d3e9      	bcc.n	8004874 <__iar_annotation$$branch+0x186>
 80048a0:	1a80      	subs	r0, r0, r2
 80048a2:	4969      	ldr	r1, [pc, #420]	; (8004a48 <__iar_annotation$$branch+0x35a>)
 80048a4:	1869      	adds	r1, r5, r1
 80048a6:	7048      	strb	r0, [r1, #1]
 80048a8:	b2d0      	uxtb	r0, r2
 80048aa:	280c      	cmp	r0, #12
 80048ac:	d111      	bne.n	80048d2 <__iar_annotation$$branch+0x1e4>
 80048ae:	6820      	ldr	r0, [r4, #0]
 80048b0:	9006      	str	r0, [sp, #24]
 80048b2:	2000      	movs	r0, #0
 80048b4:	9002      	str	r0, [sp, #8]
 80048b6:	2077      	movs	r0, #119	; 0x77
 80048b8:	9001      	str	r0, [sp, #4]
 80048ba:	2007      	movs	r0, #7
 80048bc:	9000      	str	r0, [sp, #0]
 80048be:	ab06      	add	r3, sp, #24
 80048c0:	220f      	movs	r2, #15
 80048c2:	2031      	movs	r0, #49	; 0x31
 80048c4:	5c29      	ldrb	r1, [r5, r0]
 80048c6:	0028      	movs	r0, r5
 80048c8:	f7fc fea1 	bl	800160e <PE_Send_DataMessage>
 80048cc:	485f      	ldr	r0, [pc, #380]	; (8004a4c <__iar_annotation$$branch+0x35e>)
 80048ce:	83e8      	strh	r0, [r5, #30]
 80048d0:	e1c3      	b.n	8004c5a <__iar_annotation$$branch+0x56c>
 80048d2:	0612      	lsls	r2, r2, #24
 80048d4:	0e50      	lsrs	r0, r2, #25
 80048d6:	1c80      	adds	r0, r0, #2
 80048d8:	4669      	mov	r1, sp
 80048da:	7308      	strb	r0, [r1, #12]
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	e008      	b.n	80048f2 <__iar_annotation$$branch+0x204>
 80048e0:	6821      	ldr	r1, [r4, #0]
 80048e2:	20c0      	movs	r0, #192	; 0xc0
 80048e4:	4308      	orrs	r0, r1
 80048e6:	e003      	b.n	80048f0 <__iar_annotation$$branch+0x202>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	4006      	ands	r6, r0
 80048ec:	2080      	movs	r0, #128	; 0x80
 80048ee:	4330      	orrs	r0, r6
 80048f0:	6020      	str	r0, [r4, #0]
 80048f2:	9006      	str	r0, [sp, #24]
 80048f4:	2000      	movs	r0, #0
 80048f6:	9002      	str	r0, [sp, #8]
 80048f8:	2003      	movs	r0, #3
 80048fa:	9001      	str	r0, [sp, #4]
 80048fc:	4668      	mov	r0, sp
 80048fe:	7b00      	ldrb	r0, [r0, #12]
 8004900:	9000      	str	r0, [sp, #0]
 8004902:	ab06      	add	r3, sp, #24
 8004904:	e1a3      	b.n	8004c4e <__iar_annotation$$branch+0x560>
 8004906:	2180      	movs	r1, #128	; 0x80
 8004908:	0209      	lsls	r1, r1, #8
 800490a:	8bea      	ldrh	r2, [r5, #30]
 800490c:	428a      	cmp	r2, r1
 800490e:	d100      	bne.n	8004912 <__iar_annotation$$branch+0x224>
 8004910:	e15a      	b.n	8004bc8 <__iar_annotation$$branch+0x4da>
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	4010      	ands	r0, r2
 8004916:	2202      	movs	r2, #2
 8004918:	4302      	orrs	r2, r0
 800491a:	6022      	str	r2, [r4, #0]
 800491c:	b292      	uxth	r2, r2
 800491e:	20ff      	movs	r0, #255	; 0xff
 8004920:	0600      	lsls	r0, r0, #24
 8004922:	4310      	orrs	r0, r2
 8004924:	6020      	str	r0, [r4, #0]
 8004926:	4301      	orrs	r1, r0
 8004928:	6021      	str	r1, [r4, #0]
 800492a:	2701      	movs	r7, #1
 800492c:	6868      	ldr	r0, [r5, #4]
 800492e:	6800      	ldr	r0, [r0, #0]
 8004930:	0940      	lsrs	r0, r0, #5
 8004932:	4038      	ands	r0, r7
 8004934:	4a42      	ldr	r2, [pc, #264]	; (8004a40 <__iar_annotation$$branch+0x352>)
 8004936:	400a      	ands	r2, r1
 8004938:	0340      	lsls	r0, r0, #13
 800493a:	4310      	orrs	r0, r2
 800493c:	6020      	str	r0, [r4, #0]
 800493e:	4006      	ands	r6, r0
 8004940:	2040      	movs	r0, #64	; 0x40
 8004942:	4330      	orrs	r0, r6
 8004944:	6020      	str	r0, [r4, #0]
 8004946:	aa03      	add	r2, sp, #12
 8004948:	a905      	add	r1, sp, #20
 800494a:	7c28      	ldrb	r0, [r5, #16]
 800494c:	68eb      	ldr	r3, [r5, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4798      	blx	r3
 8004952:	211c      	movs	r1, #28
 8004954:	a806      	add	r0, sp, #24
 8004956:	f014 fd50 	bl	80193fa <__aeabi_memclr>
 800495a:	2100      	movs	r1, #0
 800495c:	2200      	movs	r2, #0
 800495e:	a806      	add	r0, sp, #24
 8004960:	002c      	movs	r4, r5
 8004962:	e016      	b.n	8004992 <__iar_annotation$$branch+0x2a4>
 8004964:	004d      	lsls	r5, r1, #1
 8004966:	5b75      	ldrh	r5, [r6, r5]
 8004968:	042d      	lsls	r5, r5, #16
 800496a:	4666      	mov	r6, ip
 800496c:	4335      	orrs	r5, r6
 800496e:	601d      	str	r5, [r3, #0]
 8004970:	e00e      	b.n	8004990 <__iar_annotation$$branch+0x2a2>
 8004972:	1c52      	adds	r2, r2, #1
 8004974:	1d03      	adds	r3, r0, #4
 8004976:	084d      	lsrs	r5, r1, #1
 8004978:	00ad      	lsls	r5, r5, #2
 800497a:	195b      	adds	r3, r3, r5
 800497c:	4239      	tst	r1, r7
 800497e:	681e      	ldr	r6, [r3, #0]
 8004980:	46b4      	mov	ip, r6
 8004982:	9e05      	ldr	r6, [sp, #20]
 8004984:	d0ee      	beq.n	8004964 <__iar_annotation$$branch+0x276>
 8004986:	004d      	lsls	r5, r1, #1
 8004988:	5b75      	ldrh	r5, [r6, r5]
 800498a:	4666      	mov	r6, ip
 800498c:	432e      	orrs	r6, r5
 800498e:	601e      	str	r6, [r3, #0]
 8004990:	1c49      	adds	r1, r1, #1
 8004992:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <__iar_annotation$$branch+0x35a>)
 8004994:	18e3      	adds	r3, r4, r3
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	4299      	cmp	r1, r3
 800499a:	d201      	bcs.n	80049a0 <__iar_annotation$$branch+0x2b2>
 800499c:	290c      	cmp	r1, #12
 800499e:	d3e8      	bcc.n	8004972 <__iar_annotation$$branch+0x284>
 80049a0:	1a98      	subs	r0, r3, r2
 80049a2:	4929      	ldr	r1, [pc, #164]	; (8004a48 <__iar_annotation$$branch+0x35a>)
 80049a4:	1861      	adds	r1, r4, r1
 80049a6:	7048      	strb	r0, [r1, #1]
 80049a8:	b2d0      	uxtb	r0, r2
 80049aa:	280c      	cmp	r0, #12
 80049ac:	d10f      	bne.n	80049ce <__iar_annotation$$branch+0x2e0>
 80049ae:	2000      	movs	r0, #0
 80049b0:	9002      	str	r0, [sp, #8]
 80049b2:	2077      	movs	r0, #119	; 0x77
 80049b4:	9001      	str	r0, [sp, #4]
 80049b6:	2007      	movs	r0, #7
 80049b8:	9000      	str	r0, [sp, #0]
 80049ba:	ab06      	add	r3, sp, #24
 80049bc:	220f      	movs	r2, #15
 80049be:	2031      	movs	r0, #49	; 0x31
 80049c0:	5c21      	ldrb	r1, [r4, r0]
 80049c2:	0020      	movs	r0, r4
 80049c4:	f7fc fe23 	bl	800160e <PE_Send_DataMessage>
 80049c8:	4820      	ldr	r0, [pc, #128]	; (8004a4c <__iar_annotation$$branch+0x35e>)
 80049ca:	83e0      	strh	r0, [r4, #30]
 80049cc:	e145      	b.n	8004c5a <__iar_annotation$$branch+0x56c>
 80049ce:	2000      	movs	r0, #0
 80049d0:	9002      	str	r0, [sp, #8]
 80049d2:	2003      	movs	r0, #3
 80049d4:	9001      	str	r0, [sp, #4]
 80049d6:	0610      	lsls	r0, r2, #24
 80049d8:	0e40      	lsrs	r0, r0, #25
 80049da:	1c80      	adds	r0, r0, #2
 80049dc:	b2c0      	uxtb	r0, r0
 80049de:	9000      	str	r0, [sp, #0]
 80049e0:	ab06      	add	r3, sp, #24
 80049e2:	220f      	movs	r2, #15
 80049e4:	2031      	movs	r0, #49	; 0x31
 80049e6:	5c21      	ldrb	r1, [r4, r0]
 80049e8:	0020      	movs	r0, r4
 80049ea:	e134      	b.n	8004c56 <__iar_annotation$$branch+0x568>
 80049ec:	2201      	movs	r2, #1
 80049ee:	9206      	str	r2, [sp, #24]
 80049f0:	03d2      	lsls	r2, r2, #15
 80049f2:	8beb      	ldrh	r3, [r5, #30]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <__iar_annotation$$branch+0x30c>
 80049f8:	e3c1      	b.n	800517e <__iar_annotation$$branch+0xa90>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	4018      	ands	r0, r3
 80049fe:	2303      	movs	r3, #3
 8004a00:	4303      	orrs	r3, r0
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	6022      	str	r2, [r4, #0]
 8004a08:	6868      	ldr	r0, [r5, #4]
 8004a0a:	6803      	ldr	r3, [r0, #0]
 8004a0c:	0698      	lsls	r0, r3, #26
 8004a0e:	0fc0      	lsrs	r0, r0, #31
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <__iar_annotation$$branch+0x352>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	0340      	lsls	r0, r0, #13
 8004a16:	4318      	orrs	r0, r3
 8004a18:	6020      	str	r0, [r4, #0]
 8004a1a:	686a      	ldr	r2, [r5, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	4011      	ands	r1, r2
 8004a20:	2909      	cmp	r1, #9
 8004a22:	d037      	beq.n	8004a94 <__iar_annotation$$branch+0x3a6>
 8004a24:	68e9      	ldr	r1, [r5, #12]
 8004a26:	688f      	ldr	r7, [r1, #8]
 8004a28:	2f00      	cmp	r7, #0
 8004a2a:	d033      	beq.n	8004a94 <__iar_annotation$$branch+0x3a6>
 8004a2c:	ab03      	add	r3, sp, #12
 8004a2e:	aa05      	add	r2, sp, #20
 8004a30:	0c01      	lsrs	r1, r0, #16
 8004a32:	7c28      	ldrb	r0, [r5, #16]
 8004a34:	47b8      	blx	r7
 8004a36:	2803      	cmp	r0, #3
 8004a38:	d00a      	beq.n	8004a50 <__iar_annotation$$branch+0x362>
 8004a3a:	280f      	cmp	r0, #15
 8004a3c:	d00d      	beq.n	8004a5a <__iar_annotation$$branch+0x36c>
 8004a3e:	e029      	b.n	8004a94 <__iar_annotation$$branch+0x3a6>
 8004a40:	ffff9fff 	.word	0xffff9fff
 8004a44:	000004ad 	.word	0x000004ad
 8004a48:	000004ac 	.word	0x000004ac
 8004a4c:	0000800f 	.word	0x0000800f
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	21c0      	movs	r1, #192	; 0xc0
 8004a54:	4301      	orrs	r1, r0
 8004a56:	6021      	str	r1, [r4, #0]
 8004a58:	e023      	b.n	8004aa2 <__iar_annotation$$branch+0x3b4>
 8004a5a:	4668      	mov	r0, sp
 8004a5c:	7b00      	ldrb	r0, [r0, #12]
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d018      	beq.n	8004a94 <__iar_annotation$$branch+0x3a6>
 8004a62:	4668      	mov	r0, sp
 8004a64:	7b02      	ldrb	r2, [r0, #12]
 8004a66:	2a07      	cmp	r2, #7
 8004a68:	d214      	bcs.n	8004a94 <__iar_annotation$$branch+0x3a6>
 8004a6a:	6820      	ldr	r0, [r4, #0]
 8004a6c:	4006      	ands	r6, r0
 8004a6e:	2040      	movs	r0, #64	; 0x40
 8004a70:	4330      	orrs	r0, r6
 8004a72:	6020      	str	r0, [r4, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	9806      	ldr	r0, [sp, #24]
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d211      	bcs.n	8004aa0 <__iar_annotation$$branch+0x3b2>
 8004a7c:	9905      	ldr	r1, [sp, #20]
 8004a7e:	6809      	ldr	r1, [r1, #0]
 8004a80:	ae07      	add	r6, sp, #28
 8004a82:	1d36      	adds	r6, r6, #4
 8004a84:	009f      	lsls	r7, r3, #2
 8004a86:	51f1      	str	r1, [r6, r7]
 8004a88:	9905      	ldr	r1, [sp, #20]
 8004a8a:	1d09      	adds	r1, r1, #4
 8004a8c:	9105      	str	r1, [sp, #20]
 8004a8e:	1c40      	adds	r0, r0, #1
 8004a90:	1c5b      	adds	r3, r3, #1
 8004a92:	e7f1      	b.n	8004a78 <__iar_annotation$$branch+0x38a>
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	4006      	ands	r6, r0
 8004a98:	2080      	movs	r0, #128	; 0x80
 8004a9a:	4330      	orrs	r0, r6
 8004a9c:	6020      	str	r0, [r4, #0]
 8004a9e:	e000      	b.n	8004aa2 <__iar_annotation$$branch+0x3b4>
 8004aa0:	9006      	str	r0, [sp, #24]
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	9007      	str	r0, [sp, #28]
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	9002      	str	r0, [sp, #8]
 8004aaa:	2003      	movs	r0, #3
 8004aac:	9001      	str	r0, [sp, #4]
 8004aae:	9806      	ldr	r0, [sp, #24]
 8004ab0:	9000      	str	r0, [sp, #0]
 8004ab2:	ab07      	add	r3, sp, #28
 8004ab4:	e0cb      	b.n	8004c4e <__iar_annotation$$branch+0x560>
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	0209      	lsls	r1, r1, #8
 8004aba:	8bea      	ldrh	r2, [r5, #30]
 8004abc:	428a      	cmp	r2, r1
 8004abe:	d100      	bne.n	8004ac2 <__iar_annotation$$branch+0x3d4>
 8004ac0:	e35d      	b.n	800517e <__iar_annotation$$branch+0xa90>
 8004ac2:	6822      	ldr	r2, [r4, #0]
 8004ac4:	4010      	ands	r0, r2
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	4302      	orrs	r2, r0
 8004aca:	6022      	str	r2, [r4, #0]
 8004acc:	4311      	orrs	r1, r2
 8004ace:	6021      	str	r1, [r4, #0]
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	686a      	ldr	r2, [r5, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	0952      	lsrs	r2, r2, #5
 8004ad8:	4002      	ands	r2, r0
 8004ada:	4ba6      	ldr	r3, [pc, #664]	; (8004d74 <__iar_annotation$$branch+0x686>)
 8004adc:	400b      	ands	r3, r1
 8004ade:	0351      	lsls	r1, r2, #13
 8004ae0:	4319      	orrs	r1, r3
 8004ae2:	6021      	str	r1, [r4, #0]
 8004ae4:	686a      	ldr	r2, [r5, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	08d2      	lsrs	r2, r2, #3
 8004aea:	4010      	ands	r0, r2
 8004aec:	d152      	bne.n	8004b94 <__iar_annotation$$branch+0x4a6>
 8004aee:	68e8      	ldr	r0, [r5, #12]
 8004af0:	68c3      	ldr	r3, [r0, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d04e      	beq.n	8004b94 <__iar_annotation$$branch+0x4a6>
 8004af6:	2707      	movs	r7, #7
 8004af8:	0a0a      	lsrs	r2, r1, #8
 8004afa:	403a      	ands	r2, r7
 8004afc:	0c09      	lsrs	r1, r1, #16
 8004afe:	7c28      	ldrb	r0, [r5, #16]
 8004b00:	4798      	blx	r3
 8004b02:	2803      	cmp	r0, #3
 8004b04:	d041      	beq.n	8004b8a <__iar_annotation$$branch+0x49c>
 8004b06:	280f      	cmp	r0, #15
 8004b08:	d144      	bne.n	8004b94 <__iar_annotation$$branch+0x4a6>
 8004b0a:	6820      	ldr	r0, [r4, #0]
 8004b0c:	4006      	ands	r6, r0
 8004b0e:	2040      	movs	r0, #64	; 0x40
 8004b10:	4330      	orrs	r0, r6
 8004b12:	6020      	str	r0, [r4, #0]
 8004b14:	0a00      	lsrs	r0, r0, #8
 8004b16:	4007      	ands	r7, r0
 8004b18:	6968      	ldr	r0, [r5, #20]
 8004b1a:	4940      	ldr	r1, [pc, #256]	; (8004c1c <__iar_annotation$$branch+0x52e>)
 8004b1c:	4001      	ands	r1, r0
 8004b1e:	01b8      	lsls	r0, r7, #6
 8004b20:	4308      	orrs	r0, r1
 8004b22:	6168      	str	r0, [r5, #20]
 8004b24:	e03b      	b.n	8004b9e <__iar_annotation$$branch+0x4b0>
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	0209      	lsls	r1, r1, #8
 8004b2a:	8bea      	ldrh	r2, [r5, #30]
 8004b2c:	428a      	cmp	r2, r1
 8004b2e:	d04b      	beq.n	8004bc8 <__iar_annotation$$branch+0x4da>
 8004b30:	6822      	ldr	r2, [r4, #0]
 8004b32:	4010      	ands	r0, r2
 8004b34:	2205      	movs	r2, #5
 8004b36:	4302      	orrs	r2, r0
 8004b38:	6022      	str	r2, [r4, #0]
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	6021      	str	r1, [r4, #0]
 8004b3e:	2001      	movs	r0, #1
 8004b40:	686a      	ldr	r2, [r5, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	0952      	lsrs	r2, r2, #5
 8004b46:	4002      	ands	r2, r0
 8004b48:	4b8a      	ldr	r3, [pc, #552]	; (8004d74 <__iar_annotation$$branch+0x686>)
 8004b4a:	400b      	ands	r3, r1
 8004b4c:	0351      	lsls	r1, r2, #13
 8004b4e:	4319      	orrs	r1, r3
 8004b50:	6021      	str	r1, [r4, #0]
 8004b52:	686a      	ldr	r2, [r5, #4]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	08d2      	lsrs	r2, r2, #3
 8004b58:	4010      	ands	r0, r2
 8004b5a:	d11b      	bne.n	8004b94 <__iar_annotation$$branch+0x4a6>
 8004b5c:	68e8      	ldr	r0, [r5, #12]
 8004b5e:	6903      	ldr	r3, [r0, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d017      	beq.n	8004b94 <__iar_annotation$$branch+0x4a6>
 8004b64:	0548      	lsls	r0, r1, #21
 8004b66:	0f42      	lsrs	r2, r0, #29
 8004b68:	0c09      	lsrs	r1, r1, #16
 8004b6a:	7c28      	ldrb	r0, [r5, #16]
 8004b6c:	4798      	blx	r3
 8004b6e:	2803      	cmp	r0, #3
 8004b70:	d00b      	beq.n	8004b8a <__iar_annotation$$branch+0x49c>
 8004b72:	280f      	cmp	r0, #15
 8004b74:	d10e      	bne.n	8004b94 <__iar_annotation$$branch+0x4a6>
 8004b76:	6820      	ldr	r0, [r4, #0]
 8004b78:	4006      	ands	r6, r0
 8004b7a:	2040      	movs	r0, #64	; 0x40
 8004b7c:	4330      	orrs	r0, r6
 8004b7e:	6020      	str	r0, [r4, #0]
 8004b80:	6968      	ldr	r0, [r5, #20]
 8004b82:	4926      	ldr	r1, [pc, #152]	; (8004c1c <__iar_annotation$$branch+0x52e>)
 8004b84:	4001      	ands	r1, r0
 8004b86:	6169      	str	r1, [r5, #20]
 8004b88:	e009      	b.n	8004b9e <__iar_annotation$$branch+0x4b0>
 8004b8a:	6820      	ldr	r0, [r4, #0]
 8004b8c:	21c0      	movs	r1, #192	; 0xc0
 8004b8e:	4301      	orrs	r1, r0
 8004b90:	6021      	str	r1, [r4, #0]
 8004b92:	e004      	b.n	8004b9e <__iar_annotation$$branch+0x4b0>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	4006      	ands	r6, r0
 8004b98:	2080      	movs	r0, #128	; 0x80
 8004b9a:	4330      	orrs	r0, r6
 8004b9c:	6020      	str	r0, [r4, #0]
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	9002      	str	r0, [sp, #8]
 8004ba2:	2003      	movs	r0, #3
 8004ba4:	9001      	str	r0, [sp, #4]
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	9000      	str	r0, [sp, #0]
 8004baa:	0023      	movs	r3, r4
 8004bac:	220f      	movs	r2, #15
 8004bae:	2031      	movs	r0, #49	; 0x31
 8004bb0:	5c29      	ldrb	r1, [r5, r0]
 8004bb2:	0028      	movs	r0, r5
 8004bb4:	f7fc fd2b 	bl	800160e <PE_Send_DataMessage>
 8004bb8:	e04f      	b.n	8004c5a <__iar_annotation$$branch+0x56c>
 8004bba:	2001      	movs	r0, #1
 8004bbc:	4669      	mov	r1, sp
 8004bbe:	7308      	strb	r0, [r1, #12]
 8004bc0:	8be8      	ldrh	r0, [r5, #30]
 8004bc2:	2180      	movs	r1, #128	; 0x80
 8004bc4:	0209      	lsls	r1, r1, #8
 8004bc6:	4288      	cmp	r0, r1
 8004bc8:	d100      	bne.n	8004bcc <__iar_annotation$$branch+0x4de>
 8004bca:	e3ab      	b.n	8005324 <__iar_annotation$$branch+0xc36>
 8004bcc:	68e8      	ldr	r0, [r5, #12]
 8004bce:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004bd0:	2f00      	cmp	r7, #0
 8004bd2:	d02a      	beq.n	8004c2a <__iar_annotation$$branch+0x53c>
 8004bd4:	4868      	ldr	r0, [pc, #416]	; (8004d78 <__iar_annotation$$branch+0x68a>)
 8004bd6:	182b      	adds	r3, r5, r0
 8004bd8:	3018      	adds	r0, #24
 8004bda:	182a      	adds	r2, r5, r0
 8004bdc:	7820      	ldrb	r0, [r4, #0]
 8004bde:	06c1      	lsls	r1, r0, #27
 8004be0:	0ec9      	lsrs	r1, r1, #27
 8004be2:	7c28      	ldrb	r0, [r5, #16]
 8004be4:	47b8      	blx	r7
 8004be6:	2803      	cmp	r0, #3
 8004be8:	d01a      	beq.n	8004c20 <__iar_annotation$$branch+0x532>
 8004bea:	280f      	cmp	r0, #15
 8004bec:	d11d      	bne.n	8004c2a <__iar_annotation$$branch+0x53c>
 8004bee:	6820      	ldr	r0, [r4, #0]
 8004bf0:	4006      	ands	r6, r0
 8004bf2:	2040      	movs	r0, #64	; 0x40
 8004bf4:	4330      	orrs	r0, r6
 8004bf6:	6020      	str	r0, [r4, #0]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4668      	mov	r0, sp
 8004bfc:	7b00      	ldrb	r0, [r0, #12]
 8004bfe:	495f      	ldr	r1, [pc, #380]	; (8004d7c <__iar_annotation$$branch+0x68e>)
 8004c00:	5c69      	ldrb	r1, [r5, r1]
 8004c02:	428a      	cmp	r2, r1
 8004c04:	d217      	bcs.n	8004c36 <__iar_annotation$$branch+0x548>
 8004c06:	0091      	lsls	r1, r2, #2
 8004c08:	4b5b      	ldr	r3, [pc, #364]	; (8004d78 <__iar_annotation$$branch+0x68a>)
 8004c0a:	18eb      	adds	r3, r5, r3
 8004c0c:	585b      	ldr	r3, [r3, r1]
 8004c0e:	ae05      	add	r6, sp, #20
 8004c10:	1d36      	adds	r6, r6, #4
 8004c12:	5073      	str	r3, [r6, r1]
 8004c14:	1c40      	adds	r0, r0, #1
 8004c16:	1c52      	adds	r2, r2, #1
 8004c18:	e7f1      	b.n	8004bfe <__iar_annotation$$branch+0x510>
 8004c1a:	bf00      	nop
 8004c1c:	fffffe3f 	.word	0xfffffe3f
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	21c0      	movs	r1, #192	; 0xc0
 8004c24:	4301      	orrs	r1, r0
 8004c26:	6021      	str	r1, [r4, #0]
 8004c28:	e007      	b.n	8004c3a <__iar_annotation$$branch+0x54c>
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	4006      	ands	r6, r0
 8004c2e:	2080      	movs	r0, #128	; 0x80
 8004c30:	4330      	orrs	r0, r6
 8004c32:	6020      	str	r0, [r4, #0]
 8004c34:	e001      	b.n	8004c3a <__iar_annotation$$branch+0x54c>
 8004c36:	4669      	mov	r1, sp
 8004c38:	7308      	strb	r0, [r1, #12]
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	9005      	str	r0, [sp, #20]
 8004c3e:	2000      	movs	r0, #0
 8004c40:	9002      	str	r0, [sp, #8]
 8004c42:	2003      	movs	r0, #3
 8004c44:	9001      	str	r0, [sp, #4]
 8004c46:	4668      	mov	r0, sp
 8004c48:	7b00      	ldrb	r0, [r0, #12]
 8004c4a:	9000      	str	r0, [sp, #0]
 8004c4c:	ab05      	add	r3, sp, #20
 8004c4e:	220f      	movs	r2, #15
 8004c50:	2031      	movs	r0, #49	; 0x31
 8004c52:	5c29      	ldrb	r1, [r5, r0]
 8004c54:	0028      	movs	r0, r5
 8004c56:	f7fc fcda 	bl	800160e <PE_Send_DataMessage>
 8004c5a:	e3b9      	b.n	80053d0 <__iar_annotation$$branch+0xce2>
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	4010      	ands	r0, r2
 8004c62:	4308      	orrs	r0, r1
 8004c64:	6020      	str	r0, [r4, #0]
 8004c66:	03ca      	lsls	r2, r1, #15
 8004c68:	4302      	orrs	r2, r0
 8004c6a:	6022      	str	r2, [r4, #0]
 8004c6c:	6868      	ldr	r0, [r5, #4]
 8004c6e:	6800      	ldr	r0, [r0, #0]
 8004c70:	0943      	lsrs	r3, r0, #5
 8004c72:	400b      	ands	r3, r1
 8004c74:	483f      	ldr	r0, [pc, #252]	; (8004d74 <__iar_annotation$$branch+0x686>)
 8004c76:	4010      	ands	r0, r2
 8004c78:	035a      	lsls	r2, r3, #13
 8004c7a:	4302      	orrs	r2, r0
 8004c7c:	6022      	str	r2, [r4, #0]
 8004c7e:	48bf      	ldr	r0, [pc, #764]	; (8004f7c <__iar_annotation$$branch+0x88e>)
 8004c80:	4010      	ands	r0, r2
 8004c82:	6020      	str	r0, [r4, #0]
 8004c84:	4006      	ands	r6, r0
 8004c86:	6026      	str	r6, [r4, #0]
 8004c88:	b2b0      	uxth	r0, r6
 8004c8a:	22ff      	movs	r2, #255	; 0xff
 8004c8c:	0612      	lsls	r2, r2, #24
 8004c8e:	4302      	orrs	r2, r0
 8004c90:	6022      	str	r2, [r4, #0]
 8004c92:	6868      	ldr	r0, [r5, #4]
 8004c94:	6800      	ldr	r0, [r0, #0]
 8004c96:	0880      	lsrs	r0, r0, #2
 8004c98:	4001      	ands	r1, r0
 8004c9a:	d003      	beq.n	8004ca4 <__iar_annotation$$branch+0x5b6>
 8004c9c:	6968      	ldr	r0, [r5, #20]
 8004c9e:	0741      	lsls	r1, r0, #29
 8004ca0:	0fc8      	lsrs	r0, r1, #31
 8004ca2:	e000      	b.n	8004ca6 <__iar_annotation$$branch+0x5b8>
 8004ca4:	2002      	movs	r0, #2
 8004ca6:	9002      	str	r0, [sp, #8]
 8004ca8:	2087      	movs	r0, #135	; 0x87
 8004caa:	9001      	str	r0, [sp, #4]
 8004cac:	2001      	movs	r0, #1
 8004cae:	9000      	str	r0, [sp, #0]
 8004cb0:	0023      	movs	r3, r4
 8004cb2:	220f      	movs	r2, #15
 8004cb4:	2031      	movs	r0, #49	; 0x31
 8004cb6:	5c29      	ldrb	r1, [r5, r0]
 8004cb8:	0028      	movs	r0, r5
 8004cba:	f7fc fca8 	bl	800160e <PE_Send_DataMessage>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d1cb      	bne.n	8004c5a <__iar_annotation$$branch+0x56c>
 8004cc2:	2050      	movs	r0, #80	; 0x50
 8004cc4:	e0e8      	b.n	8004e98 <__iar_annotation$$branch+0x7aa>
 8004cc6:	2031      	movs	r0, #49	; 0x31
 8004cc8:	5c28      	ldrb	r0, [r5, r0]
 8004cca:	f7fb fed1 	bl	8000a70 <PE_Convert_SOPRxEvent>
 8004cce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004cd0:	7809      	ldrb	r1, [r1, #0]
 8004cd2:	4281      	cmp	r1, r0
 8004cd4:	d000      	beq.n	8004cd8 <__iar_annotation$$branch+0x5ea>
 8004cd6:	e245      	b.n	8005164 <__iar_annotation$$branch+0xa76>
 8004cd8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004cda:	0bc2      	lsrs	r2, r0, #15
 8004cdc:	d176      	bne.n	8004dcc <__iar_annotation$$branch+0x6de>
 8004cde:	0b02      	lsrs	r2, r0, #12
 8004ce0:	0752      	lsls	r2, r2, #29
 8004ce2:	d012      	beq.n	8004d0a <__iar_annotation$$branch+0x61c>
 8004ce4:	06c0      	lsls	r0, r0, #27
 8004ce6:	0ec0      	lsrs	r0, r0, #27
 8004ce8:	280f      	cmp	r0, #15
 8004cea:	d16f      	bne.n	8004dcc <__iar_annotation$$branch+0x6de>
 8004cec:	2914      	cmp	r1, #20
 8004cee:	d005      	beq.n	8004cfc <__iar_annotation$$branch+0x60e>
 8004cf0:	2014      	movs	r0, #20
 8004cf2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004cf4:	7008      	strb	r0, [r1, #0]
 8004cf6:	0028      	movs	r0, r5
 8004cf8:	f7fb fe81 	bl	80009fe <PE_Clear_RxEvent>
 8004cfc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004cfe:	7881      	ldrb	r1, [r0, #2]
 8004d00:	06ca      	lsls	r2, r1, #27
 8004d02:	0ed2      	lsrs	r2, r2, #27
 8004d04:	2a01      	cmp	r2, #1
 8004d06:	d161      	bne.n	8004dcc <__iar_annotation$$branch+0x6de>
 8004d08:	098c      	lsrs	r4, r1, #6
 8004d0a:	d100      	bne.n	8004d0e <__iar_annotation$$branch+0x620>
 8004d0c:	e22a      	b.n	8005164 <__iar_annotation$$branch+0xa76>
 8004d0e:	68e9      	ldr	r1, [r5, #12]
 8004d10:	6949      	ldr	r1, [r1, #20]
 8004d12:	2900      	cmp	r1, #0
 8004d14:	d100      	bne.n	8004d18 <__iar_annotation$$branch+0x62a>
 8004d16:	e2e3      	b.n	80052e0 <__iar_annotation$$branch+0xbf2>
 8004d18:	2103      	movs	r1, #3
 8004d1a:	4021      	ands	r1, r4
 8004d1c:	2901      	cmp	r1, #1
 8004d1e:	d000      	beq.n	8004d22 <__iar_annotation$$branch+0x634>
 8004d20:	e2de      	b.n	80052e0 <__iar_annotation$$branch+0xbf2>
 8004d22:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d24:	1d81      	adds	r1, r0, #6
 8004d26:	7c28      	ldrb	r0, [r5, #16]
 8004d28:	f000 fc04 	bl	8005534 <PE_SVDM_CheckIdentity>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d108      	bne.n	8004d42 <__iar_annotation$$branch+0x654>
 8004d30:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d32:	2201      	movs	r2, #1
 8004d34:	2100      	movs	r1, #0
 8004d36:	7c28      	ldrb	r0, [r5, #16]
 8004d38:	68ec      	ldr	r4, [r5, #12]
 8004d3a:	6964      	ldr	r4, [r4, #20]
 8004d3c:	47a0      	blx	r4
 8004d3e:	2151      	movs	r1, #81	; 0x51
 8004d40:	e0ec      	b.n	8004f1c <__iar_annotation$$branch+0x82e>
 8004d42:	211b      	movs	r1, #27
 8004d44:	e0ea      	b.n	8004f1c <__iar_annotation$$branch+0x82e>
 8004d46:	6821      	ldr	r1, [r4, #0]
 8004d48:	400e      	ands	r6, r1
 8004d4a:	6026      	str	r6, [r4, #0]
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	4030      	ands	r0, r6
 8004d50:	4308      	orrs	r0, r1
 8004d52:	6020      	str	r0, [r4, #0]
 8004d54:	b280      	uxth	r0, r0
 8004d56:	22ff      	movs	r2, #255	; 0xff
 8004d58:	0612      	lsls	r2, r2, #24
 8004d5a:	4302      	orrs	r2, r0
 8004d5c:	6022      	str	r2, [r4, #0]
 8004d5e:	0388      	lsls	r0, r1, #14
 8004d60:	4310      	orrs	r0, r2
 8004d62:	6020      	str	r0, [r4, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	686b      	ldr	r3, [r5, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	095e      	lsrs	r6, r3, #5
 8004d6c:	4016      	ands	r6, r2
 8004d6e:	4b01      	ldr	r3, [pc, #4]	; (8004d74 <__iar_annotation$$branch+0x686>)
 8004d70:	e006      	b.n	8004d80 <__iar_annotation$$branch+0x692>
 8004d72:	bf00      	nop
 8004d74:	ffff9fff 	.word	0xffff9fff
 8004d78:	00000494 	.word	0x00000494
 8004d7c:	000004ac 	.word	0x000004ac
 8004d80:	4003      	ands	r3, r0
 8004d82:	0370      	lsls	r0, r6, #13
 8004d84:	4318      	orrs	r0, r3
 8004d86:	6020      	str	r0, [r4, #0]
 8004d88:	4b7c      	ldr	r3, [pc, #496]	; (8004f7c <__iar_annotation$$branch+0x88e>)
 8004d8a:	4003      	ands	r3, r0
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	6868      	ldr	r0, [r5, #4]
 8004d90:	6800      	ldr	r0, [r0, #0]
 8004d92:	0880      	lsrs	r0, r0, #2
 8004d94:	4002      	ands	r2, r0
 8004d96:	d002      	beq.n	8004d9e <__iar_annotation$$branch+0x6b0>
 8004d98:	6968      	ldr	r0, [r5, #20]
 8004d9a:	0740      	lsls	r0, r0, #29
 8004d9c:	0fc1      	lsrs	r1, r0, #31
 8004d9e:	9102      	str	r1, [sp, #8]
 8004da0:	2089      	movs	r0, #137	; 0x89
 8004da2:	9001      	str	r0, [sp, #4]
 8004da4:	2001      	movs	r0, #1
 8004da6:	9000      	str	r0, [sp, #0]
 8004da8:	0023      	movs	r3, r4
 8004daa:	220f      	movs	r2, #15
 8004dac:	2031      	movs	r0, #49	; 0x31
 8004dae:	5c29      	ldrb	r1, [r5, r0]
 8004db0:	0028      	movs	r0, r5
 8004db2:	f7fc fc2c 	bl	800160e <PE_Send_DataMessage>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d172      	bne.n	8004ea0 <__iar_annotation$$branch+0x7b2>
 8004dba:	2052      	movs	r0, #82	; 0x52
 8004dbc:	e06c      	b.n	8004e98 <__iar_annotation$$branch+0x7aa>
 8004dbe:	2031      	movs	r0, #49	; 0x31
 8004dc0:	5c28      	ldrb	r0, [r5, r0]
 8004dc2:	f7fb fe55 	bl	8000a70 <PE_Convert_SOPRxEvent>
 8004dc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004dc8:	7809      	ldrb	r1, [r1, #0]
 8004dca:	4281      	cmp	r1, r0
 8004dcc:	d000      	beq.n	8004dd0 <__iar_annotation$$branch+0x6e2>
 8004dce:	e1c9      	b.n	8005164 <__iar_annotation$$branch+0xa76>
 8004dd0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004dd2:	0bc2      	lsrs	r2, r0, #15
 8004dd4:	d1fa      	bne.n	8004dcc <__iar_annotation$$branch+0x6de>
 8004dd6:	0b02      	lsrs	r2, r0, #12
 8004dd8:	0752      	lsls	r2, r2, #29
 8004dda:	d06f      	beq.n	8004ebc <__iar_annotation$$branch+0x7ce>
 8004ddc:	06c0      	lsls	r0, r0, #27
 8004dde:	0ec0      	lsrs	r0, r0, #27
 8004de0:	280f      	cmp	r0, #15
 8004de2:	d1f3      	bne.n	8004dcc <__iar_annotation$$branch+0x6de>
 8004de4:	2914      	cmp	r1, #20
 8004de6:	d005      	beq.n	8004df4 <__iar_annotation$$branch+0x706>
 8004de8:	2014      	movs	r0, #20
 8004dea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004dec:	7008      	strb	r0, [r1, #0]
 8004dee:	0028      	movs	r0, r5
 8004df0:	f7fb fe05 	bl	80009fe <PE_Clear_RxEvent>
 8004df4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004df6:	7881      	ldrb	r1, [r0, #2]
 8004df8:	06ca      	lsls	r2, r1, #27
 8004dfa:	0ed2      	lsrs	r2, r2, #27
 8004dfc:	2a02      	cmp	r2, #2
 8004dfe:	d1e5      	bne.n	8004dcc <__iar_annotation$$branch+0x6de>
 8004e00:	060c      	lsls	r4, r1, #24
 8004e02:	d05b      	beq.n	8004ebc <__iar_annotation$$branch+0x7ce>
 8004e04:	68e9      	ldr	r1, [r5, #12]
 8004e06:	6989      	ldr	r1, [r1, #24]
 8004e08:	2900      	cmp	r1, #0
 8004e0a:	d100      	bne.n	8004e0e <__iar_annotation$$branch+0x720>
 8004e0c:	e268      	b.n	80052e0 <__iar_annotation$$branch+0xbf2>
 8004e0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e10:	1d81      	adds	r1, r0, #6
 8004e12:	7c28      	ldrb	r0, [r5, #16]
 8004e14:	f000 fc55 	bl	80056c2 <PE_SVDM_CheckSVIDs>
 8004e18:	ab0b      	add	r3, sp, #44	; 0x2c
 8004e1a:	0fa2      	lsrs	r2, r4, #30
 8004e1c:	2031      	movs	r0, #49	; 0x31
 8004e1e:	5c29      	ldrb	r1, [r5, r0]
 8004e20:	7c28      	ldrb	r0, [r5, #16]
 8004e22:	68ec      	ldr	r4, [r5, #12]
 8004e24:	69a4      	ldr	r4, [r4, #24]
 8004e26:	47a0      	blx	r4
 8004e28:	2153      	movs	r1, #83	; 0x53
 8004e2a:	e077      	b.n	8004f1c <__iar_annotation$$branch+0x82e>
 8004e2c:	6821      	ldr	r1, [r4, #0]
 8004e2e:	400e      	ands	r6, r1
 8004e30:	6026      	str	r6, [r4, #0]
 8004e32:	4030      	ands	r0, r6
 8004e34:	2103      	movs	r1, #3
 8004e36:	4301      	orrs	r1, r0
 8004e38:	6021      	str	r1, [r4, #0]
 8004e3a:	8920      	ldrh	r0, [r4, #8]
 8004e3c:	b28a      	uxth	r2, r1
 8004e3e:	0401      	lsls	r1, r0, #16
 8004e40:	4311      	orrs	r1, r2
 8004e42:	6021      	str	r1, [r4, #0]
 8004e44:	2080      	movs	r0, #128	; 0x80
 8004e46:	0200      	lsls	r0, r0, #8
 8004e48:	4308      	orrs	r0, r1
 8004e4a:	6020      	str	r0, [r4, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	686a      	ldr	r2, [r5, #4]
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	0952      	lsrs	r2, r2, #5
 8004e54:	400a      	ands	r2, r1
 8004e56:	4b9e      	ldr	r3, [pc, #632]	; (80050d0 <__iar_annotation$$branch+0x9e2>)
 8004e58:	4003      	ands	r3, r0
 8004e5a:	0350      	lsls	r0, r2, #13
 8004e5c:	4318      	orrs	r0, r3
 8004e5e:	6020      	str	r0, [r4, #0]
 8004e60:	4a46      	ldr	r2, [pc, #280]	; (8004f7c <__iar_annotation$$branch+0x88e>)
 8004e62:	4002      	ands	r2, r0
 8004e64:	6022      	str	r2, [r4, #0]
 8004e66:	6868      	ldr	r0, [r5, #4]
 8004e68:	6800      	ldr	r0, [r0, #0]
 8004e6a:	0880      	lsrs	r0, r0, #2
 8004e6c:	4001      	ands	r1, r0
 8004e6e:	d003      	beq.n	8004e78 <__iar_annotation$$branch+0x78a>
 8004e70:	6968      	ldr	r0, [r5, #20]
 8004e72:	0741      	lsls	r1, r0, #29
 8004e74:	0fc8      	lsrs	r0, r1, #31
 8004e76:	e000      	b.n	8004e7a <__iar_annotation$$branch+0x78c>
 8004e78:	2002      	movs	r0, #2
 8004e7a:	9002      	str	r0, [sp, #8]
 8004e7c:	208b      	movs	r0, #139	; 0x8b
 8004e7e:	9001      	str	r0, [sp, #4]
 8004e80:	2001      	movs	r0, #1
 8004e82:	9000      	str	r0, [sp, #0]
 8004e84:	0023      	movs	r3, r4
 8004e86:	220f      	movs	r2, #15
 8004e88:	2031      	movs	r0, #49	; 0x31
 8004e8a:	5c29      	ldrb	r1, [r5, r0]
 8004e8c:	0028      	movs	r0, r5
 8004e8e:	f7fc fbbe 	bl	800160e <PE_Send_DataMessage>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d104      	bne.n	8004ea0 <__iar_annotation$$branch+0x7b2>
 8004e96:	2053      	movs	r0, #83	; 0x53
 8004e98:	7728      	strb	r0, [r5, #28]
 8004e9a:	488e      	ldr	r0, [pc, #568]	; (80050d4 <__iar_annotation$$branch+0x9e6>)
 8004e9c:	83e8      	strh	r0, [r5, #30]
 8004e9e:	9704      	str	r7, [sp, #16]
 8004ea0:	e296      	b.n	80053d0 <__iar_annotation$$branch+0xce2>
 8004ea2:	2031      	movs	r0, #49	; 0x31
 8004ea4:	5c28      	ldrb	r0, [r5, r0]
 8004ea6:	f7fb fde3 	bl	8000a70 <PE_Convert_SOPRxEvent>
 8004eaa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004eac:	7809      	ldrb	r1, [r1, #0]
 8004eae:	4281      	cmp	r1, r0
 8004eb0:	d18c      	bne.n	8004dcc <__iar_annotation$$branch+0x6de>
 8004eb2:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004eb4:	0bc2      	lsrs	r2, r0, #15
 8004eb6:	d189      	bne.n	8004dcc <__iar_annotation$$branch+0x6de>
 8004eb8:	0b02      	lsrs	r2, r0, #12
 8004eba:	0752      	lsls	r2, r2, #29
 8004ebc:	d100      	bne.n	8004ec0 <__iar_annotation$$branch+0x7d2>
 8004ebe:	e151      	b.n	8005164 <__iar_annotation$$branch+0xa76>
 8004ec0:	06c0      	lsls	r0, r0, #27
 8004ec2:	0ec0      	lsrs	r0, r0, #27
 8004ec4:	280f      	cmp	r0, #15
 8004ec6:	d000      	beq.n	8004eca <__iar_annotation$$branch+0x7dc>
 8004ec8:	e14c      	b.n	8005164 <__iar_annotation$$branch+0xa76>
 8004eca:	2914      	cmp	r1, #20
 8004ecc:	d005      	beq.n	8004eda <__iar_annotation$$branch+0x7ec>
 8004ece:	2014      	movs	r0, #20
 8004ed0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ed2:	7008      	strb	r0, [r1, #0]
 8004ed4:	0028      	movs	r0, r5
 8004ed6:	f7fb fd92 	bl	80009fe <PE_Clear_RxEvent>
 8004eda:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004edc:	7881      	ldrb	r1, [r0, #2]
 8004ede:	06ca      	lsls	r2, r1, #27
 8004ee0:	0ed2      	lsrs	r2, r2, #27
 8004ee2:	2a03      	cmp	r2, #3
 8004ee4:	d1ef      	bne.n	8004ec6 <__iar_annotation$$branch+0x7d8>
 8004ee6:	098e      	lsrs	r6, r1, #6
 8004ee8:	d0e8      	beq.n	8004ebc <__iar_annotation$$branch+0x7ce>
 8004eea:	68e9      	ldr	r1, [r5, #12]
 8004eec:	69c9      	ldr	r1, [r1, #28]
 8004eee:	2900      	cmp	r1, #0
 8004ef0:	d017      	beq.n	8004f22 <__iar_annotation$$branch+0x834>
 8004ef2:	ab0b      	add	r3, sp, #44	; 0x2c
 8004ef4:	1d82      	adds	r2, r0, #6
 8004ef6:	6820      	ldr	r0, [r4, #0]
 8004ef8:	0c01      	lsrs	r1, r0, #16
 8004efa:	7c28      	ldrb	r0, [r5, #16]
 8004efc:	f000 fc22 	bl	8005744 <PE_SVDM_CheckModes>
 8004f00:	2403      	movs	r4, #3
 8004f02:	ab0b      	add	r3, sp, #44	; 0x2c
 8004f04:	2203      	movs	r2, #3
 8004f06:	4032      	ands	r2, r6
 8004f08:	2031      	movs	r0, #49	; 0x31
 8004f0a:	5c29      	ldrb	r1, [r5, r0]
 8004f0c:	7c28      	ldrb	r0, [r5, #16]
 8004f0e:	68ef      	ldr	r7, [r5, #12]
 8004f10:	69ff      	ldr	r7, [r7, #28]
 8004f12:	47b8      	blx	r7
 8004f14:	4034      	ands	r4, r6
 8004f16:	2c01      	cmp	r4, #1
 8004f18:	d103      	bne.n	8004f22 <__iar_annotation$$branch+0x834>
 8004f1a:	2154      	movs	r1, #84	; 0x54
 8004f1c:	7c28      	ldrb	r0, [r5, #16]
 8004f1e:	f7fb fb03 	bl	8000528 <USBPD_PE_Notification>
 8004f22:	e1dd      	b.n	80052e0 <__iar_annotation$$branch+0xbf2>
 8004f24:	6821      	ldr	r1, [r4, #0]
 8004f26:	400e      	ands	r6, r1
 8004f28:	6026      	str	r6, [r4, #0]
 8004f2a:	4030      	ands	r0, r6
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	4301      	orrs	r1, r0
 8004f30:	6021      	str	r1, [r4, #0]
 8004f32:	8920      	ldrh	r0, [r4, #8]
 8004f34:	b289      	uxth	r1, r1
 8004f36:	0400      	lsls	r0, r0, #16
 8004f38:	4308      	orrs	r0, r1
 8004f3a:	6020      	str	r0, [r4, #0]
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	0209      	lsls	r1, r1, #8
 8004f40:	4301      	orrs	r1, r0
 8004f42:	6021      	str	r1, [r4, #0]
 8004f44:	2001      	movs	r0, #1
 8004f46:	686a      	ldr	r2, [r5, #4]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	0952      	lsrs	r2, r2, #5
 8004f4c:	4002      	ands	r2, r0
 8004f4e:	4b60      	ldr	r3, [pc, #384]	; (80050d0 <__iar_annotation$$branch+0x9e2>)
 8004f50:	400b      	ands	r3, r1
 8004f52:	0351      	lsls	r1, r2, #13
 8004f54:	4319      	orrs	r1, r3
 8004f56:	6021      	str	r1, [r4, #0]
 8004f58:	696a      	ldr	r2, [r5, #20]
 8004f5a:	05d2      	lsls	r2, r2, #23
 8004f5c:	0f52      	lsrs	r2, r2, #29
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <__iar_annotation$$branch+0x88e>)
 8004f60:	400b      	ands	r3, r1
 8004f62:	0211      	lsls	r1, r2, #8
 8004f64:	4319      	orrs	r1, r3
 8004f66:	6021      	str	r1, [r4, #0]
 8004f68:	6869      	ldr	r1, [r5, #4]
 8004f6a:	6809      	ldr	r1, [r1, #0]
 8004f6c:	0889      	lsrs	r1, r1, #2
 8004f6e:	4008      	ands	r0, r1
 8004f70:	d006      	beq.n	8004f80 <__iar_annotation$$branch+0x892>
 8004f72:	6968      	ldr	r0, [r5, #20]
 8004f74:	0741      	lsls	r1, r0, #29
 8004f76:	0fc8      	lsrs	r0, r1, #31
 8004f78:	e003      	b.n	8004f82 <__iar_annotation$$branch+0x894>
 8004f7a:	bf00      	nop
 8004f7c:	fffff8ff 	.word	0xfffff8ff
 8004f80:	2002      	movs	r0, #2
 8004f82:	9002      	str	r0, [sp, #8]
 8004f84:	208c      	movs	r0, #140	; 0x8c
 8004f86:	9001      	str	r0, [sp, #4]
 8004f88:	2001      	movs	r0, #1
 8004f8a:	9000      	str	r0, [sp, #0]
 8004f8c:	0023      	movs	r3, r4
 8004f8e:	220f      	movs	r2, #15
 8004f90:	2031      	movs	r0, #49	; 0x31
 8004f92:	5c29      	ldrb	r1, [r5, r0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f7fc fb3a 	bl	800160e <PE_Send_DataMessage>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d000      	beq.n	8004fa0 <__iar_annotation$$branch+0x8b2>
 8004f9e:	e217      	b.n	80053d0 <__iar_annotation$$branch+0xce2>
 8004fa0:	2054      	movs	r0, #84	; 0x54
 8004fa2:	7728      	strb	r0, [r5, #28]
 8004fa4:	2134      	movs	r1, #52	; 0x34
 8004fa6:	e08c      	b.n	80050c2 <__iar_annotation$$branch+0x9d4>
 8004fa8:	2634      	movs	r6, #52	; 0x34
 8004faa:	2031      	movs	r0, #49	; 0x31
 8004fac:	5c28      	ldrb	r0, [r5, r0]
 8004fae:	f7fb fd5f 	bl	8000a70 <PE_Convert_SOPRxEvent>
 8004fb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004fb4:	7809      	ldrb	r1, [r1, #0]
 8004fb6:	4281      	cmp	r1, r0
 8004fb8:	d144      	bne.n	8005044 <__iar_annotation$$branch+0x956>
 8004fba:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004fbc:	0bc2      	lsrs	r2, r0, #15
 8004fbe:	d141      	bne.n	8005044 <__iar_annotation$$branch+0x956>
 8004fc0:	2707      	movs	r7, #7
 8004fc2:	0b02      	lsrs	r2, r0, #12
 8004fc4:	423a      	tst	r2, r7
 8004fc6:	d03d      	beq.n	8005044 <__iar_annotation$$branch+0x956>
 8004fc8:	06c0      	lsls	r0, r0, #27
 8004fca:	0ec0      	lsrs	r0, r0, #27
 8004fcc:	280f      	cmp	r0, #15
 8004fce:	d139      	bne.n	8005044 <__iar_annotation$$branch+0x956>
 8004fd0:	2914      	cmp	r1, #20
 8004fd2:	d005      	beq.n	8004fe0 <__iar_annotation$$branch+0x8f2>
 8004fd4:	2014      	movs	r0, #20
 8004fd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004fd8:	7008      	strb	r0, [r1, #0]
 8004fda:	0028      	movs	r0, r5
 8004fdc:	f7fb fd0f 	bl	80009fe <PE_Clear_RxEvent>
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	7728      	strb	r0, [r5, #28]
 8004fe4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004fe6:	7880      	ldrb	r0, [r0, #2]
 8004fe8:	06c1      	lsls	r1, r0, #27
 8004fea:	0ec9      	lsrs	r1, r1, #27
 8004fec:	2904      	cmp	r1, #4
 8004fee:	d129      	bne.n	8005044 <__iar_annotation$$branch+0x956>
 8004ff0:	0980      	lsrs	r0, r0, #6
 8004ff2:	d027      	beq.n	8005044 <__iar_annotation$$branch+0x956>
 8004ff4:	9001      	str	r0, [sp, #4]
 8004ff6:	488f      	ldr	r0, [pc, #572]	; (8005234 <__iar_annotation$$branch+0xb46>)
 8004ff8:	9901      	ldr	r1, [sp, #4]
 8004ffa:	2901      	cmp	r1, #1
 8004ffc:	d004      	beq.n	8005008 <__iar_annotation$$branch+0x91a>
 8004ffe:	d30e      	bcc.n	800501e <__iar_annotation$$branch+0x930>
 8005000:	2903      	cmp	r1, #3
 8005002:	d008      	beq.n	8005016 <__iar_annotation$$branch+0x928>
 8005004:	d302      	bcc.n	800500c <__iar_annotation$$branch+0x91e>
 8005006:	e00a      	b.n	800501e <__iar_annotation$$branch+0x930>
 8005008:	2635      	movs	r6, #53	; 0x35
 800500a:	e008      	b.n	800501e <__iar_annotation$$branch+0x930>
 800500c:	6969      	ldr	r1, [r5, #20]
 800500e:	4008      	ands	r0, r1
 8005010:	6168      	str	r0, [r5, #20]
 8005012:	2636      	movs	r6, #54	; 0x36
 8005014:	e003      	b.n	800501e <__iar_annotation$$branch+0x930>
 8005016:	6969      	ldr	r1, [r5, #20]
 8005018:	4008      	ands	r0, r1
 800501a:	6168      	str	r0, [r5, #20]
 800501c:	2637      	movs	r6, #55	; 0x37
 800501e:	0031      	movs	r1, r6
 8005020:	7c28      	ldrb	r0, [r5, #16]
 8005022:	f7fb fa81 	bl	8000528 <USBPD_PE_Notification>
 8005026:	68e8      	ldr	r0, [r5, #12]
 8005028:	6a06      	ldr	r6, [r0, #32]
 800502a:	2e00      	cmp	r6, #0
 800502c:	d009      	beq.n	8005042 <__iar_annotation$$branch+0x954>
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	0a01      	lsrs	r1, r0, #8
 8005032:	400f      	ands	r7, r1
 8005034:	9700      	str	r7, [sp, #0]
 8005036:	0c03      	lsrs	r3, r0, #16
 8005038:	9a01      	ldr	r2, [sp, #4]
 800503a:	2031      	movs	r0, #49	; 0x31
 800503c:	5c29      	ldrb	r1, [r5, r0]
 800503e:	7c28      	ldrb	r0, [r5, #16]
 8005040:	47b0      	blx	r6
 8005042:	e14d      	b.n	80052e0 <__iar_annotation$$branch+0xbf2>
 8005044:	5da8      	ldrb	r0, [r5, r6]
 8005046:	e08f      	b.n	8005168 <__iar_annotation$$branch+0xa7a>
 8005048:	6821      	ldr	r1, [r4, #0]
 800504a:	400e      	ands	r6, r1
 800504c:	6026      	str	r6, [r4, #0]
 800504e:	4030      	ands	r0, r6
 8005050:	2105      	movs	r1, #5
 8005052:	4301      	orrs	r1, r0
 8005054:	6021      	str	r1, [r4, #0]
 8005056:	8920      	ldrh	r0, [r4, #8]
 8005058:	b289      	uxth	r1, r1
 800505a:	0400      	lsls	r0, r0, #16
 800505c:	4308      	orrs	r0, r1
 800505e:	6020      	str	r0, [r4, #0]
 8005060:	2180      	movs	r1, #128	; 0x80
 8005062:	0209      	lsls	r1, r1, #8
 8005064:	4301      	orrs	r1, r0
 8005066:	6021      	str	r1, [r4, #0]
 8005068:	2001      	movs	r0, #1
 800506a:	686a      	ldr	r2, [r5, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	0952      	lsrs	r2, r2, #5
 8005070:	4002      	ands	r2, r0
 8005072:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <__iar_annotation$$branch+0x9e2>)
 8005074:	400b      	ands	r3, r1
 8005076:	0351      	lsls	r1, r2, #13
 8005078:	4319      	orrs	r1, r3
 800507a:	6021      	str	r1, [r4, #0]
 800507c:	696a      	ldr	r2, [r5, #20]
 800507e:	05d2      	lsls	r2, r2, #23
 8005080:	0f52      	lsrs	r2, r2, #29
 8005082:	4b6d      	ldr	r3, [pc, #436]	; (8005238 <__iar_annotation$$branch+0xb4a>)
 8005084:	400b      	ands	r3, r1
 8005086:	0211      	lsls	r1, r2, #8
 8005088:	4319      	orrs	r1, r3
 800508a:	6021      	str	r1, [r4, #0]
 800508c:	6869      	ldr	r1, [r5, #4]
 800508e:	6809      	ldr	r1, [r1, #0]
 8005090:	0889      	lsrs	r1, r1, #2
 8005092:	4008      	ands	r0, r1
 8005094:	d003      	beq.n	800509e <__iar_annotation$$branch+0x9b0>
 8005096:	6968      	ldr	r0, [r5, #20]
 8005098:	0741      	lsls	r1, r0, #29
 800509a:	0fc8      	lsrs	r0, r1, #31
 800509c:	e000      	b.n	80050a0 <__iar_annotation$$branch+0x9b2>
 800509e:	2002      	movs	r0, #2
 80050a0:	9002      	str	r0, [sp, #8]
 80050a2:	208d      	movs	r0, #141	; 0x8d
 80050a4:	9001      	str	r0, [sp, #4]
 80050a6:	2001      	movs	r0, #1
 80050a8:	9000      	str	r0, [sp, #0]
 80050aa:	0023      	movs	r3, r4
 80050ac:	220f      	movs	r2, #15
 80050ae:	2031      	movs	r0, #49	; 0x31
 80050b0:	5c29      	ldrb	r1, [r5, r0]
 80050b2:	0028      	movs	r0, r5
 80050b4:	f7fc faab 	bl	800160e <PE_Send_DataMessage>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d15e      	bne.n	800517a <__iar_annotation$$branch+0xa8c>
 80050bc:	2055      	movs	r0, #85	; 0x55
 80050be:	7728      	strb	r0, [r5, #28]
 80050c0:	2155      	movs	r1, #85	; 0x55
 80050c2:	7c28      	ldrb	r0, [r5, #16]
 80050c4:	f7fb fa30 	bl	8000528 <USBPD_PE_Notification>
 80050c8:	48c3      	ldr	r0, [pc, #780]	; (80053d8 <.text_19>)
 80050ca:	83e8      	strh	r0, [r5, #30]
 80050cc:	2032      	movs	r0, #50	; 0x32
 80050ce:	e12c      	b.n	800532a <__iar_annotation$$branch+0xc3c>
 80050d0:	ffff9fff 	.word	0xffff9fff
 80050d4:	0000801e 	.word	0x0000801e
 80050d8:	2031      	movs	r0, #49	; 0x31
 80050da:	5c28      	ldrb	r0, [r5, r0]
 80050dc:	f7fb fcc8 	bl	8000a70 <PE_Convert_SOPRxEvent>
 80050e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d13d      	bne.n	8005164 <__iar_annotation$$branch+0xa76>
 80050e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050ea:	0bc2      	lsrs	r2, r0, #15
 80050ec:	d13a      	bne.n	8005164 <__iar_annotation$$branch+0xa76>
 80050ee:	2607      	movs	r6, #7
 80050f0:	0b02      	lsrs	r2, r0, #12
 80050f2:	4232      	tst	r2, r6
 80050f4:	d036      	beq.n	8005164 <__iar_annotation$$branch+0xa76>
 80050f6:	06c0      	lsls	r0, r0, #27
 80050f8:	0ec0      	lsrs	r0, r0, #27
 80050fa:	280f      	cmp	r0, #15
 80050fc:	d132      	bne.n	8005164 <__iar_annotation$$branch+0xa76>
 80050fe:	2914      	cmp	r1, #20
 8005100:	d005      	beq.n	800510e <__iar_annotation$$branch+0xa20>
 8005102:	2014      	movs	r0, #20
 8005104:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005106:	7008      	strb	r0, [r1, #0]
 8005108:	0028      	movs	r0, r5
 800510a:	f7fb fc78 	bl	80009fe <PE_Clear_RxEvent>
 800510e:	2000      	movs	r0, #0
 8005110:	7728      	strb	r0, [r5, #28]
 8005112:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005114:	7880      	ldrb	r0, [r0, #2]
 8005116:	06c1      	lsls	r1, r0, #27
 8005118:	0ec9      	lsrs	r1, r1, #27
 800511a:	2905      	cmp	r1, #5
 800511c:	d122      	bne.n	8005164 <__iar_annotation$$branch+0xa76>
 800511e:	0980      	lsrs	r0, r0, #6
 8005120:	d020      	beq.n	8005164 <__iar_annotation$$branch+0xa76>
 8005122:	9001      	str	r0, [sp, #4]
 8005124:	2801      	cmp	r0, #1
 8005126:	d004      	beq.n	8005132 <__iar_annotation$$branch+0xa44>
 8005128:	d309      	bcc.n	800513e <__iar_annotation$$branch+0xa50>
 800512a:	2803      	cmp	r0, #3
 800512c:	d005      	beq.n	800513a <__iar_annotation$$branch+0xa4c>
 800512e:	d302      	bcc.n	8005136 <__iar_annotation$$branch+0xa48>
 8005130:	e005      	b.n	800513e <__iar_annotation$$branch+0xa50>
 8005132:	2156      	movs	r1, #86	; 0x56
 8005134:	e004      	b.n	8005140 <__iar_annotation$$branch+0xa52>
 8005136:	2157      	movs	r1, #87	; 0x57
 8005138:	e002      	b.n	8005140 <__iar_annotation$$branch+0xa52>
 800513a:	2158      	movs	r1, #88	; 0x58
 800513c:	e000      	b.n	8005140 <__iar_annotation$$branch+0xa52>
 800513e:	2155      	movs	r1, #85	; 0x55
 8005140:	7c28      	ldrb	r0, [r5, #16]
 8005142:	f7fb f9f1 	bl	8000528 <USBPD_PE_Notification>
 8005146:	68e8      	ldr	r0, [r5, #12]
 8005148:	6a47      	ldr	r7, [r0, #36]	; 0x24
 800514a:	2f00      	cmp	r7, #0
 800514c:	d009      	beq.n	8005162 <__iar_annotation$$branch+0xa74>
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	0a01      	lsrs	r1, r0, #8
 8005152:	400e      	ands	r6, r1
 8005154:	9600      	str	r6, [sp, #0]
 8005156:	0c03      	lsrs	r3, r0, #16
 8005158:	9a01      	ldr	r2, [sp, #4]
 800515a:	2031      	movs	r0, #49	; 0x31
 800515c:	5c29      	ldrb	r1, [r5, r0]
 800515e:	7c28      	ldrb	r0, [r5, #16]
 8005160:	47b8      	blx	r7
 8005162:	e0bd      	b.n	80052e0 <__iar_annotation$$branch+0xbf2>
 8005164:	2034      	movs	r0, #52	; 0x34
 8005166:	5c28      	ldrb	r0, [r5, r0]
 8005168:	06c0      	lsls	r0, r0, #27
 800516a:	0ec0      	lsrs	r0, r0, #27
 800516c:	2810      	cmp	r0, #16
 800516e:	d100      	bne.n	8005172 <__iar_annotation$$branch+0xa84>
 8005170:	e0bf      	b.n	80052f2 <__iar_annotation$$branch+0xc04>
 8005172:	8be8      	ldrh	r0, [r5, #30]
 8005174:	2180      	movs	r1, #128	; 0x80
 8005176:	0209      	lsls	r1, r1, #8
 8005178:	4288      	cmp	r0, r1
 800517a:	d000      	beq.n	800517e <__iar_annotation$$branch+0xa90>
 800517c:	e128      	b.n	80053d0 <__iar_annotation$$branch+0xce2>
 800517e:	e0d1      	b.n	8005324 <__iar_annotation$$branch+0xc36>
 8005180:	2100      	movs	r1, #0
 8005182:	466a      	mov	r2, sp
 8005184:	7311      	strb	r1, [r2, #12]
 8005186:	6821      	ldr	r1, [r4, #0]
 8005188:	400e      	ands	r6, r1
 800518a:	6026      	str	r6, [r4, #0]
 800518c:	6861      	ldr	r1, [r4, #4]
 800518e:	4030      	ands	r0, r6
 8005190:	06c9      	lsls	r1, r1, #27
 8005192:	0ec9      	lsrs	r1, r1, #27
 8005194:	4301      	orrs	r1, r0
 8005196:	6021      	str	r1, [r4, #0]
 8005198:	8920      	ldrh	r0, [r4, #8]
 800519a:	b28a      	uxth	r2, r1
 800519c:	0401      	lsls	r1, r0, #16
 800519e:	4311      	orrs	r1, r2
 80051a0:	6021      	str	r1, [r4, #0]
 80051a2:	2080      	movs	r0, #128	; 0x80
 80051a4:	0200      	lsls	r0, r0, #8
 80051a6:	4308      	orrs	r0, r1
 80051a8:	6020      	str	r0, [r4, #0]
 80051aa:	2601      	movs	r6, #1
 80051ac:	6869      	ldr	r1, [r5, #4]
 80051ae:	6809      	ldr	r1, [r1, #0]
 80051b0:	0949      	lsrs	r1, r1, #5
 80051b2:	4031      	ands	r1, r6
 80051b4:	4aaa      	ldr	r2, [pc, #680]	; (8005460 <.text_21>)
 80051b6:	4002      	ands	r2, r0
 80051b8:	0348      	lsls	r0, r1, #13
 80051ba:	4310      	orrs	r0, r2
 80051bc:	6020      	str	r0, [r4, #0]
 80051be:	491e      	ldr	r1, [pc, #120]	; (8005238 <__iar_annotation$$branch+0xb4a>)
 80051c0:	4001      	ands	r1, r0
 80051c2:	0230      	lsls	r0, r6, #8
 80051c4:	4308      	orrs	r0, r1
 80051c6:	6020      	str	r0, [r4, #0]
 80051c8:	9005      	str	r0, [sp, #20]
 80051ca:	68e8      	ldr	r0, [r5, #12]
 80051cc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80051ce:	9001      	str	r0, [sp, #4]
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d00b      	beq.n	80051ec <__iar_annotation$$branch+0xafe>
 80051d4:	a805      	add	r0, sp, #20
 80051d6:	1d00      	adds	r0, r0, #4
 80051d8:	9000      	str	r0, [sp, #0]
 80051da:	ab03      	add	r3, sp, #12
 80051dc:	7820      	ldrb	r0, [r4, #0]
 80051de:	06c2      	lsls	r2, r0, #27
 80051e0:	0ed2      	lsrs	r2, r2, #27
 80051e2:	2031      	movs	r0, #49	; 0x31
 80051e4:	5c29      	ldrb	r1, [r5, r0]
 80051e6:	7c28      	ldrb	r0, [r5, #16]
 80051e8:	9c01      	ldr	r4, [sp, #4]
 80051ea:	47a0      	blx	r4
 80051ec:	4668      	mov	r0, sp
 80051ee:	7b00      	ldrb	r0, [r0, #12]
 80051f0:	1c40      	adds	r0, r0, #1
 80051f2:	4669      	mov	r1, sp
 80051f4:	7308      	strb	r0, [r1, #12]
 80051f6:	6868      	ldr	r0, [r5, #4]
 80051f8:	6800      	ldr	r0, [r0, #0]
 80051fa:	0880      	lsrs	r0, r0, #2
 80051fc:	4006      	ands	r6, r0
 80051fe:	d003      	beq.n	8005208 <__iar_annotation$$branch+0xb1a>
 8005200:	6968      	ldr	r0, [r5, #20]
 8005202:	0741      	lsls	r1, r0, #29
 8005204:	0fc8      	lsrs	r0, r1, #31
 8005206:	e000      	b.n	800520a <__iar_annotation$$branch+0xb1c>
 8005208:	2002      	movs	r0, #2
 800520a:	9002      	str	r0, [sp, #8]
 800520c:	208f      	movs	r0, #143	; 0x8f
 800520e:	9001      	str	r0, [sp, #4]
 8005210:	4668      	mov	r0, sp
 8005212:	7b00      	ldrb	r0, [r0, #12]
 8005214:	9000      	str	r0, [sp, #0]
 8005216:	ab05      	add	r3, sp, #20
 8005218:	220f      	movs	r2, #15
 800521a:	2031      	movs	r0, #49	; 0x31
 800521c:	5c29      	ldrb	r1, [r5, r0]
 800521e:	0028      	movs	r0, r5
 8005220:	f7fc f9f5 	bl	800160e <PE_Send_DataMessage>
 8005224:	2800      	cmp	r0, #0
 8005226:	d104      	bne.n	8005232 <__iar_annotation$$branch+0xb44>
 8005228:	205a      	movs	r0, #90	; 0x5a
 800522a:	7728      	strb	r0, [r5, #28]
 800522c:	48bf      	ldr	r0, [pc, #764]	; (800552c <.text_23>)
 800522e:	83e8      	strh	r0, [r5, #30]
 8005230:	9704      	str	r7, [sp, #16]
 8005232:	e0ca      	b.n	80053ca <__iar_annotation$$branch+0xcdc>
 8005234:	fffffe3f 	.word	0xfffffe3f
 8005238:	fffff8ff 	.word	0xfffff8ff
 800523c:	2607      	movs	r6, #7
 800523e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8005240:	0b00      	lsrs	r0, r0, #12
 8005242:	2107      	movs	r1, #7
 8005244:	4001      	ands	r1, r0
 8005246:	1e48      	subs	r0, r1, #1
 8005248:	4669      	mov	r1, sp
 800524a:	7108      	strb	r0, [r1, #4]
 800524c:	2031      	movs	r0, #49	; 0x31
 800524e:	5c28      	ldrb	r0, [r5, r0]
 8005250:	f7fb fc0e 	bl	8000a70 <PE_Convert_SOPRxEvent>
 8005254:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005256:	7809      	ldrb	r1, [r1, #0]
 8005258:	4281      	cmp	r1, r0
 800525a:	d144      	bne.n	80052e6 <__iar_annotation$$branch+0xbf8>
 800525c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800525e:	0bc2      	lsrs	r2, r0, #15
 8005260:	d141      	bne.n	80052e6 <__iar_annotation$$branch+0xbf8>
 8005262:	0b02      	lsrs	r2, r0, #12
 8005264:	4232      	tst	r2, r6
 8005266:	d03e      	beq.n	80052e6 <__iar_annotation$$branch+0xbf8>
 8005268:	06c0      	lsls	r0, r0, #27
 800526a:	0ec0      	lsrs	r0, r0, #27
 800526c:	280f      	cmp	r0, #15
 800526e:	d13a      	bne.n	80052e6 <__iar_annotation$$branch+0xbf8>
 8005270:	2914      	cmp	r1, #20
 8005272:	d005      	beq.n	8005280 <__iar_annotation$$branch+0xb92>
 8005274:	2014      	movs	r0, #20
 8005276:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005278:	7008      	strb	r0, [r1, #0]
 800527a:	0028      	movs	r0, r5
 800527c:	f7fb fbbf 	bl	80009fe <PE_Clear_RxEvent>
 8005280:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005282:	7880      	ldrb	r0, [r0, #2]
 8005284:	06c1      	lsls	r1, r0, #27
 8005286:	0ec9      	lsrs	r1, r1, #27
 8005288:	6862      	ldr	r2, [r4, #4]
 800528a:	4291      	cmp	r1, r2
 800528c:	d12b      	bne.n	80052e6 <__iar_annotation$$branch+0xbf8>
 800528e:	0981      	lsrs	r1, r0, #6
 8005290:	d029      	beq.n	80052e6 <__iar_annotation$$branch+0xbf8>
 8005292:	68e9      	ldr	r1, [r5, #12]
 8005294:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005296:	2900      	cmp	r1, #0
 8005298:	d022      	beq.n	80052e0 <__iar_annotation$$branch+0xbf2>
 800529a:	2600      	movs	r6, #0
 800529c:	e011      	b.n	80052c2 <__iar_annotation$$branch+0xbd4>
 800529e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80052a0:	00b2      	lsls	r2, r6, #2
 80052a2:	188b      	adds	r3, r1, r2
 80052a4:	799c      	ldrb	r4, [r3, #6]
 80052a6:	79df      	ldrb	r7, [r3, #7]
 80052a8:	023f      	lsls	r7, r7, #8
 80052aa:	19e4      	adds	r4, r4, r7
 80052ac:	3108      	adds	r1, #8
 80052ae:	5c89      	ldrb	r1, [r1, r2]
 80052b0:	0409      	lsls	r1, r1, #16
 80052b2:	1861      	adds	r1, r4, r1
 80052b4:	7a5a      	ldrb	r2, [r3, #9]
 80052b6:	0612      	lsls	r2, r2, #24
 80052b8:	1889      	adds	r1, r1, r2
 80052ba:	aa05      	add	r2, sp, #20
 80052bc:	00b3      	lsls	r3, r6, #2
 80052be:	50d1      	str	r1, [r2, r3]
 80052c0:	1c76      	adds	r6, r6, #1
 80052c2:	4669      	mov	r1, sp
 80052c4:	7909      	ldrb	r1, [r1, #4]
 80052c6:	428e      	cmp	r6, r1
 80052c8:	d3e9      	bcc.n	800529e <__iar_annotation$$branch+0xbb0>
 80052ca:	a905      	add	r1, sp, #20
 80052cc:	9100      	str	r1, [sp, #0]
 80052ce:	ab01      	add	r3, sp, #4
 80052d0:	06c2      	lsls	r2, r0, #27
 80052d2:	0ed2      	lsrs	r2, r2, #27
 80052d4:	2031      	movs	r0, #49	; 0x31
 80052d6:	5c29      	ldrb	r1, [r5, r0]
 80052d8:	7c28      	ldrb	r0, [r5, #16]
 80052da:	68ec      	ldr	r4, [r5, #12]
 80052dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80052de:	47a0      	blx	r4
 80052e0:	2000      	movs	r0, #0
 80052e2:	83e8      	strh	r0, [r5, #30]
 80052e4:	e01e      	b.n	8005324 <__iar_annotation$$branch+0xc36>
 80052e6:	2034      	movs	r0, #52	; 0x34
 80052e8:	5c28      	ldrb	r0, [r5, r0]
 80052ea:	06c0      	lsls	r0, r0, #27
 80052ec:	0ec0      	lsrs	r0, r0, #27
 80052ee:	2810      	cmp	r0, #16
 80052f0:	d113      	bne.n	800531a <__iar_annotation$$branch+0xc2c>
 80052f2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80052f4:	7800      	ldrb	r0, [r0, #0]
 80052f6:	2814      	cmp	r0, #20
 80052f8:	d005      	beq.n	8005306 <__iar_annotation$$branch+0xc18>
 80052fa:	2014      	movs	r0, #20
 80052fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80052fe:	7008      	strb	r0, [r1, #0]
 8005300:	0028      	movs	r0, r5
 8005302:	f7fb fb7c 	bl	80009fe <PE_Clear_RxEvent>
 8005306:	2000      	movs	r0, #0
 8005308:	83e8      	strh	r0, [r5, #30]
 800530a:	2103      	movs	r1, #3
 800530c:	7469      	strb	r1, [r5, #17]
 800530e:	9004      	str	r0, [sp, #16]
 8005310:	2159      	movs	r1, #89	; 0x59
 8005312:	7c28      	ldrb	r0, [r5, #16]
 8005314:	f7fb f908 	bl	8000528 <USBPD_PE_Notification>
 8005318:	e05a      	b.n	80053d0 <__iar_annotation$$branch+0xce2>
 800531a:	8be8      	ldrh	r0, [r5, #30]
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	0209      	lsls	r1, r1, #8
 8005320:	4288      	cmp	r0, r1
 8005322:	d155      	bne.n	80053d0 <__iar_annotation$$branch+0xce2>
 8005324:	2003      	movs	r0, #3
 8005326:	7468      	strb	r0, [r5, #17]
 8005328:	2000      	movs	r0, #0
 800532a:	9004      	str	r0, [sp, #16]
 800532c:	e050      	b.n	80053d0 <__iar_annotation$$branch+0xce2>
 800532e:	2100      	movs	r1, #0
 8005330:	466a      	mov	r2, sp
 8005332:	7311      	strb	r1, [r2, #12]
 8005334:	6821      	ldr	r1, [r4, #0]
 8005336:	400e      	ands	r6, r1
 8005338:	6026      	str	r6, [r4, #0]
 800533a:	6861      	ldr	r1, [r4, #4]
 800533c:	4030      	ands	r0, r6
 800533e:	06c9      	lsls	r1, r1, #27
 8005340:	0ec9      	lsrs	r1, r1, #27
 8005342:	4301      	orrs	r1, r0
 8005344:	6021      	str	r1, [r4, #0]
 8005346:	8920      	ldrh	r0, [r4, #8]
 8005348:	b28a      	uxth	r2, r1
 800534a:	0401      	lsls	r1, r0, #16
 800534c:	4311      	orrs	r1, r2
 800534e:	6021      	str	r1, [r4, #0]
 8005350:	2080      	movs	r0, #128	; 0x80
 8005352:	0200      	lsls	r0, r0, #8
 8005354:	4308      	orrs	r0, r1
 8005356:	6020      	str	r0, [r4, #0]
 8005358:	2601      	movs	r6, #1
 800535a:	6869      	ldr	r1, [r5, #4]
 800535c:	6809      	ldr	r1, [r1, #0]
 800535e:	0949      	lsrs	r1, r1, #5
 8005360:	4031      	ands	r1, r6
 8005362:	4a3f      	ldr	r2, [pc, #252]	; (8005460 <.text_21>)
 8005364:	4002      	ands	r2, r0
 8005366:	0348      	lsls	r0, r1, #13
 8005368:	4310      	orrs	r0, r2
 800536a:	6020      	str	r0, [r4, #0]
 800536c:	4970      	ldr	r1, [pc, #448]	; (8005530 <.text_24>)
 800536e:	4001      	ands	r1, r0
 8005370:	0230      	lsls	r0, r6, #8
 8005372:	4308      	orrs	r0, r1
 8005374:	6020      	str	r0, [r4, #0]
 8005376:	9005      	str	r0, [sp, #20]
 8005378:	68e8      	ldr	r0, [r5, #12]
 800537a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <__iar_annotation$$branch+0xc9c>
 8005380:	a805      	add	r0, sp, #20
 8005382:	1d02      	adds	r2, r0, #4
 8005384:	a903      	add	r1, sp, #12
 8005386:	7c28      	ldrb	r0, [r5, #16]
 8005388:	4798      	blx	r3
 800538a:	4668      	mov	r0, sp
 800538c:	7b00      	ldrb	r0, [r0, #12]
 800538e:	1c40      	adds	r0, r0, #1
 8005390:	4669      	mov	r1, sp
 8005392:	7308      	strb	r0, [r1, #12]
 8005394:	6868      	ldr	r0, [r5, #4]
 8005396:	6800      	ldr	r0, [r0, #0]
 8005398:	0880      	lsrs	r0, r0, #2
 800539a:	4006      	ands	r6, r0
 800539c:	d003      	beq.n	80053a6 <__iar_annotation$$branch+0xcb8>
 800539e:	6968      	ldr	r0, [r5, #20]
 80053a0:	0741      	lsls	r1, r0, #29
 80053a2:	0fc8      	lsrs	r0, r1, #31
 80053a4:	e000      	b.n	80053a8 <__iar_annotation$$branch+0xcba>
 80053a6:	2002      	movs	r0, #2
 80053a8:	9002      	str	r0, [sp, #8]
 80053aa:	2003      	movs	r0, #3
 80053ac:	9001      	str	r0, [sp, #4]
 80053ae:	4668      	mov	r0, sp
 80053b0:	7b00      	ldrb	r0, [r0, #12]
 80053b2:	9000      	str	r0, [sp, #0]
 80053b4:	ab05      	add	r3, sp, #20
 80053b6:	220f      	movs	r2, #15
 80053b8:	2031      	movs	r0, #49	; 0x31
 80053ba:	5c29      	ldrb	r1, [r5, r0]
 80053bc:	0028      	movs	r0, r5
 80053be:	f7fc f926 	bl	800160e <PE_Send_DataMessage>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d101      	bne.n	80053ca <__iar_annotation$$branch+0xcdc>
 80053c6:	205a      	movs	r0, #90	; 0x5a
 80053c8:	7728      	strb	r0, [r5, #28]
 80053ca:	2000      	movs	r0, #0
 80053cc:	2132      	movs	r1, #50	; 0x32
 80053ce:	5468      	strb	r0, [r5, r1]
 80053d0:	9804      	ldr	r0, [sp, #16]
 80053d2:	b01d      	add	sp, #116	; 0x74
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080053d8 <.text_19>:
 80053d8:	00008032 	.word	0x00008032

080053dc <PE_StateMachine_UVDM>:
 80053dc:	2914      	cmp	r1, #20
 80053de:	d000      	beq.n	80053e2 <PE_StateMachine_UVDM+0x6>
 80053e0:	4770      	bx	lr
 80053e2:	b570      	push	{r4, r5, r6, lr}
 80053e4:	b08c      	sub	sp, #48	; 0x30
 80053e6:	0004      	movs	r4, r0
 80053e8:	68e0      	ldr	r0, [r4, #12]
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d035      	beq.n	800545a <PE_StateMachine_UVDM+0x7e>
 80053ee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d032      	beq.n	800545a <PE_StateMachine_UVDM+0x7e>
 80053f4:	2500      	movs	r5, #0
 80053f6:	4669      	mov	r1, sp
 80053f8:	730d      	strb	r5, [r1, #12]
 80053fa:	a805      	add	r0, sp, #20
 80053fc:	1d03      	adds	r3, r0, #4
 80053fe:	aa03      	add	r2, sp, #12
 8005400:	a904      	add	r1, sp, #16
 8005402:	7c20      	ldrb	r0, [r4, #16]
 8005404:	68e6      	ldr	r6, [r4, #12]
 8005406:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8005408:	47b0      	blx	r6
 800540a:	9804      	ldr	r0, [sp, #16]
 800540c:	49cc      	ldr	r1, [pc, #816]	; (8005740 <.text_27>)
 800540e:	4001      	ands	r1, r0
 8005410:	9104      	str	r1, [sp, #16]
 8005412:	4668      	mov	r0, sp
 8005414:	7b00      	ldrb	r0, [r0, #12]
 8005416:	1c40      	adds	r0, r0, #1
 8005418:	4669      	mov	r1, sp
 800541a:	7308      	strb	r0, [r1, #12]
 800541c:	9804      	ldr	r0, [sp, #16]
 800541e:	9005      	str	r0, [sp, #20]
 8005420:	6860      	ldr	r0, [r4, #4]
 8005422:	6800      	ldr	r0, [r0, #0]
 8005424:	0741      	lsls	r1, r0, #29
 8005426:	0fc9      	lsrs	r1, r1, #31
 8005428:	d003      	beq.n	8005432 <PE_StateMachine_UVDM+0x56>
 800542a:	6960      	ldr	r0, [r4, #20]
 800542c:	0741      	lsls	r1, r0, #29
 800542e:	0fc8      	lsrs	r0, r1, #31
 8005430:	e000      	b.n	8005434 <PE_StateMachine_UVDM+0x58>
 8005432:	2002      	movs	r0, #2
 8005434:	9002      	str	r0, [sp, #8]
 8005436:	2003      	movs	r0, #3
 8005438:	9001      	str	r0, [sp, #4]
 800543a:	4668      	mov	r0, sp
 800543c:	7b00      	ldrb	r0, [r0, #12]
 800543e:	9000      	str	r0, [sp, #0]
 8005440:	ab05      	add	r3, sp, #20
 8005442:	220f      	movs	r2, #15
 8005444:	2031      	movs	r0, #49	; 0x31
 8005446:	5c21      	ldrb	r1, [r4, r0]
 8005448:	0020      	movs	r0, r4
 800544a:	f7fc f8e0 	bl	800160e <PE_Send_DataMessage>
 800544e:	2800      	cmp	r0, #0
 8005450:	d101      	bne.n	8005456 <PE_StateMachine_UVDM+0x7a>
 8005452:	2059      	movs	r0, #89	; 0x59
 8005454:	7720      	strb	r0, [r4, #28]
 8005456:	2032      	movs	r0, #50	; 0x32
 8005458:	5425      	strb	r5, [r4, r0]
 800545a:	b00c      	add	sp, #48	; 0x30
 800545c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005460 <.text_21>:
 8005460:	ffff9fff 	.word	0xffff9fff

08005464 <PE_Check_DataMessageVDM>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	2403      	movs	r4, #3
 8005468:	2501      	movs	r5, #1
 800546a:	6801      	ldr	r1, [r0, #0]
 800546c:	6849      	ldr	r1, [r1, #4]
 800546e:	0949      	lsrs	r1, r1, #5
 8005470:	4029      	ands	r1, r5
 8005472:	d102      	bne.n	800547a <PE_Check_DataMessageVDM+0x16>
 8005474:	68c1      	ldr	r1, [r0, #12]
 8005476:	2900      	cmp	r1, #0
 8005478:	d01c      	beq.n	80054b4 <PE_Check_DataMessageVDM+0x50>
 800547a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800547c:	788a      	ldrb	r2, [r1, #2]
 800547e:	78cb      	ldrb	r3, [r1, #3]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	18d2      	adds	r2, r2, r3
 8005484:	790b      	ldrb	r3, [r1, #4]
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	18d2      	adds	r2, r2, r3
 800548a:	7949      	ldrb	r1, [r1, #5]
 800548c:	0609      	lsls	r1, r1, #24
 800548e:	1851      	adds	r1, r2, r1
 8005490:	9100      	str	r1, [sp, #0]
 8005492:	0bca      	lsrs	r2, r1, #15
 8005494:	402a      	ands	r2, r5
 8005496:	d014      	beq.n	80054c2 <PE_Check_DataMessageVDM+0x5e>
 8005498:	2394      	movs	r3, #148	; 0x94
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	50c1      	str	r1, [r0, r3]
 800549e:	0989      	lsrs	r1, r1, #6
 80054a0:	4021      	ands	r1, r4
 80054a2:	d107      	bne.n	80054b4 <PE_Check_DataMessageVDM+0x50>
 80054a4:	6801      	ldr	r1, [r0, #0]
 80054a6:	6849      	ldr	r1, [r1, #4]
 80054a8:	0a09      	lsrs	r1, r1, #8
 80054aa:	4029      	ands	r1, r5
 80054ac:	d002      	beq.n	80054b4 <PE_Check_DataMessageVDM+0x50>
 80054ae:	f7ff f840 	bl	8004532 <PE_Receive_SVDM>
 80054b2:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80054b4:	6841      	ldr	r1, [r0, #4]
 80054b6:	6809      	ldr	r1, [r1, #0]
 80054b8:	400c      	ands	r4, r1
 80054ba:	2c02      	cmp	r4, #2
 80054bc:	d134      	bne.n	8005528 <PE_Check_DataMessageVDM+0xc4>
 80054be:	7445      	strb	r5, [r0, #17]
 80054c0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80054c2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80054c4:	0449      	lsls	r1, r1, #17
 80054c6:	0f49      	lsrs	r1, r1, #29
 80054c8:	1e49      	subs	r1, r1, #1
 80054ca:	4ab1      	ldr	r2, [pc, #708]	; (8005790 <.text_29>)
 80054cc:	5481      	strb	r1, [r0, r2]
 80054ce:	0006      	movs	r6, r0
 80054d0:	2000      	movs	r0, #0
 80054d2:	e00f      	b.n	80054f4 <PE_Check_DataMessageVDM+0x90>
 80054d4:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80054d6:	0082      	lsls	r2, r0, #2
 80054d8:	1889      	adds	r1, r1, r2
 80054da:	798a      	ldrb	r2, [r1, #6]
 80054dc:	79cf      	ldrb	r7, [r1, #7]
 80054de:	023f      	lsls	r7, r7, #8
 80054e0:	19d2      	adds	r2, r2, r7
 80054e2:	7a0f      	ldrb	r7, [r1, #8]
 80054e4:	043f      	lsls	r7, r7, #16
 80054e6:	19d2      	adds	r2, r2, r7
 80054e8:	7a49      	ldrb	r1, [r1, #9]
 80054ea:	0609      	lsls	r1, r1, #24
 80054ec:	1851      	adds	r1, r2, r1
 80054ee:	0082      	lsls	r2, r0, #2
 80054f0:	5099      	str	r1, [r3, r2]
 80054f2:	1c40      	adds	r0, r0, #1
 80054f4:	49a7      	ldr	r1, [pc, #668]	; (8005794 <.text_30>)
 80054f6:	1873      	adds	r3, r6, r1
 80054f8:	3118      	adds	r1, #24
 80054fa:	1872      	adds	r2, r6, r1
 80054fc:	7811      	ldrb	r1, [r2, #0]
 80054fe:	4288      	cmp	r0, r1
 8005500:	d3e8      	bcc.n	80054d4 <PE_Check_DataMessageVDM+0x70>
 8005502:	9900      	ldr	r1, [sp, #0]
 8005504:	68f0      	ldr	r0, [r6, #12]
 8005506:	2800      	cmp	r0, #0
 8005508:	d008      	beq.n	800551c <PE_Check_DataMessageVDM+0xb8>
 800550a:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800550c:	2f00      	cmp	r7, #0
 800550e:	d005      	beq.n	800551c <PE_Check_DataMessageVDM+0xb8>
 8005510:	7c30      	ldrb	r0, [r6, #16]
 8005512:	47b8      	blx	r7
 8005514:	2800      	cmp	r0, #0
 8005516:	d101      	bne.n	800551c <PE_Check_DataMessageVDM+0xb8>
 8005518:	7474      	strb	r4, [r6, #17]
 800551a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800551c:	6870      	ldr	r0, [r6, #4]
 800551e:	6800      	ldr	r0, [r0, #0]
 8005520:	4004      	ands	r4, r0
 8005522:	2c02      	cmp	r4, #2
 8005524:	d100      	bne.n	8005528 <PE_Check_DataMessageVDM+0xc4>
 8005526:	7475      	strb	r5, [r6, #17]
 8005528:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

0800552c <.text_23>:
 800552c:	0000801e 	.word	0x0000801e

08005530 <.text_24>:
 8005530:	fffff8ff 	.word	0xfffff8ff

08005534 <PE_SVDM_CheckIdentity>:
 8005534:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 8005536:	0003      	movs	r3, r0
 8005538:	2000      	movs	r0, #0
 800553a:	4c97      	ldr	r4, [pc, #604]	; (8005798 <.text_31>)
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	58e3      	ldr	r3, [r4, r3]
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005544:	045b      	lsls	r3, r3, #17
 8005546:	0f5b      	lsrs	r3, r3, #29
 8005548:	1e5c      	subs	r4, r3, #1
 800554a:	b2e3      	uxtb	r3, r4
 800554c:	2b03      	cmp	r3, #3
 800554e:	d200      	bcs.n	8005552 <PE_SVDM_CheckIdentity+0x1e>
 8005550:	e0b5      	b.n	80056be <PE_SVDM_CheckIdentity+0x18a>
 8005552:	000b      	movs	r3, r1
 8005554:	7819      	ldrb	r1, [r3, #0]
 8005556:	785d      	ldrb	r5, [r3, #1]
 8005558:	022d      	lsls	r5, r5, #8
 800555a:	1949      	adds	r1, r1, r5
 800555c:	789d      	ldrb	r5, [r3, #2]
 800555e:	042d      	lsls	r5, r5, #16
 8005560:	1949      	adds	r1, r1, r5
 8005562:	78dd      	ldrb	r5, [r3, #3]
 8005564:	062d      	lsls	r5, r5, #24
 8005566:	194d      	adds	r5, r1, r5
 8005568:	6015      	str	r5, [r2, #0]
 800556a:	7919      	ldrb	r1, [r3, #4]
 800556c:	795e      	ldrb	r6, [r3, #5]
 800556e:	0236      	lsls	r6, r6, #8
 8005570:	1989      	adds	r1, r1, r6
 8005572:	799e      	ldrb	r6, [r3, #6]
 8005574:	0436      	lsls	r6, r6, #16
 8005576:	1989      	adds	r1, r1, r6
 8005578:	79de      	ldrb	r6, [r3, #7]
 800557a:	0636      	lsls	r6, r6, #24
 800557c:	1989      	adds	r1, r1, r6
 800557e:	6051      	str	r1, [r2, #4]
 8005580:	2108      	movs	r1, #8
 8005582:	7a1e      	ldrb	r6, [r3, #8]
 8005584:	7a5f      	ldrb	r7, [r3, #9]
 8005586:	023f      	lsls	r7, r7, #8
 8005588:	19f6      	adds	r6, r6, r7
 800558a:	7a9f      	ldrb	r7, [r3, #10]
 800558c:	043f      	lsls	r7, r7, #16
 800558e:	19f6      	adds	r6, r6, r7
 8005590:	7adf      	ldrb	r7, [r3, #11]
 8005592:	063f      	lsls	r7, r7, #24
 8005594:	19f6      	adds	r6, r6, r7
 8005596:	6096      	str	r6, [r2, #8]
 8005598:	1ee4      	subs	r4, r4, #3
 800559a:	2620      	movs	r6, #32
 800559c:	5d97      	ldrb	r7, [r2, r6]
 800559e:	26e0      	movs	r6, #224	; 0xe0
 80055a0:	403e      	ands	r6, r7
 80055a2:	466f      	mov	r7, sp
 80055a4:	703e      	strb	r6, [r7, #0]
 80055a6:	466e      	mov	r6, sp
 80055a8:	7836      	ldrb	r6, [r6, #0]
 80055aa:	2720      	movs	r7, #32
 80055ac:	55d6      	strb	r6, [r2, r7]
 80055ae:	0626      	lsls	r6, r4, #24
 80055b0:	d022      	beq.n	80055f8 <PE_SVDM_CheckIdentity+0xc4>
 80055b2:	1e66      	subs	r6, r4, #1
 80055b4:	466f      	mov	r7, sp
 80055b6:	707e      	strb	r6, [r7, #1]
 80055b8:	00ae      	lsls	r6, r5, #2
 80055ba:	0f76      	lsrs	r6, r6, #29
 80055bc:	2e05      	cmp	r6, #5
 80055be:	d827      	bhi.n	8005610 <PE_SVDM_CheckIdentity+0xdc>
 80055c0:	a701      	add	r7, pc, #4	; (adr r7, 80055c8 <PE_SVDM_CheckIdentity+0x94>)
 80055c2:	5dbf      	ldrb	r7, [r7, r6]
 80055c4:	44bf      	add	pc, r7
 80055c6:	bf00      	nop
 80055c8:	5a060632 	.word	0x5a060632
 80055cc:	a680      	.short	0xa680
 80055ce:	210c      	movs	r1, #12
 80055d0:	466c      	mov	r4, sp
 80055d2:	7824      	ldrb	r4, [r4, #0]
 80055d4:	2608      	movs	r6, #8
 80055d6:	4326      	orrs	r6, r4
 80055d8:	2420      	movs	r4, #32
 80055da:	5516      	strb	r6, [r2, r4]
 80055dc:	7b1c      	ldrb	r4, [r3, #12]
 80055de:	7b5e      	ldrb	r6, [r3, #13]
 80055e0:	0236      	lsls	r6, r6, #8
 80055e2:	19a4      	adds	r4, r4, r6
 80055e4:	7b9e      	ldrb	r6, [r3, #14]
 80055e6:	0436      	lsls	r6, r6, #16
 80055e8:	19a4      	adds	r4, r4, r6
 80055ea:	7bde      	ldrb	r6, [r3, #15]
 80055ec:	0636      	lsls	r6, r6, #24
 80055ee:	19a4      	adds	r4, r4, r6
 80055f0:	6194      	str	r4, [r2, #24]
 80055f2:	466c      	mov	r4, sp
 80055f4:	7864      	ldrb	r4, [r4, #1]
 80055f6:	0026      	movs	r6, r4
 80055f8:	d062      	beq.n	80056c0 <PE_SVDM_CheckIdentity+0x18c>
 80055fa:	9e01      	ldr	r6, [sp, #4]
 80055fc:	8eb6      	ldrh	r6, [r6, #52]	; 0x34
 80055fe:	0636      	lsls	r6, r6, #24
 8005600:	0fb6      	lsrs	r6, r6, #30
 8005602:	2e02      	cmp	r6, #2
 8005604:	d35c      	bcc.n	80056c0 <PE_SVDM_CheckIdentity+0x18c>
 8005606:	01ad      	lsls	r5, r5, #6
 8005608:	0f6d      	lsrs	r5, r5, #29
 800560a:	d059      	beq.n	80056c0 <PE_SVDM_CheckIdentity+0x18c>
 800560c:	1e6d      	subs	r5, r5, #1
 800560e:	2d02      	cmp	r5, #2
 8005610:	d855      	bhi.n	80056be <PE_SVDM_CheckIdentity+0x18a>
 8005612:	2520      	movs	r5, #32
 8005614:	5d55      	ldrb	r5, [r2, r5]
 8005616:	08ef      	lsrs	r7, r5, #3
 8005618:	07ff      	lsls	r7, r7, #31
 800561a:	d53b      	bpl.n	8005694 <PE_SVDM_CheckIdentity+0x160>
 800561c:	3108      	adds	r1, #8
 800561e:	1e64      	subs	r4, r4, #1
 8005620:	e039      	b.n	8005696 <PE_SVDM_CheckIdentity+0x162>
 8005622:	210c      	movs	r1, #12
 8005624:	466c      	mov	r4, sp
 8005626:	7824      	ldrb	r4, [r4, #0]
 8005628:	2601      	movs	r6, #1
 800562a:	4326      	orrs	r6, r4
 800562c:	2420      	movs	r4, #32
 800562e:	5516      	strb	r6, [r2, r4]
 8005630:	7b1c      	ldrb	r4, [r3, #12]
 8005632:	7b5e      	ldrb	r6, [r3, #13]
 8005634:	0236      	lsls	r6, r6, #8
 8005636:	19a4      	adds	r4, r4, r6
 8005638:	7b9e      	ldrb	r6, [r3, #14]
 800563a:	0436      	lsls	r6, r6, #16
 800563c:	19a4      	adds	r4, r4, r6
 800563e:	7bde      	ldrb	r6, [r3, #15]
 8005640:	0636      	lsls	r6, r6, #24
 8005642:	19a4      	adds	r4, r4, r6
 8005644:	60d4      	str	r4, [r2, #12]
 8005646:	e7d4      	b.n	80055f2 <PE_SVDM_CheckIdentity+0xbe>
 8005648:	210c      	movs	r1, #12
 800564a:	466c      	mov	r4, sp
 800564c:	7824      	ldrb	r4, [r4, #0]
 800564e:	2604      	movs	r6, #4
 8005650:	4326      	orrs	r6, r4
 8005652:	2420      	movs	r4, #32
 8005654:	5516      	strb	r6, [r2, r4]
 8005656:	7b1c      	ldrb	r4, [r3, #12]
 8005658:	7b5e      	ldrb	r6, [r3, #13]
 800565a:	0236      	lsls	r6, r6, #8
 800565c:	19a4      	adds	r4, r4, r6
 800565e:	7b9e      	ldrb	r6, [r3, #14]
 8005660:	0436      	lsls	r6, r6, #16
 8005662:	19a4      	adds	r4, r4, r6
 8005664:	7bde      	ldrb	r6, [r3, #15]
 8005666:	0636      	lsls	r6, r6, #24
 8005668:	19a4      	adds	r4, r4, r6
 800566a:	6154      	str	r4, [r2, #20]
 800566c:	e7c1      	b.n	80055f2 <PE_SVDM_CheckIdentity+0xbe>
 800566e:	210c      	movs	r1, #12
 8005670:	466c      	mov	r4, sp
 8005672:	7824      	ldrb	r4, [r4, #0]
 8005674:	2602      	movs	r6, #2
 8005676:	4326      	orrs	r6, r4
 8005678:	2420      	movs	r4, #32
 800567a:	5516      	strb	r6, [r2, r4]
 800567c:	7b1c      	ldrb	r4, [r3, #12]
 800567e:	7b5e      	ldrb	r6, [r3, #13]
 8005680:	0236      	lsls	r6, r6, #8
 8005682:	19a4      	adds	r4, r4, r6
 8005684:	7b9e      	ldrb	r6, [r3, #14]
 8005686:	0436      	lsls	r6, r6, #16
 8005688:	19a4      	adds	r4, r4, r6
 800568a:	7bde      	ldrb	r6, [r3, #15]
 800568c:	0636      	lsls	r6, r6, #24
 800568e:	19a4      	adds	r4, r4, r6
 8005690:	6114      	str	r4, [r2, #16]
 8005692:	e7ae      	b.n	80055f2 <PE_SVDM_CheckIdentity+0xbe>
 8005694:	1d09      	adds	r1, r1, #4
 8005696:	b2e4      	uxtb	r4, r4
 8005698:	2c01      	cmp	r4, #1
 800569a:	d110      	bne.n	80056be <PE_SVDM_CheckIdentity+0x18a>
 800569c:	2410      	movs	r4, #16
 800569e:	432c      	orrs	r4, r5
 80056a0:	2520      	movs	r5, #32
 80056a2:	5554      	strb	r4, [r2, r5]
 80056a4:	1859      	adds	r1, r3, r1
 80056a6:	780b      	ldrb	r3, [r1, #0]
 80056a8:	784c      	ldrb	r4, [r1, #1]
 80056aa:	0224      	lsls	r4, r4, #8
 80056ac:	191b      	adds	r3, r3, r4
 80056ae:	788c      	ldrb	r4, [r1, #2]
 80056b0:	0424      	lsls	r4, r4, #16
 80056b2:	191b      	adds	r3, r3, r4
 80056b4:	78c9      	ldrb	r1, [r1, #3]
 80056b6:	0609      	lsls	r1, r1, #24
 80056b8:	1859      	adds	r1, r3, r1
 80056ba:	61d1      	str	r1, [r2, #28]
 80056bc:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 80056be:	2002      	movs	r0, #2
 80056c0:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

080056c2 <PE_SVDM_CheckSVIDs>:
 80056c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056c4:	4b34      	ldr	r3, [pc, #208]	; (8005798 <.text_31>)
 80056c6:	0080      	lsls	r0, r0, #2
 80056c8:	5818      	ldr	r0, [r3, r0]
 80056ca:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80056cc:	0440      	lsls	r0, r0, #17
 80056ce:	0f40      	lsrs	r0, r0, #29
 80056d0:	1e46      	subs	r6, r0, #1
 80056d2:	b2f6      	uxtb	r6, r6
 80056d4:	2000      	movs	r0, #0
 80056d6:	2500      	movs	r5, #0
 80056d8:	7610      	strb	r0, [r2, #24]
 80056da:	7650      	strb	r0, [r2, #25]
 80056dc:	000b      	movs	r3, r1
 80056de:	0014      	movs	r4, r2
 80056e0:	0031      	movs	r1, r6
 80056e2:	5c1a      	ldrb	r2, [r3, r0]
 80056e4:	1c5e      	adds	r6, r3, #1
 80056e6:	5c36      	ldrb	r6, [r6, r0]
 80056e8:	0236      	lsls	r6, r6, #8
 80056ea:	1992      	adds	r2, r2, r6
 80056ec:	7e26      	ldrb	r6, [r4, #24]
 80056ee:	0076      	lsls	r6, r6, #1
 80056f0:	53a2      	strh	r2, [r4, r6]
 80056f2:	7e26      	ldrb	r6, [r4, #24]
 80056f4:	2201      	movs	r2, #1
 80056f6:	0077      	lsls	r7, r6, #1
 80056f8:	5be7      	ldrh	r7, [r4, r7]
 80056fa:	2f00      	cmp	r7, #0
 80056fc:	d002      	beq.n	8005704 <PE_SVDM_CheckSVIDs+0x42>
 80056fe:	1c76      	adds	r6, r6, #1
 8005700:	7626      	strb	r6, [r4, #24]
 8005702:	e001      	b.n	8005708 <PE_SVDM_CheckSVIDs+0x46>
 8005704:	2501      	movs	r5, #1
 8005706:	7662      	strb	r2, [r4, #25]
 8005708:	1c80      	adds	r0, r0, #2
 800570a:	b2c0      	uxtb	r0, r0
 800570c:	5c1e      	ldrb	r6, [r3, r0]
 800570e:	1c5f      	adds	r7, r3, #1
 8005710:	5c3f      	ldrb	r7, [r7, r0]
 8005712:	023f      	lsls	r7, r7, #8
 8005714:	19f6      	adds	r6, r6, r7
 8005716:	7e27      	ldrb	r7, [r4, #24]
 8005718:	007f      	lsls	r7, r7, #1
 800571a:	53e6      	strh	r6, [r4, r7]
 800571c:	7e26      	ldrb	r6, [r4, #24]
 800571e:	0077      	lsls	r7, r6, #1
 8005720:	5be7      	ldrh	r7, [r4, r7]
 8005722:	2f00      	cmp	r7, #0
 8005724:	d002      	beq.n	800572c <PE_SVDM_CheckSVIDs+0x6a>
 8005726:	1c76      	adds	r6, r6, #1
 8005728:	7626      	strb	r6, [r4, #24]
 800572a:	e001      	b.n	8005730 <PE_SVDM_CheckSVIDs+0x6e>
 800572c:	2501      	movs	r5, #1
 800572e:	7662      	strb	r2, [r4, #25]
 8005730:	1c80      	adds	r0, r0, #2
 8005732:	b2c0      	uxtb	r0, r0
 8005734:	008a      	lsls	r2, r1, #2
 8005736:	4290      	cmp	r0, r2
 8005738:	d201      	bcs.n	800573e <PE_SVDM_CheckSVIDs+0x7c>
 800573a:	002a      	movs	r2, r5
 800573c:	d0d1      	beq.n	80056e2 <PE_SVDM_CheckSVIDs+0x20>
 800573e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005740 <.text_27>:
 8005740:	ffff7fff 	.word	0xffff7fff

08005744 <PE_SVDM_CheckModes>:
 8005744:	b530      	push	{r4, r5, lr}
 8005746:	4c14      	ldr	r4, [pc, #80]	; (8005798 <.text_31>)
 8005748:	0080      	lsls	r0, r0, #2
 800574a:	5820      	ldr	r0, [r4, r0]
 800574c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 800574e:	0440      	lsls	r0, r0, #17
 8005750:	0f40      	lsrs	r0, r0, #29
 8005752:	1e40      	subs	r0, r0, #1
 8005754:	b2c0      	uxtb	r0, r0
 8005756:	2400      	movs	r4, #0
 8005758:	8399      	strh	r1, [r3, #28]
 800575a:	601c      	str	r4, [r3, #0]
 800575c:	5d11      	ldrb	r1, [r2, r4]
 800575e:	1915      	adds	r5, r2, r4
 8005760:	786d      	ldrb	r5, [r5, #1]
 8005762:	022d      	lsls	r5, r5, #8
 8005764:	1949      	adds	r1, r1, r5
 8005766:	1915      	adds	r5, r2, r4
 8005768:	78ad      	ldrb	r5, [r5, #2]
 800576a:	042d      	lsls	r5, r5, #16
 800576c:	1949      	adds	r1, r1, r5
 800576e:	1915      	adds	r5, r2, r4
 8005770:	78ed      	ldrb	r5, [r5, #3]
 8005772:	062d      	lsls	r5, r5, #24
 8005774:	1949      	adds	r1, r1, r5
 8005776:	681d      	ldr	r5, [r3, #0]
 8005778:	00ad      	lsls	r5, r5, #2
 800577a:	195d      	adds	r5, r3, r5
 800577c:	6069      	str	r1, [r5, #4]
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	1c49      	adds	r1, r1, #1
 8005782:	6019      	str	r1, [r3, #0]
 8005784:	1d24      	adds	r4, r4, #4
 8005786:	b2e4      	uxtb	r4, r4
 8005788:	0081      	lsls	r1, r0, #2
 800578a:	428c      	cmp	r4, r1
 800578c:	d3e6      	bcc.n	800575c <PE_SVDM_CheckModes+0x18>
 800578e:	bd30      	pop	{r4, r5, pc}

08005790 <.text_29>:
 8005790:	000004ac 	.word	0x000004ac

08005794 <.text_30>:
 8005794:	00000494 	.word	0x00000494

08005798 <.text_31>:
 8005798:	20000228 	.word	0x20000228

0800579c <USBPD_PRL_TimerCounter>:
 800579c:	4954      	ldr	r1, [pc, #336]	; (80058f0 <.text_15>)
 800579e:	0080      	lsls	r0, r0, #2
 80057a0:	1808      	adds	r0, r1, r0
 80057a2:	6801      	ldr	r1, [r0, #0]
 80057a4:	790a      	ldrb	r2, [r1, #4]
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d002      	beq.n	80057b0 <USBPD_PRL_TimerCounter+0x14>
 80057aa:	790a      	ldrb	r2, [r1, #4]
 80057ac:	1e52      	subs	r2, r2, #1
 80057ae:	710a      	strb	r2, [r1, #4]
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	7841      	ldrb	r1, [r0, #1]
 80057b4:	2900      	cmp	r1, #0
 80057b6:	d001      	beq.n	80057bc <USBPD_PRL_TimerCounter+0x20>
 80057b8:	1e49      	subs	r1, r1, #1
 80057ba:	7041      	strb	r1, [r0, #1]
 80057bc:	4770      	bx	lr
	...

080057c0 <USBPD_PRL_Init>:
 80057c0:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80057c2:	b081      	sub	sp, #4
 80057c4:	0014      	movs	r4, r2
 80057c6:	001d      	movs	r5, r3
 80057c8:	2616      	movs	r6, #22
 80057ca:	209c      	movs	r0, #156	; 0x9c
 80057cc:	0040      	lsls	r0, r0, #1
 80057ce:	f013 fcb1 	bl	8019134 <malloc>
 80057d2:	0007      	movs	r7, r0
 80057d4:	d01e      	beq.n	8005814 <USBPD_PRL_Init+0x54>
 80057d6:	9e02      	ldr	r6, [sp, #8]
 80057d8:	219c      	movs	r1, #156	; 0x9c
 80057da:	0049      	lsls	r1, r1, #1
 80057dc:	f013 fe0d 	bl	80193fa <__aeabi_memclr>
 80057e0:	220f      	movs	r2, #15
 80057e2:	2103      	movs	r1, #3
 80057e4:	1db8      	adds	r0, r7, #6
 80057e6:	f013 fe01 	bl	80193ec <__aeabi_memset>
 80057ea:	4841      	ldr	r0, [pc, #260]	; (80058f0 <.text_15>)
 80057ec:	4669      	mov	r1, sp
 80057ee:	7909      	ldrb	r1, [r1, #4]
 80057f0:	0089      	lsls	r1, r1, #2
 80057f2:	5047      	str	r7, [r0, r1]
 80057f4:	62bc      	str	r4, [r7, #40]	; 0x28
 80057f6:	62fd      	str	r5, [r7, #44]	; 0x2c
 80057f8:	2001      	movs	r0, #1
 80057fa:	9000      	str	r0, [sp, #0]
 80057fc:	6870      	ldr	r0, [r6, #4]
 80057fe:	0743      	lsls	r3, r0, #29
 8005800:	0fdb      	lsrs	r3, r3, #31
 8005802:	003a      	movs	r2, r7
 8005804:	3230      	adds	r2, #48	; 0x30
 8005806:	bf00      	nop
 8005808:	a103      	add	r1, pc, #12	; (adr r1, 8005818 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 800580a:	4668      	mov	r0, sp
 800580c:	7900      	ldrb	r0, [r0, #4]
 800580e:	f009 f861 	bl	800e8d4 <USBPD_PHY_Init>
 8005812:	0006      	movs	r6, r0
 8005814:	0030      	movs	r0, r6
 8005816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08005818 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005818:	5e51 0800 61a9 0800 6203 0800 621d 0800     Q^...a...b...b..
 8005828:	6225 0800 5911 0800                         %b...Y..

08005830 <USBPD_PRL_GetMemoryConsumption>:
 8005830:	20ea      	movs	r0, #234	; 0xea
 8005832:	0080      	lsls	r0, r0, #2
 8005834:	4770      	bx	lr

08005836 <USBPD_PRL_SetHeader>:
 8005836:	b530      	push	{r4, r5, lr}
 8005838:	4c2d      	ldr	r4, [pc, #180]	; (80058f0 <.text_15>)
 800583a:	0080      	lsls	r0, r0, #2
 800583c:	5820      	ldr	r0, [r4, r0]
 800583e:	8a44      	ldrh	r4, [r0, #18]
 8005840:	4d2c      	ldr	r5, [pc, #176]	; (80058f4 <.text_16>)
 8005842:	4025      	ands	r5, r4
 8005844:	0209      	lsls	r1, r1, #8
 8005846:	2480      	movs	r4, #128	; 0x80
 8005848:	0064      	lsls	r4, r4, #1
 800584a:	4021      	ands	r1, r4
 800584c:	4329      	orrs	r1, r5
 800584e:	8241      	strh	r1, [r0, #18]
 8005850:	4c29      	ldr	r4, [pc, #164]	; (80058f8 <.text_17>)
 8005852:	400c      	ands	r4, r1
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	2220      	movs	r2, #32
 8005858:	4011      	ands	r1, r2
 800585a:	4321      	orrs	r1, r4
 800585c:	8241      	strh	r1, [r0, #18]
 800585e:	4a27      	ldr	r2, [pc, #156]	; (80058fc <.text_18>)
 8005860:	400a      	ands	r2, r1
 8005862:	0199      	lsls	r1, r3, #6
 8005864:	23c0      	movs	r3, #192	; 0xc0
 8005866:	400b      	ands	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	8243      	strh	r3, [r0, #18]
 800586c:	bd30      	pop	{r4, r5, pc}

0800586e <USBPD_PRL_SetHeaderPowerRole>:
 800586e:	4a20      	ldr	r2, [pc, #128]	; (80058f0 <.text_15>)
 8005870:	0080      	lsls	r0, r0, #2
 8005872:	5810      	ldr	r0, [r2, r0]
 8005874:	8a42      	ldrh	r2, [r0, #18]
 8005876:	4b1f      	ldr	r3, [pc, #124]	; (80058f4 <.text_16>)
 8005878:	4013      	ands	r3, r2
 800587a:	0209      	lsls	r1, r1, #8
 800587c:	2280      	movs	r2, #128	; 0x80
 800587e:	0052      	lsls	r2, r2, #1
 8005880:	e007      	b.n	8005892 <.text_10>

08005882 <USBPD_PRL_SetHeaderDataRole>:
 8005882:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <.text_15>)
 8005884:	0080      	lsls	r0, r0, #2
 8005886:	5810      	ldr	r0, [r2, r0]
 8005888:	8a42      	ldrh	r2, [r0, #18]
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <.text_17>)
 800588c:	4013      	ands	r3, r2
 800588e:	0149      	lsls	r1, r1, #5
 8005890:	2220      	movs	r2, #32

08005892 <.text_10>:
 8005892:	4011      	ands	r1, r2
 8005894:	4319      	orrs	r1, r3
 8005896:	8241      	strh	r1, [r0, #18]
 8005898:	4770      	bx	lr

0800589a <USBPD_PRL_SetHeaderSpecification>:
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <.text_15>)
 800589c:	0080      	lsls	r0, r0, #2
 800589e:	5810      	ldr	r0, [r2, r0]
 80058a0:	8a42      	ldrh	r2, [r0, #18]
 80058a2:	4b16      	ldr	r3, [pc, #88]	; (80058fc <.text_18>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	0189      	lsls	r1, r1, #6
 80058a8:	22c0      	movs	r2, #192	; 0xc0
 80058aa:	400a      	ands	r2, r1
 80058ac:	431a      	orrs	r2, r3
 80058ae:	8242      	strh	r2, [r0, #18]
 80058b0:	4770      	bx	lr

080058b2 <USBPD_PRL_CBL_SetHeaderSpecification>:
 80058b2:	4a0f      	ldr	r2, [pc, #60]	; (80058f0 <.text_15>)
 80058b4:	0080      	lsls	r0, r0, #2
 80058b6:	5810      	ldr	r0, [r2, r0]
 80058b8:	018a      	lsls	r2, r1, #6
 80058ba:	21c0      	movs	r1, #192	; 0xc0
 80058bc:	4011      	ands	r1, r2
 80058be:	4a0f      	ldr	r2, [pc, #60]	; (80058fc <.text_18>)
 80058c0:	8a83      	ldrh	r3, [r0, #20]
 80058c2:	4013      	ands	r3, r2
 80058c4:	430b      	orrs	r3, r1
 80058c6:	8283      	strh	r3, [r0, #20]
 80058c8:	8ac3      	ldrh	r3, [r0, #22]
 80058ca:	401a      	ands	r2, r3
 80058cc:	4311      	orrs	r1, r2
 80058ce:	82c1      	strh	r1, [r0, #22]
 80058d0:	4770      	bx	lr

080058d2 <USBPD_PRL_SRCSetSinkNG>:
 80058d2:	b580      	push	{r7, lr}
 80058d4:	f009 f8f3 	bl	800eabe <USBPD_PHY_SetResistor_SinkTxNG>
 80058d8:	bd01      	pop	{r0, pc}

080058da <USBPD_PRL_SRCReleaseSinkNG>:
 80058da:	b510      	push	{r4, lr}
 80058dc:	0004      	movs	r4, r0
 80058de:	f009 f8fd 	bl	800eadc <USBPD_PHY_SetResistor_SinkTxOK>
 80058e2:	2000      	movs	r0, #0
 80058e4:	4902      	ldr	r1, [pc, #8]	; (80058f0 <.text_15>)
 80058e6:	00a2      	lsls	r2, r4, #2
 80058e8:	5889      	ldr	r1, [r1, r2]
 80058ea:	7148      	strb	r0, [r1, #5]
 80058ec:	bd10      	pop	{r4, pc}
	...

080058f0 <.text_15>:
 80058f0:	20000234 	.word	0x20000234

080058f4 <.text_16>:
 80058f4:	0000feff 	.word	0x0000feff

080058f8 <.text_17>:
 80058f8:	0000ffdf 	.word	0x0000ffdf

080058fc <.text_18>:
 80058fc:	0000ff3f 	.word	0x0000ff3f

08005900 <USBPD_PRL_IsResistor_SinkTxOK>:
 8005900:	b580      	push	{r7, lr}
 8005902:	f009 f911 	bl	800eb28 <USBPD_PHY_IsResistor_SinkTxOk>
 8005906:	bd02      	pop	{r1, pc}

08005908 <USBPD_PRL_FastRoleSwapSignalling>:
 8005908:	b580      	push	{r7, lr}
 800590a:	f009 f91d 	bl	800eb48 <USBPD_PHY_FastRoleSwapSignalling>
 800590e:	bd01      	pop	{r0, pc}

08005910 <PRL_FastRoleSwapReception>:
 8005910:	b580      	push	{r7, lr}
 8005912:	f7fb f9e7 	bl	8000ce4 <PE_PRL_FastRoleSwapReception>
 8005916:	bd01      	pop	{r0, pc}

08005918 <USBPD_PRL_SOPCapability>:
 8005918:	b580      	push	{r7, lr}
 800591a:	f009 f8ef 	bl	800eafc <USBPD_PHY_SOPSupported>
 800591e:	bd01      	pop	{r0, pc}

08005920 <USBPD_PRL_SendMessage>:
 8005920:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8005922:	b087      	sub	sp, #28
 8005924:	2503      	movs	r5, #3
 8005926:	4668      	mov	r0, sp
 8005928:	7f00      	ldrb	r0, [r0, #28]
 800592a:	9005      	str	r0, [sp, #20]
 800592c:	48ca      	ldr	r0, [pc, #808]	; (8005c58 <USBPD_PRL_SendMessage+0x338>)
 800592e:	9a05      	ldr	r2, [sp, #20]
 8005930:	0092      	lsls	r2, r2, #2
 8005932:	1880      	adds	r0, r0, r2
 8005934:	9000      	str	r0, [sp, #0]
 8005936:	6800      	ldr	r0, [r0, #0]
 8005938:	0004      	movs	r4, r0
 800593a:	7962      	ldrb	r2, [r4, #5]
 800593c:	2a00      	cmp	r2, #0
 800593e:	d004      	beq.n	800594a <USBPD_PRL_SendMessage+0x2a>
 8005940:	7a62      	ldrb	r2, [r4, #9]
 8005942:	2a00      	cmp	r2, #0
 8005944:	d101      	bne.n	800594a <USBPD_PRL_SendMessage+0x2a>
 8005946:	220f      	movs	r2, #15
 8005948:	7142      	strb	r2, [r0, #5]
 800594a:	466a      	mov	r2, sp
 800594c:	7111      	strb	r1, [r2, #4]
 800594e:	4669      	mov	r1, sp
 8005950:	7909      	ldrb	r1, [r1, #4]
 8005952:	9104      	str	r1, [sp, #16]
 8005954:	1861      	adds	r1, r4, r1
 8005956:	9a05      	ldr	r2, [sp, #20]
 8005958:	0052      	lsls	r2, r2, #1
 800595a:	1c52      	adds	r2, r2, #1
 800595c:	466e      	mov	r6, sp
 800595e:	7172      	strb	r2, [r6, #5]
 8005960:	9a04      	ldr	r2, [sp, #16]
 8005962:	0052      	lsls	r2, r2, #1
 8005964:	9203      	str	r2, [sp, #12]
 8005966:	2600      	movs	r6, #0
 8005968:	9302      	str	r3, [sp, #8]
 800596a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800596c:	7963      	ldrb	r3, [r4, #5]
 800596e:	2b10      	cmp	r3, #16
 8005970:	d900      	bls.n	8005974 <USBPD_PRL_SendMessage+0x54>
 8005972:	e1f6      	b.n	8005d62 <USBPD_PRL_SendMessage+0x442>
 8005974:	a701      	add	r7, pc, #4	; (adr r7, 800597c <USBPD_PRL_SendMessage+0x5c>)
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	5aff      	ldrh	r7, [r7, r3]
 800597a:	44bf      	add	pc, r7
 800597c:	00480020 	.word	0x00480020
 8005980:	03e4005e 	.word	0x03e4005e
 8005984:	00a8006a 	.word	0x00a8006a
 8005988:	015a0086 	.word	0x015a0086
 800598c:	03e403e4 	.word	0x03e403e4
 8005990:	030802de 	.word	0x030802de
 8005994:	03560334 	.word	0x03560334
 8005998:	03de03e4 	.word	0x03de03e4
 800599c:	03a6      	.short	0x03a6
 800599e:	f3ef 8710 	mrs	r7, PRIMASK
 80059a2:	b672      	cpsid	i
 80059a4:	4668      	mov	r0, sp
 80059a6:	7f00      	ldrb	r0, [r0, #28]
 80059a8:	f7fb f84e 	bl	8000a48 <PE_PRL_Control_RxEvent>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d105      	bne.n	80059bc <USBPD_PRL_SendMessage+0x9c>
 80059b0:	7aa0      	ldrb	r0, [r4, #10]
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d102      	bne.n	80059bc <USBPD_PRL_SendMessage+0x9c>
 80059b6:	20ff      	movs	r0, #255	; 0xff
 80059b8:	7260      	strb	r0, [r4, #9]
 80059ba:	e000      	b.n	80059be <USBPD_PRL_SendMessage+0x9e>
 80059bc:	7266      	strb	r6, [r4, #9]
 80059be:	f387 8810 	msr	PRIMASK, r7
 80059c2:	2006      	movs	r0, #6
 80059c4:	e1a0      	b.n	8005d08 <USBPD_PRL_SendMessage+0x3e8>
 80059c6:	4668      	mov	r0, sp
 80059c8:	7f00      	ldrb	r0, [r0, #28]
 80059ca:	f009 f878 	bl	800eabe <USBPD_PHY_SetResistor_SinkTxNG>
 80059ce:	2002      	movs	r0, #2
 80059d0:	9900      	ldr	r1, [sp, #0]
 80059d2:	6809      	ldr	r1, [r1, #0]
 80059d4:	7148      	strb	r0, [r1, #5]
 80059d6:	2013      	movs	r0, #19
 80059d8:	7060      	strb	r0, [r4, #1]
 80059da:	e1c4      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 80059dc:	2a01      	cmp	r2, #1
 80059de:	d10f      	bne.n	8005a00 <USBPD_PRL_SendMessage+0xe0>
 80059e0:	7861      	ldrb	r1, [r4, #1]
 80059e2:	2900      	cmp	r1, #0
 80059e4:	d10a      	bne.n	80059fc <USBPD_PRL_SendMessage+0xdc>
 80059e6:	e01c      	b.n	8005a22 <USBPD_PRL_SendMessage+0x102>
 80059e8:	2a02      	cmp	r2, #2
 80059ea:	d109      	bne.n	8005a00 <USBPD_PRL_SendMessage+0xe0>
 80059ec:	4668      	mov	r0, sp
 80059ee:	7f00      	ldrb	r0, [r0, #28]
 80059f0:	f009 f89a 	bl	800eb28 <USBPD_PHY_IsResistor_SinkTxOk>
 80059f4:	2801      	cmp	r0, #1
 80059f6:	d101      	bne.n	80059fc <USBPD_PRL_SendMessage+0xdc>
 80059f8:	2005      	movs	r0, #5
 80059fa:	e185      	b.n	8005d08 <USBPD_PRL_SendMessage+0x3e8>
 80059fc:	2509      	movs	r5, #9
 80059fe:	e1b2      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005a00:	2106      	movs	r1, #6
 8005a02:	e154      	b.n	8005cae <USBPD_PRL_SendMessage+0x38e>
 8005a04:	9903      	ldr	r1, [sp, #12]
 8005a06:	1861      	adds	r1, r4, r1
 8005a08:	8a49      	ldrh	r1, [r1, #18]
 8005a0a:	0609      	lsls	r1, r1, #24
 8005a0c:	0f89      	lsrs	r1, r1, #30
 8005a0e:	2902      	cmp	r1, #2
 8005a10:	d107      	bne.n	8005a22 <USBPD_PRL_SendMessage+0x102>
 8005a12:	2a01      	cmp	r2, #1
 8005a14:	d101      	bne.n	8005a1a <USBPD_PRL_SendMessage+0xfa>
 8005a16:	7142      	strb	r2, [r0, #5]
 8005a18:	e1a5      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005a1a:	2a02      	cmp	r2, #2
 8005a1c:	d101      	bne.n	8005a22 <USBPD_PRL_SendMessage+0x102>
 8005a1e:	2104      	movs	r1, #4
 8005a20:	e145      	b.n	8005cae <USBPD_PRL_SendMessage+0x38e>
 8005a22:	2105      	movs	r1, #5
 8005a24:	e143      	b.n	8005cae <USBPD_PRL_SendMessage+0x38e>
 8005a26:	9803      	ldr	r0, [sp, #12]
 8005a28:	1820      	adds	r0, r4, r0
 8005a2a:	8a43      	ldrh	r3, [r0, #18]
 8005a2c:	4acf      	ldr	r2, [pc, #828]	; (8005d6c <.text_24>)
 8005a2e:	401a      	ands	r2, r3
 8005a30:	ab08      	add	r3, sp, #32
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	06db      	lsls	r3, r3, #27
 8005a36:	0edb      	lsrs	r3, r3, #27
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	8243      	strh	r3, [r0, #18]
 8005a3c:	045a      	lsls	r2, r3, #17
 8005a3e:	0c52      	lsrs	r2, r2, #17
 8005a40:	ab08      	add	r3, sp, #32
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	09db      	lsrs	r3, r3, #7
 8005a46:	03db      	lsls	r3, r3, #15
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	8243      	strh	r3, [r0, #18]
 8005a4c:	70a6      	strb	r6, [r4, #2]
 8005a4e:	8a43      	ldrh	r3, [r0, #18]
 8005a50:	0bda      	lsrs	r2, r3, #15
 8005a52:	d023      	beq.n	8005a9c <USBPD_PRL_SendMessage+0x17c>
 8005a54:	9a02      	ldr	r2, [sp, #8]
 8005a56:	7892      	ldrb	r2, [r2, #2]
 8005a58:	9b02      	ldr	r3, [sp, #8]
 8005a5a:	78db      	ldrb	r3, [r3, #3]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	18d2      	adds	r2, r2, r3
 8005a60:	83a2      	strh	r2, [r4, #28]
 8005a62:	8ba2      	ldrh	r2, [r4, #28]
 8005a64:	0a93      	lsrs	r3, r2, #10
 8005a66:	07db      	lsls	r3, r3, #31
 8005a68:	d40f      	bmi.n	8005a8a <USBPD_PRL_SendMessage+0x16a>
 8005a6a:	0ad2      	lsrs	r2, r2, #11
 8005a6c:	0712      	lsls	r2, r2, #28
 8005a6e:	d122      	bne.n	8005ab6 <USBPD_PRL_SendMessage+0x196>
 8005a70:	466a      	mov	r2, sp
 8005a72:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005a74:	1f12      	subs	r2, r2, #4
 8005a76:	8462      	strh	r2, [r4, #34]	; 0x22
 8005a78:	05d2      	lsls	r2, r2, #23
 8005a7a:	0dd2      	lsrs	r2, r2, #23
 8005a7c:	8ba3      	ldrh	r3, [r4, #28]
 8005a7e:	27fe      	movs	r7, #254	; 0xfe
 8005a80:	023f      	lsls	r7, r7, #8
 8005a82:	401f      	ands	r7, r3
 8005a84:	433a      	orrs	r2, r7
 8005a86:	83a2      	strh	r2, [r4, #28]
 8005a88:	e015      	b.n	8005ab6 <USBPD_PRL_SendMessage+0x196>
 8005a8a:	8466      	strh	r6, [r4, #34]	; 0x22
 8005a8c:	8a42      	ldrh	r2, [r0, #18]
 8005a8e:	4bb8      	ldr	r3, [pc, #736]	; (8005d70 <.text_25>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	0152      	lsls	r2, r2, #5
 8005a96:	431a      	orrs	r2, r3
 8005a98:	8242      	strh	r2, [r0, #18]
 8005a9a:	e00c      	b.n	8005ab6 <USBPD_PRL_SendMessage+0x196>
 8005a9c:	4ab4      	ldr	r2, [pc, #720]	; (8005d70 <.text_25>)
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	466b      	mov	r3, sp
 8005aa2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005aa4:	1e9b      	subs	r3, r3, #2
 8005aa6:	089b      	lsrs	r3, r3, #2
 8005aa8:	031b      	lsls	r3, r3, #12
 8005aaa:	27e0      	movs	r7, #224	; 0xe0
 8005aac:	01ff      	lsls	r7, r7, #7
 8005aae:	401f      	ands	r7, r3
 8005ab0:	4317      	orrs	r7, r2
 8005ab2:	8247      	strh	r7, [r0, #18]
 8005ab4:	8466      	strh	r6, [r4, #34]	; 0x22
 8005ab6:	aa08      	add	r2, sp, #32
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	2a0d      	cmp	r2, #13
 8005abc:	d10a      	bne.n	8005ad4 <USBPD_PRL_SendMessage+0x1b4>
 8005abe:	8a40      	ldrh	r0, [r0, #18]
 8005ac0:	22f0      	movs	r2, #240	; 0xf0
 8005ac2:	0212      	lsls	r2, r2, #8
 8005ac4:	4002      	ands	r2, r0
 8005ac6:	d105      	bne.n	8005ad4 <USBPD_PRL_SendMessage+0x1b4>
 8005ac8:	72ce      	strb	r6, [r1, #11]
 8005aca:	220f      	movs	r2, #15
 8005acc:	2103      	movs	r1, #3
 8005ace:	1da0      	adds	r0, r4, #6
 8005ad0:	f013 fc8c 	bl	80193ec <__aeabi_memset>
 8005ad4:	2007      	movs	r0, #7
 8005ad6:	e117      	b.n	8005d08 <USBPD_PRL_SendMessage+0x3e8>
 8005ad8:	4669      	mov	r1, sp
 8005ada:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 8005adc:	9903      	ldr	r1, [sp, #12]
 8005ade:	1841      	adds	r1, r0, r1
 8005ae0:	4a5d      	ldr	r2, [pc, #372]	; (8005c58 <USBPD_PRL_SendMessage+0x338>)
 8005ae2:	466b      	mov	r3, sp
 8005ae4:	7f1b      	ldrb	r3, [r3, #28]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	58d2      	ldr	r2, [r2, r3]
 8005aea:	466b      	mov	r3, sp
 8005aec:	791b      	ldrb	r3, [r3, #4]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	18d2      	adds	r2, r2, r3
 8005af2:	8a52      	ldrh	r2, [r2, #18]
 8005af4:	0bd3      	lsrs	r3, r2, #15
 8005af6:	d074      	beq.n	8005be2 <USBPD_PRL_SendMessage+0x2c2>
 8005af8:	8b83      	ldrh	r3, [r0, #28]
 8005afa:	0a9b      	lsrs	r3, r3, #10
 8005afc:	07db      	lsls	r3, r3, #31
 8005afe:	d465      	bmi.n	8005bcc <USBPD_PRL_SendMessage+0x2ac>
 8005b00:	4b55      	ldr	r3, [pc, #340]	; (8005c58 <USBPD_PRL_SendMessage+0x338>)
 8005b02:	466f      	mov	r7, sp
 8005b04:	7f3f      	ldrb	r7, [r7, #28]
 8005b06:	00bf      	lsls	r7, r7, #2
 8005b08:	59db      	ldr	r3, [r3, r7]
 8005b0a:	8b9b      	ldrh	r3, [r3, #28]
 8005b0c:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 8005b0e:	2f1b      	cmp	r7, #27
 8005b10:	d30a      	bcc.n	8005b28 <USBPD_PRL_SendMessage+0x208>
 8005b12:	0bdf      	lsrs	r7, r3, #15
 8005b14:	d008      	beq.n	8005b28 <USBPD_PRL_SendMessage+0x208>
 8005b16:	23e0      	movs	r3, #224	; 0xe0
 8005b18:	01db      	lsls	r3, r3, #7
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	824b      	strh	r3, [r1, #18]
 8005b1e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 8005b20:	391a      	subs	r1, #26
 8005b22:	8441      	strh	r1, [r0, #34]	; 0x22
 8005b24:	241e      	movs	r4, #30
 8005b26:	e051      	b.n	8005bcc <USBPD_PRL_SendMessage+0x2ac>
 8005b28:	0ada      	lsrs	r2, r3, #11
 8005b2a:	0712      	lsls	r2, r2, #28
 8005b2c:	d107      	bne.n	8005b3e <USBPD_PRL_SendMessage+0x21e>
 8005b2e:	22fe      	movs	r2, #254	; 0xfe
 8005b30:	0212      	lsls	r2, r2, #8
 8005b32:	401a      	ands	r2, r3
 8005b34:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005b36:	05db      	lsls	r3, r3, #23
 8005b38:	0ddb      	lsrs	r3, r3, #23
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	8383      	strh	r3, [r0, #28]
 8005b3e:	8a4b      	ldrh	r3, [r1, #18]
 8005b40:	4a8b      	ldr	r2, [pc, #556]	; (8005d70 <.text_25>)
 8005b42:	401a      	ands	r2, r3
 8005b44:	824a      	strh	r2, [r1, #18]
 8005b46:	8b83      	ldrh	r3, [r0, #28]
 8005b48:	0bdb      	lsrs	r3, r3, #15
 8005b4a:	d03c      	beq.n	8005bc6 <USBPD_PRL_SendMessage+0x2a6>
 8005b4c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005b4e:	1c9b      	adds	r3, r3, #2
 8005b50:	089b      	lsrs	r3, r3, #2
 8005b52:	031b      	lsls	r3, r3, #12
 8005b54:	24e0      	movs	r4, #224	; 0xe0
 8005b56:	01e4      	lsls	r4, r4, #7
 8005b58:	401c      	ands	r4, r3
 8005b5a:	4314      	orrs	r4, r2
 8005b5c:	824c      	strh	r4, [r1, #18]
 8005b5e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8005b60:	1c80      	adds	r0, r0, #2
 8005b62:	0781      	lsls	r1, r0, #30
 8005b64:	0f89      	lsrs	r1, r1, #30
 8005b66:	d025      	beq.n	8005bb4 <USBPD_PRL_SendMessage+0x294>
 8005b68:	2200      	movs	r2, #0
 8005b6a:	483b      	ldr	r0, [pc, #236]	; (8005c58 <USBPD_PRL_SendMessage+0x338>)
 8005b6c:	9b05      	ldr	r3, [sp, #20]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	18c0      	adds	r0, r0, r3
 8005b72:	9000      	str	r0, [sp, #0]
 8005b74:	9802      	ldr	r0, [sp, #8]
 8005b76:	9102      	str	r1, [sp, #8]
 8005b78:	e004      	b.n	8005b84 <USBPD_PRL_SendMessage+0x264>
 8005b7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005b7c:	1859      	adds	r1, r3, r1
 8005b7e:	1841      	adds	r1, r0, r1
 8005b80:	710e      	strb	r6, [r1, #4]
 8005b82:	1c52      	adds	r2, r2, #1
 8005b84:	9900      	ldr	r1, [sp, #0]
 8005b86:	680b      	ldr	r3, [r1, #0]
 8005b88:	b2d1      	uxtb	r1, r2
 8005b8a:	2404      	movs	r4, #4
 8005b8c:	9f02      	ldr	r7, [sp, #8]
 8005b8e:	1be4      	subs	r4, r4, r7
 8005b90:	42a1      	cmp	r1, r4
 8005b92:	d3f2      	bcc.n	8005b7a <USBPD_PRL_SendMessage+0x25a>
 8005b94:	9002      	str	r0, [sp, #8]
 8005b96:	0018      	movs	r0, r3
 8005b98:	3012      	adds	r0, #18
 8005b9a:	9903      	ldr	r1, [sp, #12]
 8005b9c:	1840      	adds	r0, r0, r1
 8005b9e:	8801      	ldrh	r1, [r0, #0]
 8005ba0:	4a73      	ldr	r2, [pc, #460]	; (8005d70 <.text_25>)
 8005ba2:	400a      	ands	r2, r1
 8005ba4:	0b09      	lsrs	r1, r1, #12
 8005ba6:	1c49      	adds	r1, r1, #1
 8005ba8:	0309      	lsls	r1, r1, #12
 8005baa:	23e0      	movs	r3, #224	; 0xe0
 8005bac:	01db      	lsls	r3, r3, #7
 8005bae:	400b      	ands	r3, r1
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	8003      	strh	r3, [r0, #0]
 8005bb4:	9800      	ldr	r0, [sp, #0]
 8005bb6:	6800      	ldr	r0, [r0, #0]
 8005bb8:	3012      	adds	r0, #18
 8005bba:	9903      	ldr	r1, [sp, #12]
 8005bbc:	5a40      	ldrh	r0, [r0, r1]
 8005bbe:	0440      	lsls	r0, r0, #17
 8005bc0:	0f40      	lsrs	r0, r0, #29
 8005bc2:	0084      	lsls	r4, r0, #2
 8005bc4:	1ca4      	adds	r4, r4, #2
 8005bc6:	9800      	ldr	r0, [sp, #0]
 8005bc8:	6800      	ldr	r0, [r0, #0]
 8005bca:	8446      	strh	r6, [r0, #34]	; 0x22
 8005bcc:	9800      	ldr	r0, [sp, #0]
 8005bce:	6800      	ldr	r0, [r0, #0]
 8005bd0:	8b80      	ldrh	r0, [r0, #28]
 8005bd2:	9902      	ldr	r1, [sp, #8]
 8005bd4:	7088      	strb	r0, [r1, #2]
 8005bd6:	9800      	ldr	r0, [sp, #0]
 8005bd8:	6800      	ldr	r0, [r0, #0]
 8005bda:	8b80      	ldrh	r0, [r0, #28]
 8005bdc:	0a00      	lsrs	r0, r0, #8
 8005bde:	9902      	ldr	r1, [sp, #8]
 8005be0:	70c8      	strb	r0, [r1, #3]
 8005be2:	9800      	ldr	r0, [sp, #0]
 8005be4:	6802      	ldr	r2, [r0, #0]
 8005be6:	0010      	movs	r0, r2
 8005be8:	3012      	adds	r0, #18
 8005bea:	9903      	ldr	r1, [sp, #12]
 8005bec:	1840      	adds	r0, r0, r1
 8005bee:	8803      	ldrh	r3, [r0, #0]
 8005bf0:	498c      	ldr	r1, [pc, #560]	; (8005e24 <.text_30>)
 8005bf2:	4019      	ands	r1, r3
 8005bf4:	320b      	adds	r2, #11
 8005bf6:	9b04      	ldr	r3, [sp, #16]
 8005bf8:	5cd2      	ldrb	r2, [r2, r3]
 8005bfa:	0253      	lsls	r3, r2, #9
 8005bfc:	22e0      	movs	r2, #224	; 0xe0
 8005bfe:	0112      	lsls	r2, r2, #4
 8005c00:	401a      	ands	r2, r3
 8005c02:	430a      	orrs	r2, r1
 8005c04:	8002      	strh	r2, [r0, #0]
 8005c06:	9802      	ldr	r0, [sp, #8]
 8005c08:	7002      	strb	r2, [r0, #0]
 8005c0a:	9800      	ldr	r0, [sp, #0]
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	3012      	adds	r0, #18
 8005c10:	9903      	ldr	r1, [sp, #12]
 8005c12:	5a40      	ldrh	r0, [r0, r1]
 8005c14:	0a00      	lsrs	r0, r0, #8
 8005c16:	9902      	ldr	r1, [sp, #8]
 8005c18:	7048      	strb	r0, [r1, #1]
 8005c1a:	9800      	ldr	r0, [sp, #0]
 8005c1c:	6800      	ldr	r0, [r0, #0]
 8005c1e:	81c4      	strh	r4, [r0, #14]
 8005c20:	210a      	movs	r1, #10
 8005c22:	7141      	strb	r1, [r0, #5]
 8005c24:	2102      	movs	r1, #2
 8005c26:	7401      	strb	r1, [r0, #16]
 8005c28:	b2a0      	uxth	r0, r4
 8005c2a:	9000      	str	r0, [sp, #0]
 8005c2c:	9b02      	ldr	r3, [sp, #8]
 8005c2e:	4668      	mov	r0, sp
 8005c30:	7902      	ldrb	r2, [r0, #4]
 8005c32:	7f01      	ldrb	r1, [r0, #28]
 8005c34:	2002      	movs	r0, #2
 8005c36:	4e7c      	ldr	r6, [pc, #496]	; (8005e28 <.text_31>)
 8005c38:	6836      	ldr	r6, [r6, #0]
 8005c3a:	47b0      	blx	r6
 8005c3c:	497b      	ldr	r1, [pc, #492]	; (8005e2c <.text_32>)
 8005c3e:	4668      	mov	r0, sp
 8005c40:	7940      	ldrb	r0, [r0, #5]
 8005c42:	f00a faeb 	bl	801021c <USBPD_TIM_Start>
 8005c46:	b2a3      	uxth	r3, r4
 8005c48:	9a02      	ldr	r2, [sp, #8]
 8005c4a:	4668      	mov	r0, sp
 8005c4c:	7901      	ldrb	r1, [r0, #4]
 8005c4e:	7f00      	ldrb	r0, [r0, #28]
 8005c50:	f008 feef 	bl	800ea32 <USBPD_PHY_SendMessage>
 8005c54:	e087      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005c56:	bf00      	nop
 8005c58:	20000234 	.word	0x20000234
 8005c5c:	f3ef 8410 	mrs	r4, PRIMASK
 8005c60:	b672      	cpsid	i
 8005c62:	9800      	ldr	r0, [sp, #0]
 8005c64:	6800      	ldr	r0, [r0, #0]
 8005c66:	7940      	ldrb	r0, [r0, #5]
 8005c68:	280a      	cmp	r0, #10
 8005c6a:	d109      	bne.n	8005c80 <USBPD_PRL_SendMessage+0x360>
 8005c6c:	4668      	mov	r0, sp
 8005c6e:	7940      	ldrb	r0, [r0, #5]
 8005c70:	f00a fb42 	bl	80102f8 <USBPD_TIM_IsExpired>
 8005c74:	2801      	cmp	r0, #1
 8005c76:	d103      	bne.n	8005c80 <USBPD_PRL_SendMessage+0x360>
 8005c78:	200d      	movs	r0, #13
 8005c7a:	9900      	ldr	r1, [sp, #0]
 8005c7c:	6809      	ldr	r1, [r1, #0]
 8005c7e:	7148      	strb	r0, [r1, #5]
 8005c80:	f384 8810 	msr	PRIMASK, r4
 8005c84:	e06f      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005c86:	7aca      	ldrb	r2, [r1, #11]
 8005c88:	8b67      	ldrh	r7, [r4, #26]
 8005c8a:	053f      	lsls	r7, r7, #20
 8005c8c:	0f7f      	lsrs	r7, r7, #29
 8005c8e:	42ba      	cmp	r2, r7
 8005c90:	d10c      	bne.n	8005cac <USBPD_PRL_SendMessage+0x38c>
 8005c92:	7ea3      	ldrb	r3, [r4, #26]
 8005c94:	06db      	lsls	r3, r3, #27
 8005c96:	0edb      	lsrs	r3, r3, #27
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d107      	bne.n	8005cac <USBPD_PRL_SendMessage+0x38c>
 8005c9c:	1c52      	adds	r2, r2, #1
 8005c9e:	0750      	lsls	r0, r2, #29
 8005ca0:	0f40      	lsrs	r0, r0, #29
 8005ca2:	72c8      	strb	r0, [r1, #11]
 8005ca4:	9800      	ldr	r0, [sp, #0]
 8005ca6:	6800      	ldr	r0, [r0, #0]
 8005ca8:	7146      	strb	r6, [r0, #5]
 8005caa:	e011      	b.n	8005cd0 <USBPD_PRL_SendMessage+0x3b0>
 8005cac:	210d      	movs	r1, #13
 8005cae:	7141      	strb	r1, [r0, #5]
 8005cb0:	e059      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005cb2:	7ac8      	ldrb	r0, [r1, #11]
 8005cb4:	1c40      	adds	r0, r0, #1
 8005cb6:	0740      	lsls	r0, r0, #29
 8005cb8:	0f40      	lsrs	r0, r0, #29
 8005cba:	72c8      	strb	r0, [r1, #11]
 8005cbc:	9800      	ldr	r0, [sp, #0]
 8005cbe:	6800      	ldr	r0, [r0, #0]
 8005cc0:	7146      	strb	r6, [r0, #5]
 8005cc2:	8ba1      	ldrh	r1, [r4, #28]
 8005cc4:	485a      	ldr	r0, [pc, #360]	; (8005e30 <.text_33>)
 8005cc6:	4008      	ands	r0, r1
 8005cc8:	83a0      	strh	r0, [r4, #28]
 8005cca:	495a      	ldr	r1, [pc, #360]	; (8005e34 <.text_34>)
 8005ccc:	4001      	ands	r1, r0
 8005cce:	83a1      	strh	r1, [r4, #28]
 8005cd0:	2505      	movs	r5, #5
 8005cd2:	e048      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005cd4:	78a0      	ldrb	r0, [r4, #2]
 8005cd6:	1c40      	adds	r0, r0, #1
 8005cd8:	70a0      	strb	r0, [r4, #2]
 8005cda:	9a03      	ldr	r2, [sp, #12]
 8005cdc:	18a2      	adds	r2, r4, r2
 8005cde:	8a52      	ldrh	r2, [r2, #18]
 8005ce0:	0613      	lsls	r3, r2, #24
 8005ce2:	0f9b      	lsrs	r3, r3, #30
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <USBPD_PRL_SendMessage+0x3cc>
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e000      	b.n	8005cee <USBPD_PRL_SendMessage+0x3ce>
 8005cec:	2302      	movs	r3, #2
 8005cee:	0bd2      	lsrs	r2, r2, #15
 8005cf0:	d006      	beq.n	8005d00 <USBPD_PRL_SendMessage+0x3e0>
 8005cf2:	8ba2      	ldrh	r2, [r4, #28]
 8005cf4:	0bd4      	lsrs	r4, r2, #15
 8005cf6:	d103      	bne.n	8005d00 <USBPD_PRL_SendMessage+0x3e0>
 8005cf8:	05d2      	lsls	r2, r2, #23
 8005cfa:	0dd2      	lsrs	r2, r2, #23
 8005cfc:	2a1b      	cmp	r2, #27
 8005cfe:	d207      	bcs.n	8005d10 <USBPD_PRL_SendMessage+0x3f0>
 8005d00:	b2c0      	uxtb	r0, r0
 8005d02:	4283      	cmp	r3, r0
 8005d04:	d304      	bcc.n	8005d10 <USBPD_PRL_SendMessage+0x3f0>
 8005d06:	2010      	movs	r0, #16
 8005d08:	9900      	ldr	r1, [sp, #0]
 8005d0a:	6809      	ldr	r1, [r1, #0]
 8005d0c:	7148      	strb	r0, [r1, #5]
 8005d0e:	e02a      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005d10:	9800      	ldr	r0, [sp, #0]
 8005d12:	6800      	ldr	r0, [r0, #0]
 8005d14:	7146      	strb	r6, [r0, #5]
 8005d16:	2507      	movs	r5, #7
 8005d18:	7ac8      	ldrb	r0, [r1, #11]
 8005d1a:	1c40      	adds	r0, r0, #1
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	4002      	ands	r2, r0
 8005d20:	72ca      	strb	r2, [r1, #11]
 8005d22:	e020      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005d24:	210a      	movs	r1, #10
 8005d26:	7141      	strb	r1, [r0, #5]
 8005d28:	2002      	movs	r0, #2
 8005d2a:	7420      	strb	r0, [r4, #16]
 8005d2c:	493f      	ldr	r1, [pc, #252]	; (8005e2c <.text_32>)
 8005d2e:	4668      	mov	r0, sp
 8005d30:	7940      	ldrb	r0, [r0, #5]
 8005d32:	f00a fa73 	bl	801021c <USBPD_TIM_Start>
 8005d36:	89e3      	ldrh	r3, [r4, #14]
 8005d38:	9a02      	ldr	r2, [sp, #8]
 8005d3a:	4668      	mov	r0, sp
 8005d3c:	7901      	ldrb	r1, [r0, #4]
 8005d3e:	7f00      	ldrb	r0, [r0, #28]
 8005d40:	f008 fe77 	bl	800ea32 <USBPD_PHY_SendMessage>
 8005d44:	4668      	mov	r0, sp
 8005d46:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8005d48:	9000      	str	r0, [sp, #0]
 8005d4a:	9b02      	ldr	r3, [sp, #8]
 8005d4c:	4668      	mov	r0, sp
 8005d4e:	7902      	ldrb	r2, [r0, #4]
 8005d50:	7f01      	ldrb	r1, [r0, #28]
 8005d52:	2002      	movs	r0, #2
 8005d54:	4c34      	ldr	r4, [pc, #208]	; (8005e28 <.text_31>)
 8005d56:	6824      	ldr	r4, [r4, #0]
 8005d58:	47a0      	blx	r4
 8005d5a:	e004      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005d5c:	7146      	strb	r6, [r0, #5]
 8005d5e:	2506      	movs	r5, #6
 8005d60:	e001      	b.n	8005d66 <USBPD_PRL_SendMessage+0x446>
 8005d62:	7146      	strb	r6, [r0, #5]
 8005d64:	2510      	movs	r5, #16
 8005d66:	0028      	movs	r0, r5
 8005d68:	b009      	add	sp, #36	; 0x24
 8005d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d6c <.text_24>:
 8005d6c:	0000ffe0 	.word	0x0000ffe0

08005d70 <.text_25>:
 8005d70:	00008fff 	.word	0x00008fff

08005d74 <USBPD_PRL_ResetRequestProcess>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	0005      	movs	r5, r0
 8005d78:	000e      	movs	r6, r1
 8005d7a:	482f      	ldr	r0, [pc, #188]	; (8005e38 <.text_35>)
 8005d7c:	00a9      	lsls	r1, r5, #2
 8005d7e:	1840      	adds	r0, r0, r1
 8005d80:	9000      	str	r0, [sp, #0]
 8005d82:	6804      	ldr	r4, [r0, #0]
 8005d84:	2700      	movs	r7, #0
 8005d86:	70e7      	strb	r7, [r4, #3]
 8005d88:	72e7      	strb	r7, [r4, #11]
 8005d8a:	7327      	strb	r7, [r4, #12]
 8005d8c:	7367      	strb	r7, [r4, #13]
 8005d8e:	220f      	movs	r2, #15
 8005d90:	2103      	movs	r1, #3
 8005d92:	1da0      	adds	r0, r4, #6
 8005d94:	f013 fb2a 	bl	80193ec <__aeabi_memset>
 8005d98:	9800      	ldr	r0, [sp, #0]
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	7147      	strb	r7, [r0, #5]
 8005d9e:	9700      	str	r7, [sp, #0]
 8005da0:	2300      	movs	r3, #0
 8005da2:	0032      	movs	r2, r6
 8005da4:	0029      	movs	r1, r5
 8005da6:	2002      	movs	r0, #2
 8005da8:	4f1f      	ldr	r7, [pc, #124]	; (8005e28 <.text_31>)
 8005daa:	683f      	ldr	r7, [r7, #0]
 8005dac:	47b8      	blx	r7
 8005dae:	0028      	movs	r0, r5
 8005db0:	f000 f849 	bl	8005e46 <PRL_DisableRX>
 8005db4:	0031      	movs	r1, r6
 8005db6:	0028      	movs	r0, r5
 8005db8:	f008 fe25 	bl	800ea06 <USBPD_PHY_ResetRequest>
 8005dbc:	2005      	movs	r0, #5
 8005dbe:	7120      	strb	r0, [r4, #4]
 8005dc0:	78e0      	ldrb	r0, [r4, #3]
 8005dc2:	2801      	cmp	r0, #1
 8005dc4:	d002      	beq.n	8005dcc <USBPD_PRL_ResetRequestProcess+0x58>
 8005dc6:	7920      	ldrb	r0, [r4, #4]
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d1f9      	bne.n	8005dc0 <USBPD_PRL_ResetRequestProcess+0x4c>
 8005dcc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005dce <USBDPD_PRL_BistCarrierEyeMode>:
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	2905      	cmp	r1, #5
 8005dd2:	d102      	bne.n	8005dda <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005dd4:	f008 fe4c 	bl	800ea70 <USBPD_PHY_Send_BIST_Pattern>
 8005dd8:	bd02      	pop	{r1, pc}
 8005dda:	2010      	movs	r0, #16
 8005ddc:	bd02      	pop	{r1, pc}

08005dde <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005dde:	b580      	push	{r7, lr}
 8005de0:	2905      	cmp	r1, #5
 8005de2:	d103      	bne.n	8005dec <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005de4:	2107      	movs	r1, #7
 8005de6:	f008 fe53 	bl	800ea90 <USBPD_PHY_ExitTransmit>
 8005dea:	bd02      	pop	{r1, pc}
 8005dec:	2010      	movs	r0, #16
 8005dee:	bd02      	pop	{r1, pc}

08005df0 <USBPD_PRL_Reset>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	0004      	movs	r4, r0
 8005df4:	4810      	ldr	r0, [pc, #64]	; (8005e38 <.text_35>)
 8005df6:	00a1      	lsls	r1, r4, #2
 8005df8:	5845      	ldr	r5, [r0, r1]
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	716e      	strb	r6, [r5, #5]
 8005dfe:	702e      	strb	r6, [r5, #0]
 8005e00:	712e      	strb	r6, [r5, #4]
 8005e02:	72ee      	strb	r6, [r5, #11]
 8005e04:	732e      	strb	r6, [r5, #12]
 8005e06:	736e      	strb	r6, [r5, #13]
 8005e08:	220f      	movs	r2, #15
 8005e0a:	2103      	movs	r1, #3
 8005e0c:	1da8      	adds	r0, r5, #6
 8005e0e:	f013 faed 	bl	80193ec <__aeabi_memset>
 8005e12:	2025      	movs	r0, #37	; 0x25
 8005e14:	542e      	strb	r6, [r5, r0]
 8005e16:	0020      	movs	r0, r4
 8005e18:	f008 fdeb 	bl	800e9f2 <USBPD_PHY_Reset>
 8005e1c:	0020      	movs	r0, r4
 8005e1e:	f008 fea2 	bl	800eb66 <USBPD_PHY_EnableRX>
 8005e22:	bd70      	pop	{r4, r5, r6, pc}

08005e24 <.text_30>:
 8005e24:	0000f1ff 	.word	0x0000f1ff

08005e28 <.text_31>:
 8005e28:	20000000 	.word	0x20000000

08005e2c <.text_32>:
 8005e2c:	00002710 	.word	0x00002710

08005e30 <.text_33>:
 8005e30:	000087ff 	.word	0x000087ff

08005e34 <.text_34>:
 8005e34:	0000fbff 	.word	0x0000fbff

08005e38 <.text_35>:
 8005e38:	20000234 	.word	0x20000234

08005e3c <USBPD_PRL_Stop>:
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	f008 fea1 	bl	800eb84 <USBPD_PHY_DisableRX>
 8005e42:	bd01      	pop	{r0, pc}

08005e44 <USBPD_PRL_DeInit>:
 8005e44:	4770      	bx	lr

08005e46 <PRL_DisableRX>:
 8005e46:	b580      	push	{r7, lr}
 8005e48:	f008 fe9c 	bl	800eb84 <USBPD_PHY_DisableRX>
 8005e4c:	bd01      	pop	{r0, pc}
	...

08005e50 <PRL_Received>:
 8005e50:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	a809      	add	r0, sp, #36	; 0x24
 8005e56:	7805      	ldrb	r5, [r0, #0]
 8005e58:	48d0      	ldr	r0, [pc, #832]	; (800619c <PRL_Received+0x34c>)
 8005e5a:	00a9      	lsls	r1, r5, #2
 8005e5c:	1846      	adds	r6, r0, r1
 8005e5e:	6834      	ldr	r4, [r6, #0]
 8005e60:	4628      	mov	r0, r5
 8005e62:	f008 fdbb 	bl	800e9dc <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005e66:	a909      	add	r1, sp, #36	; 0x24
 8005e68:	7809      	ldrb	r1, [r1, #0]
 8005e6a:	0049      	lsls	r1, r1, #1
 8005e6c:	466a      	mov	r2, sp
 8005e6e:	7011      	strb	r1, [r2, #0]
 8005e70:	0001      	movs	r1, r0
 8005e72:	4668      	mov	r0, sp
 8005e74:	7800      	ldrb	r0, [r0, #0]
 8005e76:	f00a f9d1 	bl	801021c <USBPD_TIM_Start>
 8005e7a:	2030      	movs	r0, #48	; 0x30
 8005e7c:	5c20      	ldrb	r0, [r4, r0]
 8005e7e:	2131      	movs	r1, #49	; 0x31
 8005e80:	5c61      	ldrb	r1, [r4, r1]
 8005e82:	0209      	lsls	r1, r1, #8
 8005e84:	1840      	adds	r0, r0, r1
 8005e86:	4669      	mov	r1, sp
 8005e88:	8088      	strh	r0, [r1, #4]
 8005e8a:	4668      	mov	r0, sp
 8005e8c:	8880      	ldrh	r0, [r0, #4]
 8005e8e:	0440      	lsls	r0, r0, #17
 8005e90:	0f40      	lsrs	r0, r0, #29
 8005e92:	0080      	lsls	r0, r0, #2
 8005e94:	9005      	str	r0, [sp, #20]
 8005e96:	1c80      	adds	r0, r0, #2
 8005e98:	9007      	str	r0, [sp, #28]
 8005e9a:	48c1      	ldr	r0, [pc, #772]	; (80061a0 <.text_40>)
 8005e9c:	8889      	ldrh	r1, [r1, #4]
 8005e9e:	4001      	ands	r1, r0
 8005ea0:	2901      	cmp	r1, #1
 8005ea2:	d116      	bne.n	8005ed2 <PRL_Received+0x82>
 8005ea4:	0068      	lsls	r0, r5, #1
 8005ea6:	1c40      	adds	r0, r0, #1
 8005ea8:	b2c0      	uxtb	r0, r0
 8005eaa:	f00a fa25 	bl	80102f8 <USBPD_TIM_IsExpired>
 8005eae:	2801      	cmp	r0, #1
 8005eb0:	d04c      	beq.n	8005f4c <PRL_Received+0xfc>
 8005eb2:	200b      	movs	r0, #11
 8005eb4:	6831      	ldr	r1, [r6, #0]
 8005eb6:	7148      	strb	r0, [r1, #5]
 8005eb8:	4668      	mov	r0, sp
 8005eba:	8880      	ldrh	r0, [r0, #4]
 8005ebc:	8360      	strh	r0, [r4, #26]
 8005ebe:	9807      	ldr	r0, [sp, #28]
 8005ec0:	9000      	str	r0, [sp, #0]
 8005ec2:	0023      	movs	r3, r4
 8005ec4:	3330      	adds	r3, #48	; 0x30
 8005ec6:	a80a      	add	r0, sp, #40	; 0x28
 8005ec8:	7802      	ldrb	r2, [r0, #0]
 8005eca:	a809      	add	r0, sp, #36	; 0x24
 8005ecc:	7801      	ldrb	r1, [r0, #0]
 8005ece:	2001      	movs	r0, #1
 8005ed0:	e15f      	b.n	8006192 <PRL_Received+0x342>
 8005ed2:	49b4      	ldr	r1, [pc, #720]	; (80061a4 <.text_41>)
 8005ed4:	880f      	ldrh	r7, [r1, #0]
 8005ed6:	2601      	movs	r6, #1
 8005ed8:	72a6      	strb	r6, [r4, #10]
 8005eda:	a90a      	add	r1, sp, #40	; 0x28
 8005edc:	7809      	ldrb	r1, [r1, #0]
 8005ede:	1861      	adds	r1, r4, r1
 8005ee0:	9104      	str	r1, [sp, #16]
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	4669      	mov	r1, sp
 8005ee6:	8889      	ldrh	r1, [r1, #4]
 8005ee8:	4008      	ands	r0, r1
 8005eea:	280d      	cmp	r0, #13
 8005eec:	d106      	bne.n	8005efc <PRL_Received+0xac>
 8005eee:	9904      	ldr	r1, [sp, #16]
 8005ef0:	72cd      	strb	r5, [r1, #11]
 8005ef2:	220f      	movs	r2, #15
 8005ef4:	2103      	movs	r1, #3
 8005ef6:	1da0      	adds	r0, r4, #6
 8005ef8:	f013 fa78 	bl	80193ec <__aeabi_memset>
 8005efc:	a80a      	add	r0, sp, #40	; 0x28
 8005efe:	7800      	ldrb	r0, [r0, #0]
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d10d      	bne.n	8005f20 <PRL_Received+0xd0>
 8005f04:	8a61      	ldrh	r1, [r4, #18]
 8005f06:	094a      	lsrs	r2, r1, #5
 8005f08:	2001      	movs	r0, #1
 8005f0a:	4010      	ands	r0, r2
 8005f0c:	0a0a      	lsrs	r2, r1, #8
 8005f0e:	2101      	movs	r1, #1
 8005f10:	4011      	ands	r1, r2
 8005f12:	4abf      	ldr	r2, [pc, #764]	; (8006210 <.text_44>)
 8005f14:	403a      	ands	r2, r7
 8005f16:	0143      	lsls	r3, r0, #5
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	0208      	lsls	r0, r1, #8
 8005f1c:	4318      	orrs	r0, r3
 8005f1e:	e001      	b.n	8005f24 <PRL_Received+0xd4>
 8005f20:	48bc      	ldr	r0, [pc, #752]	; (8006214 <.text_45>)
 8005f22:	4038      	ands	r0, r7
 8005f24:	49bc      	ldr	r1, [pc, #752]	; (8006218 <.text_46>)
 8005f26:	4001      	ands	r1, r0
 8005f28:	4668      	mov	r0, sp
 8005f2a:	8880      	ldrh	r0, [r0, #4]
 8005f2c:	22e0      	movs	r2, #224	; 0xe0
 8005f2e:	0112      	lsls	r2, r2, #4
 8005f30:	4002      	ands	r2, r0
 8005f32:	430a      	orrs	r2, r1
 8005f34:	2040      	movs	r0, #64	; 0x40
 8005f36:	4310      	orrs	r0, r2
 8005f38:	7620      	strb	r0, [r4, #24]
 8005f3a:	0a00      	lsrs	r0, r0, #8
 8005f3c:	7660      	strb	r0, [r4, #25]
 8005f3e:	a80a      	add	r0, sp, #40	; 0x28
 8005f40:	7801      	ldrb	r1, [r0, #0]
 8005f42:	a809      	add	r0, sp, #36	; 0x24
 8005f44:	7800      	ldrb	r0, [r0, #0]
 8005f46:	f7fa fee3 	bl	8000d10 <PE_PRL_PostReceiveEvent>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d100      	bne.n	8005f50 <PRL_Received+0x100>
 8005f4e:	e123      	b.n	8006198 <PRL_Received+0x348>
 8005f50:	7426      	strb	r6, [r4, #16]
 8005f52:	4668      	mov	r0, sp
 8005f54:	7800      	ldrb	r0, [r0, #0]
 8005f56:	f00a f9cf 	bl	80102f8 <USBPD_TIM_IsExpired>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d0f9      	beq.n	8005f52 <PRL_Received+0x102>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	0022      	movs	r2, r4
 8005f62:	3218      	adds	r2, #24
 8005f64:	a80a      	add	r0, sp, #40	; 0x28
 8005f66:	7801      	ldrb	r1, [r0, #0]
 8005f68:	a809      	add	r0, sp, #36	; 0x24
 8005f6a:	7800      	ldrb	r0, [r0, #0]
 8005f6c:	f008 fd61 	bl	800ea32 <USBPD_PHY_SendMessage>
 8005f70:	9006      	str	r0, [sp, #24]
 8005f72:	a80a      	add	r0, sp, #40	; 0x28
 8005f74:	7800      	ldrb	r0, [r0, #0]
 8005f76:	7260      	strb	r0, [r4, #9]
 8005f78:	0021      	movs	r1, r4
 8005f7a:	3130      	adds	r1, #48	; 0x30
 8005f7c:	a809      	add	r0, sp, #36	; 0x24
 8005f7e:	7800      	ldrb	r0, [r0, #0]
 8005f80:	f7fa fefa 	bl	8000d78 <PE_PRL_PostReceiveEventCopy>
 8005f84:	2033      	movs	r0, #51	; 0x33
 8005f86:	5c20      	ldrb	r0, [r4, r0]
 8005f88:	2132      	movs	r1, #50	; 0x32
 8005f8a:	5c61      	ldrb	r1, [r4, r1]
 8005f8c:	0203      	lsls	r3, r0, #8
 8005f8e:	18ca      	adds	r2, r1, r3
 8005f90:	466b      	mov	r3, sp
 8005f92:	80da      	strh	r2, [r3, #6]
 8005f94:	466a      	mov	r2, sp
 8005f96:	8892      	ldrh	r2, [r2, #4]
 8005f98:	0452      	lsls	r2, r2, #17
 8005f9a:	0f52      	lsrs	r2, r2, #29
 8005f9c:	81da      	strh	r2, [r3, #14]
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	88d2      	ldrh	r2, [r2, #6]
 8005fa2:	05d2      	lsls	r2, r2, #23
 8005fa4:	0dd2      	lsrs	r2, r2, #23
 8005fa6:	811a      	strh	r2, [r3, #8]
 8005fa8:	466a      	mov	r2, sp
 8005faa:	88d2      	ldrh	r2, [r2, #6]
 8005fac:	0bd2      	lsrs	r2, r2, #15
 8005fae:	819a      	strh	r2, [r3, #12]
 8005fb0:	466a      	mov	r2, sp
 8005fb2:	8892      	ldrh	r2, [r2, #4]
 8005fb4:	0bd2      	lsrs	r2, r2, #15
 8005fb6:	815a      	strh	r2, [r3, #10]
 8005fb8:	d007      	beq.n	8005fca <PRL_Received+0x17a>
 8005fba:	466a      	mov	r2, sp
 8005fbc:	8992      	ldrh	r2, [r2, #12]
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	d103      	bne.n	8005fca <PRL_Received+0x17a>
 8005fc2:	4668      	mov	r0, sp
 8005fc4:	8900      	ldrh	r0, [r0, #8]
 8005fc6:	1d00      	adds	r0, r0, #4
 8005fc8:	e01b      	b.n	8006002 <PRL_Received+0x1b2>
 8005fca:	7822      	ldrb	r2, [r4, #0]
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	d117      	bne.n	8006000 <PRL_Received+0x1b0>
 8005fd0:	466a      	mov	r2, sp
 8005fd2:	89d2      	ldrh	r2, [r2, #14]
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	d013      	beq.n	8006000 <PRL_Received+0x1b0>
 8005fd8:	466a      	mov	r2, sp
 8005fda:	8892      	ldrh	r2, [r2, #4]
 8005fdc:	06d2      	lsls	r2, r2, #27
 8005fde:	0ed2      	lsrs	r2, r2, #27
 8005fe0:	2a03      	cmp	r2, #3
 8005fe2:	d10d      	bne.n	8006000 <PRL_Received+0x1b0>
 8005fe4:	0200      	lsls	r0, r0, #8
 8005fe6:	1808      	adds	r0, r1, r0
 8005fe8:	2134      	movs	r1, #52	; 0x34
 8005fea:	5c61      	ldrb	r1, [r4, r1]
 8005fec:	0409      	lsls	r1, r1, #16
 8005fee:	1840      	adds	r0, r0, r1
 8005ff0:	2135      	movs	r1, #53	; 0x35
 8005ff2:	5c61      	ldrb	r1, [r4, r1]
 8005ff4:	0609      	lsls	r1, r1, #24
 8005ff6:	1840      	adds	r0, r0, r1
 8005ff8:	0f00      	lsrs	r0, r0, #28
 8005ffa:	2808      	cmp	r0, #8
 8005ffc:	d100      	bne.n	8006000 <PRL_Received+0x1b0>
 8005ffe:	7026      	strb	r6, [r4, #0]
 8006000:	9807      	ldr	r0, [sp, #28]
 8006002:	9000      	str	r0, [sp, #0]
 8006004:	0023      	movs	r3, r4
 8006006:	3330      	adds	r3, #48	; 0x30
 8006008:	a80a      	add	r0, sp, #40	; 0x28
 800600a:	7802      	ldrb	r2, [r0, #0]
 800600c:	a809      	add	r0, sp, #36	; 0x24
 800600e:	7801      	ldrb	r1, [r0, #0]
 8006010:	2001      	movs	r0, #1
 8006012:	4fc1      	ldr	r7, [pc, #772]	; (8006318 <.text_51>)
 8006014:	683f      	ldr	r7, [r7, #0]
 8006016:	47b8      	blx	r7
 8006018:	9806      	ldr	r0, [sp, #24]
 800601a:	2800      	cmp	r0, #0
 800601c:	d10b      	bne.n	8006036 <PRL_Received+0x1e6>
 800601e:	2002      	movs	r0, #2
 8006020:	9000      	str	r0, [sp, #0]
 8006022:	0023      	movs	r3, r4
 8006024:	3318      	adds	r3, #24
 8006026:	a80a      	add	r0, sp, #40	; 0x28
 8006028:	7802      	ldrb	r2, [r0, #0]
 800602a:	a809      	add	r0, sp, #36	; 0x24
 800602c:	7801      	ldrb	r1, [r0, #0]
 800602e:	2002      	movs	r0, #2
 8006030:	4fb9      	ldr	r7, [pc, #740]	; (8006318 <.text_51>)
 8006032:	683f      	ldr	r7, [r7, #0]
 8006034:	47b8      	blx	r7
 8006036:	4668      	mov	r0, sp
 8006038:	8880      	ldrh	r0, [r0, #4]
 800603a:	0a40      	lsrs	r0, r0, #9
 800603c:	2107      	movs	r1, #7
 800603e:	9a04      	ldr	r2, [sp, #16]
 8006040:	7992      	ldrb	r2, [r2, #6]
 8006042:	2307      	movs	r3, #7
 8006044:	4003      	ands	r3, r0
 8006046:	429a      	cmp	r2, r3
 8006048:	d103      	bne.n	8006052 <PRL_Received+0x202>
 800604a:	9a06      	ldr	r2, [sp, #24]
 800604c:	2a00      	cmp	r2, #0
 800604e:	d100      	bne.n	8006052 <PRL_Received+0x202>
 8006050:	e08f      	b.n	8006172 <PRL_Received+0x322>
 8006052:	4001      	ands	r1, r0
 8006054:	9804      	ldr	r0, [sp, #16]
 8006056:	7181      	strb	r1, [r0, #6]
 8006058:	4668      	mov	r0, sp
 800605a:	8880      	ldrh	r0, [r0, #4]
 800605c:	8420      	strh	r0, [r4, #32]
 800605e:	4668      	mov	r0, sp
 8006060:	8940      	ldrh	r0, [r0, #10]
 8006062:	2800      	cmp	r0, #0
 8006064:	d043      	beq.n	80060ee <PRL_Received+0x29e>
 8006066:	4668      	mov	r0, sp
 8006068:	8980      	ldrh	r0, [r0, #12]
 800606a:	2800      	cmp	r0, #0
 800606c:	d03f      	beq.n	80060ee <PRL_Received+0x29e>
 800606e:	4668      	mov	r0, sp
 8006070:	88c0      	ldrh	r0, [r0, #6]
 8006072:	83e0      	strh	r0, [r4, #30]
 8006074:	4668      	mov	r0, sp
 8006076:	88c0      	ldrh	r0, [r0, #6]
 8006078:	0440      	lsls	r0, r0, #17
 800607a:	0f01      	lsrs	r1, r0, #28
 800607c:	201a      	movs	r0, #26
 800607e:	4348      	muls	r0, r1
 8006080:	9905      	ldr	r1, [sp, #20]
 8006082:	1e89      	subs	r1, r1, #2
 8006084:	466a      	mov	r2, sp
 8006086:	88d2      	ldrh	r2, [r2, #6]
 8006088:	23f8      	movs	r3, #248	; 0xf8
 800608a:	01db      	lsls	r3, r3, #7
 800608c:	4013      	ands	r3, r2
 800608e:	d12f      	bne.n	80060f0 <PRL_Received+0x2a0>
 8006090:	466a      	mov	r2, sp
 8006092:	88d2      	ldrh	r2, [r2, #6]
 8006094:	05d2      	lsls	r2, r2, #23
 8006096:	0dd2      	lsrs	r2, r2, #23
 8006098:	466b      	mov	r3, sp
 800609a:	89db      	ldrh	r3, [r3, #14]
 800609c:	2b07      	cmp	r3, #7
 800609e:	d30a      	bcc.n	80060b6 <PRL_Received+0x266>
 80060a0:	2a1a      	cmp	r2, #26
 80060a2:	d811      	bhi.n	80060c8 <PRL_Received+0x278>
 80060a4:	e007      	b.n	80060b6 <PRL_Received+0x266>
 80060a6:	0023      	movs	r3, r4
 80060a8:	3334      	adds	r3, #52	; 0x34
 80060aa:	5d5b      	ldrb	r3, [r3, r5]
 80060ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060ae:	182f      	adds	r7, r5, r0
 80060b0:	55f3      	strb	r3, [r6, r7]
 80060b2:	1c6d      	adds	r5, r5, #1
 80060b4:	b2ad      	uxth	r5, r5
 80060b6:	428d      	cmp	r5, r1
 80060b8:	d3f5      	bcc.n	80060a6 <PRL_Received+0x256>
 80060ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80060bc:	4291      	cmp	r1, r2
 80060be:	d301      	bcc.n	80060c4 <PRL_Received+0x274>
 80060c0:	4669      	mov	r1, sp
 80060c2:	8909      	ldrh	r1, [r1, #8]
 80060c4:	8001      	strh	r1, [r0, #0]
 80060c6:	e00c      	b.n	80060e2 <PRL_Received+0x292>
 80060c8:	2025      	movs	r0, #37	; 0x25
 80060ca:	5426      	strb	r6, [r4, r0]
 80060cc:	0020      	movs	r0, r4
 80060ce:	3034      	adds	r0, #52	; 0x34
 80060d0:	5d40      	ldrb	r0, [r0, r5]
 80060d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80060d4:	5548      	strb	r0, [r1, r5]
 80060d6:	1c6d      	adds	r5, r5, #1
 80060d8:	2d1a      	cmp	r5, #26
 80060da:	d3f7      	bcc.n	80060cc <PRL_Received+0x27c>
 80060dc:	201a      	movs	r0, #26
 80060de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80060e0:	8008      	strh	r0, [r1, #0]
 80060e2:	a80a      	add	r0, sp, #40	; 0x28
 80060e4:	7801      	ldrb	r1, [r0, #0]
 80060e6:	a809      	add	r0, sp, #36	; 0x24
 80060e8:	7800      	ldrb	r0, [r0, #0]
 80060ea:	f7fa fe11 	bl	8000d10 <PE_PRL_PostReceiveEvent>
 80060ee:	e053      	b.n	8006198 <PRL_Received+0x348>
 80060f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060f2:	8812      	ldrh	r2, [r2, #0]
 80060f4:	9b05      	ldr	r3, [sp, #20]
 80060f6:	18d3      	adds	r3, r2, r3
 80060f8:	1e9b      	subs	r3, r3, #2
 80060fa:	27ff      	movs	r7, #255	; 0xff
 80060fc:	1dbf      	adds	r7, r7, #6
 80060fe:	321a      	adds	r2, #26
 8006100:	42ba      	cmp	r2, r7
 8006102:	d21b      	bcs.n	800613c <PRL_Received+0x2ec>
 8006104:	466a      	mov	r2, sp
 8006106:	8912      	ldrh	r2, [r2, #8]
 8006108:	4293      	cmp	r3, r2
 800610a:	d217      	bcs.n	800613c <PRL_Received+0x2ec>
 800610c:	2225      	movs	r2, #37	; 0x25
 800610e:	54a6      	strb	r6, [r4, r2]
 8006110:	e007      	b.n	8006122 <PRL_Received+0x2d2>
 8006112:	0022      	movs	r2, r4
 8006114:	3234      	adds	r2, #52	; 0x34
 8006116:	5d52      	ldrb	r2, [r2, r5]
 8006118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800611a:	182e      	adds	r6, r5, r0
 800611c:	559a      	strb	r2, [r3, r6]
 800611e:	1c6d      	adds	r5, r5, #1
 8006120:	b2ad      	uxth	r5, r5
 8006122:	428d      	cmp	r5, r1
 8006124:	d3f5      	bcc.n	8006112 <PRL_Received+0x2c2>
 8006126:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006128:	8801      	ldrh	r1, [r0, #0]
 800612a:	466a      	mov	r2, sp
 800612c:	8892      	ldrh	r2, [r2, #4]
 800612e:	0a92      	lsrs	r2, r2, #10
 8006130:	231c      	movs	r3, #28
 8006132:	4013      	ands	r3, r2
 8006134:	1e9a      	subs	r2, r3, #2
 8006136:	1889      	adds	r1, r1, r2
 8006138:	8001      	strh	r1, [r0, #0]
 800613a:	e02d      	b.n	8006198 <PRL_Received+0x348>
 800613c:	42bb      	cmp	r3, r7
 800613e:	d215      	bcs.n	800616c <PRL_Received+0x31c>
 8006140:	466a      	mov	r2, sp
 8006142:	8912      	ldrh	r2, [r2, #8]
 8006144:	4293      	cmp	r3, r2
 8006146:	d311      	bcc.n	800616c <PRL_Received+0x31c>
 8006148:	2225      	movs	r2, #37	; 0x25
 800614a:	54a6      	strb	r6, [r4, r2]
 800614c:	e007      	b.n	800615e <PRL_Received+0x30e>
 800614e:	0022      	movs	r2, r4
 8006150:	3234      	adds	r2, #52	; 0x34
 8006152:	5d52      	ldrb	r2, [r2, r5]
 8006154:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006156:	182e      	adds	r6, r5, r0
 8006158:	559a      	strb	r2, [r3, r6]
 800615a:	1c6d      	adds	r5, r5, #1
 800615c:	b2ad      	uxth	r5, r5
 800615e:	428d      	cmp	r5, r1
 8006160:	d3f5      	bcc.n	800614e <PRL_Received+0x2fe>
 8006162:	4668      	mov	r0, sp
 8006164:	8900      	ldrh	r0, [r0, #8]
 8006166:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006168:	8008      	strh	r0, [r1, #0]
 800616a:	e015      	b.n	8006198 <PRL_Received+0x348>
 800616c:	2025      	movs	r0, #37	; 0x25
 800616e:	5425      	strb	r5, [r4, r0]
 8006170:	e012      	b.n	8006198 <PRL_Received+0x348>
 8006172:	20ff      	movs	r0, #255	; 0xff
 8006174:	7260      	strb	r0, [r4, #9]
 8006176:	7425      	strb	r5, [r4, #16]
 8006178:	a809      	add	r0, sp, #36	; 0x24
 800617a:	7800      	ldrb	r0, [r0, #0]
 800617c:	f7fa fde4 	bl	8000d48 <PE_PRL_PostReceiveEventError>
 8006180:	72a5      	strb	r5, [r4, #10]
 8006182:	2017      	movs	r0, #23
 8006184:	9000      	str	r0, [sp, #0]
 8006186:	bf00      	nop
 8006188:	a367      	add	r3, pc, #412	; (adr r3, 8006328 <.text_55>)
 800618a:	2200      	movs	r2, #0
 800618c:	a809      	add	r0, sp, #36	; 0x24
 800618e:	7801      	ldrb	r1, [r0, #0]
 8006190:	2006      	movs	r0, #6
 8006192:	4c61      	ldr	r4, [pc, #388]	; (8006318 <.text_51>)
 8006194:	6824      	ldr	r4, [r4, #0]
 8006196:	47a0      	blx	r4
 8006198:	b00b      	add	sp, #44	; 0x2c
 800619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800619c:	20000234 	.word	0x20000234

080061a0 <.text_40>:
 80061a0:	0000f01f 	.word	0x0000f01f

080061a4 <.text_41>:
 80061a4:	0801a664 	.word	0x0801a664

080061a8 <PRL_ResetIndicate>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	0004      	movs	r4, r0
 80061ac:	000d      	movs	r5, r1
 80061ae:	2d05      	cmp	r5, #5
 80061b0:	d119      	bne.n	80061e6 <PRL_ResetIndicate+0x3e>
 80061b2:	485a      	ldr	r0, [pc, #360]	; (800631c <.text_52>)
 80061b4:	00a1      	lsls	r1, r4, #2
 80061b6:	1840      	adds	r0, r0, r1
 80061b8:	9000      	str	r0, [sp, #0]
 80061ba:	6807      	ldr	r7, [r0, #0]
 80061bc:	2600      	movs	r6, #0
 80061be:	2000      	movs	r0, #0
 80061c0:	b2c2      	uxtb	r2, r0
 80061c2:	18ba      	adds	r2, r7, r2
 80061c4:	72d6      	strb	r6, [r2, #11]
 80061c6:	1c40      	adds	r0, r0, #1
 80061c8:	b2c1      	uxtb	r1, r0
 80061ca:	2903      	cmp	r1, #3
 80061cc:	d3f8      	bcc.n	80061c0 <PRL_ResetIndicate+0x18>
 80061ce:	220f      	movs	r2, #15
 80061d0:	2103      	movs	r1, #3
 80061d2:	1db8      	adds	r0, r7, #6
 80061d4:	f013 f90a 	bl	80193ec <__aeabi_memset>
 80061d8:	9900      	ldr	r1, [sp, #0]
 80061da:	6809      	ldr	r1, [r1, #0]
 80061dc:	714e      	strb	r6, [r1, #5]
 80061de:	703e      	strb	r6, [r7, #0]
 80061e0:	0020      	movs	r0, r4
 80061e2:	f7ff fe30 	bl	8005e46 <PRL_DisableRX>
 80061e6:	2000      	movs	r0, #0
 80061e8:	9000      	str	r0, [sp, #0]
 80061ea:	2300      	movs	r3, #0
 80061ec:	002a      	movs	r2, r5
 80061ee:	0021      	movs	r1, r4
 80061f0:	2001      	movs	r0, #1
 80061f2:	4e49      	ldr	r6, [pc, #292]	; (8006318 <.text_51>)
 80061f4:	6836      	ldr	r6, [r6, #0]
 80061f6:	47b0      	blx	r6
 80061f8:	0029      	movs	r1, r5
 80061fa:	0020      	movs	r0, r4
 80061fc:	f7fa fc80 	bl	8000b00 <PE_PRL_ResetReceived>
 8006200:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08006202 <PRL_ResetCompleted>:
 8006202:	2101      	movs	r1, #1
 8006204:	4a45      	ldr	r2, [pc, #276]	; (800631c <.text_52>)
 8006206:	0080      	lsls	r0, r0, #2
 8006208:	5810      	ldr	r0, [r2, r0]
 800620a:	70c1      	strb	r1, [r0, #3]
 800620c:	4770      	bx	lr
	...

08006210 <.text_44>:
 8006210:	0000fedf 	.word	0x0000fedf

08006214 <.text_45>:
 8006214:	0000feff 	.word	0x0000feff

08006218 <.text_46>:
 8006218:	0000f13f 	.word	0x0000f13f

0800621c <PRL_BistCompleted>:
 800621c:	b580      	push	{r7, lr}
 800621e:	f7fa fc9b 	bl	8000b58 <PE_PRL_BistCompleted>
 8006222:	bd01      	pop	{r0, pc}

08006224 <PRL_TxCompleted>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	0004      	movs	r4, r0
 8006228:	4a3c      	ldr	r2, [pc, #240]	; (800631c <.text_52>)
 800622a:	00a3      	lsls	r3, r4, #2
 800622c:	58d6      	ldr	r6, [r2, r3]
 800622e:	2500      	movs	r5, #0
 8006230:	7c32      	ldrb	r2, [r6, #16]
 8006232:	2a01      	cmp	r2, #1
 8006234:	d002      	beq.n	800623c <PRL_TxCompleted+0x18>
 8006236:	2a02      	cmp	r2, #2
 8006238:	d009      	beq.n	800624e <PRL_TxCompleted+0x2a>
 800623a:	e010      	b.n	800625e <PRL_TxCompleted+0x3a>
 800623c:	2900      	cmp	r1, #0
 800623e:	d102      	bne.n	8006246 <PRL_TxCompleted+0x22>
 8006240:	f7fa fdb4 	bl	8000dac <PE_PRL_PostReceiveEventComplete>
 8006244:	e001      	b.n	800624a <PRL_TxCompleted+0x26>
 8006246:	f7fa fd7f 	bl	8000d48 <PE_PRL_PostReceiveEventError>
 800624a:	72b5      	strb	r5, [r6, #10]
 800624c:	e007      	b.n	800625e <PRL_TxCompleted+0x3a>
 800624e:	f008 fbb7 	bl	800e9c0 <USBPD_PHY_GetRetryTimerValue>
 8006252:	0001      	movs	r1, r0
 8006254:	0060      	lsls	r0, r4, #1
 8006256:	1c40      	adds	r0, r0, #1
 8006258:	b2c0      	uxtb	r0, r0
 800625a:	f009 ffdf 	bl	801021c <USBPD_TIM_Start>
 800625e:	7435      	strb	r5, [r6, #16]
 8006260:	bd70      	pop	{r4, r5, r6, pc}

08006262 <USBPD_PRL_PrepareExtendedTxChunkSending>:
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	4c2d      	ldr	r4, [pc, #180]	; (800631c <.text_52>)
 8006266:	0080      	lsls	r0, r0, #2
 8006268:	5820      	ldr	r0, [r4, r0]
 800626a:	2480      	movs	r4, #128	; 0x80
 800626c:	0224      	lsls	r4, r4, #8
 800626e:	8b85      	ldrh	r5, [r0, #28]
 8006270:	4e2b      	ldr	r6, [pc, #172]	; (8006320 <.text_53>)
 8006272:	402e      	ands	r6, r5
 8006274:	02c9      	lsls	r1, r1, #11
 8006276:	4331      	orrs	r1, r6
 8006278:	25fe      	movs	r5, #254	; 0xfe
 800627a:	022d      	lsls	r5, r5, #8
 800627c:	400d      	ands	r5, r1
 800627e:	05d1      	lsls	r1, r2, #23
 8006280:	0dc9      	lsrs	r1, r1, #23
 8006282:	4329      	orrs	r1, r5
 8006284:	4321      	orrs	r1, r4
 8006286:	8381      	strh	r1, [r0, #28]
 8006288:	8a41      	ldrh	r1, [r0, #18]
 800628a:	430c      	orrs	r4, r1
 800628c:	8244      	strh	r4, [r0, #18]
 800628e:	4a25      	ldr	r2, [pc, #148]	; (8006324 <.text_54>)
 8006290:	4022      	ands	r2, r4
 8006292:	2120      	movs	r1, #32
 8006294:	5c41      	ldrb	r1, [r0, r1]
 8006296:	06c9      	lsls	r1, r1, #27
 8006298:	0ec9      	lsrs	r1, r1, #27
 800629a:	4311      	orrs	r1, r2
 800629c:	8241      	strh	r1, [r0, #18]
 800629e:	7019      	strb	r1, [r3, #0]
 80062a0:	8a41      	ldrh	r1, [r0, #18]
 80062a2:	0a09      	lsrs	r1, r1, #8
 80062a4:	7059      	strb	r1, [r3, #1]
 80062a6:	8b81      	ldrh	r1, [r0, #28]
 80062a8:	7099      	strb	r1, [r3, #2]
 80062aa:	8b80      	ldrh	r0, [r0, #28]
 80062ac:	0a00      	lsrs	r0, r0, #8
 80062ae:	70d8      	strb	r0, [r3, #3]
 80062b0:	bd70      	pop	{r4, r5, r6, pc}

080062b2 <USBPD_PRL_PrepareChunkRequest>:
 80062b2:	b510      	push	{r4, lr}
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <.text_52>)
 80062b6:	0080      	lsls	r0, r0, #2
 80062b8:	5810      	ldr	r0, [r2, r0]
 80062ba:	8b83      	ldrh	r3, [r0, #28]
 80062bc:	2284      	movs	r2, #132	; 0x84
 80062be:	0212      	lsls	r2, r2, #8
 80062c0:	431a      	orrs	r2, r3
 80062c2:	8382      	strh	r2, [r0, #28]
 80062c4:	2386      	movs	r3, #134	; 0x86
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	4013      	ands	r3, r2
 80062ca:	8bc2      	ldrh	r2, [r0, #30]
 80062cc:	0ad2      	lsrs	r2, r2, #11
 80062ce:	1c52      	adds	r2, r2, #1
 80062d0:	02d2      	lsls	r2, r2, #11
 80062d2:	24f0      	movs	r4, #240	; 0xf0
 80062d4:	01e4      	lsls	r4, r4, #7
 80062d6:	4014      	ands	r4, r2
 80062d8:	431c      	orrs	r4, r3
 80062da:	8384      	strh	r4, [r0, #28]
 80062dc:	8a43      	ldrh	r3, [r0, #18]
 80062de:	2280      	movs	r2, #128	; 0x80
 80062e0:	0212      	lsls	r2, r2, #8
 80062e2:	431a      	orrs	r2, r3
 80062e4:	0003      	movs	r3, r0
 80062e6:	3312      	adds	r3, #18
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	4c0e      	ldr	r4, [pc, #56]	; (8006324 <.text_54>)
 80062ec:	4014      	ands	r4, r2
 80062ee:	2220      	movs	r2, #32
 80062f0:	5c82      	ldrb	r2, [r0, r2]
 80062f2:	06d2      	lsls	r2, r2, #27
 80062f4:	0ed2      	lsrs	r2, r2, #27
 80062f6:	4322      	orrs	r2, r4
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	2200      	movs	r2, #0
 80062fc:	7142      	strb	r2, [r0, #5]
 80062fe:	8a43      	ldrh	r3, [r0, #18]
 8006300:	700b      	strb	r3, [r1, #0]
 8006302:	8a43      	ldrh	r3, [r0, #18]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	704b      	strb	r3, [r1, #1]
 8006308:	8b83      	ldrh	r3, [r0, #28]
 800630a:	708b      	strb	r3, [r1, #2]
 800630c:	8b80      	ldrh	r0, [r0, #28]
 800630e:	0a00      	lsrs	r0, r0, #8
 8006310:	70c8      	strb	r0, [r1, #3]
 8006312:	710a      	strb	r2, [r1, #4]
 8006314:	714a      	strb	r2, [r1, #5]
 8006316:	bd10      	pop	{r4, pc}

08006318 <.text_51>:
 8006318:	20000000 	.word	0x20000000

0800631c <.text_52>:
 800631c:	20000234 	.word	0x20000234

08006320 <.text_53>:
 8006320:	000083ff 	.word	0x000083ff

08006324 <.text_54>:
 8006324:	0000ffe0 	.word	0x0000ffe0

08006328 <.text_55>:
 8006328:	5f4c5250 	.word	0x5f4c5250
 800632c:	4e455645 	.word	0x4e455645
 8006330:	58525f54 	.word	0x58525f54
 8006334:	5349445f 	.word	0x5349445f
 8006338:	44524143 	.word	0x44524143
 800633c:	00004445 	.word	0x00004445

08006340 <strlen>:
 8006340:	2300      	movs	r3, #0
 8006342:	5cc2      	ldrb	r2, [r0, r3]
 8006344:	3301      	adds	r3, #1
 8006346:	2a00      	cmp	r2, #0
 8006348:	d1fb      	bne.n	8006342 <strlen+0x2>
 800634a:	1e58      	subs	r0, r3, #1
 800634c:	4770      	bx	lr
	...

08006350 <__gnu_thumb1_case_shi>:
 8006350:	b403      	push	{r0, r1}
 8006352:	4671      	mov	r1, lr
 8006354:	0849      	lsrs	r1, r1, #1
 8006356:	0040      	lsls	r0, r0, #1
 8006358:	0049      	lsls	r1, r1, #1
 800635a:	5e09      	ldrsh	r1, [r1, r0]
 800635c:	0049      	lsls	r1, r1, #1
 800635e:	448e      	add	lr, r1
 8006360:	bc03      	pop	{r0, r1}
 8006362:	4770      	bx	lr

08006364 <__udivsi3>:
 8006364:	2200      	movs	r2, #0
 8006366:	0843      	lsrs	r3, r0, #1
 8006368:	428b      	cmp	r3, r1
 800636a:	d374      	bcc.n	8006456 <__udivsi3+0xf2>
 800636c:	0903      	lsrs	r3, r0, #4
 800636e:	428b      	cmp	r3, r1
 8006370:	d35f      	bcc.n	8006432 <__udivsi3+0xce>
 8006372:	0a03      	lsrs	r3, r0, #8
 8006374:	428b      	cmp	r3, r1
 8006376:	d344      	bcc.n	8006402 <__udivsi3+0x9e>
 8006378:	0b03      	lsrs	r3, r0, #12
 800637a:	428b      	cmp	r3, r1
 800637c:	d328      	bcc.n	80063d0 <__udivsi3+0x6c>
 800637e:	0c03      	lsrs	r3, r0, #16
 8006380:	428b      	cmp	r3, r1
 8006382:	d30d      	bcc.n	80063a0 <__udivsi3+0x3c>
 8006384:	22ff      	movs	r2, #255	; 0xff
 8006386:	0209      	lsls	r1, r1, #8
 8006388:	ba12      	rev	r2, r2
 800638a:	0c03      	lsrs	r3, r0, #16
 800638c:	428b      	cmp	r3, r1
 800638e:	d302      	bcc.n	8006396 <__udivsi3+0x32>
 8006390:	1212      	asrs	r2, r2, #8
 8006392:	0209      	lsls	r1, r1, #8
 8006394:	d065      	beq.n	8006462 <__udivsi3+0xfe>
 8006396:	0b03      	lsrs	r3, r0, #12
 8006398:	428b      	cmp	r3, r1
 800639a:	d319      	bcc.n	80063d0 <__udivsi3+0x6c>
 800639c:	e000      	b.n	80063a0 <__udivsi3+0x3c>
 800639e:	0a09      	lsrs	r1, r1, #8
 80063a0:	0bc3      	lsrs	r3, r0, #15
 80063a2:	428b      	cmp	r3, r1
 80063a4:	d301      	bcc.n	80063aa <__udivsi3+0x46>
 80063a6:	03cb      	lsls	r3, r1, #15
 80063a8:	1ac0      	subs	r0, r0, r3
 80063aa:	4152      	adcs	r2, r2
 80063ac:	0b83      	lsrs	r3, r0, #14
 80063ae:	428b      	cmp	r3, r1
 80063b0:	d301      	bcc.n	80063b6 <__udivsi3+0x52>
 80063b2:	038b      	lsls	r3, r1, #14
 80063b4:	1ac0      	subs	r0, r0, r3
 80063b6:	4152      	adcs	r2, r2
 80063b8:	0b43      	lsrs	r3, r0, #13
 80063ba:	428b      	cmp	r3, r1
 80063bc:	d301      	bcc.n	80063c2 <__udivsi3+0x5e>
 80063be:	034b      	lsls	r3, r1, #13
 80063c0:	1ac0      	subs	r0, r0, r3
 80063c2:	4152      	adcs	r2, r2
 80063c4:	0b03      	lsrs	r3, r0, #12
 80063c6:	428b      	cmp	r3, r1
 80063c8:	d301      	bcc.n	80063ce <__udivsi3+0x6a>
 80063ca:	030b      	lsls	r3, r1, #12
 80063cc:	1ac0      	subs	r0, r0, r3
 80063ce:	4152      	adcs	r2, r2
 80063d0:	0ac3      	lsrs	r3, r0, #11
 80063d2:	428b      	cmp	r3, r1
 80063d4:	d301      	bcc.n	80063da <__udivsi3+0x76>
 80063d6:	02cb      	lsls	r3, r1, #11
 80063d8:	1ac0      	subs	r0, r0, r3
 80063da:	4152      	adcs	r2, r2
 80063dc:	0a83      	lsrs	r3, r0, #10
 80063de:	428b      	cmp	r3, r1
 80063e0:	d301      	bcc.n	80063e6 <__udivsi3+0x82>
 80063e2:	028b      	lsls	r3, r1, #10
 80063e4:	1ac0      	subs	r0, r0, r3
 80063e6:	4152      	adcs	r2, r2
 80063e8:	0a43      	lsrs	r3, r0, #9
 80063ea:	428b      	cmp	r3, r1
 80063ec:	d301      	bcc.n	80063f2 <__udivsi3+0x8e>
 80063ee:	024b      	lsls	r3, r1, #9
 80063f0:	1ac0      	subs	r0, r0, r3
 80063f2:	4152      	adcs	r2, r2
 80063f4:	0a03      	lsrs	r3, r0, #8
 80063f6:	428b      	cmp	r3, r1
 80063f8:	d301      	bcc.n	80063fe <__udivsi3+0x9a>
 80063fa:	020b      	lsls	r3, r1, #8
 80063fc:	1ac0      	subs	r0, r0, r3
 80063fe:	4152      	adcs	r2, r2
 8006400:	d2cd      	bcs.n	800639e <__udivsi3+0x3a>
 8006402:	09c3      	lsrs	r3, r0, #7
 8006404:	428b      	cmp	r3, r1
 8006406:	d301      	bcc.n	800640c <__udivsi3+0xa8>
 8006408:	01cb      	lsls	r3, r1, #7
 800640a:	1ac0      	subs	r0, r0, r3
 800640c:	4152      	adcs	r2, r2
 800640e:	0983      	lsrs	r3, r0, #6
 8006410:	428b      	cmp	r3, r1
 8006412:	d301      	bcc.n	8006418 <__udivsi3+0xb4>
 8006414:	018b      	lsls	r3, r1, #6
 8006416:	1ac0      	subs	r0, r0, r3
 8006418:	4152      	adcs	r2, r2
 800641a:	0943      	lsrs	r3, r0, #5
 800641c:	428b      	cmp	r3, r1
 800641e:	d301      	bcc.n	8006424 <__udivsi3+0xc0>
 8006420:	014b      	lsls	r3, r1, #5
 8006422:	1ac0      	subs	r0, r0, r3
 8006424:	4152      	adcs	r2, r2
 8006426:	0903      	lsrs	r3, r0, #4
 8006428:	428b      	cmp	r3, r1
 800642a:	d301      	bcc.n	8006430 <__udivsi3+0xcc>
 800642c:	010b      	lsls	r3, r1, #4
 800642e:	1ac0      	subs	r0, r0, r3
 8006430:	4152      	adcs	r2, r2
 8006432:	08c3      	lsrs	r3, r0, #3
 8006434:	428b      	cmp	r3, r1
 8006436:	d301      	bcc.n	800643c <__udivsi3+0xd8>
 8006438:	00cb      	lsls	r3, r1, #3
 800643a:	1ac0      	subs	r0, r0, r3
 800643c:	4152      	adcs	r2, r2
 800643e:	0883      	lsrs	r3, r0, #2
 8006440:	428b      	cmp	r3, r1
 8006442:	d301      	bcc.n	8006448 <__udivsi3+0xe4>
 8006444:	008b      	lsls	r3, r1, #2
 8006446:	1ac0      	subs	r0, r0, r3
 8006448:	4152      	adcs	r2, r2
 800644a:	0843      	lsrs	r3, r0, #1
 800644c:	428b      	cmp	r3, r1
 800644e:	d301      	bcc.n	8006454 <__udivsi3+0xf0>
 8006450:	004b      	lsls	r3, r1, #1
 8006452:	1ac0      	subs	r0, r0, r3
 8006454:	4152      	adcs	r2, r2
 8006456:	1a41      	subs	r1, r0, r1
 8006458:	d200      	bcs.n	800645c <__udivsi3+0xf8>
 800645a:	4601      	mov	r1, r0
 800645c:	4152      	adcs	r2, r2
 800645e:	4610      	mov	r0, r2
 8006460:	4770      	bx	lr
 8006462:	e7ff      	b.n	8006464 <__udivsi3+0x100>
 8006464:	b501      	push	{r0, lr}
 8006466:	2000      	movs	r0, #0
 8006468:	f000 f806 	bl	8006478 <__aeabi_idiv0>
 800646c:	bd02      	pop	{r1, pc}
 800646e:	46c0      	nop			; (mov r8, r8)

08006470 <__aeabi_uidivmod>:
 8006470:	2900      	cmp	r1, #0
 8006472:	d0f7      	beq.n	8006464 <__udivsi3+0x100>
 8006474:	e776      	b.n	8006364 <__udivsi3>
 8006476:	4770      	bx	lr

08006478 <__aeabi_idiv0>:
 8006478:	4770      	bx	lr
 800647a:	46c0      	nop			; (mov r8, r8)

0800647c <__aeabi_uldivmod>:
 800647c:	2b00      	cmp	r3, #0
 800647e:	d111      	bne.n	80064a4 <__aeabi_uldivmod+0x28>
 8006480:	2a00      	cmp	r2, #0
 8006482:	d10f      	bne.n	80064a4 <__aeabi_uldivmod+0x28>
 8006484:	2900      	cmp	r1, #0
 8006486:	d100      	bne.n	800648a <__aeabi_uldivmod+0xe>
 8006488:	2800      	cmp	r0, #0
 800648a:	d002      	beq.n	8006492 <__aeabi_uldivmod+0x16>
 800648c:	2100      	movs	r1, #0
 800648e:	43c9      	mvns	r1, r1
 8006490:	0008      	movs	r0, r1
 8006492:	b407      	push	{r0, r1, r2}
 8006494:	4802      	ldr	r0, [pc, #8]	; (80064a0 <__aeabi_uldivmod+0x24>)
 8006496:	a102      	add	r1, pc, #8	; (adr r1, 80064a0 <__aeabi_uldivmod+0x24>)
 8006498:	1840      	adds	r0, r0, r1
 800649a:	9002      	str	r0, [sp, #8]
 800649c:	bd03      	pop	{r0, r1, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	ffffffd9 	.word	0xffffffd9
 80064a4:	b403      	push	{r0, r1}
 80064a6:	4668      	mov	r0, sp
 80064a8:	b501      	push	{r0, lr}
 80064aa:	9802      	ldr	r0, [sp, #8]
 80064ac:	f000 f806 	bl	80064bc <__udivmoddi4>
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	469e      	mov	lr, r3
 80064b4:	b002      	add	sp, #8
 80064b6:	bc0c      	pop	{r2, r3}
 80064b8:	4770      	bx	lr
 80064ba:	46c0      	nop			; (mov r8, r8)

080064bc <__udivmoddi4>:
 80064bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064be:	4657      	mov	r7, sl
 80064c0:	464e      	mov	r6, r9
 80064c2:	4645      	mov	r5, r8
 80064c4:	46de      	mov	lr, fp
 80064c6:	b5e0      	push	{r5, r6, r7, lr}
 80064c8:	0004      	movs	r4, r0
 80064ca:	000d      	movs	r5, r1
 80064cc:	4692      	mov	sl, r2
 80064ce:	4699      	mov	r9, r3
 80064d0:	b083      	sub	sp, #12
 80064d2:	428b      	cmp	r3, r1
 80064d4:	d830      	bhi.n	8006538 <__udivmoddi4+0x7c>
 80064d6:	d02d      	beq.n	8006534 <__udivmoddi4+0x78>
 80064d8:	4649      	mov	r1, r9
 80064da:	4650      	mov	r0, sl
 80064dc:	f000 f8ba 	bl	8006654 <__clzdi2>
 80064e0:	0029      	movs	r1, r5
 80064e2:	0006      	movs	r6, r0
 80064e4:	0020      	movs	r0, r4
 80064e6:	f000 f8b5 	bl	8006654 <__clzdi2>
 80064ea:	1a33      	subs	r3, r6, r0
 80064ec:	4698      	mov	r8, r3
 80064ee:	3b20      	subs	r3, #32
 80064f0:	d434      	bmi.n	800655c <__udivmoddi4+0xa0>
 80064f2:	469b      	mov	fp, r3
 80064f4:	4653      	mov	r3, sl
 80064f6:	465a      	mov	r2, fp
 80064f8:	4093      	lsls	r3, r2
 80064fa:	4642      	mov	r2, r8
 80064fc:	001f      	movs	r7, r3
 80064fe:	4653      	mov	r3, sl
 8006500:	4093      	lsls	r3, r2
 8006502:	001e      	movs	r6, r3
 8006504:	42af      	cmp	r7, r5
 8006506:	d83b      	bhi.n	8006580 <__udivmoddi4+0xc4>
 8006508:	42af      	cmp	r7, r5
 800650a:	d100      	bne.n	800650e <__udivmoddi4+0x52>
 800650c:	e079      	b.n	8006602 <__udivmoddi4+0x146>
 800650e:	465b      	mov	r3, fp
 8006510:	1ba4      	subs	r4, r4, r6
 8006512:	41bd      	sbcs	r5, r7
 8006514:	2b00      	cmp	r3, #0
 8006516:	da00      	bge.n	800651a <__udivmoddi4+0x5e>
 8006518:	e076      	b.n	8006608 <__udivmoddi4+0x14c>
 800651a:	2200      	movs	r2, #0
 800651c:	2300      	movs	r3, #0
 800651e:	9200      	str	r2, [sp, #0]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	2301      	movs	r3, #1
 8006524:	465a      	mov	r2, fp
 8006526:	4093      	lsls	r3, r2
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	2301      	movs	r3, #1
 800652c:	4642      	mov	r2, r8
 800652e:	4093      	lsls	r3, r2
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	e029      	b.n	8006588 <__udivmoddi4+0xcc>
 8006534:	4282      	cmp	r2, r0
 8006536:	d9cf      	bls.n	80064d8 <__udivmoddi4+0x1c>
 8006538:	2200      	movs	r2, #0
 800653a:	2300      	movs	r3, #0
 800653c:	9200      	str	r2, [sp, #0]
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <__udivmoddi4+0x8e>
 8006546:	601c      	str	r4, [r3, #0]
 8006548:	605d      	str	r5, [r3, #4]
 800654a:	9800      	ldr	r0, [sp, #0]
 800654c:	9901      	ldr	r1, [sp, #4]
 800654e:	b003      	add	sp, #12
 8006550:	bcf0      	pop	{r4, r5, r6, r7}
 8006552:	46bb      	mov	fp, r7
 8006554:	46b2      	mov	sl, r6
 8006556:	46a9      	mov	r9, r5
 8006558:	46a0      	mov	r8, r4
 800655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800655c:	4642      	mov	r2, r8
 800655e:	469b      	mov	fp, r3
 8006560:	2320      	movs	r3, #32
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	4652      	mov	r2, sl
 8006566:	40da      	lsrs	r2, r3
 8006568:	4641      	mov	r1, r8
 800656a:	0013      	movs	r3, r2
 800656c:	464a      	mov	r2, r9
 800656e:	408a      	lsls	r2, r1
 8006570:	0017      	movs	r7, r2
 8006572:	4642      	mov	r2, r8
 8006574:	431f      	orrs	r7, r3
 8006576:	4653      	mov	r3, sl
 8006578:	4093      	lsls	r3, r2
 800657a:	001e      	movs	r6, r3
 800657c:	42af      	cmp	r7, r5
 800657e:	d9c3      	bls.n	8006508 <__udivmoddi4+0x4c>
 8006580:	2200      	movs	r2, #0
 8006582:	2300      	movs	r3, #0
 8006584:	9200      	str	r2, [sp, #0]
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	4643      	mov	r3, r8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0d8      	beq.n	8006540 <__udivmoddi4+0x84>
 800658e:	07fb      	lsls	r3, r7, #31
 8006590:	0872      	lsrs	r2, r6, #1
 8006592:	431a      	orrs	r2, r3
 8006594:	4646      	mov	r6, r8
 8006596:	087b      	lsrs	r3, r7, #1
 8006598:	e00e      	b.n	80065b8 <__udivmoddi4+0xfc>
 800659a:	42ab      	cmp	r3, r5
 800659c:	d101      	bne.n	80065a2 <__udivmoddi4+0xe6>
 800659e:	42a2      	cmp	r2, r4
 80065a0:	d80c      	bhi.n	80065bc <__udivmoddi4+0x100>
 80065a2:	1aa4      	subs	r4, r4, r2
 80065a4:	419d      	sbcs	r5, r3
 80065a6:	2001      	movs	r0, #1
 80065a8:	1924      	adds	r4, r4, r4
 80065aa:	416d      	adcs	r5, r5
 80065ac:	2100      	movs	r1, #0
 80065ae:	3e01      	subs	r6, #1
 80065b0:	1824      	adds	r4, r4, r0
 80065b2:	414d      	adcs	r5, r1
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	d006      	beq.n	80065c6 <__udivmoddi4+0x10a>
 80065b8:	42ab      	cmp	r3, r5
 80065ba:	d9ee      	bls.n	800659a <__udivmoddi4+0xde>
 80065bc:	3e01      	subs	r6, #1
 80065be:	1924      	adds	r4, r4, r4
 80065c0:	416d      	adcs	r5, r5
 80065c2:	2e00      	cmp	r6, #0
 80065c4:	d1f8      	bne.n	80065b8 <__udivmoddi4+0xfc>
 80065c6:	9800      	ldr	r0, [sp, #0]
 80065c8:	9901      	ldr	r1, [sp, #4]
 80065ca:	465b      	mov	r3, fp
 80065cc:	1900      	adds	r0, r0, r4
 80065ce:	4169      	adcs	r1, r5
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	db24      	blt.n	800661e <__udivmoddi4+0x162>
 80065d4:	002b      	movs	r3, r5
 80065d6:	465a      	mov	r2, fp
 80065d8:	4644      	mov	r4, r8
 80065da:	40d3      	lsrs	r3, r2
 80065dc:	002a      	movs	r2, r5
 80065de:	40e2      	lsrs	r2, r4
 80065e0:	001c      	movs	r4, r3
 80065e2:	465b      	mov	r3, fp
 80065e4:	0015      	movs	r5, r2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	db2a      	blt.n	8006640 <__udivmoddi4+0x184>
 80065ea:	0026      	movs	r6, r4
 80065ec:	409e      	lsls	r6, r3
 80065ee:	0033      	movs	r3, r6
 80065f0:	0026      	movs	r6, r4
 80065f2:	4647      	mov	r7, r8
 80065f4:	40be      	lsls	r6, r7
 80065f6:	0032      	movs	r2, r6
 80065f8:	1a80      	subs	r0, r0, r2
 80065fa:	4199      	sbcs	r1, r3
 80065fc:	9000      	str	r0, [sp, #0]
 80065fe:	9101      	str	r1, [sp, #4]
 8006600:	e79e      	b.n	8006540 <__udivmoddi4+0x84>
 8006602:	42a3      	cmp	r3, r4
 8006604:	d8bc      	bhi.n	8006580 <__udivmoddi4+0xc4>
 8006606:	e782      	b.n	800650e <__udivmoddi4+0x52>
 8006608:	4642      	mov	r2, r8
 800660a:	2320      	movs	r3, #32
 800660c:	2100      	movs	r1, #0
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	2200      	movs	r2, #0
 8006612:	9100      	str	r1, [sp, #0]
 8006614:	9201      	str	r2, [sp, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	40da      	lsrs	r2, r3
 800661a:	9201      	str	r2, [sp, #4]
 800661c:	e785      	b.n	800652a <__udivmoddi4+0x6e>
 800661e:	4642      	mov	r2, r8
 8006620:	2320      	movs	r3, #32
 8006622:	1a9b      	subs	r3, r3, r2
 8006624:	002a      	movs	r2, r5
 8006626:	4646      	mov	r6, r8
 8006628:	409a      	lsls	r2, r3
 800662a:	0023      	movs	r3, r4
 800662c:	40f3      	lsrs	r3, r6
 800662e:	4644      	mov	r4, r8
 8006630:	4313      	orrs	r3, r2
 8006632:	002a      	movs	r2, r5
 8006634:	40e2      	lsrs	r2, r4
 8006636:	001c      	movs	r4, r3
 8006638:	465b      	mov	r3, fp
 800663a:	0015      	movs	r5, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	dad4      	bge.n	80065ea <__udivmoddi4+0x12e>
 8006640:	4642      	mov	r2, r8
 8006642:	002f      	movs	r7, r5
 8006644:	2320      	movs	r3, #32
 8006646:	0026      	movs	r6, r4
 8006648:	4097      	lsls	r7, r2
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	40de      	lsrs	r6, r3
 800664e:	003b      	movs	r3, r7
 8006650:	4333      	orrs	r3, r6
 8006652:	e7cd      	b.n	80065f0 <__udivmoddi4+0x134>

08006654 <__clzdi2>:
 8006654:	b510      	push	{r4, lr}
 8006656:	2900      	cmp	r1, #0
 8006658:	d103      	bne.n	8006662 <__clzdi2+0xe>
 800665a:	f000 f807 	bl	800666c <__clzsi2>
 800665e:	3020      	adds	r0, #32
 8006660:	e002      	b.n	8006668 <__clzdi2+0x14>
 8006662:	0008      	movs	r0, r1
 8006664:	f000 f802 	bl	800666c <__clzsi2>
 8006668:	bd10      	pop	{r4, pc}
 800666a:	46c0      	nop			; (mov r8, r8)

0800666c <__clzsi2>:
 800666c:	211c      	movs	r1, #28
 800666e:	2301      	movs	r3, #1
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	4298      	cmp	r0, r3
 8006674:	d301      	bcc.n	800667a <__clzsi2+0xe>
 8006676:	0c00      	lsrs	r0, r0, #16
 8006678:	3910      	subs	r1, #16
 800667a:	0a1b      	lsrs	r3, r3, #8
 800667c:	4298      	cmp	r0, r3
 800667e:	d301      	bcc.n	8006684 <__clzsi2+0x18>
 8006680:	0a00      	lsrs	r0, r0, #8
 8006682:	3908      	subs	r1, #8
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	4298      	cmp	r0, r3
 8006688:	d301      	bcc.n	800668e <__clzsi2+0x22>
 800668a:	0900      	lsrs	r0, r0, #4
 800668c:	3904      	subs	r1, #4
 800668e:	a202      	add	r2, pc, #8	; (adr r2, 8006698 <__clzsi2+0x2c>)
 8006690:	5c10      	ldrb	r0, [r2, r0]
 8006692:	1840      	adds	r0, r0, r1
 8006694:	4770      	bx	lr
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	02020304 	.word	0x02020304
 800669c:	01010101 	.word	0x01010101
	...

080066a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	0002      	movs	r2, r0
 80066b0:	1dfb      	adds	r3, r7, #7
 80066b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066b4:	1dfb      	adds	r3, r7, #7
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b7f      	cmp	r3, #127	; 0x7f
 80066ba:	d809      	bhi.n	80066d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066bc:	1dfb      	adds	r3, r7, #7
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	001a      	movs	r2, r3
 80066c2:	231f      	movs	r3, #31
 80066c4:	401a      	ands	r2, r3
 80066c6:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <__NVIC_EnableIRQ+0x30>)
 80066c8:	2101      	movs	r1, #1
 80066ca:	4091      	lsls	r1, r2
 80066cc:	000a      	movs	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b002      	add	sp, #8
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	e000e100 	.word	0xe000e100

080066dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	0002      	movs	r2, r0
 80066e4:	6039      	str	r1, [r7, #0]
 80066e6:	1dfb      	adds	r3, r7, #7
 80066e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066ea:	1dfb      	adds	r3, r7, #7
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b7f      	cmp	r3, #127	; 0x7f
 80066f0:	d828      	bhi.n	8006744 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066f2:	4a2f      	ldr	r2, [pc, #188]	; (80067b0 <__NVIC_SetPriority+0xd4>)
 80066f4:	1dfb      	adds	r3, r7, #7
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b25b      	sxtb	r3, r3
 80066fa:	089b      	lsrs	r3, r3, #2
 80066fc:	33c0      	adds	r3, #192	; 0xc0
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	589b      	ldr	r3, [r3, r2]
 8006702:	1dfa      	adds	r2, r7, #7
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	0011      	movs	r1, r2
 8006708:	2203      	movs	r2, #3
 800670a:	400a      	ands	r2, r1
 800670c:	00d2      	lsls	r2, r2, #3
 800670e:	21ff      	movs	r1, #255	; 0xff
 8006710:	4091      	lsls	r1, r2
 8006712:	000a      	movs	r2, r1
 8006714:	43d2      	mvns	r2, r2
 8006716:	401a      	ands	r2, r3
 8006718:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	22ff      	movs	r2, #255	; 0xff
 8006720:	401a      	ands	r2, r3
 8006722:	1dfb      	adds	r3, r7, #7
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	0018      	movs	r0, r3
 8006728:	2303      	movs	r3, #3
 800672a:	4003      	ands	r3, r0
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006730:	481f      	ldr	r0, [pc, #124]	; (80067b0 <__NVIC_SetPriority+0xd4>)
 8006732:	1dfb      	adds	r3, r7, #7
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b25b      	sxtb	r3, r3
 8006738:	089b      	lsrs	r3, r3, #2
 800673a:	430a      	orrs	r2, r1
 800673c:	33c0      	adds	r3, #192	; 0xc0
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006742:	e031      	b.n	80067a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006744:	4a1b      	ldr	r2, [pc, #108]	; (80067b4 <__NVIC_SetPriority+0xd8>)
 8006746:	1dfb      	adds	r3, r7, #7
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	0019      	movs	r1, r3
 800674c:	230f      	movs	r3, #15
 800674e:	400b      	ands	r3, r1
 8006750:	3b08      	subs	r3, #8
 8006752:	089b      	lsrs	r3, r3, #2
 8006754:	3306      	adds	r3, #6
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	18d3      	adds	r3, r2, r3
 800675a:	3304      	adds	r3, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	1dfa      	adds	r2, r7, #7
 8006760:	7812      	ldrb	r2, [r2, #0]
 8006762:	0011      	movs	r1, r2
 8006764:	2203      	movs	r2, #3
 8006766:	400a      	ands	r2, r1
 8006768:	00d2      	lsls	r2, r2, #3
 800676a:	21ff      	movs	r1, #255	; 0xff
 800676c:	4091      	lsls	r1, r2
 800676e:	000a      	movs	r2, r1
 8006770:	43d2      	mvns	r2, r2
 8006772:	401a      	ands	r2, r3
 8006774:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	019b      	lsls	r3, r3, #6
 800677a:	22ff      	movs	r2, #255	; 0xff
 800677c:	401a      	ands	r2, r3
 800677e:	1dfb      	adds	r3, r7, #7
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	0018      	movs	r0, r3
 8006784:	2303      	movs	r3, #3
 8006786:	4003      	ands	r3, r0
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800678c:	4809      	ldr	r0, [pc, #36]	; (80067b4 <__NVIC_SetPriority+0xd8>)
 800678e:	1dfb      	adds	r3, r7, #7
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	001c      	movs	r4, r3
 8006794:	230f      	movs	r3, #15
 8006796:	4023      	ands	r3, r4
 8006798:	3b08      	subs	r3, #8
 800679a:	089b      	lsrs	r3, r3, #2
 800679c:	430a      	orrs	r2, r1
 800679e:	3306      	adds	r3, #6
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	18c3      	adds	r3, r0, r3
 80067a4:	3304      	adds	r3, #4
 80067a6:	601a      	str	r2, [r3, #0]
}
 80067a8:	46c0      	nop			; (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b003      	add	sp, #12
 80067ae:	bd90      	pop	{r4, r7, pc}
 80067b0:	e000e100 	.word	0xe000e100
 80067b4:	e000ed00 	.word	0xe000ed00

080067b8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80067c8:	4a0c      	ldr	r2, [pc, #48]	; (80067fc <LL_DMA_SetDataTransferDirection+0x44>)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	18d3      	adds	r3, r2, r3
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	001a      	movs	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	18d3      	adds	r3, r2, r3
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a09      	ldr	r2, [pc, #36]	; (8006800 <LL_DMA_SetDataTransferDirection+0x48>)
 80067da:	4013      	ands	r3, r2
 80067dc:	0019      	movs	r1, r3
 80067de:	4a07      	ldr	r2, [pc, #28]	; (80067fc <LL_DMA_SetDataTransferDirection+0x44>)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	18d3      	adds	r3, r2, r3
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	001a      	movs	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	18d3      	adds	r3, r2, r3
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b006      	add	sp, #24
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	0801a668 	.word	0x0801a668
 8006800:	ffffbfef 	.word	0xffffbfef

08006804 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8006814:	4a0c      	ldr	r2, [pc, #48]	; (8006848 <LL_DMA_SetMode+0x44>)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	18d3      	adds	r3, r2, r3
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	001a      	movs	r2, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	18d3      	adds	r3, r2, r3
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2220      	movs	r2, #32
 8006826:	4393      	bics	r3, r2
 8006828:	0019      	movs	r1, r3
 800682a:	4a07      	ldr	r2, [pc, #28]	; (8006848 <LL_DMA_SetMode+0x44>)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	18d3      	adds	r3, r2, r3
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	001a      	movs	r2, r3
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	18d3      	adds	r3, r2, r3
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
             Mode);
}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	46bd      	mov	sp, r7
 8006842:	b006      	add	sp, #24
 8006844:	bd80      	pop	{r7, pc}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	0801a668 	.word	0x0801a668

0800684c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800685c:	4a0c      	ldr	r2, [pc, #48]	; (8006890 <LL_DMA_SetPeriphIncMode+0x44>)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	18d3      	adds	r3, r2, r3
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	001a      	movs	r2, r3
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	18d3      	adds	r3, r2, r3
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2240      	movs	r2, #64	; 0x40
 800686e:	4393      	bics	r3, r2
 8006870:	0019      	movs	r1, r3
 8006872:	4a07      	ldr	r2, [pc, #28]	; (8006890 <LL_DMA_SetPeriphIncMode+0x44>)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	18d3      	adds	r3, r2, r3
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	001a      	movs	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	18d3      	adds	r3, r2, r3
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	430a      	orrs	r2, r1
 8006884:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	46bd      	mov	sp, r7
 800688a:	b006      	add	sp, #24
 800688c:	bd80      	pop	{r7, pc}
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	0801a668 	.word	0x0801a668

08006894 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80068a4:	4a0c      	ldr	r2, [pc, #48]	; (80068d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	18d3      	adds	r3, r2, r3
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	001a      	movs	r2, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	18d3      	adds	r3, r2, r3
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2280      	movs	r2, #128	; 0x80
 80068b6:	4393      	bics	r3, r2
 80068b8:	0019      	movs	r1, r3
 80068ba:	4a07      	ldr	r2, [pc, #28]	; (80068d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	18d3      	adds	r3, r2, r3
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	001a      	movs	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	18d3      	adds	r3, r2, r3
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b006      	add	sp, #24
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	0801a668 	.word	0x0801a668

080068dc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80068ec:	4a0c      	ldr	r2, [pc, #48]	; (8006920 <LL_DMA_SetPeriphSize+0x44>)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	18d3      	adds	r3, r2, r3
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	001a      	movs	r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	18d3      	adds	r3, r2, r3
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a09      	ldr	r2, [pc, #36]	; (8006924 <LL_DMA_SetPeriphSize+0x48>)
 80068fe:	4013      	ands	r3, r2
 8006900:	0019      	movs	r1, r3
 8006902:	4a07      	ldr	r2, [pc, #28]	; (8006920 <LL_DMA_SetPeriphSize+0x44>)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	18d3      	adds	r3, r2, r3
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	001a      	movs	r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	18d3      	adds	r3, r2, r3
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	430a      	orrs	r2, r1
 8006914:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	46bd      	mov	sp, r7
 800691a:	b006      	add	sp, #24
 800691c:	bd80      	pop	{r7, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	0801a668 	.word	0x0801a668
 8006924:	fffffcff 	.word	0xfffffcff

08006928 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8006938:	4a0c      	ldr	r2, [pc, #48]	; (800696c <LL_DMA_SetMemorySize+0x44>)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	18d3      	adds	r3, r2, r3
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	001a      	movs	r2, r3
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	18d3      	adds	r3, r2, r3
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a09      	ldr	r2, [pc, #36]	; (8006970 <LL_DMA_SetMemorySize+0x48>)
 800694a:	4013      	ands	r3, r2
 800694c:	0019      	movs	r1, r3
 800694e:	4a07      	ldr	r2, [pc, #28]	; (800696c <LL_DMA_SetMemorySize+0x44>)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	18d3      	adds	r3, r2, r3
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	001a      	movs	r2, r3
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	18d3      	adds	r3, r2, r3
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	430a      	orrs	r2, r1
 8006960:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	46bd      	mov	sp, r7
 8006966:	b006      	add	sp, #24
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	0801a668 	.word	0x0801a668
 8006970:	fffff3ff 	.word	0xfffff3ff

08006974 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8006984:	4a0c      	ldr	r2, [pc, #48]	; (80069b8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	18d3      	adds	r3, r2, r3
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	001a      	movs	r2, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	18d3      	adds	r3, r2, r3
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a09      	ldr	r2, [pc, #36]	; (80069bc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006996:	4013      	ands	r3, r2
 8006998:	0019      	movs	r1, r3
 800699a:	4a07      	ldr	r2, [pc, #28]	; (80069b8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	18d3      	adds	r3, r2, r3
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	001a      	movs	r2, r3
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	18d3      	adds	r3, r2, r3
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]
             Priority);
}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b006      	add	sp, #24
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	0801a668 	.word	0x0801a668
 80069bc:	ffffcfff 	.word	0xffffcfff

080069c0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	0a9b      	lsrs	r3, r3, #10
 80069d0:	4a0f      	ldr	r2, [pc, #60]	; (8006a10 <LL_DMA_SetPeriphRequest+0x50>)
 80069d2:	405a      	eors	r2, r3
 80069d4:	0013      	movs	r3, r2
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	18d3      	adds	r3, r2, r3
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4a0b      	ldr	r2, [pc, #44]	; (8006a14 <LL_DMA_SetPeriphRequest+0x54>)
 80069e6:	4694      	mov	ip, r2
 80069e8:	4463      	add	r3, ip
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	227f      	movs	r2, #127	; 0x7f
 80069ee:	4393      	bics	r3, r2
 80069f0:	0019      	movs	r1, r3
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	18d3      	adds	r3, r2, r3
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4a06      	ldr	r2, [pc, #24]	; (8006a14 <LL_DMA_SetPeriphRequest+0x54>)
 80069fc:	4694      	mov	ip, r2
 80069fe:	4463      	add	r3, ip
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	601a      	str	r2, [r3, #0]
}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b006      	add	sp, #24
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	00100080 	.word	0x00100080
 8006a14:	40020800 	.word	0x40020800

08006a18 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2201      	movs	r2, #1
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	601a      	str	r2, [r3, #0]
}
 8006a2c:	46c0      	nop			; (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b002      	add	sp, #8
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a03      	ldr	r2, [pc, #12]	; (8006a50 <LL_LPUART_DisableFIFO+0x1c>)
 8006a42:	401a      	ands	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]
}
 8006a48:	46c0      	nop			; (mov r8, r8)
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b002      	add	sp, #8
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	dfffffff 	.word	0xdfffffff

08006a54 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a62:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a64:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	2301      	movs	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f383 8810 	msr	PRIMASK, r3
}
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	08da      	lsrs	r2, r3, #3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	075b      	lsls	r3, r3, #29
 8006a80:	431a      	orrs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	609a      	str	r2, [r3, #8]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f383 8810 	msr	PRIMASK, r3
}
 8006a90:	46c0      	nop			; (mov r8, r8)
}
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b006      	add	sp, #24
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006aac:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f383 8810 	msr	PRIMASK, r3
}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	4a08      	ldr	r2, [pc, #32]	; (8006ae4 <LL_LPUART_SetRXFIFOThreshold+0x48>)
 8006ac2:	401a      	ands	r2, r3
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	065b      	lsls	r3, r3, #25
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	609a      	str	r2, [r3, #8]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f383 8810 	msr	PRIMASK, r3
}
 8006ad8:	46c0      	nop			; (mov r8, r8)
}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b006      	add	sp, #24
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	f1ffffff 	.word	0xf1ffffff

08006ae8 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	2380      	movs	r3, #128	; 0x80
 8006af6:	039b      	lsls	r3, r3, #14
 8006af8:	401a      	ands	r2, r3
 8006afa:	2380      	movs	r3, #128	; 0x80
 8006afc:	039b      	lsls	r3, r3, #14
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d101      	bne.n	8006b06 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	03db      	lsls	r3, r3, #15
 8006b20:	401a      	ands	r2, r3
 8006b22:	2380      	movs	r3, #128	; 0x80
 8006b24:	03db      	lsls	r3, r3, #15
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d101      	bne.n	8006b2e <LL_LPUART_IsActiveFlag_REACK+0x1e>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <LL_LPUART_IsActiveFlag_REACK+0x20>
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	0018      	movs	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b002      	add	sp, #8
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <LL_APB1_GRP1_EnableClock+0x28>)
 8006b42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006b44:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <LL_APB1_GRP1_EnableClock+0x28>)
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <LL_APB1_GRP1_EnableClock+0x28>)
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4013      	ands	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b56:	68fb      	ldr	r3, [r7, #12]
}
 8006b58:	46c0      	nop			; (mov r8, r8)
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b004      	add	sp, #16
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40021000 	.word	0x40021000

08006b64 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8006b6c:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <LL_IOP_GRP1_EnableClock+0x28>)
 8006b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <LL_IOP_GRP1_EnableClock+0x28>)
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <LL_IOP_GRP1_EnableClock+0x28>)
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b82:	68fb      	ldr	r3, [r7, #12]
}
 8006b84:	46c0      	nop			; (mov r8, r8)
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b004      	add	sp, #16
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40021000 	.word	0x40021000

08006b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b90:	b590      	push	{r4, r7, lr}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b96:	f003 f909 	bl	8009dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b9a:	f000 f81f 	bl	8006bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b9e:	f000 fa27 	bl	8006ff0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006ba2:	f000 fa01 	bl	8006fa8 <MX_DMA_Init>
  MX_UCPD1_Init();
 8006ba6:	f000 f959 	bl	8006e5c <MX_UCPD1_Init>
  MX_LPUART1_UART_Init();
 8006baa:	f000 f875 	bl	8006c98 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8006bae:	f00b fc19 	bl	80123e4 <MX_USBPD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006bb2:	1d3b      	adds	r3, r7, #4
 8006bb4:	4a07      	ldr	r2, [pc, #28]	; (8006bd4 <main+0x44>)
 8006bb6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006bb8:	c313      	stmia	r3!, {r0, r1, r4}
 8006bba:	ca03      	ldmia	r2!, {r0, r1}
 8006bbc:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f009 fc01 	bl	80103ca <osThreadCreate>
 8006bc8:	0002      	movs	r2, r0
 8006bca:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <main+0x48>)
 8006bcc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8006bce:	f009 fbf4 	bl	80103ba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006bd2:	e7fe      	b.n	8006bd2 <main+0x42>
 8006bd4:	08019b54 	.word	0x08019b54
 8006bd8:	20000240 	.word	0x20000240

08006bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006bdc:	b590      	push	{r4, r7, lr}
 8006bde:	b095      	sub	sp, #84	; 0x54
 8006be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006be2:	2414      	movs	r4, #20
 8006be4:	193b      	adds	r3, r7, r4
 8006be6:	0018      	movs	r0, r3
 8006be8:	233c      	movs	r3, #60	; 0x3c
 8006bea:	001a      	movs	r2, r3
 8006bec:	2100      	movs	r1, #0
 8006bee:	f012 fbb3 	bl	8019358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bf2:	1d3b      	adds	r3, r7, #4
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	2310      	movs	r3, #16
 8006bf8:	001a      	movs	r2, r3
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	f012 fbac 	bl	8019358 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c00:	2380      	movs	r3, #128	; 0x80
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	0018      	movs	r0, r3
 8006c06:	f004 fd37 	bl	800b678 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c0a:	193b      	adds	r3, r7, r4
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c10:	193b      	adds	r3, r7, r4
 8006c12:	2280      	movs	r2, #128	; 0x80
 8006c14:	0052      	lsls	r2, r2, #1
 8006c16:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006c18:	0021      	movs	r1, r4
 8006c1a:	187b      	adds	r3, r7, r1
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c20:	187b      	adds	r3, r7, r1
 8006c22:	2240      	movs	r2, #64	; 0x40
 8006c24:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c26:	187b      	adds	r3, r7, r1
 8006c28:	2202      	movs	r2, #2
 8006c2a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	2202      	movs	r2, #2
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006c32:	187b      	adds	r3, r7, r1
 8006c34:	2200      	movs	r2, #0
 8006c36:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8006c38:	187b      	adds	r3, r7, r1
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006c3e:	187b      	adds	r3, r7, r1
 8006c40:	2280      	movs	r2, #128	; 0x80
 8006c42:	0292      	lsls	r2, r2, #10
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006c46:	187b      	adds	r3, r7, r1
 8006c48:	2280      	movs	r2, #128	; 0x80
 8006c4a:	0492      	lsls	r2, r2, #18
 8006c4c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006c4e:	187b      	adds	r3, r7, r1
 8006c50:	2280      	movs	r2, #128	; 0x80
 8006c52:	0592      	lsls	r2, r2, #22
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c56:	187b      	adds	r3, r7, r1
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f004 fd59 	bl	800b710 <HAL_RCC_OscConfig>
 8006c5e:	1e03      	subs	r3, r0, #0
 8006c60:	d001      	beq.n	8006c66 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8006c62:	f000 f9ef 	bl	8007044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	2207      	movs	r2, #7
 8006c6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c6c:	1d3b      	adds	r3, r7, #4
 8006c6e:	2202      	movs	r2, #2
 8006c70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	2200      	movs	r2, #0
 8006c76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006c7e:	1d3b      	adds	r3, r7, #4
 8006c80:	2102      	movs	r1, #2
 8006c82:	0018      	movs	r0, r3
 8006c84:	f005 f8a4 	bl	800bdd0 <HAL_RCC_ClockConfig>
 8006c88:	1e03      	subs	r3, r0, #0
 8006c8a:	d001      	beq.n	8006c90 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8006c8c:	f000 f9da 	bl	8007044 <Error_Handler>
  }
}
 8006c90:	46c0      	nop			; (mov r8, r8)
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b015      	add	sp, #84	; 0x54
 8006c96:	bd90      	pop	{r4, r7, pc}

08006c98 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006c98:	b590      	push	{r4, r7, lr}
 8006c9a:	b0a1      	sub	sp, #132	; 0x84
 8006c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8006c9e:	2364      	movs	r3, #100	; 0x64
 8006ca0:	18fb      	adds	r3, r7, r3
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	231c      	movs	r3, #28
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	2100      	movs	r1, #0
 8006caa:	f012 fb55 	bl	8019358 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cae:	234c      	movs	r3, #76	; 0x4c
 8006cb0:	18fb      	adds	r3, r7, r3
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	2318      	movs	r3, #24
 8006cb6:	001a      	movs	r2, r3
 8006cb8:	2100      	movs	r1, #0
 8006cba:	f012 fb4d 	bl	8019358 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006cbe:	003b      	movs	r3, r7
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	234c      	movs	r3, #76	; 0x4c
 8006cc4:	001a      	movs	r2, r3
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	f012 fb46 	bl	8019358 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006ccc:	003b      	movs	r3, r7
 8006cce:	2210      	movs	r2, #16
 8006cd0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006cd2:	003b      	movs	r3, r7
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006cd8:	003b      	movs	r3, r7
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f005 fa22 	bl	800c124 <HAL_RCCEx_PeriphCLKConfig>
 8006ce0:	1e03      	subs	r3, r0, #0
 8006ce2:	d001      	beq.n	8006ce8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8006ce4:	f000 f9ae 	bl	8007044 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	035b      	lsls	r3, r3, #13
 8006cec:	0018      	movs	r0, r3
 8006cee:	f7ff ff23 	bl	8006b38 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	f7ff ff36 	bl	8006b64 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8006cf8:	244c      	movs	r4, #76	; 0x4c
 8006cfa:	193b      	adds	r3, r7, r4
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006d00:	193b      	adds	r3, r7, r4
 8006d02:	2202      	movs	r2, #2
 8006d04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d06:	193b      	adds	r3, r7, r4
 8006d08:	2200      	movs	r2, #0
 8006d0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d0c:	193b      	adds	r3, r7, r4
 8006d0e:	2200      	movs	r2, #0
 8006d10:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d12:	193b      	adds	r3, r7, r4
 8006d14:	2200      	movs	r2, #0
 8006d16:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8006d18:	193b      	adds	r3, r7, r4
 8006d1a:	2206      	movs	r2, #6
 8006d1c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d1e:	193a      	adds	r2, r7, r4
 8006d20:	23a0      	movs	r3, #160	; 0xa0
 8006d22:	05db      	lsls	r3, r3, #23
 8006d24:	0011      	movs	r1, r2
 8006d26:	0018      	movs	r0, r3
 8006d28:	f005 fec6 	bl	800cab8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8006d2c:	0021      	movs	r1, r4
 8006d2e:	187b      	adds	r3, r7, r1
 8006d30:	2208      	movs	r2, #8
 8006d32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006d34:	187b      	adds	r3, r7, r1
 8006d36:	2202      	movs	r2, #2
 8006d38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d3a:	187b      	adds	r3, r7, r1
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d40:	187b      	adds	r3, r7, r1
 8006d42:	2200      	movs	r2, #0
 8006d44:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d46:	187b      	adds	r3, r7, r1
 8006d48:	2200      	movs	r2, #0
 8006d4a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8006d4c:	187b      	adds	r3, r7, r1
 8006d4e:	2206      	movs	r2, #6
 8006d50:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d52:	187a      	adds	r2, r7, r1
 8006d54:	23a0      	movs	r3, #160	; 0xa0
 8006d56:	05db      	lsls	r3, r3, #23
 8006d58:	0011      	movs	r1, r2
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f005 feac 	bl	800cab8 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_TX);
 8006d60:	4b3c      	ldr	r3, [pc, #240]	; (8006e54 <MX_LPUART1_UART_Init+0x1bc>)
 8006d62:	220f      	movs	r2, #15
 8006d64:	2102      	movs	r1, #2
 8006d66:	0018      	movs	r0, r3
 8006d68:	f7ff fe2a 	bl	80069c0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8006d6c:	4b39      	ldr	r3, [pc, #228]	; (8006e54 <MX_LPUART1_UART_Init+0x1bc>)
 8006d6e:	2210      	movs	r2, #16
 8006d70:	2102      	movs	r1, #2
 8006d72:	0018      	movs	r0, r3
 8006d74:	f7ff fd20 	bl	80067b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8006d78:	4b36      	ldr	r3, [pc, #216]	; (8006e54 <MX_LPUART1_UART_Init+0x1bc>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7ff fdf8 	bl	8006974 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8006d84:	4b33      	ldr	r3, [pc, #204]	; (8006e54 <MX_LPUART1_UART_Init+0x1bc>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	2102      	movs	r1, #2
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7ff fd3a 	bl	8006804 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8006d90:	4b30      	ldr	r3, [pc, #192]	; (8006e54 <MX_LPUART1_UART_Init+0x1bc>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	2102      	movs	r1, #2
 8006d96:	0018      	movs	r0, r3
 8006d98:	f7ff fd58 	bl	800684c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8006d9c:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <MX_LPUART1_UART_Init+0x1bc>)
 8006d9e:	2280      	movs	r2, #128	; 0x80
 8006da0:	2102      	movs	r1, #2
 8006da2:	0018      	movs	r0, r3
 8006da4:	f7ff fd76 	bl	8006894 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8006da8:	4b2a      	ldr	r3, [pc, #168]	; (8006e54 <MX_LPUART1_UART_Init+0x1bc>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	2102      	movs	r1, #2
 8006dae:	0018      	movs	r0, r3
 8006db0:	f7ff fd94 	bl	80068dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8006db4:	4b27      	ldr	r3, [pc, #156]	; (8006e54 <MX_LPUART1_UART_Init+0x1bc>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	2102      	movs	r1, #2
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f7ff fdb4 	bl	8006928 <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 3);
 8006dc0:	2103      	movs	r1, #3
 8006dc2:	201d      	movs	r0, #29
 8006dc4:	f7ff fc8a 	bl	80066dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8006dc8:	201d      	movs	r0, #29
 8006dca:	f7ff fc6d 	bl	80066a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8006dce:	2164      	movs	r1, #100	; 0x64
 8006dd0:	187b      	adds	r3, r7, r1
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.BaudRate = 921600;
 8006dd6:	187b      	adds	r3, r7, r1
 8006dd8:	22e1      	movs	r2, #225	; 0xe1
 8006dda:	0312      	lsls	r2, r2, #12
 8006ddc:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_7B;
 8006dde:	187b      	adds	r3, r7, r1
 8006de0:	2280      	movs	r2, #128	; 0x80
 8006de2:	0552      	lsls	r2, r2, #21
 8006de4:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8006de6:	187b      	adds	r3, r7, r1
 8006de8:	2200      	movs	r2, #0
 8006dea:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8006dec:	187b      	adds	r3, r7, r1
 8006dee:	2200      	movs	r2, #0
 8006df0:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8006df2:	187b      	adds	r3, r7, r1
 8006df4:	220c      	movs	r2, #12
 8006df6:	615a      	str	r2, [r3, #20]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8006df8:	187b      	adds	r3, r7, r1
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	619a      	str	r2, [r3, #24]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8006dfe:	187b      	adds	r3, r7, r1
 8006e00:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <MX_LPUART1_UART_Init+0x1c0>)
 8006e02:	0019      	movs	r1, r3
 8006e04:	0010      	movs	r0, r2
 8006e06:	f005 ff3f 	bl	800cc88 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8006e0a:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <MX_LPUART1_UART_Init+0x1c0>)
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f7ff fe20 	bl	8006a54 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8006e14:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <MX_LPUART1_UART_Init+0x1c0>)
 8006e16:	2100      	movs	r1, #0
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f7ff fe3f 	bl	8006a9c <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <MX_LPUART1_UART_Init+0x1c0>)
 8006e20:	0018      	movs	r0, r3
 8006e22:	f7ff fe07 	bl	8006a34 <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <MX_LPUART1_UART_Init+0x1c0>)
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f7ff fdf5 	bl	8006a18 <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <MX_LPUART1_UART_Init+0x1c0>)
 8006e32:	0018      	movs	r0, r3
 8006e34:	f7ff fe58 	bl	8006ae8 <LL_LPUART_IsActiveFlag_TEACK>
 8006e38:	1e03      	subs	r3, r0, #0
 8006e3a:	d0f9      	beq.n	8006e30 <MX_LPUART1_UART_Init+0x198>
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <MX_LPUART1_UART_Init+0x1c0>)
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f7ff fe66 	bl	8006b10 <LL_LPUART_IsActiveFlag_REACK>
 8006e44:	1e03      	subs	r3, r0, #0
 8006e46:	d0f3      	beq.n	8006e30 <MX_LPUART1_UART_Init+0x198>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006e48:	46c0      	nop			; (mov r8, r8)
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b021      	add	sp, #132	; 0x84
 8006e50:	bd90      	pop	{r4, r7, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	40020000 	.word	0x40020000
 8006e58:	40008000 	.word	0x40008000

08006e5c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e62:	003b      	movs	r3, r7
 8006e64:	0018      	movs	r0, r3
 8006e66:	2318      	movs	r3, #24
 8006e68:	001a      	movs	r2, r3
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	f012 fa74 	bl	8019358 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8006e70:	2380      	movs	r3, #128	; 0x80
 8006e72:	049b      	lsls	r3, r3, #18
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7ff fe5f 	bl	8006b38 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8006e7a:	2002      	movs	r0, #2
 8006e7c:	f7ff fe72 	bl	8006b64 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8006e80:	2001      	movs	r0, #1
 8006e82:	f7ff fe6f 	bl	8006b64 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8006e86:	003b      	movs	r3, r7
 8006e88:	2280      	movs	r2, #128	; 0x80
 8006e8a:	0212      	lsls	r2, r2, #8
 8006e8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006e8e:	003b      	movs	r3, r7
 8006e90:	2203      	movs	r2, #3
 8006e92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e94:	003b      	movs	r3, r7
 8006e96:	2200      	movs	r2, #0
 8006e98:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e9a:	003b      	movs	r3, r7
 8006e9c:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <MX_UCPD1_Init+0x144>)
 8006e9e:	0019      	movs	r1, r3
 8006ea0:	0010      	movs	r0, r2
 8006ea2:	f005 fe09 	bl	800cab8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8006ea6:	003b      	movs	r3, r7
 8006ea8:	2280      	movs	r2, #128	; 0x80
 8006eaa:	0052      	lsls	r2, r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006eae:	003b      	movs	r3, r7
 8006eb0:	2203      	movs	r2, #3
 8006eb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006eb4:	003b      	movs	r3, r7
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eba:	003a      	movs	r2, r7
 8006ebc:	23a0      	movs	r3, #160	; 0xa0
 8006ebe:	05db      	lsls	r3, r3, #23
 8006ec0:	0011      	movs	r1, r2
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f005 fdf8 	bl	800cab8 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD1_RX);
 8006ec8:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006eca:	223a      	movs	r2, #58	; 0x3a
 8006ecc:	2103      	movs	r1, #3
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7ff fd76 	bl	80069c0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8006ed4:	4b33      	ldr	r3, [pc, #204]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2103      	movs	r1, #3
 8006eda:	0018      	movs	r0, r3
 8006edc:	f7ff fc6c 	bl	80067b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8006ee0:	4b30      	ldr	r3, [pc, #192]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2103      	movs	r1, #3
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f7ff fd44 	bl	8006974 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2103      	movs	r1, #3
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7ff fc86 	bl	8006804 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	2103      	movs	r1, #3
 8006efe:	0018      	movs	r0, r3
 8006f00:	f7ff fca4 	bl	800684c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8006f04:	4b27      	ldr	r3, [pc, #156]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f06:	2280      	movs	r2, #128	; 0x80
 8006f08:	2103      	movs	r1, #3
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f7ff fcc2 	bl	8006894 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8006f10:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	2103      	movs	r1, #3
 8006f16:	0018      	movs	r0, r3
 8006f18:	f7ff fce0 	bl	80068dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8006f1c:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	2103      	movs	r1, #3
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff fd00 	bl	8006928 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8006f28:	4b1e      	ldr	r3, [pc, #120]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f2a:	223b      	movs	r2, #59	; 0x3b
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f7ff fd46 	bl	80069c0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8006f34:	4b1b      	ldr	r3, [pc, #108]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f36:	2210      	movs	r2, #16
 8006f38:	2101      	movs	r1, #1
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7ff fc3c 	bl	80067b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8006f40:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	2101      	movs	r1, #1
 8006f46:	0018      	movs	r0, r3
 8006f48:	f7ff fd14 	bl	8006974 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8006f4c:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2101      	movs	r1, #1
 8006f52:	0018      	movs	r0, r3
 8006f54:	f7ff fc56 	bl	8006804 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8006f58:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	0018      	movs	r0, r3
 8006f60:	f7ff fc74 	bl	800684c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f66:	2280      	movs	r2, #128	; 0x80
 8006f68:	2101      	movs	r1, #1
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f7ff fc92 	bl	8006894 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8006f70:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	2101      	movs	r1, #1
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7ff fcb0 	bl	80068dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <MX_UCPD1_Init+0x148>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2101      	movs	r1, #1
 8006f82:	0018      	movs	r0, r3
 8006f84:	f7ff fcd0 	bl	8006928 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 3);
 8006f88:	2103      	movs	r1, #3
 8006f8a:	2008      	movs	r0, #8
 8006f8c:	f7ff fba6 	bl	80066dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8006f90:	2008      	movs	r0, #8
 8006f92:	f7ff fb89 	bl	80066a8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b006      	add	sp, #24
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	50000400 	.word	0x50000400
 8006fa4:	40020000 	.word	0x40020000

08006fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <MX_DMA_Init+0x44>)
 8006fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb2:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <MX_DMA_Init+0x44>)
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <MX_DMA_Init+0x44>)
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	607b      	str	r3, [r7, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 8006fc6:	2103      	movs	r1, #3
 8006fc8:	200a      	movs	r0, #10
 8006fca:	f7ff fb87 	bl	80066dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006fce:	200a      	movs	r0, #10
 8006fd0:	f7ff fb6a 	bl	80066a8 <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 3, 0);
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2103      	movs	r1, #3
 8006fd8:	200b      	movs	r0, #11
 8006fda:	f003 f865 	bl	800a0a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8006fde:	200b      	movs	r0, #11
 8006fe0:	f003 f877 	bl	800a0d2 <HAL_NVIC_EnableIRQ>

}
 8006fe4:	46c0      	nop			; (mov r8, r8)
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b002      	add	sp, #8
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40021000 	.word	0x40021000

08006ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff6:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <MX_GPIO_Init+0x40>)
 8006ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <MX_GPIO_Init+0x40>)
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	430a      	orrs	r2, r1
 8007000:	635a      	str	r2, [r3, #52]	; 0x34
 8007002:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <MX_GPIO_Init+0x40>)
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	2201      	movs	r2, #1
 8007008:	4013      	ands	r3, r2
 800700a:	607b      	str	r3, [r7, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <MX_GPIO_Init+0x40>)
 8007010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <MX_GPIO_Init+0x40>)
 8007014:	2102      	movs	r1, #2
 8007016:	430a      	orrs	r2, r1
 8007018:	635a      	str	r2, [r3, #52]	; 0x34
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <MX_GPIO_Init+0x40>)
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	2202      	movs	r2, #2
 8007020:	4013      	ands	r3, r2
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	46bd      	mov	sp, r7
 800702a:	b002      	add	sp, #8
 800702c:	bd80      	pop	{r7, pc}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	40021000 	.word	0x40021000

08007034 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800703c:	2001      	movs	r0, #1
 800703e:	f009 f9f4 	bl	801042a <osDelay>
 8007042:	e7fb      	b.n	800703c <StartDefaultTask+0x8>

08007044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007048:	b672      	cpsid	i
}
 800704a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800704c:	e7fe      	b.n	800704c <Error_Handler+0x8>
	...

08007050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007056:	4b15      	ldr	r3, [pc, #84]	; (80070ac <HAL_MspInit+0x5c>)
 8007058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800705a:	4b14      	ldr	r3, [pc, #80]	; (80070ac <HAL_MspInit+0x5c>)
 800705c:	2101      	movs	r1, #1
 800705e:	430a      	orrs	r2, r1
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
 8007062:	4b12      	ldr	r3, [pc, #72]	; (80070ac <HAL_MspInit+0x5c>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	2201      	movs	r2, #1
 8007068:	4013      	ands	r3, r2
 800706a:	607b      	str	r3, [r7, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800706e:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <HAL_MspInit+0x5c>)
 8007070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007072:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <HAL_MspInit+0x5c>)
 8007074:	2180      	movs	r1, #128	; 0x80
 8007076:	0549      	lsls	r1, r1, #21
 8007078:	430a      	orrs	r2, r1
 800707a:	63da      	str	r2, [r3, #60]	; 0x3c
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <HAL_MspInit+0x5c>)
 800707e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007080:	2380      	movs	r3, #128	; 0x80
 8007082:	055b      	lsls	r3, r3, #21
 8007084:	4013      	ands	r3, r2
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800708a:	2302      	movs	r3, #2
 800708c:	425b      	negs	r3, r3
 800708e:	2200      	movs	r2, #0
 8007090:	2103      	movs	r1, #3
 8007092:	0018      	movs	r0, r3
 8007094:	f003 f808 	bl	800a0a8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007098:	23c0      	movs	r3, #192	; 0xc0
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	0018      	movs	r0, r3
 800709e:	f002 ff2f 	bl	8009f00 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b002      	add	sp, #8
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	40021000 	.word	0x40021000

080070b0 <LL_EXTI_IsActiveFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFallingFlag_0_31(uint32_t ExtiLine)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	4013      	ands	r3, r2
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d101      	bne.n	80070ca <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	0018      	movs	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b002      	add	sp, #8
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40021800 	.word	0x40021800

080070d8 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	611a      	str	r2, [r3, #16]
}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b002      	add	sp, #8
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	40021800 	.word	0x40021800

080070f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80070f8:	e7fe      	b.n	80070f8 <NMI_Handler+0x4>

080070fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070fe:	e7fe      	b.n	80070fe <HardFault_Handler+0x4>

08007100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007104:	f002 febc 	bl	8009e80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007108:	f00a fdbc 	bl	8011c84 <xTaskGetSchedulerState>
 800710c:	0003      	movs	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d001      	beq.n	8007116 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8007112:	f00a ff79 	bl	8012008 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  USBPD_DPM_TimerCounter();
 8007116:	f00b fafb 	bl	8012710 <USBPD_DPM_TimerCounter>
  GUI_TimerCounter();
 800711a:	f00e facb 	bl	80156b4 <GUI_TimerCounter>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8007128:	f007 f9f8 	bl	800e51c <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 800712c:	46c0      	nop			; (mov r8, r8)
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  TRACER_EMB_IRQHandlerDMA();
 8007136:	f011 f821 	bl	801817c <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  TRACER_EMB_IRQHandlerUSART();
 800714e:	f011 f81c 	bl	801818a <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <EXTI4_15_IRQHandler>:
  * @brief  This function handles the external line 4_15 interrupt request.
  *         (Associated to FLGn line in case of TCPP0203 management)
  * @retval None
  */
void TCPP0203_PORT0_FLG_EXTI_IRQHANDLER(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* Manage Flags */
  if (TCPP0203_PORT0_FLG_EXTI_IS_ACTIVE_FLAG() != RESET)
 800715c:	2020      	movs	r0, #32
 800715e:	f7ff ffa7 	bl	80070b0 <LL_EXTI_IsActiveFallingFlag_0_31>
 8007162:	1e03      	subs	r3, r0, #0
 8007164:	d005      	beq.n	8007172 <EXTI4_15_IRQHandler+0x1a>
  {
    /* Call BSP USBPD PWR callback */
    BSP_USBPD_PWR_EventCallback(USBPD_PWR_TYPE_C_PORT_1);
 8007166:	2000      	movs	r0, #0
 8007168:	f002 f94a 	bl	8009400 <BSP_USBPD_PWR_EventCallback>

    /* Clear Flag */
    TCPP0203_PORT0_FLG_EXTI_CLEAR_FLAG();
 800716c:	2020      	movs	r0, #32
 800716e:	f7ff ffb3 	bl	80070d8 <LL_EXTI_ClearFallingFlag_0_31>
  }
}
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007180:	4a14      	ldr	r2, [pc, #80]	; (80071d4 <_sbrk+0x5c>)
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <_sbrk+0x60>)
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800718c:	4b13      	ldr	r3, [pc, #76]	; (80071dc <_sbrk+0x64>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <_sbrk+0x64>)
 8007196:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <_sbrk+0x68>)
 8007198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800719a:	4b10      	ldr	r3, [pc, #64]	; (80071dc <_sbrk+0x64>)
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	18d3      	adds	r3, r2, r3
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d207      	bcs.n	80071b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071a8:	f012 f8f0 	bl	801938c <__errno>
 80071ac:	0003      	movs	r3, r0
 80071ae:	220c      	movs	r2, #12
 80071b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	425b      	negs	r3, r3
 80071b6:	e009      	b.n	80071cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071b8:	4b08      	ldr	r3, [pc, #32]	; (80071dc <_sbrk+0x64>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071be:	4b07      	ldr	r3, [pc, #28]	; (80071dc <_sbrk+0x64>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	18d2      	adds	r2, r2, r3
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <_sbrk+0x64>)
 80071c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80071ca:	68fb      	ldr	r3, [r7, #12]
}
 80071cc:	0018      	movs	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b006      	add	sp, #24
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20024000 	.word	0x20024000
 80071d8:	00000400 	.word	0x00000400
 80071dc:	20000244 	.word	0x20000244
 80071e0:	20003040 	.word	0x20003040

080071e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80071f0:	480d      	ldr	r0, [pc, #52]	; (8007228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80071f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80071f4:	f7ff fff6 	bl	80071e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80071f8:	480c      	ldr	r0, [pc, #48]	; (800722c <LoopForever+0x6>)
  ldr r1, =_edata
 80071fa:	490d      	ldr	r1, [pc, #52]	; (8007230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80071fc:	4a0d      	ldr	r2, [pc, #52]	; (8007234 <LoopForever+0xe>)
  movs r3, #0
 80071fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007200:	e002      	b.n	8007208 <LoopCopyDataInit>

08007202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007206:	3304      	adds	r3, #4

08007208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800720a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800720c:	d3f9      	bcc.n	8007202 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800720e:	4a0a      	ldr	r2, [pc, #40]	; (8007238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007210:	4c0a      	ldr	r4, [pc, #40]	; (800723c <LoopForever+0x16>)
  movs r3, #0
 8007212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007214:	e001      	b.n	800721a <LoopFillZerobss>

08007216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007218:	3204      	adds	r2, #4

0800721a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800721a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800721c:	d3fb      	bcc.n	8007216 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800721e:	f012 f8bb 	bl	8019398 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007222:	f7ff fcb5 	bl	8006b90 <main>

08007226 <LoopForever>:

LoopForever:
  b LoopForever
 8007226:	e7fe      	b.n	8007226 <LoopForever>
  ldr   r0, =_estack
 8007228:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800722c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007230:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8007234:	0801afe0 	.word	0x0801afe0
  ldr r2, =_sbss
 8007238:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800723c:	20003040 	.word	0x20003040

08007240 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007240:	e7fe      	b.n	8007240 <ADC1_COMP_IRQHandler>
	...

08007244 <TCPP0203_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Status of execution
  */
int32_t TCPP0203_RegisterBusIO(TCPP0203_Object_t *pObj, TCPP0203_IO_t *pIO)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <TCPP0203_RegisterBusIO+0x18>
  {
    ret = TCPP0203_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	425b      	negs	r3, r3
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e02d      	b.n	80072b8 <TCPP0203_RegisterBusIO+0x74>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	891a      	ldrh	r2, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695a      	ldr	r2, [r3, #20]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = TCPP0203_ReadRegWrap;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a0d      	ldr	r2, [pc, #52]	; (80072c4 <TCPP0203_RegisterBusIO+0x80>)
 8007290:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = TCPP0203_WriteRegWrap;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a0c      	ldr	r2, [pc, #48]	; (80072c8 <TCPP0203_RegisterBusIO+0x84>)
 8007296:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <TCPP0203_RegisterBusIO+0x6e>
    {
      ret = pObj->IO.Init();
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4798      	blx	r3
 80072ac:	0003      	movs	r3, r0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e002      	b.n	80072b8 <TCPP0203_RegisterBusIO+0x74>
    }
    else
    {
      ret = TCPP0203_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	425b      	negs	r3, r3
 80072b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80072b8:	68fb      	ldr	r3, [r7, #12]
}
 80072ba:	0018      	movs	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	b004      	add	sp, #16
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	08007961 	.word	0x08007961
 80072c8:	080079a5 	.word	0x080079a5

080072cc <TCPP0203_Init>:
  * @brief  Initializes the TCPP0203 interface
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_Init(TCPP0203_Object_t *pObj)
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2224      	movs	r2, #36	; 0x24
 80072dc:	5c9b      	ldrb	r3, [r3, r2]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d11e      	bne.n	8007320 <TCPP0203_Init+0x54>
  {
    /* Read TCPP Device type */
    ret += tcpp0203_read_reg(&pObj->Ctx, TCPP0203_READ_REG2, &tmp, 1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3318      	adds	r3, #24
 80072e6:	0018      	movs	r0, r3
 80072e8:	240b      	movs	r4, #11
 80072ea:	193a      	adds	r2, r7, r4
 80072ec:	2301      	movs	r3, #1
 80072ee:	2102      	movs	r1, #2
 80072f0:	f000 fbbc 	bl	8007a6c <tcpp0203_read_reg>
 80072f4:	0002      	movs	r2, r0
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	189b      	adds	r3, r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

    if (ret == TCPP0203_OK)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d107      	bne.n	8007312 <TCPP0203_Init+0x46>
    {
      TCPP0203_DeviceType = (tmp & TCPP0203_DEVICE_TYPE_MSK);
 8007302:	193b      	adds	r3, r7, r4
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	227f      	movs	r2, #127	; 0x7f
 8007308:	4393      	bics	r3, r2
 800730a:	b2da      	uxtb	r2, r3
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <TCPP0203_Init+0x6c>)
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	e002      	b.n	8007318 <TCPP0203_Init+0x4c>
    }
    else
    {
      TCPP0203_DeviceType = TCPP0203_DEVICE_TYPE_02;
 8007312:	4b09      	ldr	r3, [pc, #36]	; (8007338 <TCPP0203_Init+0x6c>)
 8007314:	2280      	movs	r2, #128	; 0x80
 8007316:	701a      	strb	r2, [r3, #0]
    }
    pObj->IsInitialized = 1U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2224      	movs	r2, #36	; 0x24
 800731c:	2101      	movs	r1, #1
 800731e:	5499      	strb	r1, [r3, r2]
  }

  if (ret != TCPP0203_OK)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <TCPP0203_Init+0x60>
  {
    ret = TCPP0203_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	425b      	negs	r3, r3
 800732a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	0018      	movs	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	b005      	add	sp, #20
 8007334:	bd90      	pop	{r4, r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	20000248 	.word	0x20000248

0800733c <TCPP0203_DeInit>:
  * @brief  Deinitializes the TCPP0203 interface
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_DeInit(TCPP0203_Object_t *pObj)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2224      	movs	r2, #36	; 0x24
 8007348:	5c9b      	ldrb	r3, [r3, r2]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d106      	bne.n	800735c <TCPP0203_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    pObj->IO.DeInit();
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4798      	blx	r3

    pObj->IsInitialized = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2224      	movs	r2, #36	; 0x24
 8007358:	2100      	movs	r1, #0
 800735a:	5499      	strb	r1, [r3, r2]
  }

  return TCPP0203_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	0018      	movs	r0, r3
 8007360:	46bd      	mov	sp, r7
 8007362:	b002      	add	sp, #8
 8007364:	bd80      	pop	{r7, pc}

08007366 <TCPP0203_Reset>:
  * @brief  Resets TCPP0203 register (Reg0)
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_Reset(TCPP0203_Object_t *pObj)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  int32_t ret = TCPP0203_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = TCPP0203_REG0_RST_VALUE;
 8007372:	210b      	movs	r1, #11
 8007374:	187b      	adds	r3, r7, r1
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]

  /* Write reset values in Reg0 register */
  if (tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, &tmp, 1) != TCPP0203_OK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3318      	adds	r3, #24
 800737e:	0018      	movs	r0, r3
 8007380:	187a      	adds	r2, r7, r1
 8007382:	2301      	movs	r3, #1
 8007384:	2100      	movs	r1, #0
 8007386:	f000 fb90 	bl	8007aaa <tcpp0203_write_reg>
 800738a:	1e03      	subs	r3, r0, #0
 800738c:	d002      	beq.n	8007394 <TCPP0203_Reset+0x2e>
  {
    ret = TCPP0203_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	425b      	negs	r3, r3
 8007392:	60fb      	str	r3, [r7, #12]
#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = TCPP0203_REG0_RST_VALUE;
  Reg1_LastRead_Value = TCPP0203_REG0_RST_VALUE;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 8007394:	68fb      	ldr	r3, [r7, #12]
}
 8007396:	0018      	movs	r0, r3
 8007398:	46bd      	mov	sp, r7
 800739a:	b004      	add	sp, #16
 800739c:	bd80      	pop	{r7, pc}

0800739e <TCPP0203_SetVConnSwitch>:
  *          @arg TCPP0203_VCONN_SWITCH_CC1  VConn closed on CC1
  *          @arg TCPP0203_VCONN_SWITCH_CC2  VConn closed on CC2
  * @retval Component status
  */
int32_t TCPP0203_SetVConnSwitch(TCPP0203_Object_t *pObj, uint8_t VConnSwitch)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	000a      	movs	r2, r1
 80073a8:	1cfb      	adds	r3, r7, #3
 80073aa:	701a      	strb	r2, [r3, #0]
  int32_t ret = TCPP0203_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]

  if ((VConnSwitch != TCPP0203_VCONN_SWITCH_OPEN)
 80073b0:	1cfb      	adds	r3, r7, #3
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <TCPP0203_SetVConnSwitch+0x32>
      && (VConnSwitch != TCPP0203_VCONN_SWITCH_CC1)
 80073b8:	1cfb      	adds	r3, r7, #3
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d007      	beq.n	80073d0 <TCPP0203_SetVConnSwitch+0x32>
      && (VConnSwitch != TCPP0203_VCONN_SWITCH_CC2))
 80073c0:	1cfb      	adds	r3, r7, #3
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d003      	beq.n	80073d0 <TCPP0203_SetVConnSwitch+0x32>
  {
    ret = TCPP0203_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	425b      	negs	r3, r3
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	e00a      	b.n	80073e6 <TCPP0203_SetVConnSwitch+0x48>
  }
  else
  {
    /* Update VConn switch setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VConnSwitch, TCPP0203_VCONN_SWITCH_MSK);
 80073d0:	1cfb      	adds	r3, r7, #3
 80073d2:	7819      	ldrb	r1, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2203      	movs	r2, #3
 80073d8:	0018      	movs	r0, r3
 80073da:	f000 fb05 	bl	80079e8 <TCPP0203_ModifyReg0>
 80073de:	0002      	movs	r2, r0
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80073e6:	68fb      	ldr	r3, [r7, #12]
}
 80073e8:	0018      	movs	r0, r3
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b004      	add	sp, #16
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <TCPP0203_SetGateDriverProvider>:
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_OPEN    GDP Switch Load Open
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_CLOSED  GDP Switch Load closed
  * @retval Component status
  */
int32_t TCPP0203_SetGateDriverProvider(TCPP0203_Object_t *pObj, uint8_t GateDriverProvider)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	000a      	movs	r2, r1
 80073fa:	1cfb      	adds	r3, r7, #3
 80073fc:	701a      	strb	r2, [r3, #0]
  int32_t ret = TCPP0203_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]

  if ((GateDriverProvider != TCPP0203_GD_PROVIDER_SWITCH_OPEN)
 8007402:	1cfb      	adds	r3, r7, #3
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <TCPP0203_SetGateDriverProvider+0x2a>
      && (GateDriverProvider != TCPP0203_GD_PROVIDER_SWITCH_CLOSED))
 800740a:	1cfb      	adds	r3, r7, #3
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b04      	cmp	r3, #4
 8007410:	d003      	beq.n	800741a <TCPP0203_SetGateDriverProvider+0x2a>
  {
    ret = TCPP0203_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	425b      	negs	r3, r3
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	e01d      	b.n	8007456 <TCPP0203_SetGateDriverProvider+0x66>
  }
  else
  {
    /* Update GDP Switch Load setting in Writing register Reg0 */
    if (GateDriverProvider == TCPP0203_GD_PROVIDER_SWITCH_CLOSED)
 800741a:	1cfb      	adds	r3, r7, #3
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b04      	cmp	r3, #4
 8007420:	d10e      	bne.n	8007440 <TCPP0203_SetGateDriverProvider+0x50>
    {
      /* If Gate Driver Provider is to be closed, Gate Driver Consumer should be open */
      ret += TCPP0203_ModifyReg0(pObj, (GateDriverProvider | TCPP0203_GD_CONSUMER_SWITCH_OPEN),
 8007422:	1cfb      	adds	r3, r7, #3
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2208      	movs	r2, #8
 8007428:	4313      	orrs	r3, r2
 800742a:	b2d9      	uxtb	r1, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	220c      	movs	r2, #12
 8007430:	0018      	movs	r0, r3
 8007432:	f000 fad9 	bl	80079e8 <TCPP0203_ModifyReg0>
 8007436:	0002      	movs	r2, r0
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	189b      	adds	r3, r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	e00a      	b.n	8007456 <TCPP0203_SetGateDriverProvider+0x66>
                                 (TCPP0203_GD_PROVIDER_SWITCH_MSK | TCPP0203_GD_CONSUMER_SWITCH_MSK));
    }
    else
    {
      ret += TCPP0203_ModifyReg0(pObj, GateDriverProvider, TCPP0203_GD_PROVIDER_SWITCH_MSK);
 8007440:	1cfb      	adds	r3, r7, #3
 8007442:	7819      	ldrb	r1, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2204      	movs	r2, #4
 8007448:	0018      	movs	r0, r3
 800744a:	f000 facd 	bl	80079e8 <TCPP0203_ModifyReg0>
 800744e:	0002      	movs	r2, r0
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	189b      	adds	r3, r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	0018      	movs	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	b004      	add	sp, #16
 800745e:	bd80      	pop	{r7, pc}

08007460 <TCPP0203_SetGateDriverConsumer>:
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_OPEN    GDC Switch Load Open
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_CLOSED  GDC Switch Load closed
  * @retval Component status
  */
int32_t TCPP0203_SetGateDriverConsumer(TCPP0203_Object_t *pObj, uint8_t GateDriverConsumer)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	000a      	movs	r2, r1
 800746a:	1cfb      	adds	r3, r7, #3
 800746c:	701a      	strb	r2, [r3, #0]
  int32_t ret = TCPP0203_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]

  /* Check if TCPP type is TCPP03. Otherwise, return error */
  if (TCPP0203_DeviceType != TCPP0203_DEVICE_TYPE_03)
 8007472:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <TCPP0203_SetGateDriverConsumer+0x78>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <TCPP0203_SetGateDriverConsumer+0x20>
  {
    return (TCPP0203_ERROR);
 800747a:	2301      	movs	r3, #1
 800747c:	425b      	negs	r3, r3
 800747e:	e027      	b.n	80074d0 <TCPP0203_SetGateDriverConsumer+0x70>
  }

  if ((GateDriverConsumer != TCPP0203_GD_CONSUMER_SWITCH_OPEN)
 8007480:	1cfb      	adds	r3, r7, #3
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d007      	beq.n	8007498 <TCPP0203_SetGateDriverConsumer+0x38>
      && (GateDriverConsumer != TCPP0203_GD_CONSUMER_SWITCH_CLOSED))
 8007488:	1cfb      	adds	r3, r7, #3
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <TCPP0203_SetGateDriverConsumer+0x38>
  {
    ret = TCPP0203_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	425b      	negs	r3, r3
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e01a      	b.n	80074ce <TCPP0203_SetGateDriverConsumer+0x6e>
  }
  else
  {
    /* Update GDC Switch Load setting in Writing register Reg0 */
    if (GateDriverConsumer == TCPP0203_GD_CONSUMER_SWITCH_CLOSED)
 8007498:	1cfb      	adds	r3, r7, #3
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <TCPP0203_SetGateDriverConsumer+0x58>
    {
      /* If Gate Driver Consumer is to be closed, Gate Driver Provider should be open */
      ret += TCPP0203_ModifyReg0(pObj, (GateDriverConsumer | TCPP0203_GD_PROVIDER_SWITCH_OPEN),
 80074a0:	1cfb      	adds	r3, r7, #3
 80074a2:	7819      	ldrb	r1, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	220c      	movs	r2, #12
 80074a8:	0018      	movs	r0, r3
 80074aa:	f000 fa9d 	bl	80079e8 <TCPP0203_ModifyReg0>
 80074ae:	0002      	movs	r2, r0
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	189b      	adds	r3, r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e00a      	b.n	80074ce <TCPP0203_SetGateDriverConsumer+0x6e>
                                 (TCPP0203_GD_PROVIDER_SWITCH_MSK | TCPP0203_GD_CONSUMER_SWITCH_MSK));
    }
    else
    {
      ret += TCPP0203_ModifyReg0(pObj, GateDriverConsumer, TCPP0203_GD_CONSUMER_SWITCH_MSK);
 80074b8:	1cfb      	adds	r3, r7, #3
 80074ba:	7819      	ldrb	r1, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2208      	movs	r2, #8
 80074c0:	0018      	movs	r0, r3
 80074c2:	f000 fa91 	bl	80079e8 <TCPP0203_ModifyReg0>
 80074c6:	0002      	movs	r2, r0
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	189b      	adds	r3, r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80074ce:	68fb      	ldr	r3, [r7, #12]
}
 80074d0:	0018      	movs	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b004      	add	sp, #16
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000248 	.word	0x20000248

080074dc <TCPP0203_SetPowerMode>:
  *          @arg TCPP0203_POWER_MODE_LOWPOWER     Low Power
  *          @arg TCPP0203_POWER_MODE_NORMAL       Normal
  * @retval Component status
  */
int32_t TCPP0203_SetPowerMode(TCPP0203_Object_t *pObj, uint8_t PowerMode)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	000a      	movs	r2, r1
 80074e6:	1cfb      	adds	r3, r7, #3
 80074e8:	701a      	strb	r2, [r3, #0]
  int32_t ret = TCPP0203_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]

  if ((PowerMode != TCPP0203_POWER_MODE_HIBERNATE)
 80074ee:	1cfb      	adds	r3, r7, #3
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <TCPP0203_SetPowerMode+0x32>
      && (PowerMode != TCPP0203_POWER_MODE_LOWPOWER)
 80074f6:	1cfb      	adds	r3, r7, #3
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d007      	beq.n	800750e <TCPP0203_SetPowerMode+0x32>
      && (PowerMode != TCPP0203_POWER_MODE_NORMAL))
 80074fe:	1cfb      	adds	r3, r7, #3
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b10      	cmp	r3, #16
 8007504:	d003      	beq.n	800750e <TCPP0203_SetPowerMode+0x32>
  {
    ret = TCPP0203_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	425b      	negs	r3, r3
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e00a      	b.n	8007524 <TCPP0203_SetPowerMode+0x48>
  }
  else
  {
    /* Update Power Mode setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, PowerMode, TCPP0203_POWER_MODE_MSK);
 800750e:	1cfb      	adds	r3, r7, #3
 8007510:	7819      	ldrb	r1, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2230      	movs	r2, #48	; 0x30
 8007516:	0018      	movs	r0, r3
 8007518:	f000 fa66 	bl	80079e8 <TCPP0203_ModifyReg0>
 800751c:	0002      	movs	r2, r0
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	189b      	adds	r3, r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007524:	68fb      	ldr	r3, [r7, #12]
}
 8007526:	0018      	movs	r0, r3
 8007528:	46bd      	mov	sp, r7
 800752a:	b004      	add	sp, #16
 800752c:	bd80      	pop	{r7, pc}

0800752e <TCPP0203_SetVBusDischarge>:
  *          @arg TCPP0203_VBUS_DISCHARGE_OFF    VBUS Discharge Off
  *          @arg TCPP0203_VBUS_DISCHARGE_ON     VBUS Discharge On
  * @retval Component status
  */
int32_t TCPP0203_SetVBusDischarge(TCPP0203_Object_t *pObj, uint8_t VBusDischarge)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	000a      	movs	r2, r1
 8007538:	1cfb      	adds	r3, r7, #3
 800753a:	701a      	strb	r2, [r3, #0]
  int32_t ret = TCPP0203_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]

  if ((VBusDischarge != TCPP0203_VBUS_DISCHARGE_OFF)
 8007540:	1cfb      	adds	r3, r7, #3
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <TCPP0203_SetVBusDischarge+0x2a>
      && (VBusDischarge != TCPP0203_VBUS_DISCHARGE_ON))
 8007548:	1cfb      	adds	r3, r7, #3
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d003      	beq.n	8007558 <TCPP0203_SetVBusDischarge+0x2a>
  {
    ret = TCPP0203_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	425b      	negs	r3, r3
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e00a      	b.n	800756e <TCPP0203_SetVBusDischarge+0x40>
  }
  else
  {
    /* Update VBUS Discharge setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VBusDischarge, TCPP0203_VBUS_DISCHARGE_MSK);
 8007558:	1cfb      	adds	r3, r7, #3
 800755a:	7819      	ldrb	r1, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2240      	movs	r2, #64	; 0x40
 8007560:	0018      	movs	r0, r3
 8007562:	f000 fa41 	bl	80079e8 <TCPP0203_ModifyReg0>
 8007566:	0002      	movs	r2, r0
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	189b      	adds	r3, r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	b004      	add	sp, #16
 8007576:	bd80      	pop	{r7, pc}

08007578 <TCPP0203_SetVConnDischarge>:
  *          @arg TCPP0203_VCONN_DISCHARGE_OFF    VConn Discharge Off
  *          @arg TCPP0203_VCONN_DISCHARGE_ON     VConn Discharge On
  * @retval Component status
  */
int32_t TCPP0203_SetVConnDischarge(TCPP0203_Object_t *pObj, uint8_t VConnDischarge)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	000a      	movs	r2, r1
 8007582:	1cfb      	adds	r3, r7, #3
 8007584:	701a      	strb	r2, [r3, #0]
  int32_t ret = TCPP0203_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

  if ((VConnDischarge != TCPP0203_VCONN_DISCHARGE_OFF)
 800758a:	1cfb      	adds	r3, r7, #3
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <TCPP0203_SetVConnDischarge+0x2a>
      && (VConnDischarge != TCPP0203_VCONN_DISCHARGE_ON))
 8007592:	1cfb      	adds	r3, r7, #3
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d003      	beq.n	80075a2 <TCPP0203_SetVConnDischarge+0x2a>
  {
    ret = TCPP0203_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	425b      	negs	r3, r3
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e00a      	b.n	80075b8 <TCPP0203_SetVConnDischarge+0x40>
  }
  else
  {
    /* Update VConn Discharge setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VConnDischarge, TCPP0203_VCONN_DISCHARGE_MSK);
 80075a2:	1cfb      	adds	r3, r7, #3
 80075a4:	7819      	ldrb	r1, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2280      	movs	r2, #128	; 0x80
 80075aa:	0018      	movs	r0, r3
 80075ac:	f000 fa1c 	bl	80079e8 <TCPP0203_ModifyReg0>
 80075b0:	0002      	movs	r2, r0
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	189b      	adds	r3, r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80075b8:	68fb      	ldr	r3, [r7, #12]
}
 80075ba:	0018      	movs	r0, r3
 80075bc:	46bd      	mov	sp, r7
 80075be:	b004      	add	sp, #16
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <TCPP0203_GetVConnSwitchAck>:
  *          @arg TCPP0203_VCONN_SWITCH_CC1  VConn closed on CC1 Ack
  *          @arg TCPP0203_VCONN_SWITCH_CC2  VConn closed on CC2 Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVConnSwitchAck(TCPP0203_Object_t *pObj, uint8_t *pVConnSwitchAck)
{
 80075c2:	b590      	push	{r4, r7, lr}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3318      	adds	r3, #24
 80075d0:	0018      	movs	r0, r3
 80075d2:	240b      	movs	r4, #11
 80075d4:	193a      	adds	r2, r7, r4
 80075d6:	2301      	movs	r3, #1
 80075d8:	2101      	movs	r1, #1
 80075da:	f000 fa47 	bl	8007a6c <tcpp0203_read_reg>
 80075de:	0003      	movs	r3, r0
 80075e0:	60fb      	str	r3, [r7, #12]
  *pVConnSwitchAck = (tmp & TCPP0203_VCONN_SWITCH_ACK_MSK);
 80075e2:	193b      	adds	r3, r7, r4
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2203      	movs	r2, #3
 80075e8:	4013      	ands	r3, r2
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	701a      	strb	r2, [r3, #0]

  return ret;
 80075f0:	68fb      	ldr	r3, [r7, #12]
}
 80075f2:	0018      	movs	r0, r3
 80075f4:	46bd      	mov	sp, r7
 80075f6:	b005      	add	sp, #20
 80075f8:	bd90      	pop	{r4, r7, pc}

080075fa <TCPP0203_GetGateDriverProviderAck>:
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_ACK_OPEN    Gate Driver Provider Open Ack
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_ACK_CLOSED  Gate Driver Provider Closed Ack
  * @retval Component status
  */
int32_t TCPP0203_GetGateDriverProviderAck(TCPP0203_Object_t *pObj, uint8_t *pGateDriverProviderAck)
{
 80075fa:	b590      	push	{r4, r7, lr}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3318      	adds	r3, #24
 8007608:	0018      	movs	r0, r3
 800760a:	240b      	movs	r4, #11
 800760c:	193a      	adds	r2, r7, r4
 800760e:	2301      	movs	r3, #1
 8007610:	2101      	movs	r1, #1
 8007612:	f000 fa2b 	bl	8007a6c <tcpp0203_read_reg>
 8007616:	0003      	movs	r3, r0
 8007618:	60fb      	str	r3, [r7, #12]
  *pGateDriverProviderAck = (tmp & TCPP0203_GD_PROVIDER_SWITCH_ACK_MSK);
 800761a:	193b      	adds	r3, r7, r4
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2204      	movs	r2, #4
 8007620:	4013      	ands	r3, r2
 8007622:	b2da      	uxtb	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	701a      	strb	r2, [r3, #0]

  return ret;
 8007628:	68fb      	ldr	r3, [r7, #12]
}
 800762a:	0018      	movs	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	b005      	add	sp, #20
 8007630:	bd90      	pop	{r4, r7, pc}
	...

08007634 <TCPP0203_GetGateDriverConsumerAck>:
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_ACK_OPEN    Gate Driver Consumer Open Ack
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_ACK_CLOSED  Gate Driver Consumer Closed Ack
  * @retval Component status
  */
int32_t TCPP0203_GetGateDriverConsumerAck(TCPP0203_Object_t *pObj, uint8_t *pGateDriverConsumerAck)
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Check if TCPP type is TCPP03. Otherwise, return error */
  if (TCPP0203_DeviceType != TCPP0203_DEVICE_TYPE_03)
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <TCPP0203_GetGateDriverConsumerAck+0x48>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <TCPP0203_GetGateDriverConsumerAck+0x18>
  {
    return (TCPP0203_ERROR);
 8007646:	2301      	movs	r3, #1
 8007648:	425b      	negs	r3, r3
 800764a:	e012      	b.n	8007672 <TCPP0203_GetGateDriverConsumerAck+0x3e>
  }

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3318      	adds	r3, #24
 8007650:	0018      	movs	r0, r3
 8007652:	240b      	movs	r4, #11
 8007654:	193a      	adds	r2, r7, r4
 8007656:	2301      	movs	r3, #1
 8007658:	2101      	movs	r1, #1
 800765a:	f000 fa07 	bl	8007a6c <tcpp0203_read_reg>
 800765e:	0003      	movs	r3, r0
 8007660:	60fb      	str	r3, [r7, #12]
  *pGateDriverConsumerAck = (tmp & TCPP0203_GD_CONSUMER_SWITCH_ACK_MSK);
 8007662:	193b      	adds	r3, r7, r4
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2208      	movs	r2, #8
 8007668:	4013      	ands	r3, r2
 800766a:	b2da      	uxtb	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	701a      	strb	r2, [r3, #0]

  return ret;
 8007670:	68fb      	ldr	r3, [r7, #12]
}
 8007672:	0018      	movs	r0, r3
 8007674:	46bd      	mov	sp, r7
 8007676:	b005      	add	sp, #20
 8007678:	bd90      	pop	{r4, r7, pc}
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	20000248 	.word	0x20000248

08007680 <TCPP0203_GetPowerModeAck>:
  *          @arg TCPP0203_POWER_MODE_ACK_LOWPOWER   Power Mode Low Power Ack
  *          @arg TCPP0203_POWER_MODE_ACK_NORMAL     Power Mode Normal Ack
  * @retval Component status
  */
int32_t TCPP0203_GetPowerModeAck(TCPP0203_Object_t *pObj, uint8_t *pPowerModeAck)
{
 8007680:	b590      	push	{r4, r7, lr}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3318      	adds	r3, #24
 800768e:	0018      	movs	r0, r3
 8007690:	240b      	movs	r4, #11
 8007692:	193a      	adds	r2, r7, r4
 8007694:	2301      	movs	r3, #1
 8007696:	2101      	movs	r1, #1
 8007698:	f000 f9e8 	bl	8007a6c <tcpp0203_read_reg>
 800769c:	0003      	movs	r3, r0
 800769e:	60fb      	str	r3, [r7, #12]
  *pPowerModeAck = (tmp & TCPP0203_POWER_MODE_ACK_MSK);
 80076a0:	193b      	adds	r3, r7, r4
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2230      	movs	r2, #48	; 0x30
 80076a6:	4013      	ands	r3, r2
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	701a      	strb	r2, [r3, #0]

  return ret;
 80076ae:	68fb      	ldr	r3, [r7, #12]
}
 80076b0:	0018      	movs	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b005      	add	sp, #20
 80076b6:	bd90      	pop	{r4, r7, pc}

080076b8 <TCPP0203_GetVBusDischargeAck>:
  *          @arg TCPP0203_VBUS_DISCHARGE_ACK_OFF   VBUS Discharge Off Ack
  *          @arg TCPP0203_VBUS_DISCHARGE_ACK_ON    VBUS Discharge On Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVBusDischargeAck(TCPP0203_Object_t *pObj, uint8_t *pVBusDischargeAck)
{
 80076b8:	b590      	push	{r4, r7, lr}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3318      	adds	r3, #24
 80076c6:	0018      	movs	r0, r3
 80076c8:	240b      	movs	r4, #11
 80076ca:	193a      	adds	r2, r7, r4
 80076cc:	2301      	movs	r3, #1
 80076ce:	2101      	movs	r1, #1
 80076d0:	f000 f9cc 	bl	8007a6c <tcpp0203_read_reg>
 80076d4:	0003      	movs	r3, r0
 80076d6:	60fb      	str	r3, [r7, #12]
  *pVBusDischargeAck = (tmp & TCPP0203_VBUS_DISCHARGE_ACK_MSK);
 80076d8:	193b      	adds	r3, r7, r4
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2240      	movs	r2, #64	; 0x40
 80076de:	4013      	ands	r3, r2
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	701a      	strb	r2, [r3, #0]

  return ret;
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	0018      	movs	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b005      	add	sp, #20
 80076ee:	bd90      	pop	{r4, r7, pc}

080076f0 <TCPP0203_GetVConnDischargeAck>:
  *          @arg TCPP0203_VCONN_DISCHARGE_ACK_OFF   VConn Discharge Off Ack
  *          @arg TCPP0203_VCONN_DISCHARGE_ACK_ON    VConn Discharge On Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVConnDischargeAck(TCPP0203_Object_t *pObj, uint8_t *pVConnDischargeAck)
{
 80076f0:	b590      	push	{r4, r7, lr}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3318      	adds	r3, #24
 80076fe:	0018      	movs	r0, r3
 8007700:	240b      	movs	r4, #11
 8007702:	193a      	adds	r2, r7, r4
 8007704:	2301      	movs	r3, #1
 8007706:	2101      	movs	r1, #1
 8007708:	f000 f9b0 	bl	8007a6c <tcpp0203_read_reg>
 800770c:	0003      	movs	r3, r0
 800770e:	60fb      	str	r3, [r7, #12]
  *pVConnDischargeAck = (tmp & TCPP0203_VCONN_DISCHARGE_ACK_MSK);
 8007710:	193b      	adds	r3, r7, r4
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	227f      	movs	r2, #127	; 0x7f
 8007716:	4393      	bics	r3, r2
 8007718:	b2da      	uxtb	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	701a      	strb	r2, [r3, #0]

  return ret;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	0018      	movs	r0, r3
 8007722:	46bd      	mov	sp, r7
 8007724:	b005      	add	sp, #20
 8007726:	bd90      	pop	{r4, r7, pc}

08007728 <TCPP0203_GetOCPVConnFlag>:
  *          @arg TCPP0203_FLAG_OCP_VCONN_RESET   OCP VConn flag not set
  *          @arg TCPP0203_FLAG_OCP_VCONN_SET     OCP VConn flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOCPVConnFlag(TCPP0203_Object_t *pObj, uint8_t *pOCPVConnFlag)
{
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3318      	adds	r3, #24
 8007736:	0018      	movs	r0, r3
 8007738:	240b      	movs	r4, #11
 800773a:	193a      	adds	r2, r7, r4
 800773c:	2301      	movs	r3, #1
 800773e:	2102      	movs	r1, #2
 8007740:	f000 f994 	bl	8007a6c <tcpp0203_read_reg>
 8007744:	0003      	movs	r3, r0
 8007746:	60fb      	str	r3, [r7, #12]
  *pOCPVConnFlag = (tmp & TCPP0203_FLAG_OCP_VCONN_MSK);
 8007748:	193b      	adds	r3, r7, r4
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2201      	movs	r2, #1
 800774e:	4013      	ands	r3, r2
 8007750:	b2da      	uxtb	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	701a      	strb	r2, [r3, #0]

  return ret;
 8007756:	68fb      	ldr	r3, [r7, #12]
}
 8007758:	0018      	movs	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	b005      	add	sp, #20
 800775e:	bd90      	pop	{r4, r7, pc}

08007760 <TCPP0203_GetOCPVBusFlag>:
  *          @arg TCPP0203_FLAG_OCP_VBUS_RESET   OCP VBUS flag not set
  *          @arg TCPP0203_FLAG_OCP_VBUS_SET     OCP VBUS flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOCPVBusFlag(TCPP0203_Object_t *pObj, uint8_t *pGetOCPVBusFlag)
{
 8007760:	b590      	push	{r4, r7, lr}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3318      	adds	r3, #24
 800776e:	0018      	movs	r0, r3
 8007770:	240b      	movs	r4, #11
 8007772:	193a      	adds	r2, r7, r4
 8007774:	2301      	movs	r3, #1
 8007776:	2102      	movs	r1, #2
 8007778:	f000 f978 	bl	8007a6c <tcpp0203_read_reg>
 800777c:	0003      	movs	r3, r0
 800777e:	60fb      	str	r3, [r7, #12]
  *pGetOCPVBusFlag = (tmp & TCPP0203_FLAG_OCP_VBUS_MSK);
 8007780:	193b      	adds	r3, r7, r4
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2202      	movs	r2, #2
 8007786:	4013      	ands	r3, r2
 8007788:	b2da      	uxtb	r2, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	701a      	strb	r2, [r3, #0]

  return ret;
 800778e:	68fb      	ldr	r3, [r7, #12]
}
 8007790:	0018      	movs	r0, r3
 8007792:	46bd      	mov	sp, r7
 8007794:	b005      	add	sp, #20
 8007796:	bd90      	pop	{r4, r7, pc}

08007798 <TCPP0203_GetOVPVBusFlag>:
  *          @arg TCPP0203_FLAG_OVP_VBUS_RESET   OVP VBUS flag not set
  *          @arg TCPP0203_FLAG_OVP_VBUS_SET     OVP VBUS flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOVPVBusFlag(TCPP0203_Object_t *pObj, uint8_t *pOVPVBusFlag)
{
 8007798:	b590      	push	{r4, r7, lr}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3318      	adds	r3, #24
 80077a6:	0018      	movs	r0, r3
 80077a8:	240b      	movs	r4, #11
 80077aa:	193a      	adds	r2, r7, r4
 80077ac:	2301      	movs	r3, #1
 80077ae:	2102      	movs	r1, #2
 80077b0:	f000 f95c 	bl	8007a6c <tcpp0203_read_reg>
 80077b4:	0003      	movs	r3, r0
 80077b6:	60fb      	str	r3, [r7, #12]
  *pOVPVBusFlag = (tmp & TCPP0203_FLAG_OVP_VBUS_MSK);
 80077b8:	193b      	adds	r3, r7, r4
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2204      	movs	r2, #4
 80077be:	4013      	ands	r3, r2
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	701a      	strb	r2, [r3, #0]

  return ret;
 80077c6:	68fb      	ldr	r3, [r7, #12]
}
 80077c8:	0018      	movs	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b005      	add	sp, #20
 80077ce:	bd90      	pop	{r4, r7, pc}

080077d0 <TCPP0203_GetOVPCCFlag>:
  *          @arg TCPP0203_FLAG_OVP_CC_RESET   OVP CC flag not set
  *          @arg TCPP0203_FLAG_OVP_CC_SET     OVP CC flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOVPCCFlag(TCPP0203_Object_t *pObj, uint8_t *pOVPCCFlag)
{
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3318      	adds	r3, #24
 80077de:	0018      	movs	r0, r3
 80077e0:	240b      	movs	r4, #11
 80077e2:	193a      	adds	r2, r7, r4
 80077e4:	2301      	movs	r3, #1
 80077e6:	2102      	movs	r1, #2
 80077e8:	f000 f940 	bl	8007a6c <tcpp0203_read_reg>
 80077ec:	0003      	movs	r3, r0
 80077ee:	60fb      	str	r3, [r7, #12]
  *pOVPCCFlag = (tmp & TCPP0203_FLAG_OVP_CC_MSK);
 80077f0:	193b      	adds	r3, r7, r4
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2208      	movs	r2, #8
 80077f6:	4013      	ands	r3, r2
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	701a      	strb	r2, [r3, #0]

  return ret;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	0018      	movs	r0, r3
 8007802:	46bd      	mov	sp, r7
 8007804:	b005      	add	sp, #20
 8007806:	bd90      	pop	{r4, r7, pc}

08007808 <TCPP0203_GetOTPFlag>:
  *          @arg TCPP0203_FLAG_OTP_RESET   Over Temperature flag not set
  *          @arg TCPP0203_FLAG_OTP_SET     Over Temperature flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOTPFlag(TCPP0203_Object_t *pObj, uint8_t *pOTPFlag)
{
 8007808:	b590      	push	{r4, r7, lr}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3318      	adds	r3, #24
 8007816:	0018      	movs	r0, r3
 8007818:	240b      	movs	r4, #11
 800781a:	193a      	adds	r2, r7, r4
 800781c:	2301      	movs	r3, #1
 800781e:	2102      	movs	r1, #2
 8007820:	f000 f924 	bl	8007a6c <tcpp0203_read_reg>
 8007824:	0003      	movs	r3, r0
 8007826:	60fb      	str	r3, [r7, #12]
  *pOTPFlag = (tmp & TCPP0203_FLAG_OTP_MSK);
 8007828:	193b      	adds	r3, r7, r4
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2210      	movs	r2, #16
 800782e:	4013      	ands	r3, r2
 8007830:	b2da      	uxtb	r2, r3
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	701a      	strb	r2, [r3, #0]

  return ret;
 8007836:	68fb      	ldr	r3, [r7, #12]
}
 8007838:	0018      	movs	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	b005      	add	sp, #20
 800783e:	bd90      	pop	{r4, r7, pc}

08007840 <TCPP0203_GetVBusOkFlag>:
  *          @arg TCPP0203_FLAG_VBUS_OK_RESET   VBUS OK flag not set
  *          @arg TCPP0203_FLAG_VBUS_OK_SET     VBUS OK flag set
  * @retval Component status
  */
int32_t TCPP0203_GetVBusOkFlag(TCPP0203_Object_t *pObj, uint8_t *pVBusOkFlag)
{
 8007840:	b590      	push	{r4, r7, lr}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3318      	adds	r3, #24
 800784e:	0018      	movs	r0, r3
 8007850:	240b      	movs	r4, #11
 8007852:	193a      	adds	r2, r7, r4
 8007854:	2301      	movs	r3, #1
 8007856:	2102      	movs	r1, #2
 8007858:	f000 f908 	bl	8007a6c <tcpp0203_read_reg>
 800785c:	0003      	movs	r3, r0
 800785e:	60fb      	str	r3, [r7, #12]
  *pVBusOkFlag = (tmp & TCPP0203_FLAG_VBUS_OK_MSK);
 8007860:	193b      	adds	r3, r7, r4
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2220      	movs	r2, #32
 8007866:	4013      	ands	r3, r2
 8007868:	b2da      	uxtb	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	701a      	strb	r2, [r3, #0]

  return ret;
 800786e:	68fb      	ldr	r3, [r7, #12]
}
 8007870:	0018      	movs	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	b005      	add	sp, #20
 8007876:	bd90      	pop	{r4, r7, pc}

08007878 <TCPP0203_ReadTCPPType>:
  *          @arg TCPP0203_DEVICE_TYPE_02   TCPP02 Type
  *          @arg TCPP0203_DEVICE_TYPE_03   TCPP03 Type
  * @retval Component status
  */
int32_t TCPP0203_ReadTCPPType(TCPP0203_Object_t *pObj, uint8_t *pTCPPType)
{
 8007878:	b590      	push	{r4, r7, lr}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3318      	adds	r3, #24
 8007886:	0018      	movs	r0, r3
 8007888:	240b      	movs	r4, #11
 800788a:	193a      	adds	r2, r7, r4
 800788c:	2301      	movs	r3, #1
 800788e:	2102      	movs	r1, #2
 8007890:	f000 f8ec 	bl	8007a6c <tcpp0203_read_reg>
 8007894:	0003      	movs	r3, r0
 8007896:	60fb      	str	r3, [r7, #12]
  *pTCPPType = (tmp & TCPP0203_DEVICE_TYPE_MSK);
 8007898:	193b      	adds	r3, r7, r4
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	227f      	movs	r2, #127	; 0x7f
 800789e:	4393      	bics	r3, r2
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	701a      	strb	r2, [r3, #0]

  return ret;
 80078a6:	68fb      	ldr	r3, [r7, #12]
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b005      	add	sp, #20
 80078ae:	bd90      	pop	{r4, r7, pc}

080078b0 <TCPP0203_ReadVCONNPower>:
  *          @arg TCPP0203_FLAG_VCONN_PWR_1W       OCP VConn flag not set
  *          @arg TCPP0203_FLAG_VCONN_PWR_0_1W     OCP VConn flag set
  * @retval Component status
  */
int32_t TCPP0203_ReadVCONNPower(TCPP0203_Object_t *pObj, uint8_t *pVCONNPower)
{
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3318      	adds	r3, #24
 80078be:	0018      	movs	r0, r3
 80078c0:	240b      	movs	r4, #11
 80078c2:	193a      	adds	r2, r7, r4
 80078c4:	2301      	movs	r3, #1
 80078c6:	2102      	movs	r1, #2
 80078c8:	f000 f8d0 	bl	8007a6c <tcpp0203_read_reg>
 80078cc:	0003      	movs	r3, r0
 80078ce:	60fb      	str	r3, [r7, #12]
  *pVCONNPower = (tmp & TCPP0203_FLAG_VCONN_PWR_MSK);
 80078d0:	193b      	adds	r3, r7, r4
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2240      	movs	r2, #64	; 0x40
 80078d6:	4013      	ands	r3, r2
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80078de:	68fb      	ldr	r3, [r7, #12]
}
 80078e0:	0018      	movs	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b005      	add	sp, #20
 80078e6:	bd90      	pop	{r4, r7, pc}

080078e8 <TCPP0203_WriteCtrlRegister>:
  * @param  pObj Pointer to component object
  * @param  pCtrlRegister Pointer on Ctrl register value
  * @retval Component status
  */
int32_t TCPP0203_WriteCtrlRegister(TCPP0203_Object_t *pObj, uint8_t *pCtrlRegister)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  /* Update value in writing register (reg0) */
  ret = tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, pCtrlRegister, 1);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3318      	adds	r3, #24
 80078f6:	0018      	movs	r0, r3
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	2301      	movs	r3, #1
 80078fc:	2100      	movs	r1, #0
 80078fe:	f000 f8d4 	bl	8007aaa <tcpp0203_write_reg>
 8007902:	0003      	movs	r3, r0
 8007904:	60fb      	str	r3, [r7, #12]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = *pCtrlRegister;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 8007906:	68fb      	ldr	r3, [r7, #12]
}
 8007908:	0018      	movs	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	b004      	add	sp, #16
 800790e:	bd80      	pop	{r7, pc}

08007910 <TCPP0203_ReadAckRegister>:
  * @param  pObj Pointer to component object
  * @param  pAckRegister Pointer on Ack register value
  * @retval Component status
  */
int32_t TCPP0203_ReadAckRegister(TCPP0203_Object_t *pObj, uint8_t *pAckRegister)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, pAckRegister, 1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3318      	adds	r3, #24
 800791e:	0018      	movs	r0, r3
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	2301      	movs	r3, #1
 8007924:	2101      	movs	r1, #1
 8007926:	f000 f8a1 	bl	8007a6c <tcpp0203_read_reg>
 800792a:	0003      	movs	r3, r0
 800792c:	60fb      	str	r3, [r7, #12]

  return ret;
 800792e:	68fb      	ldr	r3, [r7, #12]
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	b004      	add	sp, #16
 8007936:	bd80      	pop	{r7, pc}

08007938 <TCPP0203_ReadFlagRegister>:
  * @param  pObj Pointer to component object
  * @param  pFlagRegister Pointer on Flag register value
  * @retval Component status
  */
int32_t TCPP0203_ReadFlagRegister(TCPP0203_Object_t *pObj, uint8_t *pFlagRegister)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, pFlagRegister, 1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3318      	adds	r3, #24
 8007946:	0018      	movs	r0, r3
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	2301      	movs	r3, #1
 800794c:	2102      	movs	r1, #2
 800794e:	f000 f88d 	bl	8007a6c <tcpp0203_read_reg>
 8007952:	0003      	movs	r3, r0
 8007954:	60fb      	str	r3, [r7, #12]

  return ret;
 8007956:	68fb      	ldr	r3, [r7, #12]
}
 8007958:	0018      	movs	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	b004      	add	sp, #16
 800795e:	bd80      	pop	{r7, pc}

08007960 <TCPP0203_ReadRegWrap>:
  * @param  pData   Buffer where Target register value should be stored
  * @param  Length  buffer size to be read
  * @retval error status
  */
static int32_t TCPP0203_ReadRegWrap(const void *handle, uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	0008      	movs	r0, r1
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	0019      	movs	r1, r3
 800796e:	250b      	movs	r5, #11
 8007970:	197b      	adds	r3, r7, r5
 8007972:	1c02      	adds	r2, r0, #0
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	260a      	movs	r6, #10
 8007978:	19bb      	adds	r3, r7, r6
 800797a:	1c0a      	adds	r2, r1, #0
 800797c:	701a      	strb	r2, [r3, #0]
  const TCPP0203_Object_t *pObj = (const TCPP0203_Object_t *)handle;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	691c      	ldr	r4, [r3, #16]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	8918      	ldrh	r0, [r3, #8]
 800798a:	197b      	adds	r3, r7, r5
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	b299      	uxth	r1, r3
 8007990:	19bb      	adds	r3, r7, r6
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	47a0      	blx	r4
 800799a:	0003      	movs	r3, r0
}
 800799c:	0018      	movs	r0, r3
 800799e:	46bd      	mov	sp, r7
 80079a0:	b007      	add	sp, #28
 80079a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079a4 <TCPP0203_WriteRegWrap>:
  * @param  pData  Target register value to be written
  * @param  Length Buffer size to be written
  * @retval error status
  */
static int32_t TCPP0203_WriteRegWrap(const void *handle, uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80079a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	0008      	movs	r0, r1
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	0019      	movs	r1, r3
 80079b2:	250b      	movs	r5, #11
 80079b4:	197b      	adds	r3, r7, r5
 80079b6:	1c02      	adds	r2, r0, #0
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	260a      	movs	r6, #10
 80079bc:	19bb      	adds	r3, r7, r6
 80079be:	1c0a      	adds	r2, r1, #0
 80079c0:	701a      	strb	r2, [r3, #0]
  const TCPP0203_Object_t *pObj = (const TCPP0203_Object_t *)handle;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	617b      	str	r3, [r7, #20]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = *pData;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	68dc      	ldr	r4, [r3, #12]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	8918      	ldrh	r0, [r3, #8]
 80079ce:	197b      	adds	r3, r7, r5
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b299      	uxth	r1, r3
 80079d4:	19bb      	adds	r3, r7, r6
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	47a0      	blx	r4
 80079de:	0003      	movs	r3, r0
}
 80079e0:	0018      	movs	r0, r3
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b007      	add	sp, #28
 80079e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079e8 <TCPP0203_ModifyReg0>:
  * @param  pData  Target register value to be written
  * @param  Length Buffer size to be written
  * @retval error status
  */
static int32_t TCPP0203_ModifyReg0(TCPP0203_Object_t *pObj, uint8_t Value, uint8_t Mask)
{
 80079e8:	b590      	push	{r4, r7, lr}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	0008      	movs	r0, r1
 80079f2:	0011      	movs	r1, r2
 80079f4:	1cfb      	adds	r3, r7, #3
 80079f6:	1c02      	adds	r2, r0, #0
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	1cbb      	adds	r3, r7, #2
 80079fc:	1c0a      	adds	r2, r1, #0
 80079fe:	701a      	strb	r2, [r3, #0]
  int32_t ret;
  uint8_t tmp;

  /* Read current content of ACK register (reflects content of bits set to 1 in Writing register Reg0) */
  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3318      	adds	r3, #24
 8007a04:	0018      	movs	r0, r3
 8007a06:	240b      	movs	r4, #11
 8007a08:	193a      	adds	r2, r7, r4
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	f000 f82d 	bl	8007a6c <tcpp0203_read_reg>
 8007a12:	0003      	movs	r3, r0
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Update only the area dedicated to Mask */
  tmp &= ~(Mask);
 8007a16:	1cbb      	adds	r3, r7, #2
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	b25b      	sxtb	r3, r3
 8007a1c:	43db      	mvns	r3, r3
 8007a1e:	b25b      	sxtb	r3, r3
 8007a20:	0021      	movs	r1, r4
 8007a22:	187a      	adds	r2, r7, r1
 8007a24:	7812      	ldrb	r2, [r2, #0]
 8007a26:	b252      	sxtb	r2, r2
 8007a28:	4013      	ands	r3, r2
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	187b      	adds	r3, r7, r1
 8007a30:	701a      	strb	r2, [r3, #0]
  tmp |= (Value & Mask);
 8007a32:	1cfb      	adds	r3, r7, #3
 8007a34:	1cba      	adds	r2, r7, #2
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	7812      	ldrb	r2, [r2, #0]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	187b      	adds	r3, r7, r1
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	187b      	adds	r3, r7, r1
 8007a48:	701a      	strb	r2, [r3, #0]
#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = tmp;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  /* Update value in writing register (reg0) */
  ret += tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, &tmp, 1);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3318      	adds	r3, #24
 8007a4e:	0018      	movs	r0, r3
 8007a50:	187a      	adds	r2, r7, r1
 8007a52:	2301      	movs	r3, #1
 8007a54:	2100      	movs	r1, #0
 8007a56:	f000 f828 	bl	8007aaa <tcpp0203_write_reg>
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	189b      	adds	r3, r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  ret += TCPP0203_CheckReg0Reg1(pObj, Reg0_Expected_Value);
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 8007a62:	68fb      	ldr	r3, [r7, #12]
}
 8007a64:	0018      	movs	r0, r3
 8007a66:	46bd      	mov	sp, r7
 8007a68:	b005      	add	sp, #20
 8007a6a:	bd90      	pop	{r4, r7, pc}

08007a6c <tcpp0203_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : data Read
  *******************************************************************************/
int32_t tcpp0203_read_reg(const TCPP0203_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t length)
{
 8007a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	0008      	movs	r0, r1
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	0019      	movs	r1, r3
 8007a7a:	260b      	movs	r6, #11
 8007a7c:	19bb      	adds	r3, r7, r6
 8007a7e:	1c02      	adds	r2, r0, #0
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	250a      	movs	r5, #10
 8007a84:	197b      	adds	r3, r7, r5
 8007a86:	1c0a      	adds	r2, r1, #0
 8007a88:	701a      	strb	r2, [r3, #0]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685c      	ldr	r4, [r3, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6898      	ldr	r0, [r3, #8]
 8007a92:	197b      	adds	r3, r7, r5
 8007a94:	781d      	ldrb	r5, [r3, #0]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	19bb      	adds	r3, r7, r6
 8007a9a:	7819      	ldrb	r1, [r3, #0]
 8007a9c:	002b      	movs	r3, r5
 8007a9e:	47a0      	blx	r4
 8007aa0:	0003      	movs	r3, r0
}
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b005      	add	sp, #20
 8007aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007aaa <tcpp0203_write_reg>:
  *                 I2C or SPI writing function
  * Input         : Register Address, data to be written, length of buffer
  * Output        : None
  *******************************************************************************/
int32_t tcpp0203_write_reg(const TCPP0203_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t length)
{
 8007aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aac:	b085      	sub	sp, #20
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	0008      	movs	r0, r1
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	0019      	movs	r1, r3
 8007ab8:	260b      	movs	r6, #11
 8007aba:	19bb      	adds	r3, r7, r6
 8007abc:	1c02      	adds	r2, r0, #0
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	250a      	movs	r5, #10
 8007ac2:	197b      	adds	r3, r7, r5
 8007ac4:	1c0a      	adds	r2, r1, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681c      	ldr	r4, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6898      	ldr	r0, [r3, #8]
 8007ad0:	197b      	adds	r3, r7, r5
 8007ad2:	781d      	ldrb	r5, [r3, #0]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	19bb      	adds	r3, r7, r6
 8007ad8:	7819      	ldrb	r1, [r3, #0]
 8007ada:	002b      	movs	r3, r5
 8007adc:	47a0      	blx	r4
 8007ade:	0003      	movs	r3, r0
}
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	b005      	add	sp, #20
 8007ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ae8 <MX_I2C_Init>:
/**
  * @brief  MX I2C1 Initialization as generated by CubeMX.
  * @retval Status
  */
__weak HAL_StatusTypeDef MX_I2C_Init(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8007aee:	1dfb      	adds	r3, r7, #7
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
#if defined(I2C_CR1_ENGC)
  TCPP0X_HANDLE_I2C.Init.ClockSpeed       = BUS_I2C_FREQUENCY;
#else
  TCPP0X_HANDLE_I2C.Init.Timing           = I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C_FREQUENCY);
 8007af4:	f004 fb00 	bl	800c0f8 <HAL_RCC_GetPCLK1Freq>
 8007af8:	0003      	movs	r3, r0
 8007afa:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <MX_I2C_Init+0x98>)
 8007afc:	0011      	movs	r1, r2
 8007afe:	0018      	movs	r0, r3
 8007b00:	f000 f9b0 	bl	8007e64 <I2C_GetTiming>
 8007b04:	0002      	movs	r2, r0
 8007b06:	4b1f      	ldr	r3, [pc, #124]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b08:	605a      	str	r2, [r3, #4]
#endif /* I2C_CR1_ENGC */
  TCPP0X_HANDLE_I2C.Init.OwnAddress1      = 0;
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	609a      	str	r2, [r3, #8]
  TCPP0X_HANDLE_I2C.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007b10:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	60da      	str	r2, [r3, #12]
  TCPP0X_HANDLE_I2C.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007b16:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	611a      	str	r2, [r3, #16]
  TCPP0X_HANDLE_I2C.Init.OwnAddress2      = 0;
 8007b1c:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	615a      	str	r2, [r3, #20]
  TCPP0X_HANDLE_I2C.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007b22:	4b18      	ldr	r3, [pc, #96]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	61da      	str	r2, [r3, #28]
  TCPP0X_HANDLE_I2C.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007b28:	4b16      	ldr	r3, [pc, #88]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
  /* Init the I2C Msp */
  I2C_MspInit(&TCPP0X_HANDLE_I2C);
 8007b2e:	4b15      	ldr	r3, [pc, #84]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b30:	0018      	movs	r0, r3
 8007b32:	f000 f8f1 	bl	8007d18 <I2C_MspInit>
      return BSP_ERROR_MSP_FAILURE;
    }
  }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS == 0 */

  if (HAL_I2C_Init(&TCPP0X_HANDLE_I2C) != HAL_OK)
 8007b36:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f002 fedb 	bl	800a8f4 <HAL_I2C_Init>
 8007b3e:	1e03      	subs	r3, r0, #0
 8007b40:	d003      	beq.n	8007b4a <MX_I2C_Init+0x62>
  {
    ret = HAL_ERROR;
 8007b42:	1dfb      	adds	r3, r7, #7
 8007b44:	2201      	movs	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e014      	b.n	8007b74 <MX_I2C_Init+0x8c>
  }
  else if (HAL_I2CEx_ConfigAnalogFilter(&TCPP0X_HANDLE_I2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007b4a:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f003 fcfa 	bl	800b548 <HAL_I2CEx_ConfigAnalogFilter>
 8007b54:	1e03      	subs	r3, r0, #0
 8007b56:	d003      	beq.n	8007b60 <MX_I2C_Init+0x78>
  {
    ret = HAL_ERROR;
 8007b58:	1dfb      	adds	r3, r7, #7
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e009      	b.n	8007b74 <MX_I2C_Init+0x8c>
  }
  else
  {
    if (HAL_I2CEx_ConfigDigitalFilter(&TCPP0X_HANDLE_I2C, 0) != HAL_OK)
 8007b60:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <MX_I2C_Init+0x9c>)
 8007b62:	2100      	movs	r1, #0
 8007b64:	0018      	movs	r0, r3
 8007b66:	f003 fd3b 	bl	800b5e0 <HAL_I2CEx_ConfigDigitalFilter>
 8007b6a:	1e03      	subs	r3, r0, #0
 8007b6c:	d002      	beq.n	8007b74 <MX_I2C_Init+0x8c>
    {
      ret = HAL_ERROR;
 8007b6e:	1dfb      	adds	r3, r7, #7
 8007b70:	2201      	movs	r2, #1
 8007b72:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007b74:	1dfb      	adds	r3, r7, #7
 8007b76:	781b      	ldrb	r3, [r3, #0]
}
 8007b78:	0018      	movs	r0, r3
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	b002      	add	sp, #8
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	00061a80 	.word	0x00061a80
 8007b84:	2000024c 	.word	0x2000024c

08007b88 <BSP_I2C_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C_Init(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]

  TCPP0X_HANDLE_I2C.Instance  = BUS_I2C_INSTANCE;
 8007b92:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <BSP_I2C_Init+0x50>)
 8007b94:	4a11      	ldr	r2, [pc, #68]	; (8007bdc <BSP_I2C_Init+0x54>)
 8007b96:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&TCPP0X_HANDLE_I2C) == HAL_I2C_STATE_RESET)
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <BSP_I2C_Init+0x50>)
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	f003 f9e2 	bl	800af64 <HAL_I2C_GetState>
 8007ba0:	1e03      	subs	r3, r0, #0
 8007ba2:	d114      	bne.n	8007bce <BSP_I2C_Init+0x46>
  {
    /* Init the I2C */
    if (MX_I2C_Init() != HAL_OK)
 8007ba4:	f7ff ffa0 	bl	8007ae8 <MX_I2C_Init>
 8007ba8:	1e03      	subs	r3, r0, #0
 8007baa:	d003      	beq.n	8007bb4 <BSP_I2C_Init+0x2c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8007bac:	2308      	movs	r3, #8
 8007bae:	425b      	negs	r3, r3
 8007bb0:	607b      	str	r3, [r7, #4]
 8007bb2:	e00c      	b.n	8007bce <BSP_I2C_Init+0x46>
    }
    else if (HAL_I2CEx_ConfigAnalogFilter(&TCPP0X_HANDLE_I2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007bb4:	4b08      	ldr	r3, [pc, #32]	; (8007bd8 <BSP_I2C_Init+0x50>)
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	0018      	movs	r0, r3
 8007bba:	f003 fcc5 	bl	800b548 <HAL_I2CEx_ConfigAnalogFilter>
 8007bbe:	1e03      	subs	r3, r0, #0
 8007bc0:	d003      	beq.n	8007bca <BSP_I2C_Init+0x42>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8007bc2:	2308      	movs	r3, #8
 8007bc4:	425b      	negs	r3, r3
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e001      	b.n	8007bce <BSP_I2C_Init+0x46>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	607b      	str	r3, [r7, #4]
    }
  }
  return ret;
 8007bce:	687b      	ldr	r3, [r7, #4]
}
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	b002      	add	sp, #8
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	2000024c 	.word	0x2000024c
 8007bdc:	40005400 	.word	0x40005400

08007be0 <BSP_I2C_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C_DeInit(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	607b      	str	r3, [r7, #4]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
  I2C_MspDeInit(&TCPP0X_HANDLE_I2C);
 8007bea:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <BSP_I2C_DeInit+0x30>)
 8007bec:	0018      	movs	r0, r3
 8007bee:	f000 f901 	bl	8007df4 <I2C_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

  /* Init the I2C */
  if (HAL_I2C_DeInit(&TCPP0X_HANDLE_I2C) != HAL_OK)
 8007bf2:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <BSP_I2C_DeInit+0x30>)
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f002 ff13 	bl	800aa20 <HAL_I2C_DeInit>
 8007bfa:	1e03      	subs	r3, r0, #0
 8007bfc:	d002      	beq.n	8007c04 <BSP_I2C_DeInit+0x24>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8007bfe:	2304      	movs	r3, #4
 8007c00:	425b      	negs	r3, r3
 8007c02:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8007c04:	687b      	ldr	r3, [r7, #4]
}
 8007c06:	0018      	movs	r0, r3
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b002      	add	sp, #8
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	2000024c 	.word	0x2000024c

08007c14 <BSP_I2C_WriteReg>:
  * @param  pData    The target register value to written
  * @param  Length   buffer size to write
  * @retval BSP status
  */
int32_t BSP_I2C_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007c14:	b5b0      	push	{r4, r5, r7, lr}
 8007c16:	b08a      	sub	sp, #40	; 0x28
 8007c18:	af04      	add	r7, sp, #16
 8007c1a:	0004      	movs	r4, r0
 8007c1c:	0008      	movs	r0, r1
 8007c1e:	60ba      	str	r2, [r7, #8]
 8007c20:	0019      	movs	r1, r3
 8007c22:	250e      	movs	r5, #14
 8007c24:	197b      	adds	r3, r7, r5
 8007c26:	1c22      	adds	r2, r4, #0
 8007c28:	801a      	strh	r2, [r3, #0]
 8007c2a:	240c      	movs	r4, #12
 8007c2c:	193b      	adds	r3, r7, r4
 8007c2e:	1c02      	adds	r2, r0, #0
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	1dbb      	adds	r3, r7, #6
 8007c34:	1c0a      	adds	r2, r1, #0
 8007c36:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (HAL_I2C_Mem_Write(&TCPP0X_HANDLE_I2C, (uint8_t)DevAddr,
 8007c38:	197b      	adds	r3, r7, r5
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	b299      	uxth	r1, r3
 8007c40:	193b      	adds	r3, r7, r4
 8007c42:	881a      	ldrh	r2, [r3, #0]
 8007c44:	4811      	ldr	r0, [pc, #68]	; (8007c8c <BSP_I2C_WriteReg+0x78>)
 8007c46:	2380      	movs	r3, #128	; 0x80
 8007c48:	015b      	lsls	r3, r3, #5
 8007c4a:	9302      	str	r3, [sp, #8]
 8007c4c:	1dbb      	adds	r3, r7, #6
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	2301      	movs	r3, #1
 8007c58:	f002 ff22 	bl	800aaa0 <HAL_I2C_Mem_Write>
 8007c5c:	1e03      	subs	r3, r0, #0
 8007c5e:	d102      	bne.n	8007c66 <BSP_I2C_WriteReg+0x52>
                        (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                        (uint8_t *)pData, Length, 0x1000) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e00d      	b.n	8007c82 <BSP_I2C_WriteReg+0x6e>
  }
  else
  {
    if (HAL_I2C_GetError(&TCPP0X_HANDLE_I2C) == HAL_I2C_ERROR_AF)
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <BSP_I2C_WriteReg+0x78>)
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f003 f987 	bl	800af7c <HAL_I2C_GetError>
 8007c6e:	0003      	movs	r3, r0
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d103      	bne.n	8007c7c <BSP_I2C_WriteReg+0x68>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007c74:	2366      	movs	r3, #102	; 0x66
 8007c76:	425b      	negs	r3, r3
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	e002      	b.n	8007c82 <BSP_I2C_WriteReg+0x6e>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	425b      	negs	r3, r3
 8007c80:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8007c82:	697b      	ldr	r3, [r7, #20]
}
 8007c84:	0018      	movs	r0, r3
 8007c86:	46bd      	mov	sp, r7
 8007c88:	b006      	add	sp, #24
 8007c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8007c8c:	2000024c 	.word	0x2000024c

08007c90 <BSP_I2C_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007c90:	b5b0      	push	{r4, r5, r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af04      	add	r7, sp, #16
 8007c96:	0004      	movs	r4, r0
 8007c98:	0008      	movs	r0, r1
 8007c9a:	60ba      	str	r2, [r7, #8]
 8007c9c:	0019      	movs	r1, r3
 8007c9e:	250e      	movs	r5, #14
 8007ca0:	197b      	adds	r3, r7, r5
 8007ca2:	1c22      	adds	r2, r4, #0
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	240c      	movs	r4, #12
 8007ca8:	193b      	adds	r3, r7, r4
 8007caa:	1c02      	adds	r2, r0, #0
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	1dbb      	adds	r3, r7, #6
 8007cb0:	1c0a      	adds	r2, r1, #0
 8007cb2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (HAL_I2C_Mem_Read(&TCPP0X_HANDLE_I2C, DevAddr, (uint16_t)Reg,
 8007cb4:	193b      	adds	r3, r7, r4
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	197b      	adds	r3, r7, r5
 8007cba:	8819      	ldrh	r1, [r3, #0]
 8007cbc:	4811      	ldr	r0, [pc, #68]	; (8007d04 <BSP_I2C_ReadReg+0x74>)
 8007cbe:	2380      	movs	r3, #128	; 0x80
 8007cc0:	015b      	lsls	r3, r3, #5
 8007cc2:	9302      	str	r3, [sp, #8]
 8007cc4:	1dbb      	adds	r3, r7, #6
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f003 f814 	bl	800acfc <HAL_I2C_Mem_Read>
 8007cd4:	1e03      	subs	r3, r0, #0
 8007cd6:	d102      	bne.n	8007cde <BSP_I2C_ReadReg+0x4e>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       Length, 0x1000) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	e00d      	b.n	8007cfa <BSP_I2C_ReadReg+0x6a>
  }
  else
  {
    if (HAL_I2C_GetError(&TCPP0X_HANDLE_I2C) == HAL_I2C_ERROR_AF)
 8007cde:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <BSP_I2C_ReadReg+0x74>)
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f003 f94b 	bl	800af7c <HAL_I2C_GetError>
 8007ce6:	0003      	movs	r3, r0
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d103      	bne.n	8007cf4 <BSP_I2C_ReadReg+0x64>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007cec:	2366      	movs	r3, #102	; 0x66
 8007cee:	425b      	negs	r3, r3
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	e002      	b.n	8007cfa <BSP_I2C_ReadReg+0x6a>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	425b      	negs	r3, r3
 8007cf8:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8007cfa:	697b      	ldr	r3, [r7, #20]
}
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	b006      	add	sp, #24
 8007d02:	bdb0      	pop	{r4, r5, r7, pc}
 8007d04:	2000024c 	.word	0x2000024c

08007d08 <BSP_GetTick>:
/**
  * @brief  Return system tick (ms) function.
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007d0c:	f002 f8ca 	bl	8009ea4 <HAL_GetTick>
 8007d10:	0003      	movs	r3, r0
}
 8007d12:	0018      	movs	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <I2C_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hi2c  I2C handler
  * @retval None
  */
static void I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b09f      	sub	sp, #124	; 0x7c
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* -1- Configure the I2C clock source. The clock is derived from the SYSCLK */
#if !defined(I2C_CR1_ENGC)
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007d20:	2118      	movs	r1, #24
 8007d22:	187b      	adds	r3, r7, r1
 8007d24:	2220      	movs	r2, #32
 8007d26:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8007d28:	187b      	adds	r3, r7, r1
 8007d2a:	2280      	movs	r2, #128	; 0x80
 8007d2c:	0152      	lsls	r2, r2, #5
 8007d2e:	619a      	str	r2, [r3, #24]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8007d30:	187b      	adds	r3, r7, r1
 8007d32:	0018      	movs	r0, r3
 8007d34:	f004 f9f6 	bl	800c124 <HAL_RCCEx_PeriphCLKConfig>
#endif /* !I2C_CR1_ENGC */

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C_SCL_GPIO_CLK_ENABLE();
 8007d38:	4b2c      	ldr	r3, [pc, #176]	; (8007dec <I2C_MspInit+0xd4>)
 8007d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <I2C_MspInit+0xd4>)
 8007d3e:	2102      	movs	r1, #2
 8007d40:	430a      	orrs	r2, r1
 8007d42:	635a      	str	r2, [r3, #52]	; 0x34
 8007d44:	4b29      	ldr	r3, [pc, #164]	; (8007dec <I2C_MspInit+0xd4>)
 8007d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d48:	2202      	movs	r2, #2
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	697b      	ldr	r3, [r7, #20]
  /* Enable SDA GPIO clock */
  BUS_I2C_SDA_GPIO_CLK_ENABLE();
 8007d50:	4b26      	ldr	r3, [pc, #152]	; (8007dec <I2C_MspInit+0xd4>)
 8007d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d54:	4b25      	ldr	r3, [pc, #148]	; (8007dec <I2C_MspInit+0xd4>)
 8007d56:	2102      	movs	r1, #2
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	635a      	str	r2, [r3, #52]	; 0x34
 8007d5c:	4b23      	ldr	r3, [pc, #140]	; (8007dec <I2C_MspInit+0xd4>)
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d60:	2202      	movs	r2, #2
 8007d62:	4013      	ands	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]
 8007d66:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C_SCL_GPIO_PIN;
 8007d68:	2164      	movs	r1, #100	; 0x64
 8007d6a:	187b      	adds	r3, r7, r1
 8007d6c:	2280      	movs	r2, #128	; 0x80
 8007d6e:	0052      	lsls	r2, r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007d72:	000c      	movs	r4, r1
 8007d74:	193b      	adds	r3, r7, r4
 8007d76:	2212      	movs	r2, #18
 8007d78:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007d7a:	193b      	adds	r3, r7, r4
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007d80:	193b      	adds	r3, r7, r4
 8007d82:	2202      	movs	r2, #2
 8007d84:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Alternate = BUS_I2C_SCL_GPIO_AF;
 8007d86:	193b      	adds	r3, r7, r4
 8007d88:	2206      	movs	r2, #6
 8007d8a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C_SCL_GPIO_PORT, &gpio_init_structure);
 8007d8c:	193b      	adds	r3, r7, r4
 8007d8e:	4a18      	ldr	r2, [pc, #96]	; (8007df0 <I2C_MspInit+0xd8>)
 8007d90:	0019      	movs	r1, r3
 8007d92:	0010      	movs	r0, r2
 8007d94:	f002 fb6a 	bl	800a46c <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C_SDA_GPIO_PIN;
 8007d98:	0021      	movs	r1, r4
 8007d9a:	187b      	adds	r3, r7, r1
 8007d9c:	2280      	movs	r2, #128	; 0x80
 8007d9e:	0092      	lsls	r2, r2, #2
 8007da0:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007da2:	187b      	adds	r3, r7, r1
 8007da4:	2212      	movs	r2, #18
 8007da6:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007da8:	187b      	adds	r3, r7, r1
 8007daa:	2201      	movs	r2, #1
 8007dac:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007dae:	187b      	adds	r3, r7, r1
 8007db0:	2202      	movs	r2, #2
 8007db2:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Alternate = BUS_I2C_SDA_GPIO_AF;
 8007db4:	187b      	adds	r3, r7, r1
 8007db6:	2206      	movs	r2, #6
 8007db8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C_SDA_GPIO_PORT, &gpio_init_structure);
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	4a0c      	ldr	r2, [pc, #48]	; (8007df0 <I2C_MspInit+0xd8>)
 8007dbe:	0019      	movs	r1, r3
 8007dc0:	0010      	movs	r0, r2
 8007dc2:	f002 fb53 	bl	800a46c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C_CLK_ENABLE();
 8007dc6:	4b09      	ldr	r3, [pc, #36]	; (8007dec <I2C_MspInit+0xd4>)
 8007dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dca:	4b08      	ldr	r3, [pc, #32]	; (8007dec <I2C_MspInit+0xd4>)
 8007dcc:	2180      	movs	r1, #128	; 0x80
 8007dce:	0389      	lsls	r1, r1, #14
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <I2C_MspInit+0xd4>)
 8007dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	039b      	lsls	r3, r3, #14
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b01f      	add	sp, #124	; 0x7c
 8007de8:	bd90      	pop	{r4, r7, pc}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	40021000 	.word	0x40021000
 8007df0:	50000400 	.word	0x50000400

08007df4 <I2C_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hi2c  I2C handler
  * @retval None
  */
static void I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007df4:	b590      	push	{r4, r7, lr}
 8007df6:	b089      	sub	sp, #36	; 0x24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);

  /* Configure I2C SCL, SDA as alternate function */
  gpio_init_structure.Pin = BUS_I2C_SCL_GPIO_PIN;
 8007dfc:	240c      	movs	r4, #12
 8007dfe:	193b      	adds	r3, r7, r4
 8007e00:	2280      	movs	r2, #128	; 0x80
 8007e02:	0052      	lsls	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
  HAL_GPIO_DeInit(BUS_I2C_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007e06:	193b      	adds	r3, r7, r4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a13      	ldr	r2, [pc, #76]	; (8007e58 <I2C_MspDeInit+0x64>)
 8007e0c:	0019      	movs	r1, r3
 8007e0e:	0010      	movs	r0, r2
 8007e10:	f002 fc98 	bl	800a744 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C_SDA_GPIO_PIN;
 8007e14:	0021      	movs	r1, r4
 8007e16:	187b      	adds	r3, r7, r1
 8007e18:	2280      	movs	r2, #128	; 0x80
 8007e1a:	0092      	lsls	r2, r2, #2
 8007e1c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_DeInit(BUS_I2C_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007e1e:	187b      	adds	r3, r7, r1
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a0d      	ldr	r2, [pc, #52]	; (8007e58 <I2C_MspDeInit+0x64>)
 8007e24:	0019      	movs	r1, r3
 8007e26:	0010      	movs	r0, r2
 8007e28:	f002 fc8c 	bl	800a744 <HAL_GPIO_DeInit>

  /** Disable GPIO clock **/
  /* Disable SCL GPIO clock */
  BUS_I2C_SCL_GPIO_CLK_DISABLE();
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <I2C_MspDeInit+0x68>)
 8007e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e30:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <I2C_MspDeInit+0x68>)
 8007e32:	2102      	movs	r1, #2
 8007e34:	438a      	bics	r2, r1
 8007e36:	635a      	str	r2, [r3, #52]	; 0x34
  /* Disable SDA GPIO clock */
  BUS_I2C_SDA_GPIO_CLK_DISABLE();
 8007e38:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <I2C_MspDeInit+0x68>)
 8007e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e3c:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <I2C_MspDeInit+0x68>)
 8007e3e:	2102      	movs	r1, #2
 8007e40:	438a      	bics	r2, r1
 8007e42:	635a      	str	r2, [r3, #52]	; 0x34
  /* Disable I2C clock */
  BUS_I2C_CLK_DISABLE();
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <I2C_MspDeInit+0x68>)
 8007e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <I2C_MspDeInit+0x68>)
 8007e4a:	4905      	ldr	r1, [pc, #20]	; (8007e60 <I2C_MspDeInit+0x6c>)
 8007e4c:	400a      	ands	r2, r1
 8007e4e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007e50:	46c0      	nop			; (mov r8, r8)
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b009      	add	sp, #36	; 0x24
 8007e56:	bd90      	pop	{r4, r7, pc}
 8007e58:	50000400 	.word	0x50000400
 8007e5c:	40021000 	.word	0x40021000
 8007e60:	ffdfffff 	.word	0xffdfffff

08007e64 <I2C_GetTiming>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_freq   I2C frequency in Hz.
  * @retval I2C timing value
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t itiming;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d071      	beq.n	8007f5c <I2C_GetTiming+0xf8>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d06e      	beq.n	8007f5c <I2C_GetTiming+0xf8>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FAST_PLUS ; speed++)
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	e066      	b.n	8007f52 <I2C_GetTiming+0xee>
    {
      if ((i2c_freq >= i2c_charac[speed].freq_min) &&
 8007e84:	4a38      	ldr	r2, [pc, #224]	; (8007f68 <I2C_GetTiming+0x104>)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	212c      	movs	r1, #44	; 0x2c
 8007e8a:	434b      	muls	r3, r1
 8007e8c:	18d3      	adds	r3, r2, r3
 8007e8e:	3304      	adds	r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d359      	bcc.n	8007f4c <I2C_GetTiming+0xe8>
          (i2c_freq <= i2c_charac[speed].freq_max))
 8007e98:	4a33      	ldr	r2, [pc, #204]	; (8007f68 <I2C_GetTiming+0x104>)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	212c      	movs	r1, #44	; 0x2c
 8007e9e:	434b      	muls	r3, r1
 8007ea0:	18d3      	adds	r3, r2, r3
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= i2c_charac[speed].freq_min) &&
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d84f      	bhi.n	8007f4c <I2C_GetTiming+0xe8>
      {
        Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	0011      	movs	r1, r2
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f000 f85c 	bl	8007f70 <Compute_PRESC_SCLDEL_SDADEL>
        itiming = Compute_SCLL_SCLH(clock_src_freq, speed);
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f000 f90a 	bl	80080d8 <Compute_SCLL_SCLH>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	60fb      	str	r3, [r7, #12]

        if (itiming < I2C_VALID_PRESC_NBR)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b63      	cmp	r3, #99	; 0x63
 8007ecc:	d845      	bhi.n	8007f5a <I2C_GetTiming+0xf6>
        {
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 8007ece:	4927      	ldr	r1, [pc, #156]	; (8007f6c <I2C_GetTiming+0x108>)
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	0013      	movs	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	189b      	adds	r3, r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	585b      	ldr	r3, [r3, r1]
 8007edc:	0719      	lsls	r1, r3, #28
                ((valid_timing[itiming].tscldel & 0x0FU) << 20) |
 8007ede:	4823      	ldr	r0, [pc, #140]	; (8007f6c <I2C_GetTiming+0x108>)
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	0013      	movs	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	189b      	adds	r3, r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	18c3      	adds	r3, r0, r3
 8007eec:	3304      	adds	r3, #4
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	051a      	lsls	r2, r3, #20
 8007ef2:	23f0      	movs	r3, #240	; 0xf0
 8007ef4:	041b      	lsls	r3, r3, #16
 8007ef6:	4013      	ands	r3, r2
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 8007ef8:	4319      	orrs	r1, r3
                ((valid_timing[itiming].tsdadel & 0x0FU) << 16) |
 8007efa:	481c      	ldr	r0, [pc, #112]	; (8007f6c <I2C_GetTiming+0x108>)
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	0013      	movs	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	189b      	adds	r3, r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	18c3      	adds	r3, r0, r3
 8007f08:	3308      	adds	r3, #8
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	041a      	lsls	r2, r3, #16
 8007f0e:	23f0      	movs	r3, #240	; 0xf0
 8007f10:	031b      	lsls	r3, r3, #12
 8007f12:	4013      	ands	r3, r2
                ((valid_timing[itiming].tscldel & 0x0FU) << 20) |
 8007f14:	4319      	orrs	r1, r3
                ((valid_timing[itiming].sclh & 0xFFU) << 8)     |
 8007f16:	4815      	ldr	r0, [pc, #84]	; (8007f6c <I2C_GetTiming+0x108>)
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	0013      	movs	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	189b      	adds	r3, r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	18c3      	adds	r3, r0, r3
 8007f24:	330c      	adds	r3, #12
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	0c1b      	lsrs	r3, r3, #16
                ((valid_timing[itiming].tsdadel & 0x0FU) << 16) |
 8007f2e:	4319      	orrs	r1, r3
                ((valid_timing[itiming].scll & 0xFFU) << 0);
 8007f30:	480e      	ldr	r0, [pc, #56]	; (8007f6c <I2C_GetTiming+0x108>)
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	0013      	movs	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	189b      	adds	r3, r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	18c3      	adds	r3, r0, r3
 8007f3e:	3310      	adds	r3, #16
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	22ff      	movs	r2, #255	; 0xff
 8007f44:	4013      	ands	r3, r2
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 8007f46:	430b      	orrs	r3, r1
 8007f48:	617b      	str	r3, [r7, #20]
        }
        break;
 8007f4a:	e006      	b.n	8007f5a <I2C_GetTiming+0xf6>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FAST_PLUS ; speed++)
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d995      	bls.n	8007e84 <I2C_GetTiming+0x20>
 8007f58:	e000      	b.n	8007f5c <I2C_GetTiming+0xf8>
        break;
 8007f5a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return ret;
 8007f5c:	697b      	ldr	r3, [r7, #20]
}
 8007f5e:	0018      	movs	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b006      	add	sp, #24
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	0801a6d0 	.word	0x0801a6d0
 8007f6c:	200002a0 	.word	0x200002a0

08007f70 <Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_speed  I2C frequency (index).
  * @retval None
  */
static void Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t i2c_speed)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08c      	sub	sp, #48	; 0x30
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8007f7a:	2310      	movs	r3, #16
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t  tscldel_min;
  uint32_t presc;
  uint32_t iscl;
  uint32_t isda;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	085b      	lsrs	r3, r3, #1
 8007f82:	4a51      	ldr	r2, [pc, #324]	; (80080c8 <Compute_PRESC_SCLDEL_SDADEL+0x158>)
 8007f84:	4694      	mov	ip, r2
 8007f86:	4463      	add	r3, ip
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f7fe f9ea 	bl	8006364 <__udivsi3>
 8007f90:	0003      	movs	r3, r0
 8007f92:	61bb      	str	r3, [r7, #24]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 8007f94:	4a4d      	ldr	r2, [pc, #308]	; (80080cc <Compute_PRESC_SCLDEL_SDADEL+0x15c>)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	212c      	movs	r1, #44	; 0x2c
 8007f9a:	434b      	muls	r3, r1
 8007f9c:	18d3      	adds	r3, r2, r3
 8007f9e:	3324      	adds	r3, #36	; 0x24
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	0018      	movs	r0, r3
                (int32_t)i2c_charac[i2c_speed].hddat_min -
 8007fa4:	4a49      	ldr	r2, [pc, #292]	; (80080cc <Compute_PRESC_SCLDEL_SDADEL+0x15c>)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	212c      	movs	r1, #44	; 0x2c
 8007faa:	434b      	muls	r3, r1
 8007fac:	18d3      	adds	r3, r2, r3
 8007fae:	330c      	adds	r3, #12
 8007fb0:	681b      	ldr	r3, [r3, #0]
  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 8007fb2:	18c3      	adds	r3, r0, r3
                (int32_t)i2c_charac[i2c_speed].hddat_min -
 8007fb4:	3b32      	subs	r3, #50	; 0x32
 8007fb6:	001a      	movs	r2, r3
                (int32_t)I2C_ANALOG_FILTER_DELAY_MIN     -
                (int32_t)(((int32_t)i2c_charac[i2c_speed].dnf + 3) * (int32_t)ti2cclk);
 8007fb8:	4944      	ldr	r1, [pc, #272]	; (80080cc <Compute_PRESC_SCLDEL_SDADEL+0x15c>)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	202c      	movs	r0, #44	; 0x2c
 8007fbe:	4343      	muls	r3, r0
 8007fc0:	18cb      	adds	r3, r1, r3
 8007fc2:	3328      	adds	r3, #40	; 0x28
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3303      	adds	r3, #3
 8007fc8:	69b9      	ldr	r1, [r7, #24]
 8007fca:	434b      	muls	r3, r1
  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)i2c_charac[i2c_speed].trise + (int32_t)i2c_charac[i2c_speed].sudat_min;
 8007fd0:	4a3e      	ldr	r2, [pc, #248]	; (80080cc <Compute_PRESC_SCLDEL_SDADEL+0x15c>)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	212c      	movs	r1, #44	; 0x2c
 8007fd6:	434b      	muls	r3, r1
 8007fd8:	18d3      	adds	r3, r2, r3
 8007fda:	3320      	adds	r3, #32
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	0018      	movs	r0, r3
 8007fe0:	4a3a      	ldr	r2, [pc, #232]	; (80080cc <Compute_PRESC_SCLDEL_SDADEL+0x15c>)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	212c      	movs	r1, #44	; 0x2c
 8007fe6:	434b      	muls	r3, r1
 8007fe8:	18d3      	adds	r3, r2, r3
 8007fea:	3314      	adds	r3, #20
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	18c3      	adds	r3, r0, r3
 8007ff0:	617b      	str	r3, [r7, #20]

  if (tsdadel_min <= 0)
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dc01      	bgt.n	8007ffc <Compute_PRESC_SCLDEL_SDADEL+0x8c>
  {
    tsdadel_min = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8008000:	e059      	b.n	80080b6 <Compute_PRESC_SCLDEL_SDADEL+0x146>
  {
    for (iscl = 0; iscl < I2C_SCLDEL_MAX; iscl++)
 8008002:	2300      	movs	r3, #0
 8008004:	623b      	str	r3, [r7, #32]
 8008006:	e050      	b.n	80080aa <Compute_PRESC_SCLDEL_SDADEL+0x13a>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (iscl + 1U) * (presc + 1U) * ti2cclk;
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	3301      	adds	r3, #1
 800800c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800e:	3201      	adds	r2, #1
 8008010:	435a      	muls	r2, r3
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	4353      	muls	r3, r2
 8008016:	613b      	str	r3, [r7, #16]

      if (tscldel >= (uint32_t)tscldel_min)
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	429a      	cmp	r2, r3
 800801e:	d341      	bcc.n	80080a4 <Compute_PRESC_SCLDEL_SDADEL+0x134>
      {
        for (isda = 0; isda < I2C_SDADEL_MAX; isda++)
 8008020:	2300      	movs	r3, #0
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	e03b      	b.n	800809e <Compute_PRESC_SCLDEL_SDADEL+0x12e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (isda * (presc + 1U)) * ti2cclk;
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	3301      	adds	r3, #1
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	435a      	muls	r2, r3
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	4353      	muls	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]

          if (tsdadel >= (uint32_t)tsdadel_min)
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	429a      	cmp	r2, r3
 800803a:	d32d      	bcc.n	8008098 <Compute_PRESC_SCLDEL_SDADEL+0x128>
          {
            if (presc != prev_presc)
 800803c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	429a      	cmp	r2, r3
 8008042:	d029      	beq.n	8008098 <Compute_PRESC_SCLDEL_SDADEL+0x128>
            {
              valid_timing[valid_timing_nbr].presc = presc;
 8008044:	4b22      	ldr	r3, [pc, #136]	; (80080d0 <Compute_PRESC_SCLDEL_SDADEL+0x160>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4922      	ldr	r1, [pc, #136]	; (80080d4 <Compute_PRESC_SCLDEL_SDADEL+0x164>)
 800804a:	0013      	movs	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	189b      	adds	r3, r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008054:	505a      	str	r2, [r3, r1]
              valid_timing[valid_timing_nbr].tscldel = iscl;
 8008056:	4b1e      	ldr	r3, [pc, #120]	; (80080d0 <Compute_PRESC_SCLDEL_SDADEL+0x160>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	491e      	ldr	r1, [pc, #120]	; (80080d4 <Compute_PRESC_SCLDEL_SDADEL+0x164>)
 800805c:	0013      	movs	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	189b      	adds	r3, r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	18cb      	adds	r3, r1, r3
 8008066:	3304      	adds	r3, #4
 8008068:	6a3a      	ldr	r2, [r7, #32]
 800806a:	601a      	str	r2, [r3, #0]
              valid_timing[valid_timing_nbr].tsdadel = isda;
 800806c:	4b18      	ldr	r3, [pc, #96]	; (80080d0 <Compute_PRESC_SCLDEL_SDADEL+0x160>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	4918      	ldr	r1, [pc, #96]	; (80080d4 <Compute_PRESC_SCLDEL_SDADEL+0x164>)
 8008072:	0013      	movs	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	189b      	adds	r3, r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	18cb      	adds	r3, r1, r3
 800807c:	3308      	adds	r3, #8
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	62fb      	str	r3, [r7, #44]	; 0x2c
              valid_timing_nbr ++;
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <Compute_PRESC_SCLDEL_SDADEL+0x160>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	4b10      	ldr	r3, [pc, #64]	; (80080d0 <Compute_PRESC_SCLDEL_SDADEL+0x160>)
 800808e:	601a      	str	r2, [r3, #0]

              if (valid_timing_nbr >= I2C_VALID_PRESC_NBR)
 8008090:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <Compute_PRESC_SCLDEL_SDADEL+0x160>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b63      	cmp	r3, #99	; 0x63
 8008096:	d812      	bhi.n	80080be <Compute_PRESC_SCLDEL_SDADEL+0x14e>
        for (isda = 0; isda < I2C_SDADEL_MAX; isda++)
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	3301      	adds	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2b0f      	cmp	r3, #15
 80080a2:	d9c0      	bls.n	8008026 <Compute_PRESC_SCLDEL_SDADEL+0xb6>
    for (iscl = 0; iscl < I2C_SCLDEL_MAX; iscl++)
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	3301      	adds	r3, #1
 80080a8:	623b      	str	r3, [r7, #32]
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	2b0f      	cmp	r3, #15
 80080ae:	d9ab      	bls.n	8008008 <Compute_PRESC_SCLDEL_SDADEL+0x98>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	3301      	adds	r3, #1
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	2b0f      	cmp	r3, #15
 80080ba:	d9a2      	bls.n	8008002 <Compute_PRESC_SCLDEL_SDADEL+0x92>
 80080bc:	e000      	b.n	80080c0 <Compute_PRESC_SCLDEL_SDADEL+0x150>
              {
                return;
 80080be:	46c0      	nop			; (mov r8, r8)
          }
        }
      }
    }
  }
}
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b00c      	add	sp, #48	; 0x30
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	3b9aca00 	.word	0x3b9aca00
 80080cc:	0801a6d0 	.word	0x0801a6d0
 80080d0:	20000a70 	.word	0x20000a70
 80080d4:	200002a0 	.word	0x200002a0

080080d8 <Compute_SCLL_SCLH>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_speed  I2C frequency (index).
  * @retval > 0  config index, no valid config
  */
static uint32_t Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b092      	sub	sp, #72	; 0x48
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t ret = I2C_VALID_PRESC_NBR;
 80080e2:	2364      	movs	r3, #100	; 0x64
 80080e4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_min;
  uint32_t clk_max;
  uint32_t scll_tmp;
  uint32_t sclh_tmp;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	085b      	lsrs	r3, r3, #1
 80080ea:	4a75      	ldr	r2, [pc, #468]	; (80082c0 <Compute_SCLL_SCLH+0x1e8>)
 80080ec:	4694      	mov	ip, r2
 80080ee:	4463      	add	r3, ip
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	0018      	movs	r0, r3
 80080f4:	f7fe f936 	bl	8006364 <__udivsi3>
 80080f8:	0003      	movs	r3, r0
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (i2c_charac[I2C_speed].freq / 2U)) / i2c_charac[I2C_speed].freq;
 80080fc:	4b71      	ldr	r3, [pc, #452]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	212c      	movs	r1, #44	; 0x2c
 8008102:	434a      	muls	r2, r1
 8008104:	58d3      	ldr	r3, [r2, r3]
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	4a6d      	ldr	r2, [pc, #436]	; (80082c0 <Compute_SCLL_SCLH+0x1e8>)
 800810a:	1898      	adds	r0, r3, r2
 800810c:	4b6d      	ldr	r3, [pc, #436]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	212c      	movs	r1, #44	; 0x2c
 8008112:	434a      	muls	r2, r1
 8008114:	58d3      	ldr	r3, [r2, r3]
 8008116:	0019      	movs	r1, r3
 8008118:	f7fe f924 	bl	8006364 <__udivsi3>
 800811c:	0003      	movs	r3, r0
 800811e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = i2c_charac[I2C_speed].dnf * ti2cclk;
 8008120:	4a68      	ldr	r2, [pc, #416]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	212c      	movs	r1, #44	; 0x2c
 8008126:	434b      	muls	r3, r1
 8008128:	18d3      	adds	r3, r2, r3
 800812a:	3328      	adds	r3, #40	; 0x28
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	4353      	muls	r3, r2
 8008132:	627b      	str	r3, [r7, #36]	; 0x24

  clk_max = SEC2NSEC / i2c_charac[I2C_speed].freq_min;
 8008134:	4a63      	ldr	r2, [pc, #396]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	212c      	movs	r1, #44	; 0x2c
 800813a:	434b      	muls	r3, r1
 800813c:	18d3      	adds	r3, r2, r3
 800813e:	3304      	adds	r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	0019      	movs	r1, r3
 8008144:	485e      	ldr	r0, [pc, #376]	; (80082c0 <Compute_SCLL_SCLH+0x1e8>)
 8008146:	f7fe f90d 	bl	8006364 <__udivsi3>
 800814a:	0003      	movs	r3, r0
 800814c:	623b      	str	r3, [r7, #32]
  clk_min = SEC2NSEC / i2c_charac[I2C_speed].freq_max;
 800814e:	4a5d      	ldr	r2, [pc, #372]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	212c      	movs	r1, #44	; 0x2c
 8008154:	434b      	muls	r3, r1
 8008156:	18d3      	adds	r3, r2, r3
 8008158:	3308      	adds	r3, #8
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	0019      	movs	r1, r3
 800815e:	4858      	ldr	r0, [pc, #352]	; (80082c0 <Compute_SCLL_SCLH+0x1e8>)
 8008160:	f7fe f900 	bl	8006364 <__udivsi3>
 8008164:	0003      	movs	r3, r0
 8008166:	61fb      	str	r3, [r7, #28]

  prev_clk_error = ti2cspeed;
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < valid_timing_nbr; count++)
 800816c:	2300      	movs	r3, #0
 800816e:	637b      	str	r3, [r7, #52]	; 0x34
 8008170:	e09a      	b.n	80082a8 <Compute_SCLL_SCLH+0x1d0>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (valid_timing[count].presc + 1U) * ti2cclk;
 8008172:	4955      	ldr	r1, [pc, #340]	; (80082c8 <Compute_SCLL_SCLH+0x1f0>)
 8008174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008176:	0013      	movs	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	189b      	adds	r3, r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	585b      	ldr	r3, [r3, r1]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	4353      	muls	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]

    for (scll_tmp = 0; scll_tmp < I2C_SCLL_MAX; scll_tmp++)
 8008188:	2300      	movs	r3, #0
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800818c:	e085      	b.n	800829a <Compute_SCLL_SCLH+0x1c2>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = I2C_ANALOG_FILTER_DELAY_MIN + dnf_delay + (2U * ti2cclk) + ((scll_tmp + 1U) * tpresc);
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	005a      	lsls	r2, r3, #1
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	18d2      	adds	r2, r2, r3
 8008196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008198:	3301      	adds	r3, #1
 800819a:	69b9      	ldr	r1, [r7, #24]
 800819c:	434b      	muls	r3, r1
 800819e:	18d3      	adds	r3, r2, r3
 80081a0:	3332      	adds	r3, #50	; 0x32
 80081a2:	617b      	str	r3, [r7, #20]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
         tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l < i2c_charac[I2C_speed].l_min) ||
 80081a4:	4a47      	ldr	r2, [pc, #284]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	212c      	movs	r1, #44	; 0x2c
 80081aa:	434b      	muls	r3, r1
 80081ac:	18d3      	adds	r3, r2, r3
 80081ae:	3318      	adds	r3, #24
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d36c      	bcc.n	8008292 <Compute_SCLL_SCLH+0x1ba>
          (ti2cclk >= ((tscl_l - I2C_ANALOG_FILTER_DELAY_MIN - dnf_delay) / 4U)))
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	3b32      	subs	r3, #50	; 0x32
 80081c0:	089b      	lsrs	r3, r3, #2
      if ((tscl_l < i2c_charac[I2C_speed].l_min) ||
 80081c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d264      	bcs.n	8008292 <Compute_SCLL_SCLH+0x1ba>
      {
        continue;
      }

      for (sclh_tmp = 0; sclh_tmp < I2C_SCLH_MAX; sclh_tmp++)
 80081c8:	2300      	movs	r3, #0
 80081ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80081cc:	e05d      	b.n	800828a <Compute_SCLL_SCLH+0x1b2>
      {
        /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
        uint32_t tscl_h = I2C_ANALOG_FILTER_DELAY_MIN + dnf_delay + (2U * ti2cclk) + ((sclh_tmp + 1U) * tpresc);
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	005a      	lsls	r2, r3, #1
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	18d2      	adds	r2, r2, r3
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	3301      	adds	r3, #1
 80081da:	69b9      	ldr	r1, [r7, #24]
 80081dc:	434b      	muls	r3, r1
 80081de:	18d3      	adds	r3, r2, r3
 80081e0:	3332      	adds	r3, #50	; 0x32
 80081e2:	613b      	str	r3, [r7, #16]

        /* tSCL = tf + tLOW + tr + tHIGH */
        uint32_t tscl = tscl_l + tscl_h + i2c_charac[I2C_speed].trise + i2c_charac[I2C_speed].tfall;
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	18d2      	adds	r2, r2, r3
 80081ea:	4936      	ldr	r1, [pc, #216]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	202c      	movs	r0, #44	; 0x2c
 80081f0:	4343      	muls	r3, r0
 80081f2:	18cb      	adds	r3, r1, r3
 80081f4:	3320      	adds	r3, #32
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	18d2      	adds	r2, r2, r3
 80081fa:	4932      	ldr	r1, [pc, #200]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	202c      	movs	r0, #44	; 0x2c
 8008200:	4343      	muls	r3, r0
 8008202:	18cb      	adds	r3, r1, r3
 8008204:	3324      	adds	r3, #36	; 0x24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	18d3      	adds	r3, r2, r3
 800820a:	60fb      	str	r3, [r7, #12]

        if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= i2c_charac[I2C_speed].h_min) && (ti2cclk < tscl_h))
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	429a      	cmp	r2, r3
 8008212:	d337      	bcc.n	8008284 <Compute_SCLL_SCLH+0x1ac>
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	429a      	cmp	r2, r3
 800821a:	d833      	bhi.n	8008284 <Compute_SCLL_SCLH+0x1ac>
 800821c:	4a29      	ldr	r2, [pc, #164]	; (80082c4 <Compute_SCLL_SCLH+0x1ec>)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	212c      	movs	r1, #44	; 0x2c
 8008222:	434b      	muls	r3, r1
 8008224:	18d3      	adds	r3, r2, r3
 8008226:	331c      	adds	r3, #28
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	429a      	cmp	r2, r3
 800822e:	d329      	bcc.n	8008284 <Compute_SCLL_SCLH+0x1ac>
 8008230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	429a      	cmp	r2, r3
 8008236:	d225      	bcs.n	8008284 <Compute_SCLL_SCLH+0x1ac>
        {
          int32_t clk_error = (int32_t)tscl - (int32_t)ti2cspeed;
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	633b      	str	r3, [r7, #48]	; 0x30

          if (clk_error < 0)
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	2b00      	cmp	r3, #0
 8008244:	da02      	bge.n	800824c <Compute_SCLL_SCLH+0x174>
          {
            clk_error = -clk_error;
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	425b      	negs	r3, r3
 800824a:	633b      	str	r3, [r7, #48]	; 0x30
          }

          /* look for the timings with the lowest clock error */
          if ((uint32_t)clk_error < prev_clk_error)
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008250:	429a      	cmp	r2, r3
 8008252:	d917      	bls.n	8008284 <Compute_SCLL_SCLH+0x1ac>
          {
            prev_clk_error = (uint32_t)clk_error;
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	643b      	str	r3, [r7, #64]	; 0x40
            valid_timing[count].scll = scll_tmp;
 8008258:	491b      	ldr	r1, [pc, #108]	; (80082c8 <Compute_SCLL_SCLH+0x1f0>)
 800825a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800825c:	0013      	movs	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	189b      	adds	r3, r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	18cb      	adds	r3, r1, r3
 8008266:	3310      	adds	r3, #16
 8008268:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800826a:	601a      	str	r2, [r3, #0]
            valid_timing[count].sclh = sclh_tmp;
 800826c:	4916      	ldr	r1, [pc, #88]	; (80082c8 <Compute_SCLL_SCLH+0x1f0>)
 800826e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008270:	0013      	movs	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	189b      	adds	r3, r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	18cb      	adds	r3, r1, r3
 800827a:	330c      	adds	r3, #12
 800827c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800827e:	601a      	str	r2, [r3, #0]
            ret = count;
 8008280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008282:	647b      	str	r3, [r7, #68]	; 0x44
      for (sclh_tmp = 0; sclh_tmp < I2C_SCLH_MAX; sclh_tmp++)
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	3301      	adds	r3, #1
 8008288:	63bb      	str	r3, [r7, #56]	; 0x38
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	2bff      	cmp	r3, #255	; 0xff
 800828e:	d99e      	bls.n	80081ce <Compute_SCLL_SCLH+0xf6>
 8008290:	e000      	b.n	8008294 <Compute_SCLL_SCLH+0x1bc>
        continue;
 8008292:	46c0      	nop			; (mov r8, r8)
    for (scll_tmp = 0; scll_tmp < I2C_SCLL_MAX; scll_tmp++)
 8008294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008296:	3301      	adds	r3, #1
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829c:	2bff      	cmp	r3, #255	; 0xff
 800829e:	d800      	bhi.n	80082a2 <Compute_SCLL_SCLH+0x1ca>
 80082a0:	e775      	b.n	800818e <Compute_SCLL_SCLH+0xb6>
  for (uint32_t count = 0; count < valid_timing_nbr; count++)
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	3301      	adds	r3, #1
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
 80082a8:	4b08      	ldr	r3, [pc, #32]	; (80082cc <Compute_SCLL_SCLH+0x1f4>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d200      	bcs.n	80082b4 <Compute_SCLL_SCLH+0x1dc>
 80082b2:	e75e      	b.n	8008172 <Compute_SCLL_SCLH+0x9a>
        }
      }
    }
  }

  return ret;
 80082b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80082b6:	0018      	movs	r0, r3
 80082b8:	46bd      	mov	sp, r7
 80082ba:	b012      	add	sp, #72	; 0x48
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	3b9aca00 	.word	0x3b9aca00
 80082c4:	0801a6d0 	.word	0x0801a6d0
 80082c8:	200002a0 	.word	0x200002a0
 80082cc:	20000a70 	.word	0x20000a70

080082d0 <__NVIC_EnableIRQ>:
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	0002      	movs	r2, r0
 80082d8:	1dfb      	adds	r3, r7, #7
 80082da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80082dc:	1dfb      	adds	r3, r7, #7
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b7f      	cmp	r3, #127	; 0x7f
 80082e2:	d809      	bhi.n	80082f8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082e4:	1dfb      	adds	r3, r7, #7
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	001a      	movs	r2, r3
 80082ea:	231f      	movs	r3, #31
 80082ec:	401a      	ands	r2, r3
 80082ee:	4b04      	ldr	r3, [pc, #16]	; (8008300 <__NVIC_EnableIRQ+0x30>)
 80082f0:	2101      	movs	r1, #1
 80082f2:	4091      	lsls	r1, r2
 80082f4:	000a      	movs	r2, r1
 80082f6:	601a      	str	r2, [r3, #0]
}
 80082f8:	46c0      	nop			; (mov r8, r8)
 80082fa:	46bd      	mov	sp, r7
 80082fc:	b002      	add	sp, #8
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	e000e100 	.word	0xe000e100

08008304 <__NVIC_SetPriority>:
{
 8008304:	b590      	push	{r4, r7, lr}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	0002      	movs	r2, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	1dfb      	adds	r3, r7, #7
 8008310:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008312:	1dfb      	adds	r3, r7, #7
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b7f      	cmp	r3, #127	; 0x7f
 8008318:	d828      	bhi.n	800836c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800831a:	4a2f      	ldr	r2, [pc, #188]	; (80083d8 <__NVIC_SetPriority+0xd4>)
 800831c:	1dfb      	adds	r3, r7, #7
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	b25b      	sxtb	r3, r3
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	33c0      	adds	r3, #192	; 0xc0
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	589b      	ldr	r3, [r3, r2]
 800832a:	1dfa      	adds	r2, r7, #7
 800832c:	7812      	ldrb	r2, [r2, #0]
 800832e:	0011      	movs	r1, r2
 8008330:	2203      	movs	r2, #3
 8008332:	400a      	ands	r2, r1
 8008334:	00d2      	lsls	r2, r2, #3
 8008336:	21ff      	movs	r1, #255	; 0xff
 8008338:	4091      	lsls	r1, r2
 800833a:	000a      	movs	r2, r1
 800833c:	43d2      	mvns	r2, r2
 800833e:	401a      	ands	r2, r3
 8008340:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	019b      	lsls	r3, r3, #6
 8008346:	22ff      	movs	r2, #255	; 0xff
 8008348:	401a      	ands	r2, r3
 800834a:	1dfb      	adds	r3, r7, #7
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	0018      	movs	r0, r3
 8008350:	2303      	movs	r3, #3
 8008352:	4003      	ands	r3, r0
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008358:	481f      	ldr	r0, [pc, #124]	; (80083d8 <__NVIC_SetPriority+0xd4>)
 800835a:	1dfb      	adds	r3, r7, #7
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	b25b      	sxtb	r3, r3
 8008360:	089b      	lsrs	r3, r3, #2
 8008362:	430a      	orrs	r2, r1
 8008364:	33c0      	adds	r3, #192	; 0xc0
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	501a      	str	r2, [r3, r0]
}
 800836a:	e031      	b.n	80083d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800836c:	4a1b      	ldr	r2, [pc, #108]	; (80083dc <__NVIC_SetPriority+0xd8>)
 800836e:	1dfb      	adds	r3, r7, #7
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	0019      	movs	r1, r3
 8008374:	230f      	movs	r3, #15
 8008376:	400b      	ands	r3, r1
 8008378:	3b08      	subs	r3, #8
 800837a:	089b      	lsrs	r3, r3, #2
 800837c:	3306      	adds	r3, #6
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	18d3      	adds	r3, r2, r3
 8008382:	3304      	adds	r3, #4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	1dfa      	adds	r2, r7, #7
 8008388:	7812      	ldrb	r2, [r2, #0]
 800838a:	0011      	movs	r1, r2
 800838c:	2203      	movs	r2, #3
 800838e:	400a      	ands	r2, r1
 8008390:	00d2      	lsls	r2, r2, #3
 8008392:	21ff      	movs	r1, #255	; 0xff
 8008394:	4091      	lsls	r1, r2
 8008396:	000a      	movs	r2, r1
 8008398:	43d2      	mvns	r2, r2
 800839a:	401a      	ands	r2, r3
 800839c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	019b      	lsls	r3, r3, #6
 80083a2:	22ff      	movs	r2, #255	; 0xff
 80083a4:	401a      	ands	r2, r3
 80083a6:	1dfb      	adds	r3, r7, #7
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	0018      	movs	r0, r3
 80083ac:	2303      	movs	r3, #3
 80083ae:	4003      	ands	r3, r0
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083b4:	4809      	ldr	r0, [pc, #36]	; (80083dc <__NVIC_SetPriority+0xd8>)
 80083b6:	1dfb      	adds	r3, r7, #7
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	001c      	movs	r4, r3
 80083bc:	230f      	movs	r3, #15
 80083be:	4023      	ands	r3, r4
 80083c0:	3b08      	subs	r3, #8
 80083c2:	089b      	lsrs	r3, r3, #2
 80083c4:	430a      	orrs	r2, r1
 80083c6:	3306      	adds	r3, #6
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	18c3      	adds	r3, r0, r3
 80083cc:	3304      	adds	r3, #4
 80083ce:	601a      	str	r2, [r3, #0]
}
 80083d0:	46c0      	nop			; (mov r8, r8)
 80083d2:	46bd      	mov	sp, r7
 80083d4:	b003      	add	sp, #12
 80083d6:	bd90      	pop	{r4, r7, pc}
 80083d8:	e000e100 	.word	0xe000e100
 80083dc:	e000ed00 	.word	0xe000ed00

080083e0 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <LL_RCC_SetADCClockSource+0x20>)
 80083ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	0899      	lsrs	r1, r3, #2
 80083f0:	4b03      	ldr	r3, [pc, #12]	; (8008400 <LL_RCC_SetADCClockSource+0x20>)
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	655a      	str	r2, [r3, #84]	; 0x54
}
 80083f8:	46c0      	nop			; (mov r8, r8)
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b002      	add	sp, #8
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40021000 	.word	0x40021000

08008404 <LL_DMAMUX_SetRequestID>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMAMUX_SetRequestID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t Request)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  (void)(DMAMUXx);
  MODIFY_REG((DMAMUX1_Channel0 + Channel)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4a09      	ldr	r2, [pc, #36]	; (800843c <LL_DMAMUX_SetRequestID+0x38>)
 8008416:	4694      	mov	ip, r2
 8008418:	4463      	add	r3, ip
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	227f      	movs	r2, #127	; 0x7f
 800841e:	4393      	bics	r3, r2
 8008420:	0019      	movs	r1, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4a05      	ldr	r2, [pc, #20]	; (800843c <LL_DMAMUX_SetRequestID+0x38>)
 8008428:	4694      	mov	ip, r2
 800842a:	4463      	add	r3, ip
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	430a      	orrs	r2, r1
 8008430:	601a      	str	r2, [r3, #0]
}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	46bd      	mov	sp, r7
 8008436:	b004      	add	sp, #16
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	40020800 	.word	0x40020800

08008440 <LL_DMA_EnableChannel>:
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800844e:	4a0b      	ldr	r2, [pc, #44]	; (800847c <LL_DMA_EnableChannel+0x3c>)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	18d3      	adds	r3, r2, r3
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	001a      	movs	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	18d3      	adds	r3, r2, r3
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4907      	ldr	r1, [pc, #28]	; (800847c <LL_DMA_EnableChannel+0x3c>)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	18cb      	adds	r3, r1, r3
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	0019      	movs	r1, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	18cb      	adds	r3, r1, r3
 800846c:	2101      	movs	r1, #1
 800846e:	430a      	orrs	r2, r1
 8008470:	601a      	str	r2, [r3, #0]
}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	46bd      	mov	sp, r7
 8008476:	b004      	add	sp, #16
 8008478:	bd80      	pop	{r7, pc}
 800847a:	46c0      	nop			; (mov r8, r8)
 800847c:	0801a754 	.word	0x0801a754

08008480 <LL_DMA_SetDataTransferDirection>:
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8008490:	4a0c      	ldr	r2, [pc, #48]	; (80084c4 <LL_DMA_SetDataTransferDirection+0x44>)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	18d3      	adds	r3, r2, r3
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	001a      	movs	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	18d3      	adds	r3, r2, r3
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a09      	ldr	r2, [pc, #36]	; (80084c8 <LL_DMA_SetDataTransferDirection+0x48>)
 80084a2:	4013      	ands	r3, r2
 80084a4:	0019      	movs	r1, r3
 80084a6:	4a07      	ldr	r2, [pc, #28]	; (80084c4 <LL_DMA_SetDataTransferDirection+0x44>)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	18d3      	adds	r3, r2, r3
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	001a      	movs	r2, r3
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	18d3      	adds	r3, r2, r3
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	601a      	str	r2, [r3, #0]
}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	46bd      	mov	sp, r7
 80084be:	b006      	add	sp, #24
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	0801a754 	.word	0x0801a754
 80084c8:	ffffbfef 	.word	0xffffbfef

080084cc <LL_DMA_SetMode>:
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80084dc:	4a0c      	ldr	r2, [pc, #48]	; (8008510 <LL_DMA_SetMode+0x44>)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	18d3      	adds	r3, r2, r3
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	001a      	movs	r2, r3
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	18d3      	adds	r3, r2, r3
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2220      	movs	r2, #32
 80084ee:	4393      	bics	r3, r2
 80084f0:	0019      	movs	r1, r3
 80084f2:	4a07      	ldr	r2, [pc, #28]	; (8008510 <LL_DMA_SetMode+0x44>)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	18d3      	adds	r3, r2, r3
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	001a      	movs	r2, r3
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	18d3      	adds	r3, r2, r3
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	430a      	orrs	r2, r1
 8008504:	601a      	str	r2, [r3, #0]
}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	46bd      	mov	sp, r7
 800850a:	b006      	add	sp, #24
 800850c:	bd80      	pop	{r7, pc}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	0801a754 	.word	0x0801a754

08008514 <LL_DMA_SetPeriphIncMode>:
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8008524:	4a0c      	ldr	r2, [pc, #48]	; (8008558 <LL_DMA_SetPeriphIncMode+0x44>)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	18d3      	adds	r3, r2, r3
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	001a      	movs	r2, r3
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	18d3      	adds	r3, r2, r3
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2240      	movs	r2, #64	; 0x40
 8008536:	4393      	bics	r3, r2
 8008538:	0019      	movs	r1, r3
 800853a:	4a07      	ldr	r2, [pc, #28]	; (8008558 <LL_DMA_SetPeriphIncMode+0x44>)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	18d3      	adds	r3, r2, r3
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	001a      	movs	r2, r3
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	18d3      	adds	r3, r2, r3
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	430a      	orrs	r2, r1
 800854c:	601a      	str	r2, [r3, #0]
}
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	46bd      	mov	sp, r7
 8008552:	b006      	add	sp, #24
 8008554:	bd80      	pop	{r7, pc}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	0801a754 	.word	0x0801a754

0800855c <LL_DMA_SetMemoryIncMode>:
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800856c:	4a0c      	ldr	r2, [pc, #48]	; (80085a0 <LL_DMA_SetMemoryIncMode+0x44>)
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	18d3      	adds	r3, r2, r3
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	001a      	movs	r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	18d3      	adds	r3, r2, r3
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2280      	movs	r2, #128	; 0x80
 800857e:	4393      	bics	r3, r2
 8008580:	0019      	movs	r1, r3
 8008582:	4a07      	ldr	r2, [pc, #28]	; (80085a0 <LL_DMA_SetMemoryIncMode+0x44>)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	18d3      	adds	r3, r2, r3
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	001a      	movs	r2, r3
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	18d3      	adds	r3, r2, r3
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	430a      	orrs	r2, r1
 8008594:	601a      	str	r2, [r3, #0]
}
 8008596:	46c0      	nop			; (mov r8, r8)
 8008598:	46bd      	mov	sp, r7
 800859a:	b006      	add	sp, #24
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	0801a754 	.word	0x0801a754

080085a4 <LL_DMA_SetPeriphSize>:
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80085b4:	4a0c      	ldr	r2, [pc, #48]	; (80085e8 <LL_DMA_SetPeriphSize+0x44>)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	18d3      	adds	r3, r2, r3
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	001a      	movs	r2, r3
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	18d3      	adds	r3, r2, r3
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a09      	ldr	r2, [pc, #36]	; (80085ec <LL_DMA_SetPeriphSize+0x48>)
 80085c6:	4013      	ands	r3, r2
 80085c8:	0019      	movs	r1, r3
 80085ca:	4a07      	ldr	r2, [pc, #28]	; (80085e8 <LL_DMA_SetPeriphSize+0x44>)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	18d3      	adds	r3, r2, r3
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	001a      	movs	r2, r3
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	18d3      	adds	r3, r2, r3
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	430a      	orrs	r2, r1
 80085dc:	601a      	str	r2, [r3, #0]
}
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	46bd      	mov	sp, r7
 80085e2:	b006      	add	sp, #24
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	0801a754 	.word	0x0801a754
 80085ec:	fffffcff 	.word	0xfffffcff

080085f0 <LL_DMA_SetMemorySize>:
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8008600:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <LL_DMA_SetMemorySize+0x44>)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	18d3      	adds	r3, r2, r3
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	001a      	movs	r2, r3
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	18d3      	adds	r3, r2, r3
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a09      	ldr	r2, [pc, #36]	; (8008638 <LL_DMA_SetMemorySize+0x48>)
 8008612:	4013      	ands	r3, r2
 8008614:	0019      	movs	r1, r3
 8008616:	4a07      	ldr	r2, [pc, #28]	; (8008634 <LL_DMA_SetMemorySize+0x44>)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	18d3      	adds	r3, r2, r3
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	001a      	movs	r2, r3
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	18d3      	adds	r3, r2, r3
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	430a      	orrs	r2, r1
 8008628:	601a      	str	r2, [r3, #0]
}
 800862a:	46c0      	nop			; (mov r8, r8)
 800862c:	46bd      	mov	sp, r7
 800862e:	b006      	add	sp, #24
 8008630:	bd80      	pop	{r7, pc}
 8008632:	46c0      	nop			; (mov r8, r8)
 8008634:	0801a754 	.word	0x0801a754
 8008638:	fffff3ff 	.word	0xfffff3ff

0800863c <LL_DMA_SetChannelPriorityLevel>:
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800864c:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	18d3      	adds	r3, r2, r3
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	001a      	movs	r2, r3
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	18d3      	adds	r3, r2, r3
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a09      	ldr	r2, [pc, #36]	; (8008684 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800865e:	4013      	ands	r3, r2
 8008660:	0019      	movs	r1, r3
 8008662:	4a07      	ldr	r2, [pc, #28]	; (8008680 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	18d3      	adds	r3, r2, r3
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	001a      	movs	r2, r3
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	18d3      	adds	r3, r2, r3
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	430a      	orrs	r2, r1
 8008674:	601a      	str	r2, [r3, #0]
}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	46bd      	mov	sp, r7
 800867a:	b006      	add	sp, #24
 800867c:	bd80      	pop	{r7, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	0801a754 	.word	0x0801a754
 8008684:	ffffcfff 	.word	0xffffcfff

08008688 <LL_DMA_SetDataLength>:
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8008698:	4a0b      	ldr	r2, [pc, #44]	; (80086c8 <LL_DMA_SetDataLength+0x40>)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	18d3      	adds	r3, r2, r3
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	001a      	movs	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	18d3      	adds	r3, r2, r3
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	0c1b      	lsrs	r3, r3, #16
 80086aa:	0419      	lsls	r1, r3, #16
 80086ac:	4a06      	ldr	r2, [pc, #24]	; (80086c8 <LL_DMA_SetDataLength+0x40>)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	18d3      	adds	r3, r2, r3
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	001a      	movs	r2, r3
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	18d3      	adds	r3, r2, r3
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	430a      	orrs	r2, r1
 80086be:	605a      	str	r2, [r3, #4]
}
 80086c0:	46c0      	nop			; (mov r8, r8)
 80086c2:	46bd      	mov	sp, r7
 80086c4:	b006      	add	sp, #24
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	0801a754 	.word	0x0801a754

080086cc <LL_DMA_ConfigAddresses>:
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	2b10      	cmp	r3, #16
 80086e2:	d112      	bne.n	800870a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80086e4:	4a14      	ldr	r2, [pc, #80]	; (8008738 <LL_DMA_ConfigAddresses+0x6c>)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	18d3      	adds	r3, r2, r3
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	001a      	movs	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	18d3      	adds	r3, r2, r3
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80086f6:	4a10      	ldr	r2, [pc, #64]	; (8008738 <LL_DMA_ConfigAddresses+0x6c>)
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	18d3      	adds	r3, r2, r3
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	001a      	movs	r2, r3
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	18d3      	adds	r3, r2, r3
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	609a      	str	r2, [r3, #8]
}
 8008708:	e011      	b.n	800872e <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 800870a:	4a0b      	ldr	r2, [pc, #44]	; (8008738 <LL_DMA_ConfigAddresses+0x6c>)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	18d3      	adds	r3, r2, r3
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	001a      	movs	r2, r3
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	18d3      	adds	r3, r2, r3
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800871c:	4a06      	ldr	r2, [pc, #24]	; (8008738 <LL_DMA_ConfigAddresses+0x6c>)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	18d3      	adds	r3, r2, r3
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	001a      	movs	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	18d3      	adds	r3, r2, r3
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	60da      	str	r2, [r3, #12]
}
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	46bd      	mov	sp, r7
 8008732:	b006      	add	sp, #24
 8008734:	bd80      	pop	{r7, pc}
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	0801a754 	.word	0x0801a754

0800873c <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3340      	adds	r3, #64	; 0x40
}
 800874a:	0018      	movs	r0, r3
 800874c:	46bd      	mov	sp, r7
 800874e:	b002      	add	sp, #8
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	4a05      	ldr	r2, [pc, #20]	; (8008778 <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8008764:	401a      	ands	r2, r3
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	611a      	str	r2, [r3, #16]
}
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	46bd      	mov	sp, r7
 8008772:	b002      	add	sp, #8
 8008774:	bd80      	pop	{r7, pc}
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	dfffffff 	.word	0xdfffffff

0800877c <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	2104      	movs	r1, #4
 8008790:	400a      	ands	r2, r1
 8008792:	2107      	movs	r1, #7
 8008794:	4091      	lsls	r1, r2
 8008796:	000a      	movs	r2, r1
 8008798:	43d2      	mvns	r2, r2
 800879a:	401a      	ands	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2104      	movs	r1, #4
 80087a0:	400b      	ands	r3, r1
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	4099      	lsls	r1, r3
 80087a6:	000b      	movs	r3, r1
 80087a8:	431a      	orrs	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	46bd      	mov	sp, r7
 80087b2:	b004      	add	sp, #16
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	4a05      	ldr	r2, [pc, #20]	; (80087dc <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 80087c8:	401a      	ands	r2, r3
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60da      	str	r2, [r3, #12]
}
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	46bd      	mov	sp, r7
 80087d6:	b002      	add	sp, #8
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	ffdfffff 	.word	0xffdfffff

080087e0 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	2204      	movs	r2, #4
 80087f0:	4393      	bics	r3, r2
 80087f2:	001a      	movs	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]
}
 80087fc:	46c0      	nop			; (mov r8, r8)
 80087fe:	46bd      	mov	sp, r7
 8008800:	b002      	add	sp, #8
 8008802:	bd80      	pop	{r7, pc}

08008804 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	035b      	lsls	r3, r3, #13
 8008816:	0b5b      	lsrs	r3, r3, #13
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	46bd      	mov	sp, r7
 8008822:	b002      	add	sp, #8
 8008824:	bd80      	pop	{r7, pc}

08008826 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2203      	movs	r2, #3
 8008836:	4393      	bics	r3, r2
 8008838:	001a      	movs	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60da      	str	r2, [r3, #12]
}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	46bd      	mov	sp, r7
 8008846:	b002      	add	sp, #8
 8008848:	bd80      	pop	{r7, pc}

0800884a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	2203      	movs	r2, #3
 8008858:	4013      	ands	r3, r2
}
 800885a:	0018      	movs	r0, r3
 800885c:	46bd      	mov	sp, r7
 800885e:	b002      	add	sp, #8
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	0212      	lsls	r2, r2, #8
 8008878:	43d2      	mvns	r2, r2
 800887a:	401a      	ands	r2, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	021b      	lsls	r3, r3, #8
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	400b      	ands	r3, r1
 8008884:	4904      	ldr	r1, [pc, #16]	; (8008898 <LL_ADC_SetChannelSamplingTime+0x34>)
 8008886:	400b      	ands	r3, r1
 8008888:	431a      	orrs	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b004      	add	sp, #16
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	07ffff00 	.word	0x07ffff00

0800889c <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2201      	movs	r2, #1
 80088ac:	4393      	bics	r3, r2
 80088ae:	001a      	movs	r2, r3
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	611a      	str	r2, [r3, #16]
}
 80088b8:	46c0      	nop			; (mov r8, r8)
 80088ba:	46bd      	mov	sp, r7
 80088bc:	b002      	add	sp, #8
 80088be:	bd80      	pop	{r7, pc}

080088c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	4a05      	ldr	r2, [pc, #20]	; (80088e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80088ce:	4013      	ands	r3, r2
 80088d0:	2280      	movs	r2, #128	; 0x80
 80088d2:	0552      	lsls	r2, r2, #21
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	46bd      	mov	sp, r7
 80088de:	b002      	add	sp, #8
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	6fffffe8 	.word	0x6fffffe8

080088e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	4a04      	ldr	r2, [pc, #16]	; (8008908 <LL_ADC_Enable+0x20>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	2201      	movs	r2, #1
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008900:	46c0      	nop			; (mov r8, r8)
 8008902:	46bd      	mov	sp, r7
 8008904:	b002      	add	sp, #8
 8008906:	bd80      	pop	{r7, pc}
 8008908:	7fffffe8 	.word	0x7fffffe8

0800890c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	2201      	movs	r2, #1
 800891a:	4013      	ands	r3, r2
 800891c:	2b01      	cmp	r3, #1
 800891e:	d101      	bne.n	8008924 <LL_ADC_IsEnabled+0x18>
 8008920:	2301      	movs	r3, #1
 8008922:	e000      	b.n	8008926 <LL_ADC_IsEnabled+0x1a>
 8008924:	2300      	movs	r3, #0
}
 8008926:	0018      	movs	r0, r3
 8008928:	46bd      	mov	sp, r7
 800892a:	b002      	add	sp, #8
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	4a05      	ldr	r2, [pc, #20]	; (8008954 <LL_ADC_StartCalibration+0x24>)
 800893e:	4013      	ands	r3, r2
 8008940:	2280      	movs	r2, #128	; 0x80
 8008942:	0612      	lsls	r2, r2, #24
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	46bd      	mov	sp, r7
 800894e:	b002      	add	sp, #8
 8008950:	bd80      	pop	{r7, pc}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	7fffffe8 	.word	0x7fffffe8

08008958 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	0fdb      	lsrs	r3, r3, #31
 8008966:	07da      	lsls	r2, r3, #31
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	061b      	lsls	r3, r3, #24
 800896c:	429a      	cmp	r2, r3
 800896e:	d101      	bne.n	8008974 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8008974:	2300      	movs	r3, #0
}
 8008976:	0018      	movs	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	b002      	add	sp, #8
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <LL_ADC_REG_StartConversion+0x20>)
 800898e:	4013      	ands	r3, r2
 8008990:	2204      	movs	r2, #4
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008998:	46c0      	nop			; (mov r8, r8)
 800899a:	46bd      	mov	sp, r7
 800899c:	b002      	add	sp, #8
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	7fffffe8 	.word	0x7fffffe8

080089a4 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2201      	movs	r2, #1
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <LL_ADC_IsActiveFlag_ADRDY+0x18>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 80089bc:	2300      	movs	r3, #0
}
 80089be:	0018      	movs	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	b002      	add	sp, #8
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	2380      	movs	r3, #128	; 0x80
 80089d4:	019b      	lsls	r3, r3, #6
 80089d6:	401a      	ands	r2, r3
 80089d8:	2380      	movs	r3, #128	; 0x80
 80089da:	019b      	lsls	r3, r3, #6
 80089dc:	429a      	cmp	r2, r3
 80089de:	d101      	bne.n	80089e4 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 80089e0:	2301      	movs	r3, #1
 80089e2:	e000      	b.n	80089e6 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	0018      	movs	r0, r3
 80089e8:	46bd      	mov	sp, r7
 80089ea:	b002      	add	sp, #8
 80089ec:	bd80      	pop	{r7, pc}

080089ee <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2280      	movs	r2, #128	; 0x80
 80089fa:	0192      	lsls	r2, r2, #6
 80089fc:	601a      	str	r2, [r3, #0]
}
 80089fe:	46c0      	nop			; (mov r8, r8)
 8008a00:	46bd      	mov	sp, r7
 8008a02:	b002      	add	sp, #8
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2204      	movs	r2, #4
 8008a14:	4393      	bics	r3, r2
 8008a16:	001a      	movs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	605a      	str	r2, [r3, #4]
}
 8008a1c:	46c0      	nop			; (mov r8, r8)
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	b002      	add	sp, #8
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	2208      	movs	r2, #8
 8008a32:	4393      	bics	r3, r2
 8008a34:	001a      	movs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	605a      	str	r2, [r3, #4]
}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	b002      	add	sp, #8
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <LL_AHB1_GRP1_EnableClock>:
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8008a4c:	4b07      	ldr	r3, [pc, #28]	; (8008a6c <LL_AHB1_GRP1_EnableClock+0x28>)
 8008a4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008a50:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <LL_AHB1_GRP1_EnableClock+0x28>)
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <LL_AHB1_GRP1_EnableClock+0x28>)
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008a62:	68fb      	ldr	r3, [r7, #12]
}
 8008a64:	46c0      	nop			; (mov r8, r8)
 8008a66:	46bd      	mov	sp, r7
 8008a68:	b004      	add	sp, #16
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	40021000 	.word	0x40021000

08008a70 <LL_APB2_GRP1_EnableClock>:
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8008a78:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <LL_APB2_GRP1_EnableClock+0x28>)
 8008a7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <LL_APB2_GRP1_EnableClock+0x28>)
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <LL_APB2_GRP1_EnableClock+0x28>)
 8008a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
}
 8008a90:	46c0      	nop			; (mov r8, r8)
 8008a92:	46bd      	mov	sp, r7
 8008a94:	b004      	add	sp, #16
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	40021000 	.word	0x40021000

08008a9c <LL_IOP_GRP1_EnableClock>:
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8008aa4:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <LL_IOP_GRP1_EnableClock+0x28>)
 8008aa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008aa8:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <LL_IOP_GRP1_EnableClock+0x28>)
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8008ab0:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <LL_IOP_GRP1_EnableClock+0x28>)
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008aba:	68fb      	ldr	r3, [r7, #12]
}
 8008abc:	46c0      	nop			; (mov r8, r8)
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	b004      	add	sp, #16
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	40021000 	.word	0x40021000

08008ac8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6819      	ldr	r1, [r3, #0]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	435b      	muls	r3, r3
 8008adc:	001a      	movs	r2, r3
 8008ade:	0013      	movs	r3, r2
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	189b      	adds	r3, r3, r2
 8008ae4:	43db      	mvns	r3, r3
 8008ae6:	400b      	ands	r3, r1
 8008ae8:	001a      	movs	r2, r3
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	435b      	muls	r3, r3
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	434b      	muls	r3, r1
 8008af2:	431a      	orrs	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	601a      	str	r2, [r3, #0]
}
 8008af8:	46c0      	nop			; (mov r8, r8)
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b004      	add	sp, #16
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	43d2      	mvns	r2, r2
 8008b14:	401a      	ands	r2, r3
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	434b      	muls	r3, r1
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	605a      	str	r2, [r3, #4]
}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	46bd      	mov	sp, r7
 8008b26:	b004      	add	sp, #16
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6899      	ldr	r1, [r3, #8]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	435b      	muls	r3, r3
 8008b3e:	001a      	movs	r2, r3
 8008b40:	0013      	movs	r3, r2
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	189b      	adds	r3, r3, r2
 8008b46:	43db      	mvns	r3, r3
 8008b48:	400b      	ands	r3, r1
 8008b4a:	001a      	movs	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	435b      	muls	r3, r3
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	434b      	muls	r3, r1
 8008b54:	431a      	orrs	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	609a      	str	r2, [r3, #8]
}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	b004      	add	sp, #16
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68d9      	ldr	r1, [r3, #12]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	435b      	muls	r3, r3
 8008b76:	001a      	movs	r2, r3
 8008b78:	0013      	movs	r3, r2
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	189b      	adds	r3, r3, r2
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	400b      	ands	r3, r1
 8008b82:	001a      	movs	r2, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	435b      	muls	r3, r3
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	434b      	muls	r3, r1
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	60da      	str	r2, [r3, #12]
}
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b004      	add	sp, #16
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	619a      	str	r2, [r3, #24]
}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b002      	add	sp, #8
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	b002      	add	sp, #8
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <LL_EXTI_EnableIT_0_31>:
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008bd4:	4a05      	ldr	r2, [pc, #20]	; (8008bec <LL_EXTI_EnableIT_0_31+0x20>)
 8008bd6:	2380      	movs	r3, #128	; 0x80
 8008bd8:	58d2      	ldr	r2, [r2, r3]
 8008bda:	4904      	ldr	r1, [pc, #16]	; (8008bec <LL_EXTI_EnableIT_0_31+0x20>)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	2280      	movs	r2, #128	; 0x80
 8008be2:	508b      	str	r3, [r1, r2]
}
 8008be4:	46c0      	nop			; (mov r8, r8)
 8008be6:	46bd      	mov	sp, r7
 8008be8:	b002      	add	sp, #8
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40021800 	.word	0x40021800

08008bf0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8008bfa:	6859      	ldr	r1, [r3, #4]
 8008bfc:	4b03      	ldr	r3, [pc, #12]	; (8008c0c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
}
 8008c04:	46c0      	nop			; (mov r8, r8)
 8008c06:	46bd      	mov	sp, r7
 8008c08:	b002      	add	sp, #8
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	40021800 	.word	0x40021800

08008c10 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8008c10:	b590      	push	{r4, r7, lr}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 8008c1a:	4a0f      	ldr	r2, [pc, #60]	; (8008c58 <LL_EXTI_SetEXTISource+0x48>)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2103      	movs	r1, #3
 8008c20:	400b      	ands	r3, r1
 8008c22:	3318      	adds	r3, #24
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	589b      	ldr	r3, [r3, r2]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	0c12      	lsrs	r2, r2, #16
 8008c2c:	2107      	movs	r1, #7
 8008c2e:	4091      	lsls	r1, r2
 8008c30:	000a      	movs	r2, r1
 8008c32:	43d2      	mvns	r2, r2
 8008c34:	401a      	ands	r2, r3
 8008c36:	0011      	movs	r1, r2
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	0c1b      	lsrs	r3, r3, #16
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	409a      	lsls	r2, r3
 8008c40:	4805      	ldr	r0, [pc, #20]	; (8008c58 <LL_EXTI_SetEXTISource+0x48>)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2403      	movs	r4, #3
 8008c46:	4023      	ands	r3, r4
 8008c48:	430a      	orrs	r2, r1
 8008c4a:	3318      	adds	r3, #24
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	501a      	str	r2, [r3, r0]
}
 8008c50:	46c0      	nop			; (mov r8, r8)
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b003      	add	sp, #12
 8008c56:	bd90      	pop	{r4, r7, pc}
 8008c58:	40021800 	.word	0x40021800

08008c5c <BSP_USBPD_PWR_Init>:
  * @brief  Global initialization of PWR resource used by USB-PD
  * @param  PortNum Type-C port identifier
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_Init(uint32_t PortNum)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <BSP_USBPD_PWR_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008c6e:	2302      	movs	r3, #2
 8008c70:	425b      	negs	r3, r3
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e06c      	b.n	8008d50 <BSP_USBPD_PWR_Init+0xf4>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_Init --");
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	b2d9      	uxtb	r1, r3
 8008c7a:	4b38      	ldr	r3, [pc, #224]	; (8008d5c <BSP_USBPD_PWR_Init+0x100>)
 8008c7c:	2218      	movs	r2, #24
 8008c7e:	9200      	str	r2, [sp, #0]
 8008c80:	2200      	movs	r2, #0
 8008c82:	2006      	movs	r0, #6
 8008c84:	f004 faaa 	bl	800d1dc <USBPD_TRACE_Add>

    if (USBPD_PWR_Port_Status[PortNum].IsInitialized == 0U)
 8008c88:	4935      	ldr	r1, [pc, #212]	; (8008d60 <BSP_USBPD_PWR_Init+0x104>)
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	0013      	movs	r3, r2
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	189b      	adds	r3, r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	5c5b      	ldrb	r3, [r3, r1]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d15a      	bne.n	8008d50 <BSP_USBPD_PWR_Init+0xf4>
    {
      /* Initialisation according to HW configuration type of port */
      switch (USBPD_PWR_Port_Configs[PortNum].Type)
 8008c9a:	4b32      	ldr	r3, [pc, #200]	; (8008d64 <BSP_USBPD_PWR_Init+0x108>)
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	0052      	lsls	r2, r2, #1
 8008ca0:	5cd3      	ldrb	r3, [r2, r3]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d145      	bne.n	8008d32 <BSP_USBPD_PWR_Init+0xd6>
      {
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
          /* Set default Role to SRC */
          USBPD_PWR_Port_Status[PortNum].PwrRole = POWER_ROLE_SOURCE;
 8008ca6:	492e      	ldr	r1, [pc, #184]	; (8008d60 <BSP_USBPD_PWR_Init+0x104>)
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	0013      	movs	r3, r2
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	189b      	adds	r3, r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	18cb      	adds	r3, r1, r3
 8008cb4:	3302      	adds	r3, #2
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	701a      	strb	r2, [r3, #0]

          /* Set default Power Mode to Hibernate */
          USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_HIBERNATE;
 8008cba:	4929      	ldr	r1, [pc, #164]	; (8008d60 <BSP_USBPD_PWR_Init+0x104>)
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	0013      	movs	r3, r2
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	189b      	adds	r3, r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	18cb      	adds	r3, r1, r3
 8008cc8:	3303      	adds	r3, #3
 8008cca:	2201      	movs	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]

          /* Reset port callback for VBUS detection event */
          USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback = NULL;
 8008cce:	4924      	ldr	r1, [pc, #144]	; (8008d60 <BSP_USBPD_PWR_Init+0x104>)
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	0013      	movs	r3, r2
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	189b      	adds	r3, r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	18cb      	adds	r3, r1, r3
 8008cdc:	3308      	adds	r3, #8
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]

          /* Reset last detected fault Tick */
          USBPD_PWR_Port_Status[PortNum].LastFaultTick = 0;
 8008ce2:	491f      	ldr	r1, [pc, #124]	; (8008d60 <BSP_USBPD_PWR_Init+0x104>)
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	0013      	movs	r3, r2
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	189b      	adds	r3, r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	18cb      	adds	r3, r1, r3
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
#if !defined(USBPD_CONFIG_MX)
          /* Initialize required GPIOs */
          PWR_TCPP0203_GPIOConfigInit(PortNum);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f000 fba3 	bl	8009444 <PWR_TCPP0203_GPIOConfigInit>

          /* Initialize EXTI for FLGn signal */
          PWR_TCPP0203_ITConfigInit(PortNum);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	0018      	movs	r0, r3
 8008d02:	f000 fd4f 	bl	80097a4 <PWR_TCPP0203_ITConfigInit>

          /* Enable component */
          TCPP0203_PORT0_ENABLE_GPIO_SET();
 8008d06:	2380      	movs	r3, #128	; 0x80
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	4a17      	ldr	r2, [pc, #92]	; (8008d68 <BSP_USBPD_PWR_Init+0x10c>)
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	0010      	movs	r0, r2
 8008d10:	f7ff ff43 	bl	8008b9a <LL_GPIO_SetOutputPin>
#endif /* !USBPD_CONFIG_MX */
          /* Initialize required BUS for communication */
          ret = PWR_TCPP0203_BUSConfigInit(PortNum, USBPD_PWR_Port_Configs[PortNum].Address);
 8008d14:	4a13      	ldr	r2, [pc, #76]	; (8008d64 <BSP_USBPD_PWR_Init+0x108>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	18d3      	adds	r3, r2, r3
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	0011      	movs	r1, r2
 8008d26:	0018      	movs	r0, r3
 8008d28:	f000 fd8e 	bl	8009848 <PWR_TCPP0203_BUSConfigInit>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	60fb      	str	r3, [r7, #12]
          break;
 8008d30:	e003      	b.n	8008d3a <BSP_USBPD_PWR_Init+0xde>

        case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
        default:
          ret = BSP_ERROR_WRONG_PARAM;
 8008d32:	2302      	movs	r3, #2
 8008d34:	425b      	negs	r3, r3
 8008d36:	60fb      	str	r3, [r7, #12]
          break;
 8008d38:	46c0      	nop			; (mov r8, r8)
      }

      if (ret == BSP_ERROR_NONE)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <BSP_USBPD_PWR_Init+0xf4>
      {
        /* Set Initialisation flag */
        USBPD_PWR_Port_Status[PortNum].IsInitialized = 1U;
 8008d40:	4907      	ldr	r1, [pc, #28]	; (8008d60 <BSP_USBPD_PWR_Init+0x104>)
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	0013      	movs	r3, r2
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	189b      	adds	r3, r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	545a      	strb	r2, [r3, r1]
      }
    }
  }
  return ret;
 8008d50:	68fb      	ldr	r3, [r7, #12]
}
 8008d52:	0018      	movs	r0, r3
 8008d54:	46bd      	mov	sp, r7
 8008d56:	b004      	add	sp, #16
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	08019b68 	.word	0x08019b68
 8008d60:	20000a78 	.word	0x20000a78
 8008d64:	20000070 	.word	0x20000070
 8008d68:	50000800 	.word	0x50000800

08008d6c <BSP_USBPD_PWR_SetRole>:
  *         @arg @ref POWER_ROLE_SOURCE
  *         @arg @ref POWER_ROLE_SINK
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_SetRole(uint32_t PortNum, USBPD_PWR_PowerRoleTypeDef Role)
{
 8008d6c:	b590      	push	{r4, r7, lr}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	000a      	movs	r2, r1
 8008d76:	1cfb      	adds	r3, r7, #3
 8008d78:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <BSP_USBPD_PWR_SetRole+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008d84:	2302      	movs	r3, #2
 8008d86:	425b      	negs	r3, r3
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	e047      	b.n	8008e1c <BSP_USBPD_PWR_SetRole+0xb0>
  }
  else
  {
    switch (Role)
 8008d8c:	1cfb      	adds	r3, r7, #3
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d13e      	bne.n	8008e12 <BSP_USBPD_PWR_SetRole+0xa6>
    {
      case POWER_ROLE_SOURCE:
        /* Port Role is now SRC */
        BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_SetRole : SRC --");
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	b2d9      	uxtb	r1, r3
 8008d98:	4b23      	ldr	r3, [pc, #140]	; (8008e28 <BSP_USBPD_PWR_SetRole+0xbc>)
 8008d9a:	2221      	movs	r2, #33	; 0x21
 8008d9c:	9200      	str	r2, [sp, #0]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2006      	movs	r0, #6
 8008da2:	f004 fa1b 	bl	800d1dc <USBPD_TRACE_Add>
        /* Set port power Role */
        USBPD_PWR_Port_Status[PortNum].PwrRole = Role;
 8008da6:	4921      	ldr	r1, [pc, #132]	; (8008e2c <BSP_USBPD_PWR_SetRole+0xc0>)
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	0013      	movs	r3, r2
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	189b      	adds	r3, r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	18cb      	adds	r3, r1, r3
 8008db4:	3302      	adds	r3, #2
 8008db6:	1cfa      	adds	r2, r7, #3
 8008db8:	7812      	ldrb	r2, [r2, #0]
 8008dba:	701a      	strb	r2, [r3, #0]

        /* Ensure that TCPP0203 mode is not set to Hibernate */
        if (USBPD_PWR_Port_Status[PortNum].PwrSavingMode == USBPD_PWR_MODE_HIBERNATE)
 8008dbc:	491b      	ldr	r1, [pc, #108]	; (8008e2c <BSP_USBPD_PWR_SetRole+0xc0>)
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	0013      	movs	r3, r2
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	189b      	adds	r3, r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	18cb      	adds	r3, r1, r3
 8008dca:	3303      	adds	r3, #3
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d123      	bne.n	8008e1a <BSP_USBPD_PWR_SetRole+0xae>
        {
          if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008dd2:	4b17      	ldr	r3, [pc, #92]	; (8008e30 <BSP_USBPD_PWR_SetRole+0xc4>)
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	0092      	lsls	r2, r2, #2
 8008dd8:	58d3      	ldr	r3, [r2, r3]
 8008dda:	699c      	ldr	r4, [r3, #24]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	0013      	movs	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	189b      	adds	r3, r3, r2
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	4a13      	ldr	r2, [pc, #76]	; (8008e34 <BSP_USBPD_PWR_SetRole+0xc8>)
 8008de8:	189b      	adds	r3, r3, r2
 8008dea:	2120      	movs	r1, #32
 8008dec:	0018      	movs	r0, r3
 8008dee:	47a0      	blx	r4
 8008df0:	1e03      	subs	r3, r0, #0
 8008df2:	d003      	beq.n	8008dfc <BSP_USBPD_PWR_SetRole+0x90>
                                                           TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8008df4:	2305      	movs	r3, #5
 8008df6:	425b      	negs	r3, r3
 8008df8:	60fb      	str	r3, [r7, #12]
          else
          {
            USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_LOWPOWER;
          }
        }
        break;
 8008dfa:	e00e      	b.n	8008e1a <BSP_USBPD_PWR_SetRole+0xae>
            USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_LOWPOWER;
 8008dfc:	490b      	ldr	r1, [pc, #44]	; (8008e2c <BSP_USBPD_PWR_SetRole+0xc0>)
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	0013      	movs	r3, r2
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	189b      	adds	r3, r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	18cb      	adds	r3, r1, r3
 8008e0a:	3303      	adds	r3, #3
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	701a      	strb	r2, [r3, #0]
        break;
 8008e10:	e003      	b.n	8008e1a <BSP_USBPD_PWR_SetRole+0xae>

      case POWER_ROLE_SINK:
      default:
        ret = BSP_ERROR_WRONG_PARAM;
 8008e12:	2302      	movs	r3, #2
 8008e14:	425b      	negs	r3, r3
 8008e16:	60fb      	str	r3, [r7, #12]
        break;
 8008e18:	e000      	b.n	8008e1c <BSP_USBPD_PWR_SetRole+0xb0>
        break;
 8008e1a:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
}
 8008e1e:	0018      	movs	r0, r3
 8008e20:	46bd      	mov	sp, r7
 8008e22:	b005      	add	sp, #20
 8008e24:	bd90      	pop	{r4, r7, pc}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	08019ba0 	.word	0x08019ba0
 8008e2c:	20000a78 	.word	0x20000a78
 8008e30:	20000aac 	.word	0x20000aac
 8008e34:	20000a84 	.word	0x20000a84

08008e38 <BSP_USBPD_PWR_SetPowerMode>:
  *         @arg @ref USBPD_PWR_MODE_LOWPOWER
  *         @arg @ref USBPD_PWR_MODE_NORMAL
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_SetPowerMode(uint32_t PortNum, USBPD_PWR_PowerModeTypeDef PwrMode)
{
 8008e38:	b5b0      	push	{r4, r5, r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af02      	add	r7, sp, #8
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	000a      	movs	r2, r1
 8008e42:	1cfb      	adds	r3, r7, #3
 8008e44:	701a      	strb	r2, [r3, #0]
  uint8_t flg_reg;
  int32_t ret = BSP_ERROR_NONE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <BSP_USBPD_PWR_SetPowerMode+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008e50:	2302      	movs	r3, #2
 8008e52:	425b      	negs	r3, r3
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	e0ee      	b.n	8009036 <BSP_USBPD_PWR_SetPowerMode+0x1fe>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_SetPowerMode --");
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	b2d9      	uxtb	r1, r3
 8008e5c:	4b78      	ldr	r3, [pc, #480]	; (8009040 <BSP_USBPD_PWR_SetPowerMode+0x208>)
 8008e5e:	2220      	movs	r2, #32
 8008e60:	9200      	str	r2, [sp, #0]
 8008e62:	2200      	movs	r2, #0
 8008e64:	2006      	movs	r0, #6
 8008e66:	f004 f9b9 	bl	800d1dc <USBPD_TRACE_Add>

    /* Evaluate requested Power config for port */
    switch (PwrMode)
 8008e6a:	1cfb      	adds	r3, r7, #3
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d100      	bne.n	8008e74 <BSP_USBPD_PWR_SetPowerMode+0x3c>
 8008e72:	e0ac      	b.n	8008fce <BSP_USBPD_PWR_SetPowerMode+0x196>
 8008e74:	dd00      	ble.n	8008e78 <BSP_USBPD_PWR_SetPowerMode+0x40>
 8008e76:	e0c8      	b.n	800900a <BSP_USBPD_PWR_SetPowerMode+0x1d2>
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d100      	bne.n	8008e7e <BSP_USBPD_PWR_SetPowerMode+0x46>
 8008e7c:	e089      	b.n	8008f92 <BSP_USBPD_PWR_SetPowerMode+0x15a>
 8008e7e:	dd00      	ble.n	8008e82 <BSP_USBPD_PWR_SetPowerMode+0x4a>
 8008e80:	e0c3      	b.n	800900a <BSP_USBPD_PWR_SetPowerMode+0x1d2>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <BSP_USBPD_PWR_SetPowerMode+0x54>
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d015      	beq.n	8008eb6 <BSP_USBPD_PWR_SetPowerMode+0x7e>
 8008e8a:	e0be      	b.n	800900a <BSP_USBPD_PWR_SetPowerMode+0x1d2>
    {
      case USBPD_PWR_MODE_OFF:
        /* Port should enter OFF mode : Reset TCPP0203 Reg0 */
        if (USBPD_PWR_PortCompDrv[PortNum]->Reset(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 8008e8c:	4b6d      	ldr	r3, [pc, #436]	; (8009044 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	0092      	lsls	r2, r2, #2
 8008e92:	58d3      	ldr	r3, [r2, r3]
 8008e94:	6899      	ldr	r1, [r3, #8]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	0013      	movs	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	189b      	adds	r3, r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	4a69      	ldr	r2, [pc, #420]	; (8009048 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008ea2:	189b      	adds	r3, r3, r2
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	4788      	blx	r1
 8008ea8:	1e03      	subs	r3, r0, #0
 8008eaa:	d100      	bne.n	8008eae <BSP_USBPD_PWR_SetPowerMode+0x76>
 8008eac:	e0b1      	b.n	8009012 <BSP_USBPD_PWR_SetPowerMode+0x1da>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008eae:	2305      	movs	r3, #5
 8008eb0:	425b      	negs	r3, r3
 8008eb2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008eb4:	e0ad      	b.n	8009012 <BSP_USBPD_PWR_SetPowerMode+0x1da>
      case USBPD_PWR_MODE_HIBERNATE:
        /* Port Mode is Hibernate : (Default state at startup)
             - Gate Driver Provider OFF
             - waiting for VBUS_OK in FLGn (interrupt)
        */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Hibernate --");
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	b2d9      	uxtb	r1, r3
 8008eba:	4b64      	ldr	r3, [pc, #400]	; (800904c <BSP_USBPD_PWR_SetPowerMode+0x214>)
 8008ebc:	220f      	movs	r2, #15
 8008ebe:	9200      	str	r2, [sp, #0]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2006      	movs	r0, #6
 8008ec4:	f004 f98a 	bl	800d1dc <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008ec8:	4b5e      	ldr	r3, [pc, #376]	; (8009044 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	0092      	lsls	r2, r2, #2
 8008ece:	58d3      	ldr	r3, [r2, r3]
 8008ed0:	699c      	ldr	r4, [r3, #24]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	0013      	movs	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	189b      	adds	r3, r3, r2
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	4a5a      	ldr	r2, [pc, #360]	; (8009048 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008ede:	189b      	adds	r3, r3, r2
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	47a0      	blx	r4
 8008ee6:	1e03      	subs	r3, r0, #0
 8008ee8:	d002      	beq.n	8008ef0 <BSP_USBPD_PWR_SetPowerMode+0xb8>
                                                         TCPP0203_POWER_MODE_HIBERNATE) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008eea:	2305      	movs	r3, #5
 8008eec:	425b      	negs	r3, r3
 8008eee:	60fb      	str	r3, [r7, #12]
        }

        /* Check if VBUS is present (in case of SNK VBUS powered device) */
        /* Read Flags register (FLGn) */
        if (USBPD_PWR_PortCompDrv[PortNum]->ReadFlagRegister(&USBPD_PWR_PortCompObj[PortNum], &flg_reg) == TCPP0203_OK)
 8008ef0:	4b54      	ldr	r3, [pc, #336]	; (8009044 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	0092      	lsls	r2, r2, #2
 8008ef6:	58d3      	ldr	r3, [r2, r3]
 8008ef8:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	0013      	movs	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	189b      	adds	r3, r3, r2
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	4a50      	ldr	r2, [pc, #320]	; (8009048 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008f06:	189b      	adds	r3, r3, r2
 8008f08:	250b      	movs	r5, #11
 8008f0a:	197a      	adds	r2, r7, r5
 8008f0c:	0011      	movs	r1, r2
 8008f0e:	0018      	movs	r0, r3
 8008f10:	47a0      	blx	r4
 8008f12:	1e03      	subs	r3, r0, #0
 8008f14:	d000      	beq.n	8008f18 <BSP_USBPD_PWR_SetPowerMode+0xe0>
 8008f16:	e07e      	b.n	8009016 <BSP_USBPD_PWR_SetPowerMode+0x1de>
        {
          /* If FLGn has been set to 0 in LOW POWER or HIBERNATE mode,
             it is expected that a VBUS_OK condition is detected.
             In this case, if any, vBus Detection callback could be called */
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 8008f18:	197b      	adds	r3, r7, r5
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	001a      	movs	r2, r3
 8008f1e:	2320      	movs	r3, #32
 8008f20:	4013      	ands	r3, r2
 8008f22:	d100      	bne.n	8008f26 <BSP_USBPD_PWR_SetPowerMode+0xee>
 8008f24:	e077      	b.n	8009016 <BSP_USBPD_PWR_SetPowerMode+0x1de>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 8008f26:	494a      	ldr	r1, [pc, #296]	; (8009050 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	0013      	movs	r3, r2
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	189b      	adds	r3, r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	18cb      	adds	r3, r1, r3
 8008f34:	3308      	adds	r3, #8
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d06c      	beq.n	8009016 <BSP_USBPD_PWR_SetPowerMode+0x1de>
            {
              /* In case of TCPP03 in Hibernate Mode (SNK config),
                 Mode is set to Low power to enable TCPP02 behavior on CC lines */
              /* Switch to Low Power mode */
              BSP_USBPD_PWR_TRACE(PortNum, "-- Low Power --");
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	b2d9      	uxtb	r1, r3
 8008f40:	4b44      	ldr	r3, [pc, #272]	; (8009054 <BSP_USBPD_PWR_SetPowerMode+0x21c>)
 8008f42:	220f      	movs	r2, #15
 8008f44:	9200      	str	r2, [sp, #0]
 8008f46:	2200      	movs	r2, #0
 8008f48:	2006      	movs	r0, #6
 8008f4a:	f004 f947 	bl	800d1dc <USBPD_TRACE_Add>
              if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008f4e:	4b3d      	ldr	r3, [pc, #244]	; (8009044 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	0092      	lsls	r2, r2, #2
 8008f54:	58d3      	ldr	r3, [r2, r3]
 8008f56:	699c      	ldr	r4, [r3, #24]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	0013      	movs	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	189b      	adds	r3, r3, r2
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	4a39      	ldr	r2, [pc, #228]	; (8009048 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008f64:	189b      	adds	r3, r3, r2
 8008f66:	2120      	movs	r1, #32
 8008f68:	0018      	movs	r0, r3
 8008f6a:	47a0      	blx	r4
 8008f6c:	1e03      	subs	r3, r0, #0
 8008f6e:	d002      	beq.n	8008f76 <BSP_USBPD_PWR_SetPowerMode+0x13e>
                                                               TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
              {
                ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f70:	2305      	movs	r3, #5
 8008f72:	425b      	negs	r3, r3
 8008f74:	60fb      	str	r3, [r7, #12]
              }

              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 8008f76:	4936      	ldr	r1, [pc, #216]	; (8009050 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	0013      	movs	r3, r2
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	189b      	adds	r3, r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	18cb      	adds	r3, r1, r3
 8008f84:	3308      	adds	r3, #8
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	0010      	movs	r0, r2
 8008f8e:	4798      	blx	r3
          else
          {
            /* VBUS indication not present in FLGn flags : nothing more to be done */
          }
        }
        break;
 8008f90:	e041      	b.n	8009016 <BSP_USBPD_PWR_SetPowerMode+0x1de>
      case USBPD_PWR_MODE_LOWPOWER:
        /* Port Mode is Low Power :
             - Gate Driver Consumer or Provider controlled by I2C
             - waiting for VBUS_OK in FLGn (interrupt)
        */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Low Power --");
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	b2d9      	uxtb	r1, r3
 8008f96:	4b2f      	ldr	r3, [pc, #188]	; (8009054 <BSP_USBPD_PWR_SetPowerMode+0x21c>)
 8008f98:	220f      	movs	r2, #15
 8008f9a:	9200      	str	r2, [sp, #0]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2006      	movs	r0, #6
 8008fa0:	f004 f91c 	bl	800d1dc <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008fa4:	4b27      	ldr	r3, [pc, #156]	; (8009044 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	0092      	lsls	r2, r2, #2
 8008faa:	58d3      	ldr	r3, [r2, r3]
 8008fac:	699c      	ldr	r4, [r3, #24]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	0013      	movs	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	189b      	adds	r3, r3, r2
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	4a23      	ldr	r2, [pc, #140]	; (8009048 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008fba:	189b      	adds	r3, r3, r2
 8008fbc:	2120      	movs	r1, #32
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	47a0      	blx	r4
 8008fc2:	1e03      	subs	r3, r0, #0
 8008fc4:	d029      	beq.n	800901a <BSP_USBPD_PWR_SetPowerMode+0x1e2>
                                                         TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fc6:	2305      	movs	r3, #5
 8008fc8:	425b      	negs	r3, r3
 8008fca:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008fcc:	e025      	b.n	800901a <BSP_USBPD_PWR_SetPowerMode+0x1e2>

      case USBPD_PWR_MODE_NORMAL:
        /* Port Mode is Normal : No power saving measure (Explicit contract in place) */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Normal --");
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	b2d9      	uxtb	r1, r3
 8008fd2:	4b21      	ldr	r3, [pc, #132]	; (8009058 <BSP_USBPD_PWR_SetPowerMode+0x220>)
 8008fd4:	220c      	movs	r2, #12
 8008fd6:	9200      	str	r2, [sp, #0]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2006      	movs	r0, #6
 8008fdc:	f004 f8fe 	bl	800d1dc <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008fe0:	4b18      	ldr	r3, [pc, #96]	; (8009044 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	58d3      	ldr	r3, [r2, r3]
 8008fe8:	699c      	ldr	r4, [r3, #24]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	0013      	movs	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	189b      	adds	r3, r3, r2
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	4a14      	ldr	r2, [pc, #80]	; (8009048 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008ff6:	189b      	adds	r3, r3, r2
 8008ff8:	2110      	movs	r1, #16
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	47a0      	blx	r4
 8008ffe:	1e03      	subs	r3, r0, #0
 8009000:	d00d      	beq.n	800901e <BSP_USBPD_PWR_SetPowerMode+0x1e6>
                                                         TCPP0203_POWER_MODE_NORMAL) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009002:	2305      	movs	r3, #5
 8009004:	425b      	negs	r3, r3
 8009006:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009008:	e009      	b.n	800901e <BSP_USBPD_PWR_SetPowerMode+0x1e6>

      default:
        ret = BSP_ERROR_WRONG_PARAM;
 800900a:	2302      	movs	r3, #2
 800900c:	425b      	negs	r3, r3
 800900e:	60fb      	str	r3, [r7, #12]
        break;
 8009010:	e006      	b.n	8009020 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	e004      	b.n	8009020 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	e002      	b.n	8009020 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 800901a:	46c0      	nop			; (mov r8, r8)
 800901c:	e000      	b.n	8009020 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 800901e:	46c0      	nop			; (mov r8, r8)
    }

    /* Set port low power operating mode */
    USBPD_PWR_Port_Status[PortNum].PwrSavingMode = PwrMode;
 8009020:	490b      	ldr	r1, [pc, #44]	; (8009050 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	0013      	movs	r3, r2
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	189b      	adds	r3, r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	18cb      	adds	r3, r1, r3
 800902e:	3303      	adds	r3, #3
 8009030:	1cfa      	adds	r2, r7, #3
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009036:	68fb      	ldr	r3, [r7, #12]
}
 8009038:	0018      	movs	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	b004      	add	sp, #16
 800903e:	bdb0      	pop	{r4, r5, r7, pc}
 8009040:	08019bc4 	.word	0x08019bc4
 8009044:	20000aac 	.word	0x20000aac
 8009048:	20000a84 	.word	0x20000a84
 800904c:	08019be8 	.word	0x08019be8
 8009050:	20000a78 	.word	0x20000a78
 8009054:	08019bf8 	.word	0x08019bf8
 8009058:	08019c08 	.word	0x08019c08

0800905c <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSInit(uint32_t PortNum)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af02      	add	r7, sp, #8
 8009062:	6078      	str	r0, [r7, #4]
  int32_t ret;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <BSP_USBPD_PWR_VBUSInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800906a:	2302      	movs	r3, #2
 800906c:	425b      	negs	r3, r3
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	e022      	b.n	80090b8 <BSP_USBPD_PWR_VBUSInit+0x5c>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSInit --");
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	b2d9      	uxtb	r1, r3
 8009076:	4b13      	ldr	r3, [pc, #76]	; (80090c4 <BSP_USBPD_PWR_VBUSInit+0x68>)
 8009078:	221c      	movs	r2, #28
 800907a:	9200      	str	r2, [sp, #0]
 800907c:	2200      	movs	r2, #0
 800907e:	2006      	movs	r0, #6
 8009080:	f004 f8ac 	bl	800d1dc <USBPD_TRACE_Add>

    /* Initialize required HW for VBUS management */
    switch (USBPD_PWR_Port_Configs[PortNum].Type)
 8009084:	4b10      	ldr	r3, [pc, #64]	; (80090c8 <BSP_USBPD_PWR_VBUSInit+0x6c>)
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	0052      	lsls	r2, r2, #1
 800908a:	5cd3      	ldrb	r3, [r2, r3]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d10f      	bne.n	80090b0 <BSP_USBPD_PWR_VBUSInit+0x54>
    {
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
        /* Switch to Normal mode */
        ret = BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_NORMAL);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2103      	movs	r1, #3
 8009094:	0018      	movs	r0, r3
 8009096:	f7ff fecf 	bl	8008e38 <BSP_USBPD_PWR_SetPowerMode>
 800909a:	0003      	movs	r3, r0
 800909c:	60fb      	str	r3, [r7, #12]
#if !defined(USBPD_CONFIG_MX)
        PWR_TCPP0203_Configure_ADC();
 800909e:	f000 fa21 	bl	80094e4 <PWR_TCPP0203_Configure_ADC>
        PWR_TCPP0203_Activate_ADC();
 80090a2:	f000 fb1d 	bl	80096e0 <PWR_TCPP0203_Activate_ADC>

        /*  Start Conversion */
        LL_ADC_REG_StartConversion(VISENSE_ADC_INSTANCE);
 80090a6:	4b09      	ldr	r3, [pc, #36]	; (80090cc <BSP_USBPD_PWR_VBUSInit+0x70>)
 80090a8:	0018      	movs	r0, r3
 80090aa:	f7ff fc69 	bl	8008980 <LL_ADC_REG_StartConversion>
#endif /* !USBPD_CONFIG_MX */
        break;
 80090ae:	e003      	b.n	80090b8 <BSP_USBPD_PWR_VBUSInit+0x5c>

      case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
      default:
        ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80090b0:	230b      	movs	r3, #11
 80090b2:	425b      	negs	r3, r3
 80090b4:	60fb      	str	r3, [r7, #12]
        break;
 80090b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return ret;
 80090b8:	68fb      	ldr	r3, [r7, #12]
}
 80090ba:	0018      	movs	r0, r3
 80090bc:	46bd      	mov	sp, r7
 80090be:	b004      	add	sp, #16
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	08019c3c 	.word	0x08019c3c
 80090c8:	20000070 	.word	0x20000070
 80090cc:	40012400 	.word	0x40012400

080090d0 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t PortNum)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <BSP_USBPD_PWR_VBUSDeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80090de:	2302      	movs	r3, #2
 80090e0:	425b      	negs	r3, r3
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e01a      	b.n	800911c <BSP_USBPD_PWR_VBUSDeInit+0x4c>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSDeInit --");
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	b2d9      	uxtb	r1, r3
 80090ea:	4b0f      	ldr	r3, [pc, #60]	; (8009128 <BSP_USBPD_PWR_VBUSDeInit+0x58>)
 80090ec:	221e      	movs	r2, #30
 80090ee:	9200      	str	r2, [sp, #0]
 80090f0:	2200      	movs	r2, #0
 80090f2:	2006      	movs	r0, #6
 80090f4:	f004 f872 	bl	800d1dc <USBPD_TRACE_Add>

    /* De-Initialize required HW for VBUS management */
    switch (USBPD_PWR_Port_Configs[PortNum].Type)
 80090f8:	4b0c      	ldr	r3, [pc, #48]	; (800912c <BSP_USBPD_PWR_VBUSDeInit+0x5c>)
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	0052      	lsls	r2, r2, #1
 80090fe:	5cd3      	ldrb	r3, [r2, r3]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d107      	bne.n	8009114 <BSP_USBPD_PWR_VBUSDeInit+0x44>
    {
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
        /* Switch to Low Power mode */
        ret = BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2102      	movs	r1, #2
 8009108:	0018      	movs	r0, r3
 800910a:	f7ff fe95 	bl	8008e38 <BSP_USBPD_PWR_SetPowerMode>
 800910e:	0003      	movs	r3, r0
 8009110:	60fb      	str	r3, [r7, #12]
        break;
 8009112:	e003      	b.n	800911c <BSP_USBPD_PWR_VBUSDeInit+0x4c>

      case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
      default:
        ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8009114:	230b      	movs	r3, #11
 8009116:	425b      	negs	r3, r3
 8009118:	60fb      	str	r3, [r7, #12]
        break;
 800911a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return ret;
 800911c:	68fb      	ldr	r3, [r7, #12]
}
 800911e:	0018      	movs	r0, r3
 8009120:	46bd      	mov	sp, r7
 8009122:	b004      	add	sp, #16
 8009124:	bd80      	pop	{r7, pc}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	08019c5c 	.word	0x08019c5c
 800912c:	20000070 	.word	0x20000070

08009130 <BSP_USBPD_PWR_VBUSOn>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSOn(uint32_t PortNum)
{
 8009130:	b590      	push	{r4, r7, lr}
 8009132:	b087      	sub	sp, #28
 8009134:	af02      	add	r7, sp, #8
 8009136:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8009138:	2300      	movs	r3, #0
 800913a:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <BSP_USBPD_PWR_VBUSOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009142:	2302      	movs	r3, #2
 8009144:	425b      	negs	r3, r3
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e034      	b.n	80091b4 <BSP_USBPD_PWR_VBUSOn+0x84>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSOn --");
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	b2d9      	uxtb	r1, r3
 800914e:	4b1c      	ldr	r3, [pc, #112]	; (80091c0 <BSP_USBPD_PWR_VBUSOn+0x90>)
 8009150:	221a      	movs	r2, #26
 8009152:	9200      	str	r2, [sp, #0]
 8009154:	2200      	movs	r2, #0
 8009156:	2006      	movs	r0, #6
 8009158:	f004 f840 	bl	800d1dc <USBPD_TRACE_Add>
    /* Port Role is now SRC : Close Gate Driver Provider */
    if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 800915c:	4919      	ldr	r1, [pc, #100]	; (80091c4 <BSP_USBPD_PWR_VBUSOn+0x94>)
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	0013      	movs	r3, r2
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	189b      	adds	r3, r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	18cb      	adds	r3, r1, r3
 800916a:	3302      	adds	r3, #2
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d11d      	bne.n	80091ae <BSP_USBPD_PWR_VBUSOn+0x7e>
    {
      if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <BSP_USBPD_PWR_VBUSOn+0x98>)
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	0092      	lsls	r2, r2, #2
 8009178:	58d3      	ldr	r3, [r2, r3]
 800917a:	691c      	ldr	r4, [r3, #16]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	0013      	movs	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	189b      	adds	r3, r3, r2
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	4a11      	ldr	r2, [pc, #68]	; (80091cc <BSP_USBPD_PWR_VBUSOn+0x9c>)
 8009188:	189b      	adds	r3, r3, r2
 800918a:	2104      	movs	r1, #4
 800918c:	0018      	movs	r0, r3
 800918e:	47a0      	blx	r4
 8009190:	1e03      	subs	r3, r0, #0
 8009192:	d002      	beq.n	800919a <BSP_USBPD_PWR_VBUSOn+0x6a>
                                                                TCPP0203_GD_PROVIDER_SWITCH_CLOSED) != TCPP0203_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009194:	2305      	movs	r3, #5
 8009196:	425b      	negs	r3, r3
 8009198:	60fb      	str	r3, [r7, #12]
      }
      BSP_USBPD_PWR_TRACE(PortNum, "-- GDP/GDC setting : SRC --");
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	b2d9      	uxtb	r1, r3
 800919e:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <BSP_USBPD_PWR_VBUSOn+0xa0>)
 80091a0:	221b      	movs	r2, #27
 80091a2:	9200      	str	r2, [sp, #0]
 80091a4:	2200      	movs	r2, #0
 80091a6:	2006      	movs	r0, #6
 80091a8:	f004 f818 	bl	800d1dc <USBPD_TRACE_Add>
 80091ac:	e002      	b.n	80091b4 <BSP_USBPD_PWR_VBUSOn+0x84>
    }
    else
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80091ae:	2305      	movs	r3, #5
 80091b0:	425b      	negs	r3, r3
 80091b2:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80091b4:	68fb      	ldr	r3, [r7, #12]
}
 80091b6:	0018      	movs	r0, r3
 80091b8:	46bd      	mov	sp, r7
 80091ba:	b005      	add	sp, #20
 80091bc:	bd90      	pop	{r4, r7, pc}
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	08019c7c 	.word	0x08019c7c
 80091c4:	20000a78 	.word	0x20000a78
 80091c8:	20000aac 	.word	0x20000aac
 80091cc:	20000a84 	.word	0x20000a84
 80091d0:	08019c98 	.word	0x08019c98

080091d4 <BSP_USBPD_PWR_VBUSOff>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSOff(uint32_t PortNum)
{
 80091d4:	b590      	push	{r4, r7, lr}
 80091d6:	b089      	sub	sp, #36	; 0x24
 80091d8:	af02      	add	r7, sp, #8
 80091da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
#if (BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0)
  uint32_t vbus;
#endif /* BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0 */

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <BSP_USBPD_PWR_VBUSOff+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80091e6:	2302      	movs	r3, #2
 80091e8:	425b      	negs	r3, r3
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	e06e      	b.n	80092cc <BSP_USBPD_PWR_VBUSOff+0xf8>
  }
  else
  {
    /* Open Gate driver provider */
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSOff --");
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	b2d9      	uxtb	r1, r3
 80091f2:	4b39      	ldr	r3, [pc, #228]	; (80092d8 <BSP_USBPD_PWR_VBUSOff+0x104>)
 80091f4:	221b      	movs	r2, #27
 80091f6:	9200      	str	r2, [sp, #0]
 80091f8:	2200      	movs	r2, #0
 80091fa:	2006      	movs	r0, #6
 80091fc:	f003 ffee 	bl	800d1dc <USBPD_TRACE_Add>
    if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 8009200:	4b36      	ldr	r3, [pc, #216]	; (80092dc <BSP_USBPD_PWR_VBUSOff+0x108>)
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	0092      	lsls	r2, r2, #2
 8009206:	58d3      	ldr	r3, [r2, r3]
 8009208:	691c      	ldr	r4, [r3, #16]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	0013      	movs	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	189b      	adds	r3, r3, r2
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	4a32      	ldr	r2, [pc, #200]	; (80092e0 <BSP_USBPD_PWR_VBUSOff+0x10c>)
 8009216:	189b      	adds	r3, r3, r2
 8009218:	2100      	movs	r1, #0
 800921a:	0018      	movs	r0, r3
 800921c:	47a0      	blx	r4
 800921e:	1e03      	subs	r3, r0, #0
 8009220:	d003      	beq.n	800922a <BSP_USBPD_PWR_VBUSOff+0x56>
                                                              TCPP0203_GD_PROVIDER_SWITCH_OPEN) != TCPP0203_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009222:	2305      	movs	r3, #5
 8009224:	425b      	negs	r3, r3
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e050      	b.n	80092cc <BSP_USBPD_PWR_VBUSOff+0xf8>
    }
#if (BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0)
    else
    {
      /* Set Discharge On */
      if (USBPD_PWR_PortCompDrv[PortNum]->SetVBusDischarge(&USBPD_PWR_PortCompObj[PortNum],
 800922a:	4b2c      	ldr	r3, [pc, #176]	; (80092dc <BSP_USBPD_PWR_VBUSOff+0x108>)
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	0092      	lsls	r2, r2, #2
 8009230:	58d3      	ldr	r3, [r2, r3]
 8009232:	69dc      	ldr	r4, [r3, #28]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	0013      	movs	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	189b      	adds	r3, r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4a28      	ldr	r2, [pc, #160]	; (80092e0 <BSP_USBPD_PWR_VBUSOff+0x10c>)
 8009240:	189b      	adds	r3, r3, r2
 8009242:	2140      	movs	r1, #64	; 0x40
 8009244:	0018      	movs	r0, r3
 8009246:	47a0      	blx	r4
 8009248:	1e03      	subs	r3, r0, #0
 800924a:	d003      	beq.n	8009254 <BSP_USBPD_PWR_VBUSOff+0x80>
                                                           TCPP0203_VBUS_DISCHARGE_ON) != TCPP0203_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800924c:	2305      	movs	r3, #5
 800924e:	425b      	negs	r3, r3
 8009250:	617b      	str	r3, [r7, #20]
 8009252:	e03b      	b.n	80092cc <BSP_USBPD_PWR_VBUSOff+0xf8>
      }
      else
      {
        /* Wait VBUS level becomes lower than USBPD_PWR_LOW_VBUS_THRESHOLD */
        uint8_t counter = 0;
 8009254:	2313      	movs	r3, #19
 8009256:	18fb      	adds	r3, r7, r3
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]

        (void)BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &vbus);
 800925c:	230c      	movs	r3, #12
 800925e:	18fa      	adds	r2, r7, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	0011      	movs	r1, r2
 8009264:	0018      	movs	r0, r3
 8009266:	f000 f875 	bl	8009354 <BSP_USBPD_PWR_VBUSGetVoltage>

        while ((vbus >= (USBPD_PWR_LOW_VBUS_THRESHOLD - 200U)) && (counter < 20U))
 800926a:	e00f      	b.n	800928c <BSP_USBPD_PWR_VBUSOff+0xb8>
        {
          counter++;
 800926c:	2113      	movs	r1, #19
 800926e:	187b      	adds	r3, r7, r1
 8009270:	781a      	ldrb	r2, [r3, #0]
 8009272:	187b      	adds	r3, r7, r1
 8009274:	3201      	adds	r2, #1
 8009276:	701a      	strb	r2, [r3, #0]
          HAL_Delay(20);
 8009278:	2014      	movs	r0, #20
 800927a:	f000 fe1d 	bl	8009eb8 <HAL_Delay>
          (void)BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &vbus);
 800927e:	230c      	movs	r3, #12
 8009280:	18fa      	adds	r2, r7, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	0011      	movs	r1, r2
 8009286:	0018      	movs	r0, r3
 8009288:	f000 f864 	bl	8009354 <BSP_USBPD_PWR_VBUSGetVoltage>
        while ((vbus >= (USBPD_PWR_LOW_VBUS_THRESHOLD - 200U)) && (counter < 20U))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4a15      	ldr	r2, [pc, #84]	; (80092e4 <BSP_USBPD_PWR_VBUSOff+0x110>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d904      	bls.n	800929e <BSP_USBPD_PWR_VBUSOff+0xca>
 8009294:	2313      	movs	r3, #19
 8009296:	18fb      	adds	r3, r7, r3
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2b13      	cmp	r3, #19
 800929c:	d9e6      	bls.n	800926c <BSP_USBPD_PWR_VBUSOff+0x98>
        }

        /* Set Discharge Off */
        if (USBPD_PWR_PortCompDrv[PortNum]->SetVBusDischarge(&USBPD_PWR_PortCompObj[PortNum],
 800929e:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <BSP_USBPD_PWR_VBUSOff+0x108>)
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	0092      	lsls	r2, r2, #2
 80092a4:	58d3      	ldr	r3, [r2, r3]
 80092a6:	69dc      	ldr	r4, [r3, #28]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	0013      	movs	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	189b      	adds	r3, r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	4a0b      	ldr	r2, [pc, #44]	; (80092e0 <BSP_USBPD_PWR_VBUSOff+0x10c>)
 80092b4:	189b      	adds	r3, r3, r2
 80092b6:	2100      	movs	r1, #0
 80092b8:	0018      	movs	r0, r3
 80092ba:	47a0      	blx	r4
 80092bc:	1e03      	subs	r3, r0, #0
 80092be:	d002      	beq.n	80092c6 <BSP_USBPD_PWR_VBUSOff+0xf2>
                                                             TCPP0203_VBUS_DISCHARGE_OFF) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80092c0:	2305      	movs	r3, #5
 80092c2:	425b      	negs	r3, r3
 80092c4:	617b      	str	r3, [r7, #20]
        }

        HAL_Delay(30);
 80092c6:	201e      	movs	r0, #30
 80092c8:	f000 fdf6 	bl	8009eb8 <HAL_Delay>
      }
    }
#endif /* BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0 */
  }
  return ret;
 80092cc:	697b      	ldr	r3, [r7, #20]
}
 80092ce:	0018      	movs	r0, r3
 80092d0:	46bd      	mov	sp, r7
 80092d2:	b007      	add	sp, #28
 80092d4:	bd90      	pop	{r4, r7, pc}
 80092d6:	46c0      	nop			; (mov r8, r8)
 80092d8:	08019cb4 	.word	0x08019cb4
 80092dc:	20000aac 	.word	0x20000aac
 80092e0:	20000a84 	.word	0x20000a84
 80092e4:	00000225 	.word	0x00000225

080092e8 <BSP_USBPD_PWR_VBUSSetVoltage_Fixed>:
  */
int32_t BSP_USBPD_PWR_VBUSSetVoltage_Fixed(uint32_t PortNum,
                                           uint32_t VbusTargetInmv,
                                           uint32_t OperatingCurrent,
                                           uint32_t MaxOperatingCurrent)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80092f6:	2300      	movs	r3, #0
 80092f8:	617b      	str	r3, [r7, #20]
  UNUSED(MaxOperatingCurrent);
  UNUSED(OperatingCurrent);
  UNUSED(VbusTargetInmv);

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <BSP_USBPD_PWR_VBUSSetVoltage_Fixed+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009300:	2302      	movs	r3, #2
 8009302:	425b      	negs	r3, r3
 8009304:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009306:	697b      	ldr	r3, [r7, #20]
}
 8009308:	0018      	movs	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	b006      	add	sp, #24
 800930e:	bd80      	pop	{r7, pc}

08009310 <BSP_USBPD_PWR_RegisterVBUSDetectCallback>:
  * @param  pfnVBUSDetectCallback callback function pointer
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_RegisterVBUSDetectCallback(uint32_t PortNum,
                                                 USBPD_PWR_VBUSDetectCallbackFunc *pfnVBUSDetectCallback)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pfnVBUSDetectCallback))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d102      	bne.n	800932a <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x1a>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d103      	bne.n	8009332 <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800932a:	2302      	movs	r3, #2
 800932c:	425b      	negs	r3, r3
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e009      	b.n	8009346 <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x36>
  }
  else
  {
    /* Set port callback for VBUS detection event */
    USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback = pfnVBUSDetectCallback;
 8009332:	4907      	ldr	r1, [pc, #28]	; (8009350 <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x40>)
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	0013      	movs	r3, r2
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	189b      	adds	r3, r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	18cb      	adds	r3, r1, r3
 8009340:	3308      	adds	r3, #8
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	601a      	str	r2, [r3, #0]
  }
  return ret;
 8009346:	68fb      	ldr	r3, [r7, #12]
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	b004      	add	sp, #16
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20000a78 	.word	0x20000a78

08009354 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t PortNum, uint32_t *pVoltage)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d102      	bne.n	800936e <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d103      	bne.n	8009376 <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800936e:	2302      	movs	r3, #2
 8009370:	425b      	negs	r3, r3
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	e010      	b.n	8009398 <BSP_USBPD_PWR_VBUSGetVoltage+0x44>
  }
  else
  {
    uint32_t voltage;
    static __IO uint16_t adc_value;
    adc_value = (uint16_t) usbpd_pwr_adcx_buff[ADCBUF_VSENSE];
 8009376:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <BSP_USBPD_PWR_VBUSGetVoltage+0x50>)
 8009378:	881a      	ldrh	r2, [r3, #0]
 800937a:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <BSP_USBPD_PWR_VBUSGetVoltage+0x54>)
 800937c:	801a      	strh	r2, [r3, #0]
    voltage = PWR_TCPP0203_ConvertADCDataToVoltage(adc_value, SRC1M1_VSENSE_RA, SRC1M1_VSENSE_RB);
 800937e:	4b0a      	ldr	r3, [pc, #40]	; (80093a8 <BSP_USBPD_PWR_VBUSGetVoltage+0x54>)
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	2228      	movs	r2, #40	; 0x28
 8009386:	21c8      	movs	r1, #200	; 0xc8
 8009388:	0018      	movs	r0, r3
 800938a:	f000 fcb3 	bl	8009cf4 <PWR_TCPP0203_ConvertADCDataToVoltage>
 800938e:	0003      	movs	r3, r0
 8009390:	60bb      	str	r3, [r7, #8]

    *pVoltage = voltage;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	601a      	str	r2, [r3, #0]
  }
  return ret;
 8009398:	68fb      	ldr	r3, [r7, #12]
}
 800939a:	0018      	movs	r0, r3
 800939c:	46bd      	mov	sp, r7
 800939e:	b004      	add	sp, #16
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	20000a74 	.word	0x20000a74
 80093a8:	20000ab0 	.word	0x20000ab0

080093ac <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t PortNum, int32_t *pCurrent)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d102      	bne.n	80093c6 <BSP_USBPD_PWR_VBUSGetCurrent+0x1a>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d103      	bne.n	80093ce <BSP_USBPD_PWR_VBUSGetCurrent+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80093c6:	2302      	movs	r3, #2
 80093c8:	425b      	negs	r3, r3
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	e010      	b.n	80093f0 <BSP_USBPD_PWR_VBUSGetCurrent+0x44>
  }
  else
  {
    int32_t current;
    uint16_t adc_value;
    adc_value = (uint16_t) usbpd_pwr_adcx_buff[ADCBUF_ISENSE];
 80093ce:	2112      	movs	r1, #18
 80093d0:	187b      	adds	r3, r7, r1
 80093d2:	4a0a      	ldr	r2, [pc, #40]	; (80093fc <BSP_USBPD_PWR_VBUSGetCurrent+0x50>)
 80093d4:	8852      	ldrh	r2, [r2, #2]
 80093d6:	801a      	strh	r2, [r3, #0]
    current = PWR_TCPP0203_ConvertADCDataToCurrent(adc_value, SRC1M1_ISENSE_GA, SRC1M1_ISENSE_RS);
 80093d8:	187b      	adds	r3, r7, r1
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	2207      	movs	r2, #7
 80093de:	212a      	movs	r1, #42	; 0x2a
 80093e0:	0018      	movs	r0, r3
 80093e2:	f000 fcb1 	bl	8009d48 <PWR_TCPP0203_ConvertADCDataToCurrent>
 80093e6:	0003      	movs	r3, r0
 80093e8:	60fb      	str	r3, [r7, #12]

    *pCurrent = current;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	601a      	str	r2, [r3, #0]
  }
  return ret;
 80093f0:	697b      	ldr	r3, [r7, #20]
}
 80093f2:	0018      	movs	r0, r3
 80093f4:	46bd      	mov	sp, r7
 80093f6:	b006      	add	sp, #24
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	46c0      	nop			; (mov r8, r8)
 80093fc:	20000a74 	.word	0x20000a74

08009400 <BSP_USBPD_PWR_EventCallback>:
  *         any PWR related event detection mechanism)
  * @param  PortNum Type-C port identifier
  * @retval None
  */
void BSP_USBPD_PWR_EventCallback(uint32_t PortNum)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af02      	add	r7, sp, #8
 8009406:	6078      	str	r0, [r7, #4]
  BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_EventCallback --");
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	b2d9      	uxtb	r1, r3
 800940c:	4b0b      	ldr	r3, [pc, #44]	; (800943c <BSP_USBPD_PWR_EventCallback+0x3c>)
 800940e:	2221      	movs	r2, #33	; 0x21
 8009410:	9200      	str	r2, [sp, #0]
 8009412:	2200      	movs	r2, #0
 8009414:	2006      	movs	r0, #6
 8009416:	f003 fee1 	bl	800d1dc <USBPD_TRACE_Add>

  /* Handle USBPD PWR event */
  switch (USBPD_PWR_Port_Configs[PortNum].Type)
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <BSP_USBPD_PWR_EventCallback+0x40>)
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	0052      	lsls	r2, r2, #1
 8009420:	5cd3      	ldrb	r3, [r2, r3]
 8009422:	2b02      	cmp	r3, #2
 8009424:	d104      	bne.n	8009430 <BSP_USBPD_PWR_EventCallback+0x30>
  {
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
      /* In case of TCPP0203, this callback could be called when an event is detected
         on FLGn line */
      PWR_TCPP0203_EventCallback(PortNum);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	0018      	movs	r0, r3
 800942a:	f000 fabd 	bl	80099a8 <PWR_TCPP0203_EventCallback>
      break;
 800942e:	e000      	b.n	8009432 <BSP_USBPD_PWR_EventCallback+0x32>

    case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
    default:
      break;
 8009430:	46c0      	nop			; (mov r8, r8)
  }
}
 8009432:	46c0      	nop			; (mov r8, r8)
 8009434:	46bd      	mov	sp, r7
 8009436:	b002      	add	sp, #8
 8009438:	bd80      	pop	{r7, pc}
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	08019dac 	.word	0x08019dac
 8009440:	20000070 	.word	0x20000070

08009444 <PWR_TCPP0203_GPIOConfigInit>:
  * @note   GPIO used for TCPP0203 operation includes VBUS measurement, ENABLE pin driving
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_GPIOConfigInit(uint32_t PortNum)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(PortNum);

  /* Configure ENABLE GPIO */
  TCPP0203_PORT0_ENABLE_GPIO_CLK_ENABLE();
 800944c:	2004      	movs	r0, #4
 800944e:	f7ff fb25 	bl	8008a9c <LL_IOP_GRP1_EnableClock>
  /* Configure IO in output push-pull mode to drive ENABLE */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, TCPP0203_PORT0_ENABLE_GPIO_MODE);
 8009452:	2380      	movs	r3, #128	; 0x80
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	4821      	ldr	r0, [pc, #132]	; (80094dc <PWR_TCPP0203_GPIOConfigInit+0x98>)
 8009458:	2201      	movs	r2, #1
 800945a:	0019      	movs	r1, r3
 800945c:	f7ff fb34 	bl	8008ac8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinOutputType(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN,
 8009460:	2380      	movs	r3, #128	; 0x80
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	481d      	ldr	r0, [pc, #116]	; (80094dc <PWR_TCPP0203_GPIOConfigInit+0x98>)
 8009466:	2200      	movs	r2, #0
 8009468:	0019      	movs	r1, r3
 800946a:	f7ff fb49 	bl	8008b00 <LL_GPIO_SetPinOutputType>
                           TCPP0203_PORT0_ENABLE_GPIO_OUTPUT);
  LL_GPIO_SetPinSpeed(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, LL_GPIO_SPEED_FREQ_LOW);
 800946e:	2380      	movs	r3, #128	; 0x80
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	481a      	ldr	r0, [pc, #104]	; (80094dc <PWR_TCPP0203_GPIOConfigInit+0x98>)
 8009474:	2200      	movs	r2, #0
 8009476:	0019      	movs	r1, r3
 8009478:	f7ff fb57 	bl	8008b2a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinPull(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, TCPP0203_PORT0_ENABLE_GPIO_PUPD);
 800947c:	2380      	movs	r3, #128	; 0x80
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	4816      	ldr	r0, [pc, #88]	; (80094dc <PWR_TCPP0203_GPIOConfigInit+0x98>)
 8009482:	2200      	movs	r2, #0
 8009484:	0019      	movs	r1, r3
 8009486:	f7ff fb6c 	bl	8008b62 <LL_GPIO_SetPinPull>

  /* Set ENABLE to default state */
  TCPP0203_PORT0_ENABLE_GPIO_DEFVALUE();
 800948a:	2380      	movs	r3, #128	; 0x80
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	4a13      	ldr	r2, [pc, #76]	; (80094dc <PWR_TCPP0203_GPIOConfigInit+0x98>)
 8009490:	0019      	movs	r1, r3
 8009492:	0010      	movs	r0, r2
 8009494:	f7ff fb8d 	bl	8008bb2 <LL_GPIO_ResetOutputPin>

  /* Configure IANA GPIO */
  TCPP0203_PORT0_IANA_GPIO_CLK_ENABLE();
 8009498:	2002      	movs	r0, #2
 800949a:	f7ff faff 	bl	8008a9c <LL_IOP_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_IANA_GPIO_PORT, TCPP0203_PORT0_IANA_GPIO_PIN, TCPP0203_PORT0_IANA_GPIO_MODE);
 800949e:	2380      	movs	r3, #128	; 0x80
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	480f      	ldr	r0, [pc, #60]	; (80094e0 <PWR_TCPP0203_GPIOConfigInit+0x9c>)
 80094a4:	2203      	movs	r2, #3
 80094a6:	0019      	movs	r1, r3
 80094a8:	f7ff fb0e 	bl	8008ac8 <LL_GPIO_SetPinMode>

  /* Configure VBUS Connector sensing GPIO */
  TCPP0203_PORT0_VBUSC_GPIO_CLK_ENABLE();
 80094ac:	2001      	movs	r0, #1
 80094ae:	f7ff faf5 	bl	8008a9c <LL_IOP_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_VBUSC_GPIO_PORT, TCPP0203_PORT0_VBUSC_GPIO_PIN, TCPP0203_PORT0_VBUSC_GPIO_MODE);
 80094b2:	23a0      	movs	r3, #160	; 0xa0
 80094b4:	05db      	lsls	r3, r3, #23
 80094b6:	2203      	movs	r2, #3
 80094b8:	2101      	movs	r1, #1
 80094ba:	0018      	movs	r0, r3
 80094bc:	f7ff fb04 	bl	8008ac8 <LL_GPIO_SetPinMode>

  /* Configure VBUS Provider sensing GPIO */
  TCPP0203_PORT0_VBUSPROV_GPIO_CLK_ENABLE();
 80094c0:	2001      	movs	r0, #1
 80094c2:	f7ff faeb 	bl	8008a9c <LL_IOP_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_VBUSPROV_GPIO_PORT, TCPP0203_PORT0_VBUSPROV_GPIO_PIN,
 80094c6:	23a0      	movs	r3, #160	; 0xa0
 80094c8:	05db      	lsls	r3, r3, #23
 80094ca:	2203      	movs	r2, #3
 80094cc:	2102      	movs	r1, #2
 80094ce:	0018      	movs	r0, r3
 80094d0:	f7ff fafa 	bl	8008ac8 <LL_GPIO_SetPinMode>
                     TCPP0203_PORT0_VBUSPROV_GPIO_MODE);
}
 80094d4:	46c0      	nop			; (mov r8, r8)
 80094d6:	46bd      	mov	sp, r7
 80094d8:	b002      	add	sp, #8
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	50000800 	.word	0x50000800
 80094e0:	50000400 	.word	0x50000400

080094e4 <PWR_TCPP0203_Configure_ADC>:
  * @brief  Configure ADC (ADC instance for Vsense and Isense: VISENSE_ADC_INSTANCE) and GPIO used by ADC channels.
  * @param  None
  * @retval None
  */
static void PWR_TCPP0203_Configure_ADC(void)
{
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b08f      	sub	sp, #60	; 0x3c
 80094e8:	af02      	add	r7, sp, #8

  /* Init with LL driver */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 80094ea:	2000      	movs	r0, #0
 80094ec:	f7fe ff78 	bl	80083e0 <LL_RCC_SetADCClockSource>

  /* DMA controller clock enable */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
#endif /* USE_STM32G4XX_NUCLEO */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80094f0:	2001      	movs	r0, #1
 80094f2:	f7ff faa7 	bl	8008a44 <LL_AHB1_GRP1_EnableClock>

  LL_ADC_InitTypeDef ADC_InitStruct = {0U};
 80094f6:	241c      	movs	r4, #28
 80094f8:	193b      	adds	r3, r7, r4
 80094fa:	0018      	movs	r0, r3
 80094fc:	2310      	movs	r3, #16
 80094fe:	001a      	movs	r2, r3
 8009500:	2100      	movs	r1, #0
 8009502:	f00f ff29 	bl	8019358 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0U};
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	0018      	movs	r0, r3
 800950a:	2318      	movs	r3, #24
 800950c:	001a      	movs	r2, r3
 800950e:	2100      	movs	r1, #0
 8009510:	f00f ff22 	bl	8019358 <memset>

  /* Peripheral clock enable */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8009514:	2380      	movs	r3, #128	; 0x80
 8009516:	035b      	lsls	r3, r3, #13
 8009518:	0018      	movs	r0, r3
 800951a:	f7ff faa9 	bl	8008a70 <LL_APB2_GRP1_EnableClock>
#else
#error "missing value definition for your your board"
#endif /* USE_STM32G4XX_NUCLEO */

  /* VISENSE_ADC_INSTANCE DMA Init */
  LL_DMA_SetDataTransferDirection(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800951e:	4b69      	ldr	r3, [pc, #420]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 8009520:	2200      	movs	r2, #0
 8009522:	2100      	movs	r1, #0
 8009524:	0018      	movs	r0, r3
 8009526:	f7fe ffab 	bl	8008480 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PRIORITY_LOW);
 800952a:	4b66      	ldr	r3, [pc, #408]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	0018      	movs	r0, r3
 8009532:	f7ff f883 	bl	800863c <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MODE_CIRCULAR);
 8009536:	4b63      	ldr	r3, [pc, #396]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 8009538:	2220      	movs	r2, #32
 800953a:	2100      	movs	r1, #0
 800953c:	0018      	movs	r0, r3
 800953e:	f7fe ffc5 	bl	80084cc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PERIPH_NOINCREMENT);
 8009542:	4b60      	ldr	r3, [pc, #384]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 8009544:	2200      	movs	r2, #0
 8009546:	2100      	movs	r1, #0
 8009548:	0018      	movs	r0, r3
 800954a:	f7fe ffe3 	bl	8008514 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);
 800954e:	4b5d      	ldr	r3, [pc, #372]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 8009550:	2280      	movs	r2, #128	; 0x80
 8009552:	2100      	movs	r1, #0
 8009554:	0018      	movs	r0, r3
 8009556:	f7ff f801 	bl	800855c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PDATAALIGN_HALFWORD);
 800955a:	2380      	movs	r3, #128	; 0x80
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	4859      	ldr	r0, [pc, #356]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 8009560:	001a      	movs	r2, r3
 8009562:	2100      	movs	r1, #0
 8009564:	f7ff f81e 	bl	80085a4 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MDATAALIGN_HALFWORD);
 8009568:	2380      	movs	r3, #128	; 0x80
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	4855      	ldr	r0, [pc, #340]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 800956e:	001a      	movs	r2, r3
 8009570:	2100      	movs	r1, #0
 8009572:	f7ff f83d 	bl	80085f0 <LL_DMA_SetMemorySize>

#if defined(USE_STM32G4XX_NUCLEO)
  LL_DMA_SetPeriphRequest(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, VISENSE_DMA_REQ);
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_DMAMUX_SetRequestID(DMAMUX1, VISENSE_DMAMUX_CHANNEL, VISENSE_DMA_REQ);
 8009576:	4b54      	ldr	r3, [pc, #336]	; (80096c8 <PWR_TCPP0203_Configure_ADC+0x1e4>)
 8009578:	2205      	movs	r2, #5
 800957a:	2100      	movs	r1, #0
 800957c:	0018      	movs	r0, r3
 800957e:	f7fe ff41 	bl	8008404 <LL_DMAMUX_SetRequestID>
#endif /* USE_STM32G4XX_NUCLEO */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(VISENSE_DMA_INSTANCE,
 8009582:	4b52      	ldr	r3, [pc, #328]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009584:	2100      	movs	r1, #0
 8009586:	0018      	movs	r0, r3
 8009588:	f7ff f8d8 	bl	800873c <LL_ADC_DMA_GetRegAddr>
 800958c:	0001      	movs	r1, r0
 800958e:	4b50      	ldr	r3, [pc, #320]	; (80096d0 <PWR_TCPP0203_Configure_ADC+0x1ec>)
 8009590:	484c      	ldr	r0, [pc, #304]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 8009592:	2200      	movs	r2, #0
 8009594:	9200      	str	r2, [sp, #0]
 8009596:	000a      	movs	r2, r1
 8009598:	2100      	movs	r1, #0
 800959a:	f7ff f897 	bl	80086cc <LL_DMA_ConfigAddresses>
                         LL_ADC_DMA_GetRegAddr(VISENSE_ADC_INSTANCE, LL_ADC_DMA_REG_REGULAR_DATA),
                         (uint32_t)usbpd_pwr_adcx_buff,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, VISENSE_ADC_BUFFER_SIZE);
 800959e:	4b49      	ldr	r3, [pc, #292]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 80095a0:	2202      	movs	r2, #2
 80095a2:	2100      	movs	r1, #0
 80095a4:	0018      	movs	r0, r3
 80095a6:	f7ff f86f 	bl	8008688 <LL_DMA_SetDataLength>

  /* Activation of DMA ---------------------------------------------------------*/
  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL);
 80095aa:	4b46      	ldr	r3, [pc, #280]	; (80096c4 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 80095ac:	2100      	movs	r1, #0
 80095ae:	0018      	movs	r0, r3
 80095b0:	f7fe ff46 	bl	8008440 <LL_DMA_EnableChannel>

  /** Common config
  */
#if defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_REG_SetSequencerConfigurable(VISENSE_ADC_INSTANCE, LL_ADC_REG_SEQ_FIXED);
 80095b4:	4b45      	ldr	r3, [pc, #276]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 80095b6:	2100      	movs	r1, #0
 80095b8:	0018      	movs	r0, r3
 80095ba:	f7ff f8fd 	bl	80087b8 <LL_ADC_REG_SetSequencerConfigurable>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80095be:	193b      	adds	r3, r7, r4
 80095c0:	2280      	movs	r2, #128	; 0x80
 80095c2:	0612      	lsls	r2, r2, #24
 80095c4:	601a      	str	r2, [r3, #0]
#endif /* USE_STM32G0XX_NUCLEO */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80095c6:	193b      	adds	r3, r7, r4
 80095c8:	2200      	movs	r2, #0
 80095ca:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80095cc:	193b      	adds	r3, r7, r4
 80095ce:	2200      	movs	r2, #0
 80095d0:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80095d2:	193b      	adds	r3, r7, r4
 80095d4:	2200      	movs	r2, #0
 80095d6:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(VISENSE_ADC_INSTANCE, &ADC_InitStruct);
 80095d8:	193b      	adds	r3, r7, r4
 80095da:	4a3c      	ldr	r2, [pc, #240]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 80095dc:	0019      	movs	r1, r3
 80095de:	0010      	movs	r0, r2
 80095e0:	f003 f80a 	bl	800c5f8 <LL_ADC_Init>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80095e4:	1d3b      	adds	r3, r7, #4
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80095ea:	1d3b      	adds	r3, r7, #4
 80095ec:	22f0      	movs	r2, #240	; 0xf0
 80095ee:	0112      	lsls	r2, r2, #4
 80095f0:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80095f2:	1d3b      	adds	r3, r7, #4
 80095f4:	2200      	movs	r2, #0
 80095f6:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80095f8:	1d3b      	adds	r3, r7, #4
 80095fa:	2280      	movs	r2, #128	; 0x80
 80095fc:	0192      	lsls	r2, r2, #6
 80095fe:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8009600:	1d3b      	adds	r3, r7, #4
 8009602:	2203      	movs	r2, #3
 8009604:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8009606:	1d3b      	adds	r3, r7, #4
 8009608:	2280      	movs	r2, #128	; 0x80
 800960a:	0152      	lsls	r2, r2, #5
 800960c:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(VISENSE_ADC_INSTANCE, &ADC_REG_InitStruct);
 800960e:	1d3b      	adds	r3, r7, #4
 8009610:	4a2e      	ldr	r2, [pc, #184]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009612:	0019      	movs	r1, r3
 8009614:	0010      	movs	r0, r2
 8009616:	f003 f825 	bl	800c664 <LL_ADC_REG_Init>
#if defined(USE_STM32G4XX_NUCLEO)
  LL_ADC_SetGainCompensation(VISENSE_ADC_INSTANCE, 0U);
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_REG_SetSequencerScanDirection(VISENSE_ADC_INSTANCE, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 800961a:	4b2c      	ldr	r3, [pc, #176]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 800961c:	2100      	movs	r1, #0
 800961e:	0018      	movs	r0, r3
 8009620:	f7ff f8de 	bl	80087e0 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetTriggerFrequencyMode(VISENSE_ADC_INSTANCE, LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8009624:	4b29      	ldr	r3, [pc, #164]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009626:	2100      	movs	r1, #0
 8009628:	0018      	movs	r0, r3
 800962a:	f7ff f893 	bl	8008754 <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_REG_SetSequencerChAdd(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL | ISENSE_ADC_CHANNEL);
 800962e:	4a29      	ldr	r2, [pc, #164]	; (80096d4 <PWR_TCPP0203_Configure_ADC+0x1f0>)
 8009630:	4b26      	ldr	r3, [pc, #152]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009632:	0011      	movs	r1, r2
 8009634:	0018      	movs	r0, r3
 8009636:	f7ff f8e5 	bl	8008804 <LL_ADC_REG_SetSequencerChAdd>
#endif /* USE_STM32G4XX_NUCLEO */
  LL_ADC_SetOverSamplingScope(VISENSE_ADC_INSTANCE, LL_ADC_OVS_DISABLE);
 800963a:	4b24      	ldr	r3, [pc, #144]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 800963c:	2100      	movs	r1, #0
 800963e:	0018      	movs	r0, r3
 8009640:	f7ff f92c 	bl	800889c <LL_ADC_SetOverSamplingScope>
#elif defined(USE_STM32G0XX_NUCLEO)
  /* Poll for ADC channel configuration ready */
#if (USE_TIMEOUT == 1)
  Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
#endif /* USE_TIMEOUT */
  while (LL_ADC_IsActiveFlag_CCRDY(VISENSE_ADC_INSTANCE) == 0U)
 8009644:	46c0      	nop			; (mov r8, r8)
 8009646:	4b21      	ldr	r3, [pc, #132]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009648:	0018      	movs	r0, r3
 800964a:	f7ff f9bc 	bl	80089c6 <LL_ADC_IsActiveFlag_CCRDY>
 800964e:	1e03      	subs	r3, r0, #0
 8009650:	d0f9      	beq.n	8009646 <PWR_TCPP0203_Configure_ADC+0x162>
      }
    }
#endif /* USE_TIMEOUT */
  }
  /* Clear flag ADC channel configuration ready */
  LL_ADC_ClearFlag_CCRDY(VISENSE_ADC_INSTANCE);
 8009652:	4b1e      	ldr	r3, [pc, #120]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009654:	0018      	movs	r0, r3
 8009656:	f7ff f9ca 	bl	80089ee <LL_ADC_ClearFlag_CCRDY>
  LL_ADC_SetSamplingTimeCommonChannels(VISENSE_ADC_INSTANCE, LL_ADC_SAMPLINGTIME_COMMON_1,
 800965a:	4b1c      	ldr	r3, [pc, #112]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 800965c:	2207      	movs	r2, #7
 800965e:	2100      	movs	r1, #0
 8009660:	0018      	movs	r0, r3
 8009662:	f7ff f88b 	bl	800877c <LL_ADC_SetSamplingTimeCommonChannels>
                                       LL_ADC_SAMPLINGTIME_160CYCLES_5);
  LL_ADC_DisableIT_EOC(VISENSE_ADC_INSTANCE);
 8009666:	4b19      	ldr	r3, [pc, #100]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009668:	0018      	movs	r0, r3
 800966a:	f7ff f9cc 	bl	8008a06 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(VISENSE_ADC_INSTANCE);
 800966e:	4b17      	ldr	r3, [pc, #92]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009670:	0018      	movs	r0, r3
 8009672:	f7ff f9d7 	bl	8008a24 <LL_ADC_DisableIT_EOS>
#if defined(USE_STM32G4XX_NUCLEO)
  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(VISENSE_ADC_INSTANCE);
#endif /* USE_STM32G4XX_NUCLEO */
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(VISENSE_ADC_INSTANCE);
 8009676:	4b15      	ldr	r3, [pc, #84]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 8009678:	0018      	movs	r0, r3
 800967a:	f7ff f921 	bl	80088c0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially                    */
  /*       CPU processing cycles (depends on compilation optimization).     */
  /* Note: If system core clock frequency is below 200kHz, wait time        */
  /*       is only a few CPU processing cycles.                             */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000u * 2U))) / 10U);
 800967e:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <PWR_TCPP0203_Configure_ADC+0x1f4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4916      	ldr	r1, [pc, #88]	; (80096dc <PWR_TCPP0203_Configure_ADC+0x1f8>)
 8009684:	0018      	movs	r0, r3
 8009686:	f7fc fe6d 	bl	8006364 <__udivsi3>
 800968a:	0003      	movs	r3, r0
 800968c:	001a      	movs	r2, r3
 800968e:	0013      	movs	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	189b      	adds	r3, r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	210a      	movs	r1, #10
 8009698:	0018      	movs	r0, r3
 800969a:	f7fc fe63 	bl	8006364 <__udivsi3>
 800969e:	0003      	movs	r3, r0
 80096a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (wait_loop_index != 0U)
 80096a2:	e002      	b.n	80096aa <PWR_TCPP0203_Configure_ADC+0x1c6>
  {
    wait_loop_index--;
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	3b01      	subs	r3, #1
 80096a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (wait_loop_index != 0U)
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1f9      	bne.n	80096a4 <PWR_TCPP0203_Configure_ADC+0x1c0>

  LL_ADC_REG_SetSequencerRanks(VISENSE_ADC_INSTANCE, ISENSE_ADC_RANK, ISENSE_ADC_CHANNEL);
  LL_ADC_SetChannelSamplingTime(VISENSE_ADC_INSTANCE, ISENSE_ADC_CHANNEL, LL_ADC_SAMPLINGTIME_247CYCLES_5);
  LL_ADC_SetChannelSingleDiff(VISENSE_ADC_INSTANCE, ISENSE_ADC_CHANNEL, LL_ADC_SINGLE_ENDED);
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_SetChannelSamplingTime(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL, LL_ADC_SAMPLINGTIME_COMMON_1);
 80096b0:	4b06      	ldr	r3, [pc, #24]	; (80096cc <PWR_TCPP0203_Configure_ADC+0x1e8>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	2101      	movs	r1, #1
 80096b6:	0018      	movs	r0, r3
 80096b8:	f7ff f8d4 	bl	8008864 <LL_ADC_SetChannelSamplingTime>
#endif /* USE_STM32G4XX_NUCLEO */
}
 80096bc:	46c0      	nop			; (mov r8, r8)
 80096be:	46bd      	mov	sp, r7
 80096c0:	b00d      	add	sp, #52	; 0x34
 80096c2:	bd90      	pop	{r4, r7, pc}
 80096c4:	40020000 	.word	0x40020000
 80096c8:	40020800 	.word	0x40020800
 80096cc:	40012400 	.word	0x40012400
 80096d0:	20000a74 	.word	0x20000a74
 80096d4:	3c008001 	.word	0x3c008001
 80096d8:	20000004 	.word	0x20000004
 80096dc:	00030d40 	.word	0x00030d40

080096e0 <PWR_TCPP0203_Activate_ADC>:
  *         - ADC group injected
  *           Feature not available          (feature not available on this STM32 series)
  * @retval None
  */
static void PWR_TCPP0203_Activate_ADC(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (0U == LL_ADC_IsEnabled(VISENSE_ADC_INSTANCE))
 80096ea:	4b2b      	ldr	r3, [pc, #172]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 80096ec:	0018      	movs	r0, r3
 80096ee:	f7ff f90d 	bl	800890c <LL_ADC_IsEnabled>
 80096f2:	1e03      	subs	r3, r0, #0
 80096f4:	d14c      	bne.n	8009790 <PWR_TCPP0203_Activate_ADC+0xb0>
  {
#if defined(STM32G474xx)
    LL_ADC_DisableDeepPowerDown(VISENSE_ADC_INSTANCE);
#endif /* STM32G474xx */
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(VISENSE_ADC_INSTANCE);
 80096f6:	4b28      	ldr	r3, [pc, #160]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 80096f8:	0018      	movs	r0, r3
 80096fa:	f7ff f8e1 	bl	80088c0 <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000u * 2u))) / 10u);
 80096fe:	4b27      	ldr	r3, [pc, #156]	; (800979c <PWR_TCPP0203_Activate_ADC+0xbc>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4927      	ldr	r1, [pc, #156]	; (80097a0 <PWR_TCPP0203_Activate_ADC+0xc0>)
 8009704:	0018      	movs	r0, r3
 8009706:	f7fc fe2d 	bl	8006364 <__udivsi3>
 800970a:	0003      	movs	r3, r0
 800970c:	001a      	movs	r2, r3
 800970e:	0013      	movs	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	189b      	adds	r3, r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	210a      	movs	r1, #10
 8009718:	0018      	movs	r0, r3
 800971a:	f7fc fe23 	bl	8006364 <__udivsi3>
 800971e:	0003      	movs	r3, r0
 8009720:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 8009722:	e002      	b.n	800972a <PWR_TCPP0203_Activate_ADC+0x4a>
    {
      wait_loop_index--;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3b01      	subs	r3, #1
 8009728:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1f9      	bne.n	8009724 <PWR_TCPP0203_Activate_ADC+0x44>
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in DMA destination address, DMA transfer must be disabled during */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(VISENSE_ADC_INSTANCE);
 8009730:	4b19      	ldr	r3, [pc, #100]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 8009732:	0018      	movs	r0, r3
 8009734:	f7ff f889 	bl	800884a <LL_ADC_REG_GetDMATransfer>
 8009738:	0003      	movs	r3, r0
 800973a:	603b      	str	r3, [r7, #0]
    LL_ADC_REG_SetDMATransfer(VISENSE_ADC_INSTANCE, LL_ADC_REG_DMA_TRANSFER_NONE);
 800973c:	4b16      	ldr	r3, [pc, #88]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 800973e:	2100      	movs	r1, #0
 8009740:	0018      	movs	r0, r3
 8009742:	f7ff f870 	bl	8008826 <LL_ADC_REG_SetDMATransfer>

#if !defined (STM32G474xx)
    /* Run ADC self calibration */
    LL_ADC_StartCalibration(VISENSE_ADC_INSTANCE);
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 8009748:	0018      	movs	r0, r3
 800974a:	f7ff f8f1 	bl	8008930 <LL_ADC_StartCalibration>
    /* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (0U != LL_ADC_IsCalibrationOnGoing(VISENSE_ADC_INSTANCE))
 800974e:	46c0      	nop			; (mov r8, r8)
 8009750:	4b11      	ldr	r3, [pc, #68]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 8009752:	0018      	movs	r0, r3
 8009754:	f7ff f900 	bl	8008958 <LL_ADC_IsCalibrationOnGoing>
 8009758:	1e03      	subs	r3, r0, #0
 800975a:	d1f9      	bne.n	8009750 <PWR_TCPP0203_Activate_ADC+0x70>
      }
#endif /* USE_TIMEOUT */
    }

    /* Restore ADC DMA transfer request after calibration */
    LL_ADC_REG_SetDMATransfer(VISENSE_ADC_INSTANCE, backup_setting_adc_dma_transfer);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	4a0e      	ldr	r2, [pc, #56]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 8009760:	0019      	movs	r1, r3
 8009762:	0010      	movs	r0, r2
 8009764:	f7ff f85f 	bl	8008826 <LL_ADC_REG_SetDMATransfer>

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1U);
 8009768:	2320      	movs	r3, #32
 800976a:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 800976c:	e002      	b.n	8009774 <PWR_TCPP0203_Activate_ADC+0x94>
    {
      wait_loop_index--;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3b01      	subs	r3, #1
 8009772:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1f9      	bne.n	800976e <PWR_TCPP0203_Activate_ADC+0x8e>
    }

    /* Enable ADC */
    LL_ADC_Enable(VISENSE_ADC_INSTANCE);
 800977a:	4b07      	ldr	r3, [pc, #28]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 800977c:	0018      	movs	r0, r3
 800977e:	f7ff f8b3 	bl	80088e8 <LL_ADC_Enable>
    /* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (0U == LL_ADC_IsActiveFlag_ADRDY(VISENSE_ADC_INSTANCE))
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	4b04      	ldr	r3, [pc, #16]	; (8009798 <PWR_TCPP0203_Activate_ADC+0xb8>)
 8009786:	0018      	movs	r0, r3
 8009788:	f7ff f90c 	bl	80089a4 <LL_ADC_IsActiveFlag_ADRDY>
 800978c:	1e03      	subs	r3, r0, #0
 800978e:	d0f9      	beq.n	8009784 <PWR_TCPP0203_Activate_ADC+0xa4>
  /*       using function:                                                    */
  /*       "LL_ADC_REG_StartConversion();"                                    */

  /* Operation on ADC hierarchical scope: ADC group injected -----------------*/
  /* Note: Feature not available on this STM32 series */
}
 8009790:	46c0      	nop			; (mov r8, r8)
 8009792:	46bd      	mov	sp, r7
 8009794:	b002      	add	sp, #8
 8009796:	bd80      	pop	{r7, pc}
 8009798:	40012400 	.word	0x40012400
 800979c:	20000004 	.word	0x20000004
 80097a0:	00030d40 	.word	0x00030d40

080097a4 <PWR_TCPP0203_ITConfigInit>:
  * @note   Corresponds to EXTI mapped onto FLGn pin of TCPP0203
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_ITConfigInit(uint32_t PortNum)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  if (USBPD_PWR_Port_Status[PortNum].IsItEnabled == 0U)
 80097ac:	4922      	ldr	r1, [pc, #136]	; (8009838 <PWR_TCPP0203_ITConfigInit+0x94>)
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	0013      	movs	r3, r2
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	189b      	adds	r3, r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	18cb      	adds	r3, r1, r3
 80097ba:	3301      	adds	r3, #1
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d136      	bne.n	8009830 <PWR_TCPP0203_ITConfigInit+0x8c>
  {
    USBPD_PWR_Port_Status[PortNum].IsItEnabled = 1U;
 80097c2:	491d      	ldr	r1, [pc, #116]	; (8009838 <PWR_TCPP0203_ITConfigInit+0x94>)
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	0013      	movs	r3, r2
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	189b      	adds	r3, r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	18cb      	adds	r3, r1, r3
 80097d0:	3301      	adds	r3, #1
 80097d2:	2201      	movs	r2, #1
 80097d4:	701a      	strb	r2, [r3, #0]

    /* Enable the GPIO EXTI clock */
    TCPP0203_PORT0_FLG_GPIO_CLK_ENABLE();
 80097d6:	2004      	movs	r0, #4
 80097d8:	f7ff f960 	bl	8008a9c <LL_IOP_GRP1_EnableClock>
    /* Configure IO */
    LL_GPIO_SetPinMode(TCPP0203_PORT0_FLG_GPIO_PORT, TCPP0203_PORT0_FLG_GPIO_PIN, TCPP0203_PORT0_FLG_GPIO_MODE);
 80097dc:	4b17      	ldr	r3, [pc, #92]	; (800983c <PWR_TCPP0203_ITConfigInit+0x98>)
 80097de:	2200      	movs	r2, #0
 80097e0:	2120      	movs	r1, #32
 80097e2:	0018      	movs	r0, r3
 80097e4:	f7ff f970 	bl	8008ac8 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(TCPP0203_PORT0_FLG_GPIO_PORT, TCPP0203_PORT0_FLG_GPIO_PIN, TCPP0203_PORT0_FLG_GPIO_PUPD);
 80097e8:	4b14      	ldr	r3, [pc, #80]	; (800983c <PWR_TCPP0203_ITConfigInit+0x98>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	2120      	movs	r1, #32
 80097ee:	0018      	movs	r0, r3
 80097f0:	f7ff f9b7 	bl	8008b62 <LL_GPIO_SetPinPull>
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097f4:	4b12      	ldr	r3, [pc, #72]	; (8009840 <PWR_TCPP0203_ITConfigInit+0x9c>)
 80097f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097f8:	4b11      	ldr	r3, [pc, #68]	; (8009840 <PWR_TCPP0203_ITConfigInit+0x9c>)
 80097fa:	2101      	movs	r1, #1
 80097fc:	430a      	orrs	r2, r1
 80097fe:	641a      	str	r2, [r3, #64]	; 0x40
 8009800:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <PWR_TCPP0203_ITConfigInit+0x9c>)
 8009802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009804:	2201      	movs	r2, #1
 8009806:	4013      	ands	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]
 800980a:	68fb      	ldr	r3, [r7, #12]

    /* Connect External Line to the GPIO*/
    TCPP0203_PORT0_FLG_SET_EXTI();
 800980c:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <PWR_TCPP0203_ITConfigInit+0xa0>)
 800980e:	0019      	movs	r1, r3
 8009810:	2002      	movs	r0, #2
 8009812:	f7ff f9fd 	bl	8008c10 <LL_EXTI_SetEXTISource>

    /* Enable a falling trigger EXTI line x Interrupt */
    TCPP0203_PORT0_FLG_EXTI_ENABLE();
 8009816:	2020      	movs	r0, #32
 8009818:	f7ff f9d8 	bl	8008bcc <LL_EXTI_EnableIT_0_31>
    TCPP0203_PORT0_FLG_TRIG_ENABLE();
 800981c:	2020      	movs	r0, #32
 800981e:	f7ff f9e7 	bl	8008bf0 <LL_EXTI_EnableFallingTrig_0_31>

    /* Configure NVIC for EXTIx_IRQn */
    NVIC_SetPriority(TCPP0203_PORT0_FLG_EXTI_IRQN, TCPP0203_PORT0_FLG_IT_PRIORITY);
 8009822:	210c      	movs	r1, #12
 8009824:	2007      	movs	r0, #7
 8009826:	f7fe fd6d 	bl	8008304 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TCPP0203_PORT0_FLG_EXTI_IRQN);
 800982a:	2007      	movs	r0, #7
 800982c:	f7fe fd50 	bl	80082d0 <__NVIC_EnableIRQ>
  }
}
 8009830:	46c0      	nop			; (mov r8, r8)
 8009832:	46bd      	mov	sp, r7
 8009834:	b004      	add	sp, #16
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20000a78 	.word	0x20000a78
 800983c:	50000800 	.word	0x50000800
 8009840:	40021000 	.word	0x40021000
 8009844:	00080001 	.word	0x00080001

08009848 <PWR_TCPP0203_BUSConfigInit>:
  * @param  PortNum   Port number
  * @param  Address   I2C Address
  * @retval BSP status
  */
static int32_t PWR_TCPP0203_BUSConfigInit(uint32_t PortNum, uint16_t Address)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b08b      	sub	sp, #44	; 0x2c
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	000a      	movs	r2, r1
 8009852:	1cbb      	adds	r3, r7, #2
 8009854:	801a      	strh	r2, [r3, #0]
  int32_t                  ret = BSP_ERROR_NONE;
 8009856:	2300      	movs	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
  TCPP0203_IO_t            TCPP0203IOCtx;
  uint8_t                  tcpp_type;

  /* Configure the TCPP0203 I2C driver */
  TCPP0203IOCtx.Address     = Address;
 800985a:	210c      	movs	r1, #12
 800985c:	187b      	adds	r3, r7, r1
 800985e:	1cba      	adds	r2, r7, #2
 8009860:	8812      	ldrh	r2, [r2, #0]
 8009862:	811a      	strh	r2, [r3, #8]
  TCPP0203IOCtx.Init        = BSP_I2C_Init;
 8009864:	187b      	adds	r3, r7, r1
 8009866:	4a47      	ldr	r2, [pc, #284]	; (8009984 <PWR_TCPP0203_BUSConfigInit+0x13c>)
 8009868:	601a      	str	r2, [r3, #0]
  TCPP0203IOCtx.DeInit      = BSP_I2C_DeInit;
 800986a:	187b      	adds	r3, r7, r1
 800986c:	4a46      	ldr	r2, [pc, #280]	; (8009988 <PWR_TCPP0203_BUSConfigInit+0x140>)
 800986e:	605a      	str	r2, [r3, #4]
  TCPP0203IOCtx.ReadReg     = BSP_I2C_ReadReg;
 8009870:	187b      	adds	r3, r7, r1
 8009872:	4a46      	ldr	r2, [pc, #280]	; (800998c <PWR_TCPP0203_BUSConfigInit+0x144>)
 8009874:	611a      	str	r2, [r3, #16]
  TCPP0203IOCtx.WriteReg    = BSP_I2C_WriteReg;
 8009876:	187b      	adds	r3, r7, r1
 8009878:	4a45      	ldr	r2, [pc, #276]	; (8009990 <PWR_TCPP0203_BUSConfigInit+0x148>)
 800987a:	60da      	str	r2, [r3, #12]
  TCPP0203IOCtx.GetTick     = BSP_GetTick;
 800987c:	187b      	adds	r3, r7, r1
 800987e:	4a45      	ldr	r2, [pc, #276]	; (8009994 <PWR_TCPP0203_BUSConfigInit+0x14c>)
 8009880:	615a      	str	r2, [r3, #20]

  /* Register the component on BUS IO */
  if (TCPP0203_RegisterBusIO(&USBPD_PWR_PortCompObj[PortNum], &TCPP0203IOCtx) != TCPP0203_OK)
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	0013      	movs	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	189b      	adds	r3, r3, r2
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	4a42      	ldr	r2, [pc, #264]	; (8009998 <PWR_TCPP0203_BUSConfigInit+0x150>)
 800988e:	189b      	adds	r3, r3, r2
 8009890:	187a      	adds	r2, r7, r1
 8009892:	0011      	movs	r1, r2
 8009894:	0018      	movs	r0, r3
 8009896:	f7fd fcd5 	bl	8007244 <TCPP0203_RegisterBusIO>
 800989a:	1e03      	subs	r3, r0, #0
 800989c:	d003      	beq.n	80098a6 <PWR_TCPP0203_BUSConfigInit+0x5e>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800989e:	2308      	movs	r3, #8
 80098a0:	425b      	negs	r3, r3
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
 80098a4:	e068      	b.n	8009978 <PWR_TCPP0203_BUSConfigInit+0x130>
  }
  else
  {
    /* Initialisation step */
    USBPD_PWR_PortCompDrv[PortNum] = &TCPP0203_Driver;
 80098a6:	4b3d      	ldr	r3, [pc, #244]	; (800999c <PWR_TCPP0203_BUSConfigInit+0x154>)
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	0092      	lsls	r2, r2, #2
 80098ac:	493c      	ldr	r1, [pc, #240]	; (80099a0 <PWR_TCPP0203_BUSConfigInit+0x158>)
 80098ae:	50d1      	str	r1, [r2, r3]
    if (USBPD_PWR_PortCompDrv[PortNum]->Init(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 80098b0:	4b3a      	ldr	r3, [pc, #232]	; (800999c <PWR_TCPP0203_BUSConfigInit+0x154>)
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	0092      	lsls	r2, r2, #2
 80098b6:	58d3      	ldr	r3, [r2, r3]
 80098b8:	6819      	ldr	r1, [r3, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	0013      	movs	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	189b      	adds	r3, r3, r2
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	4a34      	ldr	r2, [pc, #208]	; (8009998 <PWR_TCPP0203_BUSConfigInit+0x150>)
 80098c6:	189b      	adds	r3, r3, r2
 80098c8:	0018      	movs	r0, r3
 80098ca:	4788      	blx	r1
 80098cc:	1e03      	subs	r3, r0, #0
 80098ce:	d002      	beq.n	80098d6 <PWR_TCPP0203_BUSConfigInit+0x8e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80098d0:	2305      	movs	r3, #5
 80098d2:	425b      	negs	r3, r3
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Read the component type */
    if (USBPD_PWR_PortCompDrv[PortNum]->ReadTCPPType(&USBPD_PWR_PortCompObj[PortNum], &tcpp_type) != TCPP0203_OK)
 80098d6:	4b31      	ldr	r3, [pc, #196]	; (800999c <PWR_TCPP0203_BUSConfigInit+0x154>)
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	0092      	lsls	r2, r2, #2
 80098dc:	58d3      	ldr	r3, [r2, r3]
 80098de:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	0013      	movs	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	189b      	adds	r3, r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	4a2b      	ldr	r2, [pc, #172]	; (8009998 <PWR_TCPP0203_BUSConfigInit+0x150>)
 80098ec:	189b      	adds	r3, r3, r2
 80098ee:	220b      	movs	r2, #11
 80098f0:	18ba      	adds	r2, r7, r2
 80098f2:	0011      	movs	r1, r2
 80098f4:	0018      	movs	r0, r3
 80098f6:	47a0      	blx	r4
 80098f8:	1e03      	subs	r3, r0, #0
 80098fa:	d003      	beq.n	8009904 <PWR_TCPP0203_BUSConfigInit+0xbc>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80098fc:	2305      	movs	r3, #5
 80098fe:	425b      	negs	r3, r3
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
 8009902:	e039      	b.n	8009978 <PWR_TCPP0203_BUSConfigInit+0x130>
    }
    /* Check the component type */
    else if ((tcpp_type != TCPP0203_DEVICE_TYPE_02)
 8009904:	220b      	movs	r2, #11
 8009906:	18bb      	adds	r3, r7, r2
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2b80      	cmp	r3, #128	; 0x80
 800990c:	d007      	beq.n	800991e <PWR_TCPP0203_BUSConfigInit+0xd6>
             && (tcpp_type != TCPP0203_DEVICE_TYPE_03))
 800990e:	18bb      	adds	r3, r7, r2
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <PWR_TCPP0203_BUSConfigInit+0xd6>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009916:	2307      	movs	r3, #7
 8009918:	425b      	negs	r3, r3
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
 800991c:	e02c      	b.n	8009978 <PWR_TCPP0203_BUSConfigInit+0x130>
    }
    /* Check the component type is same as declared in config */
    else if (((USBPD_PWR_HW_CONFIG_TYPE_TCPP02 == USBPD_PWR_Port_Configs[PortNum].Type)
 800991e:	4b21      	ldr	r3, [pc, #132]	; (80099a4 <PWR_TCPP0203_BUSConfigInit+0x15c>)
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	0052      	lsls	r2, r2, #1
 8009924:	5cd3      	ldrb	r3, [r2, r3]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d104      	bne.n	8009934 <PWR_TCPP0203_BUSConfigInit+0xec>
              && (tcpp_type != TCPP0203_DEVICE_TYPE_02))
 800992a:	230b      	movs	r3, #11
 800992c:	18fb      	adds	r3, r7, r3
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b80      	cmp	r3, #128	; 0x80
 8009932:	d10a      	bne.n	800994a <PWR_TCPP0203_BUSConfigInit+0x102>
             || ((USBPD_PWR_HW_CONFIG_TYPE_TCPP03 == USBPD_PWR_Port_Configs[PortNum].Type)
 8009934:	4b1b      	ldr	r3, [pc, #108]	; (80099a4 <PWR_TCPP0203_BUSConfigInit+0x15c>)
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	0052      	lsls	r2, r2, #1
 800993a:	5cd3      	ldrb	r3, [r2, r3]
 800993c:	2b03      	cmp	r3, #3
 800993e:	d108      	bne.n	8009952 <PWR_TCPP0203_BUSConfigInit+0x10a>
                 && (tcpp_type != TCPP0203_DEVICE_TYPE_03)))
 8009940:	230b      	movs	r3, #11
 8009942:	18fb      	adds	r3, r7, r3
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <PWR_TCPP0203_BUSConfigInit+0x10a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800994a:	2307      	movs	r3, #7
 800994c:	425b      	negs	r3, r3
 800994e:	627b      	str	r3, [r7, #36]	; 0x24
 8009950:	e012      	b.n	8009978 <PWR_TCPP0203_BUSConfigInit+0x130>
    }
    /* Reset TCPP0203 Reg0 register */
    else if (USBPD_PWR_PortCompDrv[PortNum]->Reset(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 8009952:	4b12      	ldr	r3, [pc, #72]	; (800999c <PWR_TCPP0203_BUSConfigInit+0x154>)
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	0092      	lsls	r2, r2, #2
 8009958:	58d3      	ldr	r3, [r2, r3]
 800995a:	6899      	ldr	r1, [r3, #8]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	0013      	movs	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	189b      	adds	r3, r3, r2
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	4a0c      	ldr	r2, [pc, #48]	; (8009998 <PWR_TCPP0203_BUSConfigInit+0x150>)
 8009968:	189b      	adds	r3, r3, r2
 800996a:	0018      	movs	r0, r3
 800996c:	4788      	blx	r1
 800996e:	1e03      	subs	r3, r0, #0
 8009970:	d002      	beq.n	8009978 <PWR_TCPP0203_BUSConfigInit+0x130>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009972:	2305      	movs	r3, #5
 8009974:	425b      	negs	r3, r3
 8009976:	627b      	str	r3, [r7, #36]	; 0x24
    else
    {
      /* Registration completed */
    }
  }
  return ret;
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	b00b      	add	sp, #44	; 0x2c
 8009980:	bd90      	pop	{r4, r7, pc}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	08007b89 	.word	0x08007b89
 8009988:	08007be1 	.word	0x08007be1
 800998c:	08007c91 	.word	0x08007c91
 8009990:	08007c15 	.word	0x08007c15
 8009994:	08007d09 	.word	0x08007d09
 8009998:	20000a84 	.word	0x20000a84
 800999c:	20000aac 	.word	0x20000aac
 80099a0:	20000008 	.word	0x20000008
 80099a4:	20000070 	.word	0x20000070

080099a8 <PWR_TCPP0203_EventCallback>:
  * @brief  Handle Event callback
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_EventCallback(uint32_t PortNum)
{
 80099a8:	b5b0      	push	{r4, r5, r7, lr}
 80099aa:	b08a      	sub	sp, #40	; 0x28
 80099ac:	af02      	add	r7, sp, #8
 80099ae:	6078      	str	r0, [r7, #4]
  uint8_t flg_reg;

  /* In case of TCPP0203, this callback could be called when an event is detected
     on FLGn line */
  if (USBPD_PWR_Port_Status[PortNum].IsInitialized == 1U)
 80099b0:	49c3      	ldr	r1, [pc, #780]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	0013      	movs	r3, r2
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	189b      	adds	r3, r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	5c5b      	ldrb	r3, [r3, r1]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d000      	beq.n	80099c4 <PWR_TCPP0203_EventCallback+0x1c>
 80099c2:	e178      	b.n	8009cb6 <PWR_TCPP0203_EventCallback+0x30e>
  {
    /* Read Flags register (FLGn) */
    if (USBPD_PWR_PortCompDrv[PortNum]->ReadFlagRegister(&USBPD_PWR_PortCompObj[PortNum], &flg_reg) == TCPP0203_OK)
 80099c4:	4bbf      	ldr	r3, [pc, #764]	; (8009cc4 <PWR_TCPP0203_EventCallback+0x31c>)
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	0092      	lsls	r2, r2, #2
 80099ca:	58d3      	ldr	r3, [r2, r3]
 80099cc:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	0013      	movs	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	189b      	adds	r3, r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	4abb      	ldr	r2, [pc, #748]	; (8009cc8 <PWR_TCPP0203_EventCallback+0x320>)
 80099da:	189b      	adds	r3, r3, r2
 80099dc:	251b      	movs	r5, #27
 80099de:	197a      	adds	r2, r7, r5
 80099e0:	0011      	movs	r1, r2
 80099e2:	0018      	movs	r0, r3
 80099e4:	47a0      	blx	r4
 80099e6:	1e03      	subs	r3, r0, #0
 80099e8:	d000      	beq.n	80099ec <PWR_TCPP0203_EventCallback+0x44>
 80099ea:	e164      	b.n	8009cb6 <PWR_TCPP0203_EventCallback+0x30e>
    {
#ifdef _TRACE
      char _str[13];
      (void)sprintf(_str, "Reg2_0x%02x", flg_reg);
 80099ec:	197b      	adds	r3, r7, r5
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	001a      	movs	r2, r3
 80099f2:	49b6      	ldr	r1, [pc, #728]	; (8009ccc <PWR_TCPP0203_EventCallback+0x324>)
 80099f4:	240c      	movs	r4, #12
 80099f6:	193b      	adds	r3, r7, r4
 80099f8:	0018      	movs	r0, r3
 80099fa:	f00f fc8d 	bl	8019318 <siprintf>
      BSP_USBPD_PWR_TRACE(PortNum, _str);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	b2d9      	uxtb	r1, r3
 8009a02:	193b      	adds	r3, r7, r4
 8009a04:	220c      	movs	r2, #12
 8009a06:	9200      	str	r2, [sp, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2006      	movs	r0, #6
 8009a0c:	f003 fbe6 	bl	800d1dc <USBPD_TRACE_Add>
#endif /* _TRACE */

      /* If FLGn has been set to 0 in LOW POWER or HIBERNATE mode,
         it is expected that a VBUS_OK condition is detected.
         In this case, if any, vBus Detection callback could be called */
      switch (USBPD_PWR_Port_Status[PortNum].PwrSavingMode)
 8009a10:	49ab      	ldr	r1, [pc, #684]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	0013      	movs	r3, r2
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	189b      	adds	r3, r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	18cb      	adds	r3, r1, r3
 8009a1e:	3303      	adds	r3, #3
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d061      	beq.n	8009aea <PWR_TCPP0203_EventCallback+0x142>
 8009a26:	dd00      	ble.n	8009a2a <PWR_TCPP0203_EventCallback+0x82>
 8009a28:	e136      	b.n	8009c98 <PWR_TCPP0203_EventCallback+0x2f0>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d002      	beq.n	8009a34 <PWR_TCPP0203_EventCallback+0x8c>
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d030      	beq.n	8009a94 <PWR_TCPP0203_EventCallback+0xec>
 8009a32:	e131      	b.n	8009c98 <PWR_TCPP0203_EventCallback+0x2f0>
      {
        case USBPD_PWR_MODE_HIBERNATE:
        {
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 8009a34:	231b      	movs	r3, #27
 8009a36:	18fb      	adds	r3, r7, r3
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	001a      	movs	r2, r3
 8009a3c:	2320      	movs	r3, #32
 8009a3e:	4013      	ands	r3, r2
 8009a40:	d01e      	beq.n	8009a80 <PWR_TCPP0203_EventCallback+0xd8>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 8009a42:	499f      	ldr	r1, [pc, #636]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	0013      	movs	r3, r2
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	189b      	adds	r3, r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	18cb      	adds	r3, r1, r3
 8009a50:	3308      	adds	r3, #8
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d100      	bne.n	8009a5a <PWR_TCPP0203_EventCallback+0xb2>
 8009a58:	e128      	b.n	8009cac <PWR_TCPP0203_EventCallback+0x304>
            {
              /* In case of TCPP03 in Hibernate Mode (SNK config),
                 Mode is set to Low power to enable TCPP03 behavior on CC lines */
              /* Switch to Low Power mode */
              (void)BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2102      	movs	r1, #2
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f7ff f9ea 	bl	8008e38 <BSP_USBPD_PWR_SetPowerMode>

              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 8009a64:	4996      	ldr	r1, [pc, #600]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	0013      	movs	r3, r2
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	189b      	adds	r3, r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	18cb      	adds	r3, r1, r3
 8009a72:	3308      	adds	r3, #8
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	2100      	movs	r1, #0
 8009a7a:	0010      	movs	r0, r2
 8009a7c:	4798      	blx	r3
          else
          {
            /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
          }
          break;
 8009a7e:	e115      	b.n	8009cac <PWR_TCPP0203_EventCallback+0x304>
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	b2d9      	uxtb	r1, r3
 8009a84:	4b92      	ldr	r3, [pc, #584]	; (8009cd0 <PWR_TCPP0203_EventCallback+0x328>)
 8009a86:	2215      	movs	r2, #21
 8009a88:	9200      	str	r2, [sp, #0]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2006      	movs	r0, #6
 8009a8e:	f003 fba5 	bl	800d1dc <USBPD_TRACE_Add>
          break;
 8009a92:	e10b      	b.n	8009cac <PWR_TCPP0203_EventCallback+0x304>
        }

        case USBPD_PWR_MODE_LOWPOWER:
        {
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 8009a94:	231b      	movs	r3, #27
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	001a      	movs	r2, r3
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	d019      	beq.n	8009ad6 <PWR_TCPP0203_EventCallback+0x12e>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 8009aa2:	4987      	ldr	r1, [pc, #540]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	0013      	movs	r3, r2
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	189b      	adds	r3, r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	18cb      	adds	r3, r1, r3
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d100      	bne.n	8009aba <PWR_TCPP0203_EventCallback+0x112>
 8009ab8:	e0fa      	b.n	8009cb0 <PWR_TCPP0203_EventCallback+0x308>
            {
              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 8009aba:	4981      	ldr	r1, [pc, #516]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	0013      	movs	r3, r2
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	189b      	adds	r3, r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	18cb      	adds	r3, r1, r3
 8009ac8:	3308      	adds	r3, #8
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	2100      	movs	r1, #0
 8009ad0:	0010      	movs	r0, r2
 8009ad2:	4798      	blx	r3
          else
          {
            /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
          }
          break;
 8009ad4:	e0ec      	b.n	8009cb0 <PWR_TCPP0203_EventCallback+0x308>
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	b2d9      	uxtb	r1, r3
 8009ada:	4b7d      	ldr	r3, [pc, #500]	; (8009cd0 <PWR_TCPP0203_EventCallback+0x328>)
 8009adc:	2215      	movs	r2, #21
 8009ade:	9200      	str	r2, [sp, #0]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2006      	movs	r0, #6
 8009ae4:	f003 fb7a 	bl	800d1dc <USBPD_TRACE_Add>
          break;
 8009ae8:	e0e2      	b.n	8009cb0 <PWR_TCPP0203_EventCallback+0x308>
        }

        case USBPD_PWR_MODE_NORMAL:
        {
          uint32_t tickfault = HAL_GetTick();
 8009aea:	f000 f9db 	bl	8009ea4 <HAL_GetTick>
 8009aee:	0003      	movs	r3, r0
 8009af0:	61fb      	str	r3, [r7, #28]
          uint8_t recoveryword;

          /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
          /* Check type of error raised in FLGn */
          if ((flg_reg & TCPP0203_FLAG_OCP_VCONN_SET) == TCPP0203_FLAG_OCP_VCONN_SET)
 8009af2:	231b      	movs	r3, #27
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	001a      	movs	r2, r3
 8009afa:	2301      	movs	r3, #1
 8009afc:	4013      	ands	r3, r2
 8009afe:	d008      	beq.n	8009b12 <PWR_TCPP0203_EventCallback+0x16a>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OCP VCONN detected --");
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	b2d9      	uxtb	r1, r3
 8009b04:	4b73      	ldr	r3, [pc, #460]	; (8009cd4 <PWR_TCPP0203_EventCallback+0x32c>)
 8009b06:	2218      	movs	r2, #24
 8009b08:	9200      	str	r2, [sp, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2006      	movs	r0, #6
 8009b0e:	f003 fb65 	bl	800d1dc <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OCP_VBUS_SET) == TCPP0203_FLAG_OCP_VBUS_SET)
 8009b12:	231b      	movs	r3, #27
 8009b14:	18fb      	adds	r3, r7, r3
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	001a      	movs	r2, r3
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	d100      	bne.n	8009b22 <PWR_TCPP0203_EventCallback+0x17a>
 8009b20:	e089      	b.n	8009c36 <PWR_TCPP0203_EventCallback+0x28e>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OCP VBUS detected --");
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	b2d9      	uxtb	r1, r3
 8009b26:	4b6c      	ldr	r3, [pc, #432]	; (8009cd8 <PWR_TCPP0203_EventCallback+0x330>)
 8009b28:	2217      	movs	r2, #23
 8009b2a:	9200      	str	r2, [sp, #0]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2006      	movs	r0, #6
 8009b30:	f003 fb54 	bl	800d1dc <USBPD_TRACE_Add>

            /* Check if detected fault could be recovered */
            /* In case of OCP fault, allow to restart and check if a 2nd OCP fault occurs in a limited time */
            if ((tickfault > USBPD_PWR_Port_Status[PortNum].LastFaultTick)
 8009b34:	4962      	ldr	r1, [pc, #392]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	0013      	movs	r3, r2
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	189b      	adds	r3, r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	18cb      	adds	r3, r1, r3
 8009b42:	3304      	adds	r3, #4
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69fa      	ldr	r2, [r7, #28]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d96a      	bls.n	8009c22 <PWR_TCPP0203_EventCallback+0x27a>
                && ((tickfault - USBPD_PWR_Port_Status[PortNum].LastFaultTick) > USBPD_PWR_FAULT_MIN_TIME_RECOVERY))
 8009b4c:	495c      	ldr	r1, [pc, #368]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	0013      	movs	r3, r2
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	189b      	adds	r3, r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	18cb      	adds	r3, r1, r3
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69fa      	ldr	r2, [r7, #28]
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	23fa      	movs	r3, #250	; 0xfa
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d95b      	bls.n	8009c22 <PWR_TCPP0203_EventCallback+0x27a>
            {
              /* Send Recovery word to TCPP0203 :
                 GDC and GDP open (TCPP0203_GD_PROVIDER_SWITCH_OPEN is 0) */
              BSP_USBPD_PWR_TRACE(PortNum, "-- Send Recovery Word --");
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	b2d9      	uxtb	r1, r3
 8009b6e:	4b5b      	ldr	r3, [pc, #364]	; (8009cdc <PWR_TCPP0203_EventCallback+0x334>)
 8009b70:	2218      	movs	r2, #24
 8009b72:	9200      	str	r2, [sp, #0]
 8009b74:	2200      	movs	r2, #0
 8009b76:	2006      	movs	r0, #6
 8009b78:	f003 fb30 	bl	800d1dc <USBPD_TRACE_Add>
              recoveryword = TCPP0203_GD_CONSUMER_SWITCH_OPEN | TCPP0203_POWER_MODE_NORMAL;
 8009b7c:	210b      	movs	r1, #11
 8009b7e:	187b      	adds	r3, r7, r1
 8009b80:	2218      	movs	r2, #24
 8009b82:	701a      	strb	r2, [r3, #0]
              (void)TCPP0203_WriteCtrlRegister(&USBPD_PWR_PortCompObj[PortNum], &recoveryword);
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	0013      	movs	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	189b      	adds	r3, r3, r2
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	4a4e      	ldr	r2, [pc, #312]	; (8009cc8 <PWR_TCPP0203_EventCallback+0x320>)
 8009b90:	189b      	adds	r3, r3, r2
 8009b92:	187a      	adds	r2, r7, r1
 8009b94:	0011      	movs	r1, r2
 8009b96:	0018      	movs	r0, r3
 8009b98:	f7fd fea6 	bl	80078e8 <TCPP0203_WriteCtrlRegister>

              /* In case PWR Role is SRC, try to restore VBUS as soon as possible */
              if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 8009b9c:	4948      	ldr	r1, [pc, #288]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	0013      	movs	r3, r2
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	189b      	adds	r3, r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	18cb      	adds	r3, r1, r3
 8009baa:	3302      	adds	r3, #2
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d11f      	bne.n	8009bf2 <PWR_TCPP0203_EventCallback+0x24a>
              {
                (void)TCPP0203_SetPowerMode(&USBPD_PWR_PortCompObj[PortNum], TCPP0203_POWER_MODE_NORMAL);
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	0013      	movs	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	189b      	adds	r3, r3, r2
 8009bba:	00db      	lsls	r3, r3, #3
 8009bbc:	4a42      	ldr	r2, [pc, #264]	; (8009cc8 <PWR_TCPP0203_EventCallback+0x320>)
 8009bbe:	189b      	adds	r3, r3, r2
 8009bc0:	2110      	movs	r1, #16
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	f7fd fc8a 	bl	80074dc <TCPP0203_SetPowerMode>
                (void)TCPP0203_SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	0013      	movs	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	189b      	adds	r3, r3, r2
 8009bd0:	00db      	lsls	r3, r3, #3
 8009bd2:	4a3d      	ldr	r2, [pc, #244]	; (8009cc8 <PWR_TCPP0203_EventCallback+0x320>)
 8009bd4:	189b      	adds	r3, r3, r2
 8009bd6:	2104      	movs	r1, #4
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f7fd fc09 	bl	80073f0 <TCPP0203_SetGateDriverProvider>
                                                     TCPP0203_GD_PROVIDER_SWITCH_CLOSED);
                BSP_USBPD_PWR_TRACE(PortNum, "-- GDP/GDC setting : SRC (Restored) --");
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	b2d9      	uxtb	r1, r3
 8009be2:	4b3f      	ldr	r3, [pc, #252]	; (8009ce0 <PWR_TCPP0203_EventCallback+0x338>)
 8009be4:	2226      	movs	r2, #38	; 0x26
 8009be6:	9200      	str	r2, [sp, #0]
 8009be8:	2200      	movs	r2, #0
 8009bea:	2006      	movs	r0, #6
 8009bec:	f003 faf6 	bl	800d1dc <USBPD_TRACE_Add>
 8009bf0:	e017      	b.n	8009c22 <PWR_TCPP0203_EventCallback+0x27a>
              }
              else
              {
                if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 8009bf2:	4933      	ldr	r1, [pc, #204]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	0013      	movs	r3, r2
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	189b      	adds	r3, r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	18cb      	adds	r3, r1, r3
 8009c00:	3308      	adds	r3, #8
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00c      	beq.n	8009c22 <PWR_TCPP0203_EventCallback+0x27a>
                {
                  /* Notify Error thanks to callback */
                  USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_NOT_CONNECTED);
 8009c08:	492d      	ldr	r1, [pc, #180]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	0013      	movs	r3, r2
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	189b      	adds	r3, r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	18cb      	adds	r3, r1, r3
 8009c16:	3308      	adds	r3, #8
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	0010      	movs	r0, r2
 8009c20:	4798      	blx	r3
                }
              }
            }
            USBPD_PWR_Port_Status[PortNum].LastFaultTick = tickfault;
 8009c22:	4927      	ldr	r1, [pc, #156]	; (8009cc0 <PWR_TCPP0203_EventCallback+0x318>)
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	0013      	movs	r3, r2
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	189b      	adds	r3, r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	18cb      	adds	r3, r1, r3
 8009c30:	3304      	adds	r3, #4
 8009c32:	69fa      	ldr	r2, [r7, #28]
 8009c34:	601a      	str	r2, [r3, #0]
          }
          if ((flg_reg & TCPP0203_FLAG_OVP_VBUS_SET) == TCPP0203_FLAG_OVP_VBUS_SET)
 8009c36:	231b      	movs	r3, #27
 8009c38:	18fb      	adds	r3, r7, r3
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	001a      	movs	r2, r3
 8009c3e:	2304      	movs	r3, #4
 8009c40:	4013      	ands	r3, r2
 8009c42:	d008      	beq.n	8009c56 <PWR_TCPP0203_EventCallback+0x2ae>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OVP VBUS detected --");
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	b2d9      	uxtb	r1, r3
 8009c48:	4b26      	ldr	r3, [pc, #152]	; (8009ce4 <PWR_TCPP0203_EventCallback+0x33c>)
 8009c4a:	2217      	movs	r2, #23
 8009c4c:	9200      	str	r2, [sp, #0]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2006      	movs	r0, #6
 8009c52:	f003 fac3 	bl	800d1dc <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OTP_SET) == TCPP0203_FLAG_OTP_SET)
 8009c56:	231b      	movs	r3, #27
 8009c58:	18fb      	adds	r3, r7, r3
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	001a      	movs	r2, r3
 8009c5e:	2310      	movs	r3, #16
 8009c60:	4013      	ands	r3, r2
 8009c62:	d008      	beq.n	8009c76 <PWR_TCPP0203_EventCallback+0x2ce>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- Over Temp detected --");
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	b2d9      	uxtb	r1, r3
 8009c68:	4b1f      	ldr	r3, [pc, #124]	; (8009ce8 <PWR_TCPP0203_EventCallback+0x340>)
 8009c6a:	2218      	movs	r2, #24
 8009c6c:	9200      	str	r2, [sp, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2006      	movs	r0, #6
 8009c72:	f003 fab3 	bl	800d1dc <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OVP_CC_SET) == TCPP0203_FLAG_OVP_CC_SET)
 8009c76:	231b      	movs	r3, #27
 8009c78:	18fb      	adds	r3, r7, r3
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	001a      	movs	r2, r3
 8009c7e:	2308      	movs	r3, #8
 8009c80:	4013      	ands	r3, r2
 8009c82:	d017      	beq.n	8009cb4 <PWR_TCPP0203_EventCallback+0x30c>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OVP CC detected --");
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	b2d9      	uxtb	r1, r3
 8009c88:	4b18      	ldr	r3, [pc, #96]	; (8009cec <PWR_TCPP0203_EventCallback+0x344>)
 8009c8a:	2215      	movs	r2, #21
 8009c8c:	9200      	str	r2, [sp, #0]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2006      	movs	r0, #6
 8009c92:	f003 faa3 	bl	800d1dc <USBPD_TRACE_Add>
          }
          break;
 8009c96:	e00d      	b.n	8009cb4 <PWR_TCPP0203_EventCallback+0x30c>
        }

        default:
        {
          /* Unexpected port state */
          BSP_USBPD_PWR_TRACE(PortNum, "-- Unexpected State for FLGn event --");
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	b2d9      	uxtb	r1, r3
 8009c9c:	4b14      	ldr	r3, [pc, #80]	; (8009cf0 <PWR_TCPP0203_EventCallback+0x348>)
 8009c9e:	2225      	movs	r2, #37	; 0x25
 8009ca0:	9200      	str	r2, [sp, #0]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2006      	movs	r0, #6
 8009ca6:	f003 fa99 	bl	800d1dc <USBPD_TRACE_Add>
          break;
 8009caa:	e004      	b.n	8009cb6 <PWR_TCPP0203_EventCallback+0x30e>
          break;
 8009cac:	46c0      	nop			; (mov r8, r8)
 8009cae:	e002      	b.n	8009cb6 <PWR_TCPP0203_EventCallback+0x30e>
          break;
 8009cb0:	46c0      	nop			; (mov r8, r8)
 8009cb2:	e000      	b.n	8009cb6 <PWR_TCPP0203_EventCallback+0x30e>
          break;
 8009cb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
}
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	b008      	add	sp, #32
 8009cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cbe:	46c0      	nop			; (mov r8, r8)
 8009cc0:	20000a78 	.word	0x20000a78
 8009cc4:	20000aac 	.word	0x20000aac
 8009cc8:	20000a84 	.word	0x20000a84
 8009ccc:	08019dd0 	.word	0x08019dd0
 8009cd0:	08019ddc 	.word	0x08019ddc
 8009cd4:	08019df4 	.word	0x08019df4
 8009cd8:	08019e10 	.word	0x08019e10
 8009cdc:	08019e28 	.word	0x08019e28
 8009ce0:	08019e44 	.word	0x08019e44
 8009ce4:	08019e6c 	.word	0x08019e6c
 8009ce8:	08019e84 	.word	0x08019e84
 8009cec:	08019ea0 	.word	0x08019ea0
 8009cf0:	08019eb8 	.word	0x08019eb8

08009cf4 <PWR_TCPP0203_ConvertADCDataToVoltage>:
  * @param  Ra       value of Ra resistance
  * @param  Rb       value of Rb resistance
  * @retval analog voltage (unit: mV)
  */
static uint32_t PWR_TCPP0203_ConvertADCDataToVoltage(uint32_t ADCData, uint32_t Ra, uint32_t Rb)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
  uint32_t voltage;
  uint32_t vadc;

  /* Avoid dividing by zero */
  if (Rb == 0u)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <PWR_TCPP0203_ConvertADCDataToVoltage+0x18>
  {
    voltage = 0u;
 8009d06:	2300      	movs	r3, #0
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	e013      	b.n	8009d34 <PWR_TCPP0203_ConvertADCDataToVoltage+0x40>
  }
  else
  {
    vadc = (ADCData * VDD_VALUE) / ADC_FULL_SCALE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4a0c      	ldr	r2, [pc, #48]	; (8009d40 <PWR_TCPP0203_ConvertADCDataToVoltage+0x4c>)
 8009d10:	4353      	muls	r3, r2
 8009d12:	490c      	ldr	r1, [pc, #48]	; (8009d44 <PWR_TCPP0203_ConvertADCDataToVoltage+0x50>)
 8009d14:	0018      	movs	r0, r3
 8009d16:	f7fc fb25 	bl	8006364 <__udivsi3>
 8009d1a:	0003      	movs	r3, r0
 8009d1c:	613b      	str	r3, [r7, #16]
    voltage = vadc * (Ra + Rb) / Rb;
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	18d3      	adds	r3, r2, r3
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4353      	muls	r3, r2
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f7fc fb1a 	bl	8006364 <__udivsi3>
 8009d30:	0003      	movs	r3, r0
 8009d32:	617b      	str	r3, [r7, #20]
  }

  return voltage;
 8009d34:	697b      	ldr	r3, [r7, #20]
}
 8009d36:	0018      	movs	r0, r3
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	b006      	add	sp, #24
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	46c0      	nop			; (mov r8, r8)
 8009d40:	00000ce4 	.word	0x00000ce4
 8009d44:	00000fff 	.word	0x00000fff

08009d48 <PWR_TCPP0203_ConvertADCDataToCurrent>:
  * @param  Ga       value of TCPP0X Iana gain in V/V
  * @param  Rs       value of shunt resistor in milliohm
  * @retval VBUS analog current (unit: mA)
  */
static int32_t PWR_TCPP0203_ConvertADCDataToCurrent(uint32_t ADCData, uint32_t Ga, uint32_t Rs)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
  int32_t current;
  uint32_t vadc;

  /* Avoid dividing by zero */
  if ((Ga == 0u) || (Rs == 0u))
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <PWR_TCPP0203_ConvertADCDataToCurrent+0x18>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <PWR_TCPP0203_ConvertADCDataToCurrent+0x1e>
  {
    current = 0u;
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	e018      	b.n	8009d98 <PWR_TCPP0203_ConvertADCDataToCurrent+0x50>
  }
  else
  {
    vadc = (ADCData * VDD_VALUE) / ADC_FULL_SCALE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4a0e      	ldr	r2, [pc, #56]	; (8009da4 <PWR_TCPP0203_ConvertADCDataToCurrent+0x5c>)
 8009d6a:	4353      	muls	r3, r2
 8009d6c:	490e      	ldr	r1, [pc, #56]	; (8009da8 <PWR_TCPP0203_ConvertADCDataToCurrent+0x60>)
 8009d6e:	0018      	movs	r0, r3
 8009d70:	f7fc faf8 	bl	8006364 <__udivsi3>
 8009d74:	0003      	movs	r3, r0
 8009d76:	613b      	str	r3, [r7, #16]
    current = (int32_t)((vadc * 1000u) / (Ga * Rs));
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	0013      	movs	r3, r2
 8009d7c:	015b      	lsls	r3, r3, #5
 8009d7e:	1a9b      	subs	r3, r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	189b      	adds	r3, r3, r2
 8009d84:	00db      	lsls	r3, r3, #3
 8009d86:	0018      	movs	r0, r3
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	4353      	muls	r3, r2
 8009d8e:	0019      	movs	r1, r3
 8009d90:	f7fc fae8 	bl	8006364 <__udivsi3>
 8009d94:	0003      	movs	r3, r0
 8009d96:	617b      	str	r3, [r7, #20]
  }

  return current;
 8009d98:	697b      	ldr	r3, [r7, #20]
}
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	b006      	add	sp, #24
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	46c0      	nop			; (mov r8, r8)
 8009da4:	00000ce4 	.word	0x00000ce4
 8009da8:	00000fff 	.word	0x00000fff

08009dac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009db2:	1dfb      	adds	r3, r7, #7
 8009db4:	2200      	movs	r2, #0
 8009db6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009db8:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <HAL_Init+0x3c>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <HAL_Init+0x3c>)
 8009dbe:	2180      	movs	r1, #128	; 0x80
 8009dc0:	0049      	lsls	r1, r1, #1
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009dc6:	2003      	movs	r0, #3
 8009dc8:	f000 f810 	bl	8009dec <HAL_InitTick>
 8009dcc:	1e03      	subs	r3, r0, #0
 8009dce:	d003      	beq.n	8009dd8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009dd0:	1dfb      	adds	r3, r7, #7
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	701a      	strb	r2, [r3, #0]
 8009dd6:	e001      	b.n	8009ddc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009dd8:	f7fd f93a 	bl	8007050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009ddc:	1dfb      	adds	r3, r7, #7
 8009dde:	781b      	ldrb	r3, [r3, #0]
}
 8009de0:	0018      	movs	r0, r3
 8009de2:	46bd      	mov	sp, r7
 8009de4:	b002      	add	sp, #8
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	40022000 	.word	0x40022000

08009dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009dec:	b590      	push	{r4, r7, lr}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009df4:	230f      	movs	r3, #15
 8009df6:	18fb      	adds	r3, r7, r3
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8009dfc:	4b1d      	ldr	r3, [pc, #116]	; (8009e74 <HAL_InitTick+0x88>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d02b      	beq.n	8009e5c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8009e04:	4b1c      	ldr	r3, [pc, #112]	; (8009e78 <HAL_InitTick+0x8c>)
 8009e06:	681c      	ldr	r4, [r3, #0]
 8009e08:	4b1a      	ldr	r3, [pc, #104]	; (8009e74 <HAL_InitTick+0x88>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	0019      	movs	r1, r3
 8009e0e:	23fa      	movs	r3, #250	; 0xfa
 8009e10:	0098      	lsls	r0, r3, #2
 8009e12:	f7fc faa7 	bl	8006364 <__udivsi3>
 8009e16:	0003      	movs	r3, r0
 8009e18:	0019      	movs	r1, r3
 8009e1a:	0020      	movs	r0, r4
 8009e1c:	f7fc faa2 	bl	8006364 <__udivsi3>
 8009e20:	0003      	movs	r3, r0
 8009e22:	0018      	movs	r0, r3
 8009e24:	f000 f969 	bl	800a0fa <HAL_SYSTICK_Config>
 8009e28:	1e03      	subs	r3, r0, #0
 8009e2a:	d112      	bne.n	8009e52 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d80a      	bhi.n	8009e48 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	2301      	movs	r3, #1
 8009e36:	425b      	negs	r3, r3
 8009e38:	2200      	movs	r2, #0
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	f000 f934 	bl	800a0a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009e40:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <HAL_InitTick+0x90>)
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	e00d      	b.n	8009e64 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8009e48:	230f      	movs	r3, #15
 8009e4a:	18fb      	adds	r3, r7, r3
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	e008      	b.n	8009e64 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009e52:	230f      	movs	r3, #15
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	2201      	movs	r2, #1
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	e003      	b.n	8009e64 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009e5c:	230f      	movs	r3, #15
 8009e5e:	18fb      	adds	r3, r7, r3
 8009e60:	2201      	movs	r2, #1
 8009e62:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8009e64:	230f      	movs	r3, #15
 8009e66:	18fb      	adds	r3, r7, r3
 8009e68:	781b      	ldrb	r3, [r3, #0]
}
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	b005      	add	sp, #20
 8009e70:	bd90      	pop	{r4, r7, pc}
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	20000078 	.word	0x20000078
 8009e78:	20000004 	.word	0x20000004
 8009e7c:	20000074 	.word	0x20000074

08009e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009e84:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <HAL_IncTick+0x1c>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	001a      	movs	r2, r3
 8009e8a:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <HAL_IncTick+0x20>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	18d2      	adds	r2, r2, r3
 8009e90:	4b03      	ldr	r3, [pc, #12]	; (8009ea0 <HAL_IncTick+0x20>)
 8009e92:	601a      	str	r2, [r3, #0]
}
 8009e94:	46c0      	nop			; (mov r8, r8)
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	20000078 	.word	0x20000078
 8009ea0:	20000ab4 	.word	0x20000ab4

08009ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8009ea8:	4b02      	ldr	r3, [pc, #8]	; (8009eb4 <HAL_GetTick+0x10>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
}
 8009eac:	0018      	movs	r0, r3
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	20000ab4 	.word	0x20000ab4

08009eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ec0:	f7ff fff0 	bl	8009ea4 <HAL_GetTick>
 8009ec4:	0003      	movs	r3, r0
 8009ec6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	d005      	beq.n	8009ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009ed2:	4b0a      	ldr	r3, [pc, #40]	; (8009efc <HAL_Delay+0x44>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	001a      	movs	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	189b      	adds	r3, r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	f7ff ffe0 	bl	8009ea4 <HAL_GetTick>
 8009ee4:	0002      	movs	r2, r0
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d8f7      	bhi.n	8009ee0 <HAL_Delay+0x28>
  {
  }
}
 8009ef0:	46c0      	nop			; (mov r8, r8)
 8009ef2:	46c0      	nop			; (mov r8, r8)
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b004      	add	sp, #16
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	20000078 	.word	0x20000078

08009f00 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8009f08:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a06      	ldr	r2, [pc, #24]	; (8009f28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8009f0e:	4013      	ands	r3, r2
 8009f10:	0019      	movs	r1, r3
 8009f12:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	601a      	str	r2, [r3, #0]
}
 8009f1a:	46c0      	nop			; (mov r8, r8)
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	b002      	add	sp, #8
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	46c0      	nop			; (mov r8, r8)
 8009f24:	40010000 	.word	0x40010000
 8009f28:	fffff9ff 	.word	0xfffff9ff

08009f2c <__NVIC_EnableIRQ>:
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	0002      	movs	r2, r0
 8009f34:	1dfb      	adds	r3, r7, #7
 8009f36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009f38:	1dfb      	adds	r3, r7, #7
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8009f3e:	d809      	bhi.n	8009f54 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f40:	1dfb      	adds	r3, r7, #7
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	001a      	movs	r2, r3
 8009f46:	231f      	movs	r3, #31
 8009f48:	401a      	ands	r2, r3
 8009f4a:	4b04      	ldr	r3, [pc, #16]	; (8009f5c <__NVIC_EnableIRQ+0x30>)
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	4091      	lsls	r1, r2
 8009f50:	000a      	movs	r2, r1
 8009f52:	601a      	str	r2, [r3, #0]
}
 8009f54:	46c0      	nop			; (mov r8, r8)
 8009f56:	46bd      	mov	sp, r7
 8009f58:	b002      	add	sp, #8
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	e000e100 	.word	0xe000e100

08009f60 <__NVIC_SetPriority>:
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	0002      	movs	r2, r0
 8009f68:	6039      	str	r1, [r7, #0]
 8009f6a:	1dfb      	adds	r3, r7, #7
 8009f6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009f6e:	1dfb      	adds	r3, r7, #7
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	2b7f      	cmp	r3, #127	; 0x7f
 8009f74:	d828      	bhi.n	8009fc8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009f76:	4a2f      	ldr	r2, [pc, #188]	; (800a034 <__NVIC_SetPriority+0xd4>)
 8009f78:	1dfb      	adds	r3, r7, #7
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	b25b      	sxtb	r3, r3
 8009f7e:	089b      	lsrs	r3, r3, #2
 8009f80:	33c0      	adds	r3, #192	; 0xc0
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	589b      	ldr	r3, [r3, r2]
 8009f86:	1dfa      	adds	r2, r7, #7
 8009f88:	7812      	ldrb	r2, [r2, #0]
 8009f8a:	0011      	movs	r1, r2
 8009f8c:	2203      	movs	r2, #3
 8009f8e:	400a      	ands	r2, r1
 8009f90:	00d2      	lsls	r2, r2, #3
 8009f92:	21ff      	movs	r1, #255	; 0xff
 8009f94:	4091      	lsls	r1, r2
 8009f96:	000a      	movs	r2, r1
 8009f98:	43d2      	mvns	r2, r2
 8009f9a:	401a      	ands	r2, r3
 8009f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	019b      	lsls	r3, r3, #6
 8009fa2:	22ff      	movs	r2, #255	; 0xff
 8009fa4:	401a      	ands	r2, r3
 8009fa6:	1dfb      	adds	r3, r7, #7
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	0018      	movs	r0, r3
 8009fac:	2303      	movs	r3, #3
 8009fae:	4003      	ands	r3, r0
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009fb4:	481f      	ldr	r0, [pc, #124]	; (800a034 <__NVIC_SetPriority+0xd4>)
 8009fb6:	1dfb      	adds	r3, r7, #7
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	b25b      	sxtb	r3, r3
 8009fbc:	089b      	lsrs	r3, r3, #2
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	33c0      	adds	r3, #192	; 0xc0
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	501a      	str	r2, [r3, r0]
}
 8009fc6:	e031      	b.n	800a02c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009fc8:	4a1b      	ldr	r2, [pc, #108]	; (800a038 <__NVIC_SetPriority+0xd8>)
 8009fca:	1dfb      	adds	r3, r7, #7
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	0019      	movs	r1, r3
 8009fd0:	230f      	movs	r3, #15
 8009fd2:	400b      	ands	r3, r1
 8009fd4:	3b08      	subs	r3, #8
 8009fd6:	089b      	lsrs	r3, r3, #2
 8009fd8:	3306      	adds	r3, #6
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	18d3      	adds	r3, r2, r3
 8009fde:	3304      	adds	r3, #4
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	1dfa      	adds	r2, r7, #7
 8009fe4:	7812      	ldrb	r2, [r2, #0]
 8009fe6:	0011      	movs	r1, r2
 8009fe8:	2203      	movs	r2, #3
 8009fea:	400a      	ands	r2, r1
 8009fec:	00d2      	lsls	r2, r2, #3
 8009fee:	21ff      	movs	r1, #255	; 0xff
 8009ff0:	4091      	lsls	r1, r2
 8009ff2:	000a      	movs	r2, r1
 8009ff4:	43d2      	mvns	r2, r2
 8009ff6:	401a      	ands	r2, r3
 8009ff8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	019b      	lsls	r3, r3, #6
 8009ffe:	22ff      	movs	r2, #255	; 0xff
 800a000:	401a      	ands	r2, r3
 800a002:	1dfb      	adds	r3, r7, #7
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	0018      	movs	r0, r3
 800a008:	2303      	movs	r3, #3
 800a00a:	4003      	ands	r3, r0
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a010:	4809      	ldr	r0, [pc, #36]	; (800a038 <__NVIC_SetPriority+0xd8>)
 800a012:	1dfb      	adds	r3, r7, #7
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	001c      	movs	r4, r3
 800a018:	230f      	movs	r3, #15
 800a01a:	4023      	ands	r3, r4
 800a01c:	3b08      	subs	r3, #8
 800a01e:	089b      	lsrs	r3, r3, #2
 800a020:	430a      	orrs	r2, r1
 800a022:	3306      	adds	r3, #6
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	18c3      	adds	r3, r0, r3
 800a028:	3304      	adds	r3, #4
 800a02a:	601a      	str	r2, [r3, #0]
}
 800a02c:	46c0      	nop			; (mov r8, r8)
 800a02e:	46bd      	mov	sp, r7
 800a030:	b003      	add	sp, #12
 800a032:	bd90      	pop	{r4, r7, pc}
 800a034:	e000e100 	.word	0xe000e100
 800a038:	e000ed00 	.word	0xe000ed00

0800a03c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a040:	f3bf 8f4f 	dsb	sy
}
 800a044:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a046:	4b04      	ldr	r3, [pc, #16]	; (800a058 <__NVIC_SystemReset+0x1c>)
 800a048:	4a04      	ldr	r2, [pc, #16]	; (800a05c <__NVIC_SystemReset+0x20>)
 800a04a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a04c:	f3bf 8f4f 	dsb	sy
}
 800a050:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a052:	46c0      	nop			; (mov r8, r8)
 800a054:	e7fd      	b.n	800a052 <__NVIC_SystemReset+0x16>
 800a056:	46c0      	nop			; (mov r8, r8)
 800a058:	e000ed00 	.word	0xe000ed00
 800a05c:	05fa0004 	.word	0x05fa0004

0800a060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	1e5a      	subs	r2, r3, #1
 800a06c:	2380      	movs	r3, #128	; 0x80
 800a06e:	045b      	lsls	r3, r3, #17
 800a070:	429a      	cmp	r2, r3
 800a072:	d301      	bcc.n	800a078 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a074:	2301      	movs	r3, #1
 800a076:	e010      	b.n	800a09a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a078:	4b0a      	ldr	r3, [pc, #40]	; (800a0a4 <SysTick_Config+0x44>)
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	3a01      	subs	r2, #1
 800a07e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a080:	2301      	movs	r3, #1
 800a082:	425b      	negs	r3, r3
 800a084:	2103      	movs	r1, #3
 800a086:	0018      	movs	r0, r3
 800a088:	f7ff ff6a 	bl	8009f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a08c:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <SysTick_Config+0x44>)
 800a08e:	2200      	movs	r2, #0
 800a090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a092:	4b04      	ldr	r3, [pc, #16]	; (800a0a4 <SysTick_Config+0x44>)
 800a094:	2207      	movs	r2, #7
 800a096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a098:	2300      	movs	r3, #0
}
 800a09a:	0018      	movs	r0, r3
 800a09c:	46bd      	mov	sp, r7
 800a09e:	b002      	add	sp, #8
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	e000e010 	.word	0xe000e010

0800a0a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	210f      	movs	r1, #15
 800a0b4:	187b      	adds	r3, r7, r1
 800a0b6:	1c02      	adds	r2, r0, #0
 800a0b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	187b      	adds	r3, r7, r1
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	b25b      	sxtb	r3, r3
 800a0c2:	0011      	movs	r1, r2
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f7ff ff4b 	bl	8009f60 <__NVIC_SetPriority>
}
 800a0ca:	46c0      	nop			; (mov r8, r8)
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	b004      	add	sp, #16
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	0002      	movs	r2, r0
 800a0da:	1dfb      	adds	r3, r7, #7
 800a0dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0de:	1dfb      	adds	r3, r7, #7
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	b25b      	sxtb	r3, r3
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f7ff ff21 	bl	8009f2c <__NVIC_EnableIRQ>
}
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	b002      	add	sp, #8
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a0f6:	f7ff ffa1 	bl	800a03c <__NVIC_SystemReset>

0800a0fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	0018      	movs	r0, r3
 800a106:	f7ff ffab 	bl	800a060 <SysTick_Config>
 800a10a:	0003      	movs	r3, r0
}
 800a10c:	0018      	movs	r0, r3
 800a10e:	46bd      	mov	sp, r7
 800a110:	b002      	add	sp, #8
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a114:	b5b0      	push	{r4, r5, r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	603a      	str	r2, [r7, #0]
 800a120:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a122:	4b21      	ldr	r3, [pc, #132]	; (800a1a8 <HAL_FLASH_Program+0x94>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_FLASH_Program+0x1a>
 800a12a:	2302      	movs	r3, #2
 800a12c:	e038      	b.n	800a1a0 <HAL_FLASH_Program+0x8c>
 800a12e:	4b1e      	ldr	r3, [pc, #120]	; (800a1a8 <HAL_FLASH_Program+0x94>)
 800a130:	2201      	movs	r2, #1
 800a132:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a134:	4b1c      	ldr	r3, [pc, #112]	; (800a1a8 <HAL_FLASH_Program+0x94>)
 800a136:	2200      	movs	r2, #0
 800a138:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a13a:	2517      	movs	r5, #23
 800a13c:	197c      	adds	r4, r7, r5
 800a13e:	23fa      	movs	r3, #250	; 0xfa
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	0018      	movs	r0, r3
 800a144:	f000 f874 	bl	800a230 <FLASH_WaitForLastOperation>
 800a148:	0003      	movs	r3, r0
 800a14a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800a14c:	197b      	adds	r3, r7, r5
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d11f      	bne.n	800a194 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d106      	bne.n	800a168 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	0008      	movs	r0, r1
 800a162:	f000 f8b3 	bl	800a2cc <FLASH_Program_DoubleWord>
 800a166:	e005      	b.n	800a174 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	0011      	movs	r1, r2
 800a16e:	0018      	movs	r0, r3
 800a170:	f00f fce2 	bl	8019b38 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a174:	2317      	movs	r3, #23
 800a176:	18fc      	adds	r4, r7, r3
 800a178:	23fa      	movs	r3, #250	; 0xfa
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	0018      	movs	r0, r3
 800a17e:	f000 f857 	bl	800a230 <FLASH_WaitForLastOperation>
 800a182:	0003      	movs	r3, r0
 800a184:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800a186:	4b09      	ldr	r3, [pc, #36]	; (800a1ac <HAL_FLASH_Program+0x98>)
 800a188:	695a      	ldr	r2, [r3, #20]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	43d9      	mvns	r1, r3
 800a18e:	4b07      	ldr	r3, [pc, #28]	; (800a1ac <HAL_FLASH_Program+0x98>)
 800a190:	400a      	ands	r2, r1
 800a192:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a194:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <HAL_FLASH_Program+0x94>)
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800a19a:	2317      	movs	r3, #23
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	781b      	ldrb	r3, [r3, #0]
}
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	b006      	add	sp, #24
 800a1a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a1a8:	20000ab8 	.word	0x20000ab8
 800a1ac:	40022000 	.word	0x40022000

0800a1b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a1b6:	1dfb      	adds	r3, r7, #7
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800a1bc:	4b0b      	ldr	r3, [pc, #44]	; (800a1ec <HAL_FLASH_Unlock+0x3c>)
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	da0c      	bge.n	800a1de <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a1c4:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <HAL_FLASH_Unlock+0x3c>)
 800a1c6:	4a0a      	ldr	r2, [pc, #40]	; (800a1f0 <HAL_FLASH_Unlock+0x40>)
 800a1c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a1ca:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <HAL_FLASH_Unlock+0x3c>)
 800a1cc:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <HAL_FLASH_Unlock+0x44>)
 800a1ce:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800a1d0:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <HAL_FLASH_Unlock+0x3c>)
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	da02      	bge.n	800a1de <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800a1d8:	1dfb      	adds	r3, r7, #7
 800a1da:	2201      	movs	r2, #1
 800a1dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800a1de:	1dfb      	adds	r3, r7, #7
 800a1e0:	781b      	ldrb	r3, [r3, #0]
}
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	b002      	add	sp, #8
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	46c0      	nop			; (mov r8, r8)
 800a1ec:	40022000 	.word	0x40022000
 800a1f0:	45670123 	.word	0x45670123
 800a1f4:	cdef89ab 	.word	0xcdef89ab

0800a1f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800a1fe:	1dfb      	adds	r3, r7, #7
 800a200:	2201      	movs	r2, #1
 800a202:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a204:	4b09      	ldr	r3, [pc, #36]	; (800a22c <HAL_FLASH_Lock+0x34>)
 800a206:	695a      	ldr	r2, [r3, #20]
 800a208:	4b08      	ldr	r3, [pc, #32]	; (800a22c <HAL_FLASH_Lock+0x34>)
 800a20a:	2180      	movs	r1, #128	; 0x80
 800a20c:	0609      	lsls	r1, r1, #24
 800a20e:	430a      	orrs	r2, r1
 800a210:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800a212:	4b06      	ldr	r3, [pc, #24]	; (800a22c <HAL_FLASH_Lock+0x34>)
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	2b00      	cmp	r3, #0
 800a218:	da02      	bge.n	800a220 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800a21a:	1dfb      	adds	r3, r7, #7
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a220:	1dfb      	adds	r3, r7, #7
 800a222:	781b      	ldrb	r3, [r3, #0]
}
 800a224:	0018      	movs	r0, r3
 800a226:	46bd      	mov	sp, r7
 800a228:	b002      	add	sp, #8
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	40022000 	.word	0x40022000

0800a230 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800a238:	f7ff fe34 	bl	8009ea4 <HAL_GetTick>
 800a23c:	0002      	movs	r2, r0
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	189b      	adds	r3, r3, r2
 800a242:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800a244:	23c0      	movs	r3, #192	; 0xc0
 800a246:	029b      	lsls	r3, r3, #10
 800a248:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800a24a:	e007      	b.n	800a25c <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 800a24c:	f7ff fe2a 	bl	8009ea4 <HAL_GetTick>
 800a250:	0002      	movs	r2, r0
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4293      	cmp	r3, r2
 800a256:	d801      	bhi.n	800a25c <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e02a      	b.n	800a2b2 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 800a25c:	4b17      	ldr	r3, [pc, #92]	; (800a2bc <FLASH_WaitForLastOperation+0x8c>)
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	4013      	ands	r3, r2
 800a264:	d1f2      	bne.n	800a24c <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800a266:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <FLASH_WaitForLastOperation+0x8c>)
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	4a15      	ldr	r2, [pc, #84]	; (800a2c0 <FLASH_WaitForLastOperation+0x90>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800a270:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <FLASH_WaitForLastOperation+0x8c>)
 800a272:	4a14      	ldr	r2, [pc, #80]	; (800a2c4 <FLASH_WaitForLastOperation+0x94>)
 800a274:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d004      	beq.n	800a286 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800a27c:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <FLASH_WaitForLastOperation+0x98>)
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e015      	b.n	800a2b2 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800a286:	f7ff fe0d 	bl	8009ea4 <HAL_GetTick>
 800a28a:	0002      	movs	r2, r0
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	189b      	adds	r3, r3, r2
 800a290:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800a292:	e007      	b.n	800a2a4 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 800a294:	f7ff fe06 	bl	8009ea4 <HAL_GetTick>
 800a298:	0002      	movs	r2, r0
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d801      	bhi.n	800a2a4 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e006      	b.n	800a2b2 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800a2a4:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <FLASH_WaitForLastOperation+0x8c>)
 800a2a6:	691a      	ldr	r2, [r3, #16]
 800a2a8:	2380      	movs	r3, #128	; 0x80
 800a2aa:	02db      	lsls	r3, r3, #11
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	d1f1      	bne.n	800a294 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	b004      	add	sp, #16
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	40022000 	.word	0x40022000
 800a2c0:	0000c3fa 	.word	0x0000c3fa
 800a2c4:	0008c3fb 	.word	0x0008c3fb
 800a2c8:	20000ab8 	.word	0x20000ab8

0800a2cc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a2cc:	b5b0      	push	{r4, r5, r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	603a      	str	r2, [r7, #0]
 800a2d6:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a2d8:	4b0b      	ldr	r3, [pc, #44]	; (800a308 <FLASH_Program_DoubleWord+0x3c>)
 800a2da:	695a      	ldr	r2, [r3, #20]
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <FLASH_Program_DoubleWord+0x3c>)
 800a2de:	2101      	movs	r1, #1
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a2ea:	f3bf 8f6f 	isb	sy
}
 800a2ee:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	001c      	movs	r4, r3
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	001d      	movs	r5, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	0022      	movs	r2, r4
 800a2fe:	601a      	str	r2, [r3, #0]
}
 800a300:	46c0      	nop			; (mov r8, r8)
 800a302:	46bd      	mov	sp, r7
 800a304:	b004      	add	sp, #16
 800a306:	bdb0      	pop	{r4, r5, r7, pc}
 800a308:	40022000 	.word	0x40022000

0800a30c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a30c:	b5b0      	push	{r4, r5, r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a316:	4b33      	ldr	r3, [pc, #204]	; (800a3e4 <HAL_FLASHEx_Erase+0xd8>)
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d101      	bne.n	800a322 <HAL_FLASHEx_Erase+0x16>
 800a31e:	2302      	movs	r3, #2
 800a320:	e05c      	b.n	800a3dc <HAL_FLASHEx_Erase+0xd0>
 800a322:	4b30      	ldr	r3, [pc, #192]	; (800a3e4 <HAL_FLASHEx_Erase+0xd8>)
 800a324:	2201      	movs	r2, #1
 800a326:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a328:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <HAL_FLASHEx_Erase+0xd8>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a32e:	250f      	movs	r5, #15
 800a330:	197c      	adds	r4, r7, r5
 800a332:	23fa      	movs	r3, #250	; 0xfa
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	0018      	movs	r0, r3
 800a338:	f7ff ff7a 	bl	800a230 <FLASH_WaitForLastOperation>
 800a33c:	0003      	movs	r3, r0
 800a33e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800a340:	002c      	movs	r4, r5
 800a342:	193b      	adds	r3, r7, r4
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d142      	bne.n	800a3d0 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d10d      	bne.n	800a36e <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	0018      	movs	r0, r3
 800a358:	f000 f848 	bl	800a3ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a35c:	193c      	adds	r4, r7, r4
 800a35e:	23fa      	movs	r3, #250	; 0xfa
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	0018      	movs	r0, r3
 800a364:	f7ff ff64 	bl	800a230 <FLASH_WaitForLastOperation>
 800a368:	0003      	movs	r3, r0
 800a36a:	7023      	strb	r3, [r4, #0]
 800a36c:	e030      	b.n	800a3d0 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2201      	movs	r2, #1
 800a372:	4252      	negs	r2, r2
 800a374:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	60bb      	str	r3, [r7, #8]
 800a37c:	e01a      	b.n	800a3b4 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	0011      	movs	r1, r2
 800a386:	0018      	movs	r0, r3
 800a388:	f000 f844 	bl	800a414 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a38c:	250f      	movs	r5, #15
 800a38e:	197c      	adds	r4, r7, r5
 800a390:	23fa      	movs	r3, #250	; 0xfa
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	0018      	movs	r0, r3
 800a396:	f7ff ff4b 	bl	800a230 <FLASH_WaitForLastOperation>
 800a39a:	0003      	movs	r3, r0
 800a39c:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800a39e:	197b      	adds	r3, r7, r5
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	601a      	str	r2, [r3, #0]
          break;
 800a3ac:	e00a      	b.n	800a3c4 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	60bb      	str	r3, [r7, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	18d3      	adds	r3, r2, r3
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d3dc      	bcc.n	800a37e <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a3c4:	4b08      	ldr	r3, [pc, #32]	; (800a3e8 <HAL_FLASHEx_Erase+0xdc>)
 800a3c6:	695a      	ldr	r2, [r3, #20]
 800a3c8:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <HAL_FLASHEx_Erase+0xdc>)
 800a3ca:	2102      	movs	r1, #2
 800a3cc:	438a      	bics	r2, r1
 800a3ce:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a3d0:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <HAL_FLASHEx_Erase+0xd8>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800a3d6:	230f      	movs	r3, #15
 800a3d8:	18fb      	adds	r3, r7, r3
 800a3da:	781b      	ldrb	r3, [r3, #0]
}
 800a3dc:	0018      	movs	r0, r3
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	b004      	add	sp, #16
 800a3e2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3e4:	20000ab8 	.word	0x20000ab8
 800a3e8:	40022000 	.word	0x40022000

0800a3ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800a3f4:	4b06      	ldr	r3, [pc, #24]	; (800a410 <FLASH_MassErase+0x24>)
 800a3f6:	695a      	ldr	r2, [r3, #20]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	4b04      	ldr	r3, [pc, #16]	; (800a410 <FLASH_MassErase+0x24>)
 800a3fe:	2180      	movs	r1, #128	; 0x80
 800a400:	0249      	lsls	r1, r1, #9
 800a402:	430a      	orrs	r2, r1
 800a404:	615a      	str	r2, [r3, #20]
}
 800a406:	46c0      	nop			; (mov r8, r8)
 800a408:	46bd      	mov	sp, r7
 800a40a:	b002      	add	sp, #8
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	46c0      	nop			; (mov r8, r8)
 800a410:	40022000 	.word	0x40022000

0800a414 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800a41e:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <FLASH_PageErase+0x48>)
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	4a0f      	ldr	r2, [pc, #60]	; (800a460 <FLASH_PageErase+0x4c>)
 800a424:	4013      	ands	r3, r2
 800a426:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	d005      	beq.n	800a43a <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2280      	movs	r2, #128	; 0x80
 800a432:	0192      	lsls	r2, r2, #6
 800a434:	4313      	orrs	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	e003      	b.n	800a442 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4a09      	ldr	r2, [pc, #36]	; (800a464 <FLASH_PageErase+0x50>)
 800a43e:	4013      	ands	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	00da      	lsls	r2, r3, #3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	431a      	orrs	r2, r3
 800a44a:	4b04      	ldr	r3, [pc, #16]	; (800a45c <FLASH_PageErase+0x48>)
 800a44c:	4906      	ldr	r1, [pc, #24]	; (800a468 <FLASH_PageErase+0x54>)
 800a44e:	430a      	orrs	r2, r1
 800a450:	615a      	str	r2, [r3, #20]
}
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	46bd      	mov	sp, r7
 800a456:	b004      	add	sp, #16
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	46c0      	nop			; (mov r8, r8)
 800a45c:	40022000 	.word	0x40022000
 800a460:	ffffe007 	.word	0xffffe007
 800a464:	ffffdfff 	.word	0xffffdfff
 800a468:	00010002 	.word	0x00010002

0800a46c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a476:	2300      	movs	r3, #0
 800a478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a47a:	e14d      	b.n	800a718 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2101      	movs	r1, #1
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	4091      	lsls	r1, r2
 800a486:	000a      	movs	r2, r1
 800a488:	4013      	ands	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d100      	bne.n	800a494 <HAL_GPIO_Init+0x28>
 800a492:	e13e      	b.n	800a712 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2203      	movs	r2, #3
 800a49a:	4013      	ands	r3, r2
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d005      	beq.n	800a4ac <HAL_GPIO_Init+0x40>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d130      	bne.n	800a50e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	409a      	lsls	r2, r3
 800a4ba:	0013      	movs	r3, r2
 800a4bc:	43da      	mvns	r2, r3
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	409a      	lsls	r2, r3
 800a4ce:	0013      	movs	r3, r2
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	409a      	lsls	r2, r3
 800a4e8:	0013      	movs	r3, r2
 800a4ea:	43da      	mvns	r2, r3
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	091b      	lsrs	r3, r3, #4
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	401a      	ands	r2, r3
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	409a      	lsls	r2, r3
 800a500:	0013      	movs	r3, r2
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	4313      	orrs	r3, r2
 800a506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	2203      	movs	r2, #3
 800a514:	4013      	ands	r3, r2
 800a516:	2b03      	cmp	r3, #3
 800a518:	d017      	beq.n	800a54a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	2203      	movs	r2, #3
 800a526:	409a      	lsls	r2, r3
 800a528:	0013      	movs	r3, r2
 800a52a:	43da      	mvns	r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	4013      	ands	r3, r2
 800a530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	409a      	lsls	r2, r3
 800a53c:	0013      	movs	r3, r2
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	4313      	orrs	r3, r2
 800a542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	2203      	movs	r2, #3
 800a550:	4013      	ands	r3, r2
 800a552:	2b02      	cmp	r3, #2
 800a554:	d123      	bne.n	800a59e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	08da      	lsrs	r2, r3, #3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3208      	adds	r2, #8
 800a55e:	0092      	lsls	r2, r2, #2
 800a560:	58d3      	ldr	r3, [r2, r3]
 800a562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	2207      	movs	r2, #7
 800a568:	4013      	ands	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	220f      	movs	r2, #15
 800a56e:	409a      	lsls	r2, r3
 800a570:	0013      	movs	r3, r2
 800a572:	43da      	mvns	r2, r3
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	4013      	ands	r3, r2
 800a578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	691a      	ldr	r2, [r3, #16]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2107      	movs	r1, #7
 800a582:	400b      	ands	r3, r1
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	409a      	lsls	r2, r3
 800a588:	0013      	movs	r3, r2
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	08da      	lsrs	r2, r3, #3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3208      	adds	r2, #8
 800a598:	0092      	lsls	r2, r2, #2
 800a59a:	6939      	ldr	r1, [r7, #16]
 800a59c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	409a      	lsls	r2, r3
 800a5ac:	0013      	movs	r3, r2
 800a5ae:	43da      	mvns	r2, r3
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	2203      	movs	r2, #3
 800a5bc:	401a      	ands	r2, r3
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	409a      	lsls	r2, r3
 800a5c4:	0013      	movs	r3, r2
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	685a      	ldr	r2, [r3, #4]
 800a5d6:	23c0      	movs	r3, #192	; 0xc0
 800a5d8:	029b      	lsls	r3, r3, #10
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d100      	bne.n	800a5e0 <HAL_GPIO_Init+0x174>
 800a5de:	e098      	b.n	800a712 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a5e0:	4a53      	ldr	r2, [pc, #332]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	089b      	lsrs	r3, r3, #2
 800a5e6:	3318      	adds	r3, #24
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	589b      	ldr	r3, [r3, r2]
 800a5ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2203      	movs	r2, #3
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	220f      	movs	r2, #15
 800a5f8:	409a      	lsls	r2, r3
 800a5fa:	0013      	movs	r3, r2
 800a5fc:	43da      	mvns	r2, r3
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	4013      	ands	r3, r2
 800a602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	23a0      	movs	r3, #160	; 0xa0
 800a608:	05db      	lsls	r3, r3, #23
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d019      	beq.n	800a642 <HAL_GPIO_Init+0x1d6>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a48      	ldr	r2, [pc, #288]	; (800a734 <HAL_GPIO_Init+0x2c8>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d013      	beq.n	800a63e <HAL_GPIO_Init+0x1d2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a47      	ldr	r2, [pc, #284]	; (800a738 <HAL_GPIO_Init+0x2cc>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00d      	beq.n	800a63a <HAL_GPIO_Init+0x1ce>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a46      	ldr	r2, [pc, #280]	; (800a73c <HAL_GPIO_Init+0x2d0>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d007      	beq.n	800a636 <HAL_GPIO_Init+0x1ca>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a45      	ldr	r2, [pc, #276]	; (800a740 <HAL_GPIO_Init+0x2d4>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d101      	bne.n	800a632 <HAL_GPIO_Init+0x1c6>
 800a62e:	2304      	movs	r3, #4
 800a630:	e008      	b.n	800a644 <HAL_GPIO_Init+0x1d8>
 800a632:	2305      	movs	r3, #5
 800a634:	e006      	b.n	800a644 <HAL_GPIO_Init+0x1d8>
 800a636:	2303      	movs	r3, #3
 800a638:	e004      	b.n	800a644 <HAL_GPIO_Init+0x1d8>
 800a63a:	2302      	movs	r3, #2
 800a63c:	e002      	b.n	800a644 <HAL_GPIO_Init+0x1d8>
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <HAL_GPIO_Init+0x1d8>
 800a642:	2300      	movs	r3, #0
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	2103      	movs	r1, #3
 800a648:	400a      	ands	r2, r1
 800a64a:	00d2      	lsls	r2, r2, #3
 800a64c:	4093      	lsls	r3, r2
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4313      	orrs	r3, r2
 800a652:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a654:	4936      	ldr	r1, [pc, #216]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	089b      	lsrs	r3, r3, #2
 800a65a:	3318      	adds	r3, #24
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a662:	4b33      	ldr	r3, [pc, #204]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	43da      	mvns	r2, r3
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	4013      	ands	r3, r2
 800a670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	2380      	movs	r3, #128	; 0x80
 800a678:	035b      	lsls	r3, r3, #13
 800a67a:	4013      	ands	r3, r2
 800a67c:	d003      	beq.n	800a686 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4313      	orrs	r3, r2
 800a684:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a686:	4b2a      	ldr	r3, [pc, #168]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a68c:	4b28      	ldr	r3, [pc, #160]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	43da      	mvns	r2, r3
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	4013      	ands	r3, r2
 800a69a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	2380      	movs	r3, #128	; 0x80
 800a6a2:	039b      	lsls	r3, r3, #14
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	d003      	beq.n	800a6b0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a6b0:	4b1f      	ldr	r3, [pc, #124]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a6b6:	4a1e      	ldr	r2, [pc, #120]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a6b8:	2384      	movs	r3, #132	; 0x84
 800a6ba:	58d3      	ldr	r3, [r2, r3]
 800a6bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	43da      	mvns	r2, r3
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	2380      	movs	r3, #128	; 0x80
 800a6ce:	029b      	lsls	r3, r3, #10
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	d003      	beq.n	800a6dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a6dc:	4914      	ldr	r1, [pc, #80]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a6de:	2284      	movs	r2, #132	; 0x84
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a6e4:	4a12      	ldr	r2, [pc, #72]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a6e6:	2380      	movs	r3, #128	; 0x80
 800a6e8:	58d3      	ldr	r3, [r2, r3]
 800a6ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	43da      	mvns	r2, r3
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	2380      	movs	r3, #128	; 0x80
 800a6fc:	025b      	lsls	r3, r3, #9
 800a6fe:	4013      	ands	r3, r2
 800a700:	d003      	beq.n	800a70a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4313      	orrs	r3, r2
 800a708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a70a:	4909      	ldr	r1, [pc, #36]	; (800a730 <HAL_GPIO_Init+0x2c4>)
 800a70c:	2280      	movs	r2, #128	; 0x80
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	3301      	adds	r3, #1
 800a716:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	40da      	lsrs	r2, r3
 800a720:	1e13      	subs	r3, r2, #0
 800a722:	d000      	beq.n	800a726 <HAL_GPIO_Init+0x2ba>
 800a724:	e6aa      	b.n	800a47c <HAL_GPIO_Init+0x10>
  }
}
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	46c0      	nop			; (mov r8, r8)
 800a72a:	46bd      	mov	sp, r7
 800a72c:	b006      	add	sp, #24
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	40021800 	.word	0x40021800
 800a734:	50000400 	.word	0x50000400
 800a738:	50000800 	.word	0x50000800
 800a73c:	50000c00 	.word	0x50000c00
 800a740:	50001000 	.word	0x50001000

0800a744 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a74e:	2300      	movs	r3, #0
 800a750:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a752:	e0ba      	b.n	800a8ca <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a754:	2201      	movs	r2, #1
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	409a      	lsls	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	4013      	ands	r3, r2
 800a75e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d100      	bne.n	800a768 <HAL_GPIO_DeInit+0x24>
 800a766:	e0ad      	b.n	800a8c4 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 800a768:	4a5d      	ldr	r2, [pc, #372]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	089b      	lsrs	r3, r3, #2
 800a76e:	3318      	adds	r3, #24
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	589b      	ldr	r3, [r3, r2]
 800a774:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2203      	movs	r2, #3
 800a77a:	4013      	ands	r3, r2
 800a77c:	00db      	lsls	r3, r3, #3
 800a77e:	220f      	movs	r2, #15
 800a780:	409a      	lsls	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	4013      	ands	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	23a0      	movs	r3, #160	; 0xa0
 800a78c:	05db      	lsls	r3, r3, #23
 800a78e:	429a      	cmp	r2, r3
 800a790:	d019      	beq.n	800a7c6 <HAL_GPIO_DeInit+0x82>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a53      	ldr	r2, [pc, #332]	; (800a8e4 <HAL_GPIO_DeInit+0x1a0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d013      	beq.n	800a7c2 <HAL_GPIO_DeInit+0x7e>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a52      	ldr	r2, [pc, #328]	; (800a8e8 <HAL_GPIO_DeInit+0x1a4>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d00d      	beq.n	800a7be <HAL_GPIO_DeInit+0x7a>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a51      	ldr	r2, [pc, #324]	; (800a8ec <HAL_GPIO_DeInit+0x1a8>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d007      	beq.n	800a7ba <HAL_GPIO_DeInit+0x76>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a50      	ldr	r2, [pc, #320]	; (800a8f0 <HAL_GPIO_DeInit+0x1ac>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d101      	bne.n	800a7b6 <HAL_GPIO_DeInit+0x72>
 800a7b2:	2304      	movs	r3, #4
 800a7b4:	e008      	b.n	800a7c8 <HAL_GPIO_DeInit+0x84>
 800a7b6:	2305      	movs	r3, #5
 800a7b8:	e006      	b.n	800a7c8 <HAL_GPIO_DeInit+0x84>
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e004      	b.n	800a7c8 <HAL_GPIO_DeInit+0x84>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e002      	b.n	800a7c8 <HAL_GPIO_DeInit+0x84>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e000      	b.n	800a7c8 <HAL_GPIO_DeInit+0x84>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	2103      	movs	r1, #3
 800a7cc:	400a      	ands	r2, r1
 800a7ce:	00d2      	lsls	r2, r2, #3
 800a7d0:	4093      	lsls	r3, r2
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d136      	bne.n	800a846 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a7d8:	4a41      	ldr	r2, [pc, #260]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a7da:	2380      	movs	r3, #128	; 0x80
 800a7dc:	58d3      	ldr	r3, [r2, r3]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	43d2      	mvns	r2, r2
 800a7e2:	493f      	ldr	r1, [pc, #252]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	2280      	movs	r2, #128	; 0x80
 800a7e8:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800a7ea:	4a3d      	ldr	r2, [pc, #244]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a7ec:	2384      	movs	r3, #132	; 0x84
 800a7ee:	58d3      	ldr	r3, [r2, r3]
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	43d2      	mvns	r2, r2
 800a7f4:	493a      	ldr	r1, [pc, #232]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	2284      	movs	r2, #132	; 0x84
 800a7fa:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800a7fc:	4b38      	ldr	r3, [pc, #224]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	43d9      	mvns	r1, r3
 800a804:	4b36      	ldr	r3, [pc, #216]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a806:	400a      	ands	r2, r1
 800a808:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800a80a:	4b35      	ldr	r3, [pc, #212]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	43d9      	mvns	r1, r3
 800a812:	4b33      	ldr	r3, [pc, #204]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a814:	400a      	ands	r2, r1
 800a816:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	2203      	movs	r2, #3
 800a81c:	4013      	ands	r3, r2
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	220f      	movs	r2, #15
 800a822:	409a      	lsls	r2, r3
 800a824:	0013      	movs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800a828:	4a2d      	ldr	r2, [pc, #180]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	089b      	lsrs	r3, r3, #2
 800a82e:	3318      	adds	r3, #24
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	589a      	ldr	r2, [r3, r2]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	43d9      	mvns	r1, r3
 800a838:	4829      	ldr	r0, [pc, #164]	; (800a8e0 <HAL_GPIO_DeInit+0x19c>)
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	089b      	lsrs	r3, r3, #2
 800a83e:	400a      	ands	r2, r1
 800a840:	3318      	adds	r3, #24
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	2103      	movs	r1, #3
 800a850:	4099      	lsls	r1, r3
 800a852:	000b      	movs	r3, r1
 800a854:	431a      	orrs	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	08da      	lsrs	r2, r3, #3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3208      	adds	r2, #8
 800a862:	0092      	lsls	r2, r2, #2
 800a864:	58d3      	ldr	r3, [r2, r3]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	2107      	movs	r1, #7
 800a86a:	400a      	ands	r2, r1
 800a86c:	0092      	lsls	r2, r2, #2
 800a86e:	210f      	movs	r1, #15
 800a870:	4091      	lsls	r1, r2
 800a872:	000a      	movs	r2, r1
 800a874:	43d1      	mvns	r1, r2
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	08d2      	lsrs	r2, r2, #3
 800a87a:	4019      	ands	r1, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3208      	adds	r2, #8
 800a880:	0092      	lsls	r2, r2, #2
 800a882:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	0052      	lsls	r2, r2, #1
 800a88c:	2103      	movs	r1, #3
 800a88e:	4091      	lsls	r1, r2
 800a890:	000a      	movs	r2, r1
 800a892:	43d2      	mvns	r2, r2
 800a894:	401a      	ands	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	2101      	movs	r1, #1
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	4091      	lsls	r1, r2
 800a8a4:	000a      	movs	r2, r1
 800a8a6:	43d2      	mvns	r2, r2
 800a8a8:	401a      	ands	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	0052      	lsls	r2, r2, #1
 800a8b6:	2103      	movs	r1, #3
 800a8b8:	4091      	lsls	r1, r2
 800a8ba:	000a      	movs	r2, r1
 800a8bc:	43d2      	mvns	r2, r2
 800a8be:	401a      	ands	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	40da      	lsrs	r2, r3
 800a8d0:	1e13      	subs	r3, r2, #0
 800a8d2:	d000      	beq.n	800a8d6 <HAL_GPIO_DeInit+0x192>
 800a8d4:	e73e      	b.n	800a754 <HAL_GPIO_DeInit+0x10>
  }
}
 800a8d6:	46c0      	nop			; (mov r8, r8)
 800a8d8:	46c0      	nop			; (mov r8, r8)
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	b006      	add	sp, #24
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	40021800 	.word	0x40021800
 800a8e4:	50000400 	.word	0x50000400
 800a8e8:	50000800 	.word	0x50000800
 800a8ec:	50000c00 	.word	0x50000c00
 800a8f0:	50001000 	.word	0x50001000

0800a8f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e082      	b.n	800aa0c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2241      	movs	r2, #65	; 0x41
 800a90a:	5c9b      	ldrb	r3, [r3, r2]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d107      	bne.n	800a922 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2240      	movs	r2, #64	; 0x40
 800a916:	2100      	movs	r1, #0
 800a918:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	0018      	movs	r0, r3
 800a91e:	f000 f8af 	bl	800aa80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2241      	movs	r2, #65	; 0x41
 800a926:	2124      	movs	r1, #36	; 0x24
 800a928:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2101      	movs	r1, #1
 800a936:	438a      	bics	r2, r1
 800a938:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4934      	ldr	r1, [pc, #208]	; (800aa14 <HAL_I2C_Init+0x120>)
 800a944:	400a      	ands	r2, r1
 800a946:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689a      	ldr	r2, [r3, #8]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4931      	ldr	r1, [pc, #196]	; (800aa18 <HAL_I2C_Init+0x124>)
 800a954:	400a      	ands	r2, r1
 800a956:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d108      	bne.n	800a972 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2180      	movs	r1, #128	; 0x80
 800a96a:	0209      	lsls	r1, r1, #8
 800a96c:	430a      	orrs	r2, r1
 800a96e:	609a      	str	r2, [r3, #8]
 800a970:	e007      	b.n	800a982 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689a      	ldr	r2, [r3, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2184      	movs	r1, #132	; 0x84
 800a97c:	0209      	lsls	r1, r1, #8
 800a97e:	430a      	orrs	r2, r1
 800a980:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d104      	bne.n	800a994 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2280      	movs	r2, #128	; 0x80
 800a990:	0112      	lsls	r2, r2, #4
 800a992:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	491f      	ldr	r1, [pc, #124]	; (800aa1c <HAL_I2C_Init+0x128>)
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	491a      	ldr	r1, [pc, #104]	; (800aa18 <HAL_I2C_Init+0x124>)
 800a9b0:	400a      	ands	r2, r1
 800a9b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691a      	ldr	r2, [r3, #16]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	431a      	orrs	r2, r3
 800a9be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69d9      	ldr	r1, [r3, #28]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1a      	ldr	r2, [r3, #32]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2241      	movs	r2, #65	; 0x41
 800a9f8:	2120      	movs	r1, #32
 800a9fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2242      	movs	r2, #66	; 0x42
 800aa06:	2100      	movs	r1, #0
 800aa08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	b002      	add	sp, #8
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	f0ffffff 	.word	0xf0ffffff
 800aa18:	ffff7fff 	.word	0xffff7fff
 800aa1c:	02008000 	.word	0x02008000

0800aa20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e022      	b.n	800aa78 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2241      	movs	r2, #65	; 0x41
 800aa36:	2124      	movs	r1, #36	; 0x24
 800aa38:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2101      	movs	r1, #1
 800aa46:	438a      	bics	r2, r1
 800aa48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f000 f81f 	bl	800aa90 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2241      	movs	r2, #65	; 0x41
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2242      	movs	r2, #66	; 0x42
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2240      	movs	r2, #64	; 0x40
 800aa72:	2100      	movs	r1, #0
 800aa74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	0018      	movs	r0, r3
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	b002      	add	sp, #8
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800aa88:	46c0      	nop			; (mov r8, r8)
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	b002      	add	sp, #8
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800aa98:	46c0      	nop			; (mov r8, r8)
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	b002      	add	sp, #8
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaa0:	b590      	push	{r4, r7, lr}
 800aaa2:	b089      	sub	sp, #36	; 0x24
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	000c      	movs	r4, r1
 800aaaa:	0010      	movs	r0, r2
 800aaac:	0019      	movs	r1, r3
 800aaae:	230a      	movs	r3, #10
 800aab0:	18fb      	adds	r3, r7, r3
 800aab2:	1c22      	adds	r2, r4, #0
 800aab4:	801a      	strh	r2, [r3, #0]
 800aab6:	2308      	movs	r3, #8
 800aab8:	18fb      	adds	r3, r7, r3
 800aaba:	1c02      	adds	r2, r0, #0
 800aabc:	801a      	strh	r2, [r3, #0]
 800aabe:	1dbb      	adds	r3, r7, #6
 800aac0:	1c0a      	adds	r2, r1, #0
 800aac2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2241      	movs	r2, #65	; 0x41
 800aac8:	5c9b      	ldrb	r3, [r3, r2]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b20      	cmp	r3, #32
 800aace:	d000      	beq.n	800aad2 <HAL_I2C_Mem_Write+0x32>
 800aad0:	e10c      	b.n	800acec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <HAL_I2C_Mem_Write+0x42>
 800aad8:	232c      	movs	r3, #44	; 0x2c
 800aada:	18fb      	adds	r3, r7, r3
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d105      	bne.n	800aaee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2280      	movs	r2, #128	; 0x80
 800aae6:	0092      	lsls	r2, r2, #2
 800aae8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e0ff      	b.n	800acee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2240      	movs	r2, #64	; 0x40
 800aaf2:	5c9b      	ldrb	r3, [r3, r2]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d101      	bne.n	800aafc <HAL_I2C_Mem_Write+0x5c>
 800aaf8:	2302      	movs	r3, #2
 800aafa:	e0f8      	b.n	800acee <HAL_I2C_Mem_Write+0x24e>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2240      	movs	r2, #64	; 0x40
 800ab00:	2101      	movs	r1, #1
 800ab02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ab04:	f7ff f9ce 	bl	8009ea4 <HAL_GetTick>
 800ab08:	0003      	movs	r3, r0
 800ab0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ab0c:	2380      	movs	r3, #128	; 0x80
 800ab0e:	0219      	lsls	r1, r3, #8
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	2319      	movs	r3, #25
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f000 fb21 	bl	800b160 <I2C_WaitOnFlagUntilTimeout>
 800ab1e:	1e03      	subs	r3, r0, #0
 800ab20:	d001      	beq.n	800ab26 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e0e3      	b.n	800acee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2241      	movs	r2, #65	; 0x41
 800ab2a:	2121      	movs	r1, #33	; 0x21
 800ab2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2242      	movs	r2, #66	; 0x42
 800ab32:	2140      	movs	r1, #64	; 0x40
 800ab34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	222c      	movs	r2, #44	; 0x2c
 800ab46:	18ba      	adds	r2, r7, r2
 800ab48:	8812      	ldrh	r2, [r2, #0]
 800ab4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab52:	1dbb      	adds	r3, r7, #6
 800ab54:	881c      	ldrh	r4, [r3, #0]
 800ab56:	2308      	movs	r3, #8
 800ab58:	18fb      	adds	r3, r7, r3
 800ab5a:	881a      	ldrh	r2, [r3, #0]
 800ab5c:	230a      	movs	r3, #10
 800ab5e:	18fb      	adds	r3, r7, r3
 800ab60:	8819      	ldrh	r1, [r3, #0]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	9301      	str	r3, [sp, #4]
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	0023      	movs	r3, r4
 800ab6e:	f000 fa0f 	bl	800af90 <I2C_RequestMemoryWrite>
 800ab72:	1e03      	subs	r3, r0, #0
 800ab74:	d005      	beq.n	800ab82 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2240      	movs	r2, #64	; 0x40
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e0b5      	b.n	800acee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	2bff      	cmp	r3, #255	; 0xff
 800ab8a:	d911      	bls.n	800abb0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	22ff      	movs	r2, #255	; 0xff
 800ab90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	2380      	movs	r3, #128	; 0x80
 800ab9a:	045c      	lsls	r4, r3, #17
 800ab9c:	230a      	movs	r3, #10
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	8819      	ldrh	r1, [r3, #0]
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	2300      	movs	r3, #0
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	0023      	movs	r3, r4
 800abaa:	f000 fc93 	bl	800b4d4 <I2C_TransferConfig>
 800abae:	e012      	b.n	800abd6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	2380      	movs	r3, #128	; 0x80
 800abc2:	049c      	lsls	r4, r3, #18
 800abc4:	230a      	movs	r3, #10
 800abc6:	18fb      	adds	r3, r7, r3
 800abc8:	8819      	ldrh	r1, [r3, #0]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	2300      	movs	r3, #0
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	0023      	movs	r3, r4
 800abd2:	f000 fc7f 	bl	800b4d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	0018      	movs	r0, r3
 800abde:	f000 fafe 	bl	800b1de <I2C_WaitOnTXISFlagUntilTimeout>
 800abe2:	1e03      	subs	r3, r0, #0
 800abe4:	d001      	beq.n	800abea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e081      	b.n	800acee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	781a      	ldrb	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	3b01      	subs	r3, #1
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac12:	3b01      	subs	r3, #1
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d03a      	beq.n	800ac9a <HAL_I2C_Mem_Write+0x1fa>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d136      	bne.n	800ac9a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ac2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	0013      	movs	r3, r2
 800ac36:	2200      	movs	r2, #0
 800ac38:	2180      	movs	r1, #128	; 0x80
 800ac3a:	f000 fa91 	bl	800b160 <I2C_WaitOnFlagUntilTimeout>
 800ac3e:	1e03      	subs	r3, r0, #0
 800ac40:	d001      	beq.n	800ac46 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e053      	b.n	800acee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	2bff      	cmp	r3, #255	; 0xff
 800ac4e:	d911      	bls.n	800ac74 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	22ff      	movs	r2, #255	; 0xff
 800ac54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	2380      	movs	r3, #128	; 0x80
 800ac5e:	045c      	lsls	r4, r3, #17
 800ac60:	230a      	movs	r3, #10
 800ac62:	18fb      	adds	r3, r7, r3
 800ac64:	8819      	ldrh	r1, [r3, #0]
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	0023      	movs	r3, r4
 800ac6e:	f000 fc31 	bl	800b4d4 <I2C_TransferConfig>
 800ac72:	e012      	b.n	800ac9a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	2380      	movs	r3, #128	; 0x80
 800ac86:	049c      	lsls	r4, r3, #18
 800ac88:	230a      	movs	r3, #10
 800ac8a:	18fb      	adds	r3, r7, r3
 800ac8c:	8819      	ldrh	r1, [r3, #0]
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	2300      	movs	r3, #0
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	0023      	movs	r3, r4
 800ac96:	f000 fc1d 	bl	800b4d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d198      	bne.n	800abd6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	0018      	movs	r0, r3
 800acac:	f000 fad6 	bl	800b25c <I2C_WaitOnSTOPFlagUntilTimeout>
 800acb0:	1e03      	subs	r3, r0, #0
 800acb2:	d001      	beq.n	800acb8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e01a      	b.n	800acee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2220      	movs	r2, #32
 800acbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	490b      	ldr	r1, [pc, #44]	; (800acf8 <HAL_I2C_Mem_Write+0x258>)
 800accc:	400a      	ands	r2, r1
 800acce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2241      	movs	r2, #65	; 0x41
 800acd4:	2120      	movs	r1, #32
 800acd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2242      	movs	r2, #66	; 0x42
 800acdc:	2100      	movs	r1, #0
 800acde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2240      	movs	r2, #64	; 0x40
 800ace4:	2100      	movs	r1, #0
 800ace6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	e000      	b.n	800acee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800acec:	2302      	movs	r3, #2
  }
}
 800acee:	0018      	movs	r0, r3
 800acf0:	46bd      	mov	sp, r7
 800acf2:	b007      	add	sp, #28
 800acf4:	bd90      	pop	{r4, r7, pc}
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	fe00e800 	.word	0xfe00e800

0800acfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acfc:	b590      	push	{r4, r7, lr}
 800acfe:	b089      	sub	sp, #36	; 0x24
 800ad00:	af02      	add	r7, sp, #8
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	000c      	movs	r4, r1
 800ad06:	0010      	movs	r0, r2
 800ad08:	0019      	movs	r1, r3
 800ad0a:	230a      	movs	r3, #10
 800ad0c:	18fb      	adds	r3, r7, r3
 800ad0e:	1c22      	adds	r2, r4, #0
 800ad10:	801a      	strh	r2, [r3, #0]
 800ad12:	2308      	movs	r3, #8
 800ad14:	18fb      	adds	r3, r7, r3
 800ad16:	1c02      	adds	r2, r0, #0
 800ad18:	801a      	strh	r2, [r3, #0]
 800ad1a:	1dbb      	adds	r3, r7, #6
 800ad1c:	1c0a      	adds	r2, r1, #0
 800ad1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2241      	movs	r2, #65	; 0x41
 800ad24:	5c9b      	ldrb	r3, [r3, r2]
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b20      	cmp	r3, #32
 800ad2a:	d000      	beq.n	800ad2e <HAL_I2C_Mem_Read+0x32>
 800ad2c:	e110      	b.n	800af50 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <HAL_I2C_Mem_Read+0x42>
 800ad34:	232c      	movs	r3, #44	; 0x2c
 800ad36:	18fb      	adds	r3, r7, r3
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d105      	bne.n	800ad4a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2280      	movs	r2, #128	; 0x80
 800ad42:	0092      	lsls	r2, r2, #2
 800ad44:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e103      	b.n	800af52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2240      	movs	r2, #64	; 0x40
 800ad4e:	5c9b      	ldrb	r3, [r3, r2]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d101      	bne.n	800ad58 <HAL_I2C_Mem_Read+0x5c>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e0fc      	b.n	800af52 <HAL_I2C_Mem_Read+0x256>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2240      	movs	r2, #64	; 0x40
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad60:	f7ff f8a0 	bl	8009ea4 <HAL_GetTick>
 800ad64:	0003      	movs	r3, r0
 800ad66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad68:	2380      	movs	r3, #128	; 0x80
 800ad6a:	0219      	lsls	r1, r3, #8
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	2319      	movs	r3, #25
 800ad74:	2201      	movs	r2, #1
 800ad76:	f000 f9f3 	bl	800b160 <I2C_WaitOnFlagUntilTimeout>
 800ad7a:	1e03      	subs	r3, r0, #0
 800ad7c:	d001      	beq.n	800ad82 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e0e7      	b.n	800af52 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2241      	movs	r2, #65	; 0x41
 800ad86:	2122      	movs	r1, #34	; 0x22
 800ad88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2242      	movs	r2, #66	; 0x42
 800ad8e:	2140      	movs	r1, #64	; 0x40
 800ad90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	222c      	movs	r2, #44	; 0x2c
 800ada2:	18ba      	adds	r2, r7, r2
 800ada4:	8812      	ldrh	r2, [r2, #0]
 800ada6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800adae:	1dbb      	adds	r3, r7, #6
 800adb0:	881c      	ldrh	r4, [r3, #0]
 800adb2:	2308      	movs	r3, #8
 800adb4:	18fb      	adds	r3, r7, r3
 800adb6:	881a      	ldrh	r2, [r3, #0]
 800adb8:	230a      	movs	r3, #10
 800adba:	18fb      	adds	r3, r7, r3
 800adbc:	8819      	ldrh	r1, [r3, #0]
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	9301      	str	r3, [sp, #4]
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	0023      	movs	r3, r4
 800adca:	f000 f945 	bl	800b058 <I2C_RequestMemoryRead>
 800adce:	1e03      	subs	r3, r0, #0
 800add0:	d005      	beq.n	800adde <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2240      	movs	r2, #64	; 0x40
 800add6:	2100      	movs	r1, #0
 800add8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e0b9      	b.n	800af52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	2bff      	cmp	r3, #255	; 0xff
 800ade6:	d911      	bls.n	800ae0c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	22ff      	movs	r2, #255	; 0xff
 800adec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	2380      	movs	r3, #128	; 0x80
 800adf6:	045c      	lsls	r4, r3, #17
 800adf8:	230a      	movs	r3, #10
 800adfa:	18fb      	adds	r3, r7, r3
 800adfc:	8819      	ldrh	r1, [r3, #0]
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	4b56      	ldr	r3, [pc, #344]	; (800af5c <HAL_I2C_Mem_Read+0x260>)
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	0023      	movs	r3, r4
 800ae06:	f000 fb65 	bl	800b4d4 <I2C_TransferConfig>
 800ae0a:	e012      	b.n	800ae32 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	2380      	movs	r3, #128	; 0x80
 800ae1e:	049c      	lsls	r4, r3, #18
 800ae20:	230a      	movs	r3, #10
 800ae22:	18fb      	adds	r3, r7, r3
 800ae24:	8819      	ldrh	r1, [r3, #0]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	4b4c      	ldr	r3, [pc, #304]	; (800af5c <HAL_I2C_Mem_Read+0x260>)
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	0023      	movs	r3, r4
 800ae2e:	f000 fb51 	bl	800b4d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ae32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	0013      	movs	r3, r2
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2104      	movs	r1, #4
 800ae40:	f000 f98e 	bl	800b160 <I2C_WaitOnFlagUntilTimeout>
 800ae44:	1e03      	subs	r3, r0, #0
 800ae46:	d001      	beq.n	800ae4c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e082      	b.n	800af52 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	b2d2      	uxtb	r2, r2
 800ae58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	3b01      	subs	r3, #1
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d03a      	beq.n	800aefe <HAL_I2C_Mem_Read+0x202>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d136      	bne.n	800aefe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	0013      	movs	r3, r2
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2180      	movs	r1, #128	; 0x80
 800ae9e:	f000 f95f 	bl	800b160 <I2C_WaitOnFlagUntilTimeout>
 800aea2:	1e03      	subs	r3, r0, #0
 800aea4:	d001      	beq.n	800aeaa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e053      	b.n	800af52 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	2bff      	cmp	r3, #255	; 0xff
 800aeb2:	d911      	bls.n	800aed8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	22ff      	movs	r2, #255	; 0xff
 800aeb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	2380      	movs	r3, #128	; 0x80
 800aec2:	045c      	lsls	r4, r3, #17
 800aec4:	230a      	movs	r3, #10
 800aec6:	18fb      	adds	r3, r7, r3
 800aec8:	8819      	ldrh	r1, [r3, #0]
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	2300      	movs	r3, #0
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	0023      	movs	r3, r4
 800aed2:	f000 faff 	bl	800b4d4 <I2C_TransferConfig>
 800aed6:	e012      	b.n	800aefe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aedc:	b29a      	uxth	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	2380      	movs	r3, #128	; 0x80
 800aeea:	049c      	lsls	r4, r3, #18
 800aeec:	230a      	movs	r3, #10
 800aeee:	18fb      	adds	r3, r7, r3
 800aef0:	8819      	ldrh	r1, [r3, #0]
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	2300      	movs	r3, #0
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	0023      	movs	r3, r4
 800aefa:	f000 faeb 	bl	800b4d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af02:	b29b      	uxth	r3, r3
 800af04:	2b00      	cmp	r3, #0
 800af06:	d194      	bne.n	800ae32 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	0018      	movs	r0, r3
 800af10:	f000 f9a4 	bl	800b25c <I2C_WaitOnSTOPFlagUntilTimeout>
 800af14:	1e03      	subs	r3, r0, #0
 800af16:	d001      	beq.n	800af1c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e01a      	b.n	800af52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2220      	movs	r2, #32
 800af22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	490c      	ldr	r1, [pc, #48]	; (800af60 <HAL_I2C_Mem_Read+0x264>)
 800af30:	400a      	ands	r2, r1
 800af32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2241      	movs	r2, #65	; 0x41
 800af38:	2120      	movs	r1, #32
 800af3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2242      	movs	r2, #66	; 0x42
 800af40:	2100      	movs	r1, #0
 800af42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2240      	movs	r2, #64	; 0x40
 800af48:	2100      	movs	r1, #0
 800af4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e000      	b.n	800af52 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800af50:	2302      	movs	r3, #2
  }
}
 800af52:	0018      	movs	r0, r3
 800af54:	46bd      	mov	sp, r7
 800af56:	b007      	add	sp, #28
 800af58:	bd90      	pop	{r4, r7, pc}
 800af5a:	46c0      	nop			; (mov r8, r8)
 800af5c:	80002400 	.word	0x80002400
 800af60:	fe00e800 	.word	0xfe00e800

0800af64 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2241      	movs	r2, #65	; 0x41
 800af70:	5c9b      	ldrb	r3, [r3, r2]
 800af72:	b2db      	uxtb	r3, r3
}
 800af74:	0018      	movs	r0, r3
 800af76:	46bd      	mov	sp, r7
 800af78:	b002      	add	sp, #8
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800af88:	0018      	movs	r0, r3
 800af8a:	46bd      	mov	sp, r7
 800af8c:	b002      	add	sp, #8
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800af90:	b5b0      	push	{r4, r5, r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af02      	add	r7, sp, #8
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	000c      	movs	r4, r1
 800af9a:	0010      	movs	r0, r2
 800af9c:	0019      	movs	r1, r3
 800af9e:	250a      	movs	r5, #10
 800afa0:	197b      	adds	r3, r7, r5
 800afa2:	1c22      	adds	r2, r4, #0
 800afa4:	801a      	strh	r2, [r3, #0]
 800afa6:	2308      	movs	r3, #8
 800afa8:	18fb      	adds	r3, r7, r3
 800afaa:	1c02      	adds	r2, r0, #0
 800afac:	801a      	strh	r2, [r3, #0]
 800afae:	1dbb      	adds	r3, r7, #6
 800afb0:	1c0a      	adds	r2, r1, #0
 800afb2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800afb4:	1dbb      	adds	r3, r7, #6
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	2380      	movs	r3, #128	; 0x80
 800afbc:	045c      	lsls	r4, r3, #17
 800afbe:	197b      	adds	r3, r7, r5
 800afc0:	8819      	ldrh	r1, [r3, #0]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	4b23      	ldr	r3, [pc, #140]	; (800b054 <I2C_RequestMemoryWrite+0xc4>)
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	0023      	movs	r3, r4
 800afca:	f000 fa83 	bl	800b4d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd0:	6a39      	ldr	r1, [r7, #32]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	0018      	movs	r0, r3
 800afd6:	f000 f902 	bl	800b1de <I2C_WaitOnTXISFlagUntilTimeout>
 800afda:	1e03      	subs	r3, r0, #0
 800afdc:	d001      	beq.n	800afe2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e033      	b.n	800b04a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800afe2:	1dbb      	adds	r3, r7, #6
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d107      	bne.n	800affa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800afea:	2308      	movs	r3, #8
 800afec:	18fb      	adds	r3, r7, r3
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	629a      	str	r2, [r3, #40]	; 0x28
 800aff8:	e019      	b.n	800b02e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800affa:	2308      	movs	r3, #8
 800affc:	18fb      	adds	r3, r7, r3
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	0a1b      	lsrs	r3, r3, #8
 800b002:	b29b      	uxth	r3, r3
 800b004:	b2da      	uxtb	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b00e:	6a39      	ldr	r1, [r7, #32]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	0018      	movs	r0, r3
 800b014:	f000 f8e3 	bl	800b1de <I2C_WaitOnTXISFlagUntilTimeout>
 800b018:	1e03      	subs	r3, r0, #0
 800b01a:	d001      	beq.n	800b020 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e014      	b.n	800b04a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b020:	2308      	movs	r3, #8
 800b022:	18fb      	adds	r3, r7, r3
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	b2da      	uxtb	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b02e:	6a3a      	ldr	r2, [r7, #32]
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	0013      	movs	r3, r2
 800b038:	2200      	movs	r2, #0
 800b03a:	2180      	movs	r1, #128	; 0x80
 800b03c:	f000 f890 	bl	800b160 <I2C_WaitOnFlagUntilTimeout>
 800b040:	1e03      	subs	r3, r0, #0
 800b042:	d001      	beq.n	800b048 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	e000      	b.n	800b04a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	0018      	movs	r0, r3
 800b04c:	46bd      	mov	sp, r7
 800b04e:	b004      	add	sp, #16
 800b050:	bdb0      	pop	{r4, r5, r7, pc}
 800b052:	46c0      	nop			; (mov r8, r8)
 800b054:	80002000 	.word	0x80002000

0800b058 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b058:	b5b0      	push	{r4, r5, r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	000c      	movs	r4, r1
 800b062:	0010      	movs	r0, r2
 800b064:	0019      	movs	r1, r3
 800b066:	250a      	movs	r5, #10
 800b068:	197b      	adds	r3, r7, r5
 800b06a:	1c22      	adds	r2, r4, #0
 800b06c:	801a      	strh	r2, [r3, #0]
 800b06e:	2308      	movs	r3, #8
 800b070:	18fb      	adds	r3, r7, r3
 800b072:	1c02      	adds	r2, r0, #0
 800b074:	801a      	strh	r2, [r3, #0]
 800b076:	1dbb      	adds	r3, r7, #6
 800b078:	1c0a      	adds	r2, r1, #0
 800b07a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b07c:	1dbb      	adds	r3, r7, #6
 800b07e:	881b      	ldrh	r3, [r3, #0]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	197b      	adds	r3, r7, r5
 800b084:	8819      	ldrh	r1, [r3, #0]
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	4b23      	ldr	r3, [pc, #140]	; (800b118 <I2C_RequestMemoryRead+0xc0>)
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	2300      	movs	r3, #0
 800b08e:	f000 fa21 	bl	800b4d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b094:	6a39      	ldr	r1, [r7, #32]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	0018      	movs	r0, r3
 800b09a:	f000 f8a0 	bl	800b1de <I2C_WaitOnTXISFlagUntilTimeout>
 800b09e:	1e03      	subs	r3, r0, #0
 800b0a0:	d001      	beq.n	800b0a6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e033      	b.n	800b10e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0a6:	1dbb      	adds	r3, r7, #6
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d107      	bne.n	800b0be <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0ae:	2308      	movs	r3, #8
 800b0b0:	18fb      	adds	r3, r7, r3
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	629a      	str	r2, [r3, #40]	; 0x28
 800b0bc:	e019      	b.n	800b0f2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b0be:	2308      	movs	r3, #8
 800b0c0:	18fb      	adds	r3, r7, r3
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	0a1b      	lsrs	r3, r3, #8
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d2:	6a39      	ldr	r1, [r7, #32]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	0018      	movs	r0, r3
 800b0d8:	f000 f881 	bl	800b1de <I2C_WaitOnTXISFlagUntilTimeout>
 800b0dc:	1e03      	subs	r3, r0, #0
 800b0de:	d001      	beq.n	800b0e4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e014      	b.n	800b10e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0e4:	2308      	movs	r3, #8
 800b0e6:	18fb      	adds	r3, r7, r3
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b0f2:	6a3a      	ldr	r2, [r7, #32]
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	0013      	movs	r3, r2
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	2140      	movs	r1, #64	; 0x40
 800b100:	f000 f82e 	bl	800b160 <I2C_WaitOnFlagUntilTimeout>
 800b104:	1e03      	subs	r3, r0, #0
 800b106:	d001      	beq.n	800b10c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e000      	b.n	800b10e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	0018      	movs	r0, r3
 800b110:	46bd      	mov	sp, r7
 800b112:	b004      	add	sp, #16
 800b114:	bdb0      	pop	{r4, r5, r7, pc}
 800b116:	46c0      	nop			; (mov r8, r8)
 800b118:	80002000 	.word	0x80002000

0800b11c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	2202      	movs	r2, #2
 800b12c:	4013      	ands	r3, r2
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d103      	bne.n	800b13a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2200      	movs	r2, #0
 800b138:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	2201      	movs	r2, #1
 800b142:	4013      	ands	r3, r2
 800b144:	2b01      	cmp	r3, #1
 800b146:	d007      	beq.n	800b158 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	699a      	ldr	r2, [r3, #24]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2101      	movs	r1, #1
 800b154:	430a      	orrs	r2, r1
 800b156:	619a      	str	r2, [r3, #24]
  }
}
 800b158:	46c0      	nop			; (mov r8, r8)
 800b15a:	46bd      	mov	sp, r7
 800b15c:	b002      	add	sp, #8
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	1dfb      	adds	r3, r7, #7
 800b16e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b170:	e021      	b.n	800b1b6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	d01e      	beq.n	800b1b6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b178:	f7fe fe94 	bl	8009ea4 <HAL_GetTick>
 800b17c:	0002      	movs	r2, r0
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	429a      	cmp	r2, r3
 800b186:	d302      	bcc.n	800b18e <I2C_WaitOnFlagUntilTimeout+0x2e>
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d113      	bne.n	800b1b6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b192:	2220      	movs	r2, #32
 800b194:	431a      	orrs	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2241      	movs	r2, #65	; 0x41
 800b19e:	2120      	movs	r1, #32
 800b1a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2242      	movs	r2, #66	; 0x42
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2240      	movs	r2, #64	; 0x40
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e00f      	b.n	800b1d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	4013      	ands	r3, r2
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	425a      	negs	r2, r3
 800b1c6:	4153      	adcs	r3, r2
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	001a      	movs	r2, r3
 800b1cc:	1dfb      	adds	r3, r7, #7
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d0ce      	beq.n	800b172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	0018      	movs	r0, r3
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	b004      	add	sp, #16
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b1ea:	e02b      	b.n	800b244 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	68b9      	ldr	r1, [r7, #8]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	f000 f86e 	bl	800b2d4 <I2C_IsErrorOccurred>
 800b1f8:	1e03      	subs	r3, r0, #0
 800b1fa:	d001      	beq.n	800b200 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e029      	b.n	800b254 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	3301      	adds	r3, #1
 800b204:	d01e      	beq.n	800b244 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b206:	f7fe fe4d 	bl	8009ea4 <HAL_GetTick>
 800b20a:	0002      	movs	r2, r0
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	429a      	cmp	r2, r3
 800b214:	d302      	bcc.n	800b21c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d113      	bne.n	800b244 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b220:	2220      	movs	r2, #32
 800b222:	431a      	orrs	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2241      	movs	r2, #65	; 0x41
 800b22c:	2120      	movs	r1, #32
 800b22e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2242      	movs	r2, #66	; 0x42
 800b234:	2100      	movs	r1, #0
 800b236:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2240      	movs	r2, #64	; 0x40
 800b23c:	2100      	movs	r1, #0
 800b23e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e007      	b.n	800b254 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	699b      	ldr	r3, [r3, #24]
 800b24a:	2202      	movs	r2, #2
 800b24c:	4013      	ands	r3, r2
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d1cc      	bne.n	800b1ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	0018      	movs	r0, r3
 800b256:	46bd      	mov	sp, r7
 800b258:	b004      	add	sp, #16
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b268:	e028      	b.n	800b2bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	68b9      	ldr	r1, [r7, #8]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	0018      	movs	r0, r3
 800b272:	f000 f82f 	bl	800b2d4 <I2C_IsErrorOccurred>
 800b276:	1e03      	subs	r3, r0, #0
 800b278:	d001      	beq.n	800b27e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e026      	b.n	800b2cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b27e:	f7fe fe11 	bl	8009ea4 <HAL_GetTick>
 800b282:	0002      	movs	r2, r0
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d302      	bcc.n	800b294 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d113      	bne.n	800b2bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b298:	2220      	movs	r2, #32
 800b29a:	431a      	orrs	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2241      	movs	r2, #65	; 0x41
 800b2a4:	2120      	movs	r1, #32
 800b2a6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2242      	movs	r2, #66	; 0x42
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2240      	movs	r2, #64	; 0x40
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e007      	b.n	800b2cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	2b20      	cmp	r3, #32
 800b2c8:	d1cf      	bne.n	800b26a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	b004      	add	sp, #16
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2d4:	b590      	push	{r4, r7, lr}
 800b2d6:	b08b      	sub	sp, #44	; 0x2c
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2e0:	2327      	movs	r3, #39	; 0x27
 800b2e2:	18fb      	adds	r3, r7, r3
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	2210      	movs	r2, #16
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	d100      	bne.n	800b302 <I2C_IsErrorOccurred+0x2e>
 800b300:	e082      	b.n	800b408 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2210      	movs	r2, #16
 800b308:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b30a:	e060      	b.n	800b3ce <I2C_IsErrorOccurred+0xfa>
 800b30c:	2427      	movs	r4, #39	; 0x27
 800b30e:	193b      	adds	r3, r7, r4
 800b310:	193a      	adds	r2, r7, r4
 800b312:	7812      	ldrb	r2, [r2, #0]
 800b314:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	3301      	adds	r3, #1
 800b31a:	d058      	beq.n	800b3ce <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b31c:	f7fe fdc2 	bl	8009ea4 <HAL_GetTick>
 800b320:	0002      	movs	r2, r0
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d306      	bcc.n	800b33a <I2C_IsErrorOccurred+0x66>
 800b32c:	193b      	adds	r3, r7, r4
 800b32e:	193a      	adds	r2, r7, r4
 800b330:	7812      	ldrb	r2, [r2, #0]
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d149      	bne.n	800b3ce <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	2380      	movs	r3, #128	; 0x80
 800b342:	01db      	lsls	r3, r3, #7
 800b344:	4013      	ands	r3, r2
 800b346:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b348:	2013      	movs	r0, #19
 800b34a:	183b      	adds	r3, r7, r0
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	2142      	movs	r1, #66	; 0x42
 800b350:	5c52      	ldrb	r2, [r2, r1]
 800b352:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	699a      	ldr	r2, [r3, #24]
 800b35a:	2380      	movs	r3, #128	; 0x80
 800b35c:	021b      	lsls	r3, r3, #8
 800b35e:	401a      	ands	r2, r3
 800b360:	2380      	movs	r3, #128	; 0x80
 800b362:	021b      	lsls	r3, r3, #8
 800b364:	429a      	cmp	r2, r3
 800b366:	d126      	bne.n	800b3b6 <I2C_IsErrorOccurred+0xe2>
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	2380      	movs	r3, #128	; 0x80
 800b36c:	01db      	lsls	r3, r3, #7
 800b36e:	429a      	cmp	r2, r3
 800b370:	d021      	beq.n	800b3b6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800b372:	183b      	adds	r3, r7, r0
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b20      	cmp	r3, #32
 800b378:	d01d      	beq.n	800b3b6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685a      	ldr	r2, [r3, #4]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2180      	movs	r1, #128	; 0x80
 800b386:	01c9      	lsls	r1, r1, #7
 800b388:	430a      	orrs	r2, r1
 800b38a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b38c:	f7fe fd8a 	bl	8009ea4 <HAL_GetTick>
 800b390:	0003      	movs	r3, r0
 800b392:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b394:	e00f      	b.n	800b3b6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b396:	f7fe fd85 	bl	8009ea4 <HAL_GetTick>
 800b39a:	0002      	movs	r2, r0
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	2b19      	cmp	r3, #25
 800b3a2:	d908      	bls.n	800b3b6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	2220      	movs	r2, #32
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b3ac:	2327      	movs	r3, #39	; 0x27
 800b3ae:	18fb      	adds	r3, r7, r3
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	701a      	strb	r2, [r3, #0]

              break;
 800b3b4:	e00b      	b.n	800b3ce <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	2220      	movs	r2, #32
 800b3be:	4013      	ands	r3, r2
 800b3c0:	2127      	movs	r1, #39	; 0x27
 800b3c2:	187a      	adds	r2, r7, r1
 800b3c4:	1879      	adds	r1, r7, r1
 800b3c6:	7809      	ldrb	r1, [r1, #0]
 800b3c8:	7011      	strb	r1, [r2, #0]
 800b3ca:	2b20      	cmp	r3, #32
 800b3cc:	d1e3      	bne.n	800b396 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	2220      	movs	r2, #32
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	2b20      	cmp	r3, #32
 800b3da:	d004      	beq.n	800b3e6 <I2C_IsErrorOccurred+0x112>
 800b3dc:	2327      	movs	r3, #39	; 0x27
 800b3de:	18fb      	adds	r3, r7, r3
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d092      	beq.n	800b30c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b3e6:	2327      	movs	r3, #39	; 0x27
 800b3e8:	18fb      	adds	r3, r7, r3
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d103      	bne.n	800b3f8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	2204      	movs	r2, #4
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b400:	2327      	movs	r3, #39	; 0x27
 800b402:	18fb      	adds	r3, r7, r3
 800b404:	2201      	movs	r2, #1
 800b406:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	2380      	movs	r3, #128	; 0x80
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	4013      	ands	r3, r2
 800b418:	d00c      	beq.n	800b434 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	2201      	movs	r2, #1
 800b41e:	4313      	orrs	r3, r2
 800b420:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2280      	movs	r2, #128	; 0x80
 800b428:	0052      	lsls	r2, r2, #1
 800b42a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b42c:	2327      	movs	r3, #39	; 0x27
 800b42e:	18fb      	adds	r3, r7, r3
 800b430:	2201      	movs	r2, #1
 800b432:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b434:	69ba      	ldr	r2, [r7, #24]
 800b436:	2380      	movs	r3, #128	; 0x80
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	4013      	ands	r3, r2
 800b43c:	d00c      	beq.n	800b458 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b43e:	6a3b      	ldr	r3, [r7, #32]
 800b440:	2208      	movs	r2, #8
 800b442:	4313      	orrs	r3, r2
 800b444:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2280      	movs	r2, #128	; 0x80
 800b44c:	00d2      	lsls	r2, r2, #3
 800b44e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b450:	2327      	movs	r3, #39	; 0x27
 800b452:	18fb      	adds	r3, r7, r3
 800b454:	2201      	movs	r2, #1
 800b456:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	2380      	movs	r3, #128	; 0x80
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4013      	ands	r3, r2
 800b460:	d00c      	beq.n	800b47c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	2202      	movs	r2, #2
 800b466:	4313      	orrs	r3, r2
 800b468:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2280      	movs	r2, #128	; 0x80
 800b470:	0092      	lsls	r2, r2, #2
 800b472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b474:	2327      	movs	r3, #39	; 0x27
 800b476:	18fb      	adds	r3, r7, r3
 800b478:	2201      	movs	r2, #1
 800b47a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800b47c:	2327      	movs	r3, #39	; 0x27
 800b47e:	18fb      	adds	r3, r7, r3
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d01d      	beq.n	800b4c2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	0018      	movs	r0, r3
 800b48a:	f7ff fe47 	bl	800b11c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	490d      	ldr	r1, [pc, #52]	; (800b4d0 <I2C_IsErrorOccurred+0x1fc>)
 800b49a:	400a      	ands	r2, r1
 800b49c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2241      	movs	r2, #65	; 0x41
 800b4ae:	2120      	movs	r1, #32
 800b4b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2242      	movs	r2, #66	; 0x42
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2240      	movs	r2, #64	; 0x40
 800b4be:	2100      	movs	r1, #0
 800b4c0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800b4c2:	2327      	movs	r3, #39	; 0x27
 800b4c4:	18fb      	adds	r3, r7, r3
 800b4c6:	781b      	ldrb	r3, [r3, #0]
}
 800b4c8:	0018      	movs	r0, r3
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	b00b      	add	sp, #44	; 0x2c
 800b4ce:	bd90      	pop	{r4, r7, pc}
 800b4d0:	fe00e800 	.word	0xfe00e800

0800b4d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b4d4:	b590      	push	{r4, r7, lr}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	0008      	movs	r0, r1
 800b4de:	0011      	movs	r1, r2
 800b4e0:	607b      	str	r3, [r7, #4]
 800b4e2:	240a      	movs	r4, #10
 800b4e4:	193b      	adds	r3, r7, r4
 800b4e6:	1c02      	adds	r2, r0, #0
 800b4e8:	801a      	strh	r2, [r3, #0]
 800b4ea:	2009      	movs	r0, #9
 800b4ec:	183b      	adds	r3, r7, r0
 800b4ee:	1c0a      	adds	r2, r1, #0
 800b4f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b4f2:	193b      	adds	r3, r7, r4
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	059b      	lsls	r3, r3, #22
 800b4f8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b4fa:	183b      	adds	r3, r7, r0
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	0419      	lsls	r1, r3, #16
 800b500:	23ff      	movs	r3, #255	; 0xff
 800b502:	041b      	lsls	r3, r3, #16
 800b504:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b506:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	4313      	orrs	r3, r2
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	085b      	lsrs	r3, r3, #1
 800b514:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b51e:	0d51      	lsrs	r1, r2, #21
 800b520:	2280      	movs	r2, #128	; 0x80
 800b522:	00d2      	lsls	r2, r2, #3
 800b524:	400a      	ands	r2, r1
 800b526:	4907      	ldr	r1, [pc, #28]	; (800b544 <I2C_TransferConfig+0x70>)
 800b528:	430a      	orrs	r2, r1
 800b52a:	43d2      	mvns	r2, r2
 800b52c:	401a      	ands	r2, r3
 800b52e:	0011      	movs	r1, r2
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b53a:	46c0      	nop			; (mov r8, r8)
 800b53c:	46bd      	mov	sp, r7
 800b53e:	b007      	add	sp, #28
 800b540:	bd90      	pop	{r4, r7, pc}
 800b542:	46c0      	nop			; (mov r8, r8)
 800b544:	03ff63ff 	.word	0x03ff63ff

0800b548 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2241      	movs	r2, #65	; 0x41
 800b556:	5c9b      	ldrb	r3, [r3, r2]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b20      	cmp	r3, #32
 800b55c:	d138      	bne.n	800b5d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2240      	movs	r2, #64	; 0x40
 800b562:	5c9b      	ldrb	r3, [r3, r2]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d101      	bne.n	800b56c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b568:	2302      	movs	r3, #2
 800b56a:	e032      	b.n	800b5d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2240      	movs	r2, #64	; 0x40
 800b570:	2101      	movs	r1, #1
 800b572:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2241      	movs	r2, #65	; 0x41
 800b578:	2124      	movs	r1, #36	; 0x24
 800b57a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2101      	movs	r1, #1
 800b588:	438a      	bics	r2, r1
 800b58a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4911      	ldr	r1, [pc, #68]	; (800b5dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800b598:	400a      	ands	r2, r1
 800b59a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6819      	ldr	r1, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	430a      	orrs	r2, r1
 800b5aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	430a      	orrs	r2, r1
 800b5ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2241      	movs	r2, #65	; 0x41
 800b5c0:	2120      	movs	r1, #32
 800b5c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2240      	movs	r2, #64	; 0x40
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e000      	b.n	800b5d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b5d0:	2302      	movs	r3, #2
  }
}
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	b002      	add	sp, #8
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	46c0      	nop			; (mov r8, r8)
 800b5dc:	ffffefff 	.word	0xffffefff

0800b5e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2241      	movs	r2, #65	; 0x41
 800b5ee:	5c9b      	ldrb	r3, [r3, r2]
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d139      	bne.n	800b66a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2240      	movs	r2, #64	; 0x40
 800b5fa:	5c9b      	ldrb	r3, [r3, r2]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d101      	bne.n	800b604 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b600:	2302      	movs	r3, #2
 800b602:	e033      	b.n	800b66c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2240      	movs	r2, #64	; 0x40
 800b608:	2101      	movs	r1, #1
 800b60a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2241      	movs	r2, #65	; 0x41
 800b610:	2124      	movs	r1, #36	; 0x24
 800b612:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2101      	movs	r1, #1
 800b620:	438a      	bics	r2, r1
 800b622:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	4a11      	ldr	r2, [pc, #68]	; (800b674 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b630:	4013      	ands	r3, r2
 800b632:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	021b      	lsls	r3, r3, #8
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2101      	movs	r1, #1
 800b652:	430a      	orrs	r2, r1
 800b654:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2241      	movs	r2, #65	; 0x41
 800b65a:	2120      	movs	r1, #32
 800b65c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2240      	movs	r2, #64	; 0x40
 800b662:	2100      	movs	r1, #0
 800b664:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	e000      	b.n	800b66c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b66a:	2302      	movs	r3, #2
  }
}
 800b66c:	0018      	movs	r0, r3
 800b66e:	46bd      	mov	sp, r7
 800b670:	b004      	add	sp, #16
 800b672:	bd80      	pop	{r7, pc}
 800b674:	fffff0ff 	.word	0xfffff0ff

0800b678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b680:	4b19      	ldr	r3, [pc, #100]	; (800b6e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a19      	ldr	r2, [pc, #100]	; (800b6ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b686:	4013      	ands	r3, r2
 800b688:	0019      	movs	r1, r3
 800b68a:	4b17      	ldr	r3, [pc, #92]	; (800b6e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	430a      	orrs	r2, r1
 800b690:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	2380      	movs	r3, #128	; 0x80
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	429a      	cmp	r2, r3
 800b69a:	d11f      	bne.n	800b6dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800b69c:	4b14      	ldr	r3, [pc, #80]	; (800b6f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	0013      	movs	r3, r2
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	189b      	adds	r3, r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	4912      	ldr	r1, [pc, #72]	; (800b6f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	f7fa fe5a 	bl	8006364 <__udivsi3>
 800b6b0:	0003      	movs	r3, r0
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b6b6:	e008      	b.n	800b6ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	e001      	b.n	800b6ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e009      	b.n	800b6de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b6ca:	4b07      	ldr	r3, [pc, #28]	; (800b6e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b6cc:	695a      	ldr	r2, [r3, #20]
 800b6ce:	2380      	movs	r3, #128	; 0x80
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	401a      	ands	r2, r3
 800b6d4:	2380      	movs	r3, #128	; 0x80
 800b6d6:	00db      	lsls	r3, r3, #3
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d0ed      	beq.n	800b6b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	0018      	movs	r0, r3
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	b004      	add	sp, #16
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	46c0      	nop			; (mov r8, r8)
 800b6e8:	40007000 	.word	0x40007000
 800b6ec:	fffff9ff 	.word	0xfffff9ff
 800b6f0:	20000004 	.word	0x20000004
 800b6f4:	000f4240 	.word	0x000f4240

0800b6f8 <LL_RCC_GetAPB1Prescaler>:
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b6fc:	4b03      	ldr	r3, [pc, #12]	; (800b70c <LL_RCC_GetAPB1Prescaler+0x14>)
 800b6fe:	689a      	ldr	r2, [r3, #8]
 800b700:	23e0      	movs	r3, #224	; 0xe0
 800b702:	01db      	lsls	r3, r3, #7
 800b704:	4013      	ands	r3, r2
}
 800b706:	0018      	movs	r0, r3
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	40021000 	.word	0x40021000

0800b710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	f000 fb50 	bl	800bdc4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2201      	movs	r2, #1
 800b72a:	4013      	ands	r3, r2
 800b72c:	d100      	bne.n	800b730 <HAL_RCC_OscConfig+0x20>
 800b72e:	e07c      	b.n	800b82a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b730:	4bc3      	ldr	r3, [pc, #780]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	2238      	movs	r2, #56	; 0x38
 800b736:	4013      	ands	r3, r2
 800b738:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b73a:	4bc1      	ldr	r3, [pc, #772]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	2203      	movs	r2, #3
 800b740:	4013      	ands	r3, r2
 800b742:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	2b10      	cmp	r3, #16
 800b748:	d102      	bne.n	800b750 <HAL_RCC_OscConfig+0x40>
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d002      	beq.n	800b756 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	2b08      	cmp	r3, #8
 800b754:	d10b      	bne.n	800b76e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b756:	4bba      	ldr	r3, [pc, #744]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	2380      	movs	r3, #128	; 0x80
 800b75c:	029b      	lsls	r3, r3, #10
 800b75e:	4013      	ands	r3, r2
 800b760:	d062      	beq.n	800b828 <HAL_RCC_OscConfig+0x118>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d15e      	bne.n	800b828 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e32a      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	2380      	movs	r3, #128	; 0x80
 800b774:	025b      	lsls	r3, r3, #9
 800b776:	429a      	cmp	r2, r3
 800b778:	d107      	bne.n	800b78a <HAL_RCC_OscConfig+0x7a>
 800b77a:	4bb1      	ldr	r3, [pc, #708]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4bb0      	ldr	r3, [pc, #704]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b780:	2180      	movs	r1, #128	; 0x80
 800b782:	0249      	lsls	r1, r1, #9
 800b784:	430a      	orrs	r2, r1
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	e020      	b.n	800b7cc <HAL_RCC_OscConfig+0xbc>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	23a0      	movs	r3, #160	; 0xa0
 800b790:	02db      	lsls	r3, r3, #11
 800b792:	429a      	cmp	r2, r3
 800b794:	d10e      	bne.n	800b7b4 <HAL_RCC_OscConfig+0xa4>
 800b796:	4baa      	ldr	r3, [pc, #680]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	4ba9      	ldr	r3, [pc, #676]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b79c:	2180      	movs	r1, #128	; 0x80
 800b79e:	02c9      	lsls	r1, r1, #11
 800b7a0:	430a      	orrs	r2, r1
 800b7a2:	601a      	str	r2, [r3, #0]
 800b7a4:	4ba6      	ldr	r3, [pc, #664]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	4ba5      	ldr	r3, [pc, #660]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b7aa:	2180      	movs	r1, #128	; 0x80
 800b7ac:	0249      	lsls	r1, r1, #9
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	e00b      	b.n	800b7cc <HAL_RCC_OscConfig+0xbc>
 800b7b4:	4ba2      	ldr	r3, [pc, #648]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	4ba1      	ldr	r3, [pc, #644]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b7ba:	49a2      	ldr	r1, [pc, #648]	; (800ba44 <HAL_RCC_OscConfig+0x334>)
 800b7bc:	400a      	ands	r2, r1
 800b7be:	601a      	str	r2, [r3, #0]
 800b7c0:	4b9f      	ldr	r3, [pc, #636]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	4b9e      	ldr	r3, [pc, #632]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b7c6:	49a0      	ldr	r1, [pc, #640]	; (800ba48 <HAL_RCC_OscConfig+0x338>)
 800b7c8:	400a      	ands	r2, r1
 800b7ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d014      	beq.n	800b7fe <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d4:	f7fe fb66 	bl	8009ea4 <HAL_GetTick>
 800b7d8:	0003      	movs	r3, r0
 800b7da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b7dc:	e008      	b.n	800b7f0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7de:	f7fe fb61 	bl	8009ea4 <HAL_GetTick>
 800b7e2:	0002      	movs	r2, r0
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	2b64      	cmp	r3, #100	; 0x64
 800b7ea:	d901      	bls.n	800b7f0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e2e9      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b7f0:	4b93      	ldr	r3, [pc, #588]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	2380      	movs	r3, #128	; 0x80
 800b7f6:	029b      	lsls	r3, r3, #10
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	d0f0      	beq.n	800b7de <HAL_RCC_OscConfig+0xce>
 800b7fc:	e015      	b.n	800b82a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7fe:	f7fe fb51 	bl	8009ea4 <HAL_GetTick>
 800b802:	0003      	movs	r3, r0
 800b804:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b806:	e008      	b.n	800b81a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b808:	f7fe fb4c 	bl	8009ea4 <HAL_GetTick>
 800b80c:	0002      	movs	r2, r0
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	2b64      	cmp	r3, #100	; 0x64
 800b814:	d901      	bls.n	800b81a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e2d4      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b81a:	4b89      	ldr	r3, [pc, #548]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	2380      	movs	r3, #128	; 0x80
 800b820:	029b      	lsls	r3, r3, #10
 800b822:	4013      	ands	r3, r2
 800b824:	d1f0      	bne.n	800b808 <HAL_RCC_OscConfig+0xf8>
 800b826:	e000      	b.n	800b82a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b828:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2202      	movs	r2, #2
 800b830:	4013      	ands	r3, r2
 800b832:	d100      	bne.n	800b836 <HAL_RCC_OscConfig+0x126>
 800b834:	e099      	b.n	800b96a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b836:	4b82      	ldr	r3, [pc, #520]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	2238      	movs	r2, #56	; 0x38
 800b83c:	4013      	ands	r3, r2
 800b83e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b840:	4b7f      	ldr	r3, [pc, #508]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	2203      	movs	r2, #3
 800b846:	4013      	ands	r3, r2
 800b848:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	2b10      	cmp	r3, #16
 800b84e:	d102      	bne.n	800b856 <HAL_RCC_OscConfig+0x146>
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2b02      	cmp	r3, #2
 800b854:	d002      	beq.n	800b85c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d135      	bne.n	800b8c8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b85c:	4b78      	ldr	r3, [pc, #480]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	2380      	movs	r3, #128	; 0x80
 800b862:	00db      	lsls	r3, r3, #3
 800b864:	4013      	ands	r3, r2
 800b866:	d005      	beq.n	800b874 <HAL_RCC_OscConfig+0x164>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e2a7      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b874:	4b72      	ldr	r3, [pc, #456]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	4a74      	ldr	r2, [pc, #464]	; (800ba4c <HAL_RCC_OscConfig+0x33c>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	0019      	movs	r1, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	021a      	lsls	r2, r3, #8
 800b884:	4b6e      	ldr	r3, [pc, #440]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b886:	430a      	orrs	r2, r1
 800b888:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d112      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b890:	4b6b      	ldr	r3, [pc, #428]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a6e      	ldr	r2, [pc, #440]	; (800ba50 <HAL_RCC_OscConfig+0x340>)
 800b896:	4013      	ands	r3, r2
 800b898:	0019      	movs	r1, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	691a      	ldr	r2, [r3, #16]
 800b89e:	4b68      	ldr	r3, [pc, #416]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b8a4:	4b66      	ldr	r3, [pc, #408]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	0adb      	lsrs	r3, r3, #11
 800b8aa:	2207      	movs	r2, #7
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	4a69      	ldr	r2, [pc, #420]	; (800ba54 <HAL_RCC_OscConfig+0x344>)
 800b8b0:	40da      	lsrs	r2, r3
 800b8b2:	4b69      	ldr	r3, [pc, #420]	; (800ba58 <HAL_RCC_OscConfig+0x348>)
 800b8b4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b8b6:	4b69      	ldr	r3, [pc, #420]	; (800ba5c <HAL_RCC_OscConfig+0x34c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f7fe fa96 	bl	8009dec <HAL_InitTick>
 800b8c0:	1e03      	subs	r3, r0, #0
 800b8c2:	d051      	beq.n	800b968 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e27d      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d030      	beq.n	800b932 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b8d0:	4b5b      	ldr	r3, [pc, #364]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a5e      	ldr	r2, [pc, #376]	; (800ba50 <HAL_RCC_OscConfig+0x340>)
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	0019      	movs	r1, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	691a      	ldr	r2, [r3, #16]
 800b8de:	4b58      	ldr	r3, [pc, #352]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b8e4:	4b56      	ldr	r3, [pc, #344]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	4b55      	ldr	r3, [pc, #340]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b8ea:	2180      	movs	r1, #128	; 0x80
 800b8ec:	0049      	lsls	r1, r1, #1
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8f2:	f7fe fad7 	bl	8009ea4 <HAL_GetTick>
 800b8f6:	0003      	movs	r3, r0
 800b8f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8fa:	e008      	b.n	800b90e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8fc:	f7fe fad2 	bl	8009ea4 <HAL_GetTick>
 800b900:	0002      	movs	r2, r0
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	2b02      	cmp	r3, #2
 800b908:	d901      	bls.n	800b90e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800b90a:	2303      	movs	r3, #3
 800b90c:	e25a      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b90e:	4b4c      	ldr	r3, [pc, #304]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	2380      	movs	r3, #128	; 0x80
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	4013      	ands	r3, r2
 800b918:	d0f0      	beq.n	800b8fc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b91a:	4b49      	ldr	r3, [pc, #292]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	4a4b      	ldr	r2, [pc, #300]	; (800ba4c <HAL_RCC_OscConfig+0x33c>)
 800b920:	4013      	ands	r3, r2
 800b922:	0019      	movs	r1, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	021a      	lsls	r2, r3, #8
 800b92a:	4b45      	ldr	r3, [pc, #276]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b92c:	430a      	orrs	r2, r1
 800b92e:	605a      	str	r2, [r3, #4]
 800b930:	e01b      	b.n	800b96a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b932:	4b43      	ldr	r3, [pc, #268]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	4b42      	ldr	r3, [pc, #264]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b938:	4949      	ldr	r1, [pc, #292]	; (800ba60 <HAL_RCC_OscConfig+0x350>)
 800b93a:	400a      	ands	r2, r1
 800b93c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b93e:	f7fe fab1 	bl	8009ea4 <HAL_GetTick>
 800b942:	0003      	movs	r3, r0
 800b944:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b946:	e008      	b.n	800b95a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b948:	f7fe faac 	bl	8009ea4 <HAL_GetTick>
 800b94c:	0002      	movs	r2, r0
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	2b02      	cmp	r3, #2
 800b954:	d901      	bls.n	800b95a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800b956:	2303      	movs	r3, #3
 800b958:	e234      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b95a:	4b39      	ldr	r3, [pc, #228]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	2380      	movs	r3, #128	; 0x80
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	4013      	ands	r3, r2
 800b964:	d1f0      	bne.n	800b948 <HAL_RCC_OscConfig+0x238>
 800b966:	e000      	b.n	800b96a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b968:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2208      	movs	r2, #8
 800b970:	4013      	ands	r3, r2
 800b972:	d047      	beq.n	800ba04 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b974:	4b32      	ldr	r3, [pc, #200]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	2238      	movs	r2, #56	; 0x38
 800b97a:	4013      	ands	r3, r2
 800b97c:	2b18      	cmp	r3, #24
 800b97e:	d10a      	bne.n	800b996 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b980:	4b2f      	ldr	r3, [pc, #188]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b984:	2202      	movs	r2, #2
 800b986:	4013      	ands	r3, r2
 800b988:	d03c      	beq.n	800ba04 <HAL_RCC_OscConfig+0x2f4>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d138      	bne.n	800ba04 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e216      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d019      	beq.n	800b9d2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b99e:	4b28      	ldr	r3, [pc, #160]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b9a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b9a2:	4b27      	ldr	r3, [pc, #156]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	430a      	orrs	r2, r1
 800b9a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9aa:	f7fe fa7b 	bl	8009ea4 <HAL_GetTick>
 800b9ae:	0003      	movs	r3, r0
 800b9b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9b2:	e008      	b.n	800b9c6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9b4:	f7fe fa76 	bl	8009ea4 <HAL_GetTick>
 800b9b8:	0002      	movs	r2, r0
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d901      	bls.n	800b9c6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e1fe      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9c6:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	d0f1      	beq.n	800b9b4 <HAL_RCC_OscConfig+0x2a4>
 800b9d0:	e018      	b.n	800ba04 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b9d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b9d8:	2101      	movs	r1, #1
 800b9da:	438a      	bics	r2, r1
 800b9dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9de:	f7fe fa61 	bl	8009ea4 <HAL_GetTick>
 800b9e2:	0003      	movs	r3, r0
 800b9e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9e6:	e008      	b.n	800b9fa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9e8:	f7fe fa5c 	bl	8009ea4 <HAL_GetTick>
 800b9ec:	0002      	movs	r2, r0
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d901      	bls.n	800b9fa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e1e4      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9fa:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800b9fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9fe:	2202      	movs	r2, #2
 800ba00:	4013      	ands	r3, r2
 800ba02:	d1f1      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2204      	movs	r2, #4
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	d100      	bne.n	800ba10 <HAL_RCC_OscConfig+0x300>
 800ba0e:	e0c7      	b.n	800bba0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba10:	231f      	movs	r3, #31
 800ba12:	18fb      	adds	r3, r7, r3
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800ba18:	4b09      	ldr	r3, [pc, #36]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	2238      	movs	r2, #56	; 0x38
 800ba1e:	4013      	ands	r3, r2
 800ba20:	2b20      	cmp	r3, #32
 800ba22:	d11f      	bne.n	800ba64 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800ba24:	4b06      	ldr	r3, [pc, #24]	; (800ba40 <HAL_RCC_OscConfig+0x330>)
 800ba26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba28:	2202      	movs	r2, #2
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	d100      	bne.n	800ba30 <HAL_RCC_OscConfig+0x320>
 800ba2e:	e0b7      	b.n	800bba0 <HAL_RCC_OscConfig+0x490>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d000      	beq.n	800ba3a <HAL_RCC_OscConfig+0x32a>
 800ba38:	e0b2      	b.n	800bba0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e1c2      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
 800ba3e:	46c0      	nop			; (mov r8, r8)
 800ba40:	40021000 	.word	0x40021000
 800ba44:	fffeffff 	.word	0xfffeffff
 800ba48:	fffbffff 	.word	0xfffbffff
 800ba4c:	ffff80ff 	.word	0xffff80ff
 800ba50:	ffffc7ff 	.word	0xffffc7ff
 800ba54:	00f42400 	.word	0x00f42400
 800ba58:	20000004 	.word	0x20000004
 800ba5c:	20000074 	.word	0x20000074
 800ba60:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ba64:	4bb5      	ldr	r3, [pc, #724]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800ba66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba68:	2380      	movs	r3, #128	; 0x80
 800ba6a:	055b      	lsls	r3, r3, #21
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	d101      	bne.n	800ba74 <HAL_RCC_OscConfig+0x364>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e000      	b.n	800ba76 <HAL_RCC_OscConfig+0x366>
 800ba74:	2300      	movs	r3, #0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d011      	beq.n	800ba9e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800ba7a:	4bb0      	ldr	r3, [pc, #704]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800ba7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba7e:	4baf      	ldr	r3, [pc, #700]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800ba80:	2180      	movs	r1, #128	; 0x80
 800ba82:	0549      	lsls	r1, r1, #21
 800ba84:	430a      	orrs	r2, r1
 800ba86:	63da      	str	r2, [r3, #60]	; 0x3c
 800ba88:	4bac      	ldr	r3, [pc, #688]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800ba8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba8c:	2380      	movs	r3, #128	; 0x80
 800ba8e:	055b      	lsls	r3, r3, #21
 800ba90:	4013      	ands	r3, r2
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800ba96:	231f      	movs	r3, #31
 800ba98:	18fb      	adds	r3, r7, r3
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba9e:	4ba8      	ldr	r3, [pc, #672]	; (800bd40 <HAL_RCC_OscConfig+0x630>)
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	2380      	movs	r3, #128	; 0x80
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	4013      	ands	r3, r2
 800baa8:	d11a      	bne.n	800bae0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800baaa:	4ba5      	ldr	r3, [pc, #660]	; (800bd40 <HAL_RCC_OscConfig+0x630>)
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	4ba4      	ldr	r3, [pc, #656]	; (800bd40 <HAL_RCC_OscConfig+0x630>)
 800bab0:	2180      	movs	r1, #128	; 0x80
 800bab2:	0049      	lsls	r1, r1, #1
 800bab4:	430a      	orrs	r2, r1
 800bab6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800bab8:	f7fe f9f4 	bl	8009ea4 <HAL_GetTick>
 800babc:	0003      	movs	r3, r0
 800babe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bac0:	e008      	b.n	800bad4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bac2:	f7fe f9ef 	bl	8009ea4 <HAL_GetTick>
 800bac6:	0002      	movs	r2, r0
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d901      	bls.n	800bad4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e177      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bad4:	4b9a      	ldr	r3, [pc, #616]	; (800bd40 <HAL_RCC_OscConfig+0x630>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	2380      	movs	r3, #128	; 0x80
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	4013      	ands	r3, r2
 800bade:	d0f0      	beq.n	800bac2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d106      	bne.n	800baf6 <HAL_RCC_OscConfig+0x3e6>
 800bae8:	4b94      	ldr	r3, [pc, #592]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800baea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800baec:	4b93      	ldr	r3, [pc, #588]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800baee:	2101      	movs	r1, #1
 800baf0:	430a      	orrs	r2, r1
 800baf2:	65da      	str	r2, [r3, #92]	; 0x5c
 800baf4:	e01c      	b.n	800bb30 <HAL_RCC_OscConfig+0x420>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	2b05      	cmp	r3, #5
 800bafc:	d10c      	bne.n	800bb18 <HAL_RCC_OscConfig+0x408>
 800bafe:	4b8f      	ldr	r3, [pc, #572]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb02:	4b8e      	ldr	r3, [pc, #568]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb04:	2104      	movs	r1, #4
 800bb06:	430a      	orrs	r2, r1
 800bb08:	65da      	str	r2, [r3, #92]	; 0x5c
 800bb0a:	4b8c      	ldr	r3, [pc, #560]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb0e:	4b8b      	ldr	r3, [pc, #556]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb10:	2101      	movs	r1, #1
 800bb12:	430a      	orrs	r2, r1
 800bb14:	65da      	str	r2, [r3, #92]	; 0x5c
 800bb16:	e00b      	b.n	800bb30 <HAL_RCC_OscConfig+0x420>
 800bb18:	4b88      	ldr	r3, [pc, #544]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb1c:	4b87      	ldr	r3, [pc, #540]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb1e:	2101      	movs	r1, #1
 800bb20:	438a      	bics	r2, r1
 800bb22:	65da      	str	r2, [r3, #92]	; 0x5c
 800bb24:	4b85      	ldr	r3, [pc, #532]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb28:	4b84      	ldr	r3, [pc, #528]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb2a:	2104      	movs	r1, #4
 800bb2c:	438a      	bics	r2, r1
 800bb2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d014      	beq.n	800bb62 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb38:	f7fe f9b4 	bl	8009ea4 <HAL_GetTick>
 800bb3c:	0003      	movs	r3, r0
 800bb3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb40:	e009      	b.n	800bb56 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb42:	f7fe f9af 	bl	8009ea4 <HAL_GetTick>
 800bb46:	0002      	movs	r2, r0
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	4a7d      	ldr	r2, [pc, #500]	; (800bd44 <HAL_RCC_OscConfig+0x634>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d901      	bls.n	800bb56 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e136      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb56:	4b79      	ldr	r3, [pc, #484]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	d0f0      	beq.n	800bb42 <HAL_RCC_OscConfig+0x432>
 800bb60:	e013      	b.n	800bb8a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb62:	f7fe f99f 	bl	8009ea4 <HAL_GetTick>
 800bb66:	0003      	movs	r3, r0
 800bb68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb6a:	e009      	b.n	800bb80 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb6c:	f7fe f99a 	bl	8009ea4 <HAL_GetTick>
 800bb70:	0002      	movs	r2, r0
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	4a73      	ldr	r2, [pc, #460]	; (800bd44 <HAL_RCC_OscConfig+0x634>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d901      	bls.n	800bb80 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e121      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb80:	4b6e      	ldr	r3, [pc, #440]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb84:	2202      	movs	r2, #2
 800bb86:	4013      	ands	r3, r2
 800bb88:	d1f0      	bne.n	800bb6c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800bb8a:	231f      	movs	r3, #31
 800bb8c:	18fb      	adds	r3, r7, r3
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d105      	bne.n	800bba0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800bb94:	4b69      	ldr	r3, [pc, #420]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb98:	4b68      	ldr	r3, [pc, #416]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bb9a:	496b      	ldr	r1, [pc, #428]	; (800bd48 <HAL_RCC_OscConfig+0x638>)
 800bb9c:	400a      	ands	r2, r1
 800bb9e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2220      	movs	r2, #32
 800bba6:	4013      	ands	r3, r2
 800bba8:	d039      	beq.n	800bc1e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d01b      	beq.n	800bbea <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bbb2:	4b62      	ldr	r3, [pc, #392]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4b61      	ldr	r3, [pc, #388]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bbb8:	2180      	movs	r1, #128	; 0x80
 800bbba:	03c9      	lsls	r1, r1, #15
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbc0:	f7fe f970 	bl	8009ea4 <HAL_GetTick>
 800bbc4:	0003      	movs	r3, r0
 800bbc6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800bbc8:	e008      	b.n	800bbdc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bbca:	f7fe f96b 	bl	8009ea4 <HAL_GetTick>
 800bbce:	0002      	movs	r2, r0
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d901      	bls.n	800bbdc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e0f3      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800bbdc:	4b57      	ldr	r3, [pc, #348]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	2380      	movs	r3, #128	; 0x80
 800bbe2:	041b      	lsls	r3, r3, #16
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	d0f0      	beq.n	800bbca <HAL_RCC_OscConfig+0x4ba>
 800bbe8:	e019      	b.n	800bc1e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bbea:	4b54      	ldr	r3, [pc, #336]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	4b53      	ldr	r3, [pc, #332]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bbf0:	4956      	ldr	r1, [pc, #344]	; (800bd4c <HAL_RCC_OscConfig+0x63c>)
 800bbf2:	400a      	ands	r2, r1
 800bbf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbf6:	f7fe f955 	bl	8009ea4 <HAL_GetTick>
 800bbfa:	0003      	movs	r3, r0
 800bbfc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800bbfe:	e008      	b.n	800bc12 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc00:	f7fe f950 	bl	8009ea4 <HAL_GetTick>
 800bc04:	0002      	movs	r2, r0
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d901      	bls.n	800bc12 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e0d8      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800bc12:	4b4a      	ldr	r3, [pc, #296]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	2380      	movs	r3, #128	; 0x80
 800bc18:	041b      	lsls	r3, r3, #16
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	d1f0      	bne.n	800bc00 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d100      	bne.n	800bc28 <HAL_RCC_OscConfig+0x518>
 800bc26:	e0cc      	b.n	800bdc2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc28:	4b44      	ldr	r3, [pc, #272]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	2238      	movs	r2, #56	; 0x38
 800bc2e:	4013      	ands	r3, r2
 800bc30:	2b10      	cmp	r3, #16
 800bc32:	d100      	bne.n	800bc36 <HAL_RCC_OscConfig+0x526>
 800bc34:	e07b      	b.n	800bd2e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d156      	bne.n	800bcec <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc3e:	4b3f      	ldr	r3, [pc, #252]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	4b3e      	ldr	r3, [pc, #248]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bc44:	4942      	ldr	r1, [pc, #264]	; (800bd50 <HAL_RCC_OscConfig+0x640>)
 800bc46:	400a      	ands	r2, r1
 800bc48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc4a:	f7fe f92b 	bl	8009ea4 <HAL_GetTick>
 800bc4e:	0003      	movs	r3, r0
 800bc50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc52:	e008      	b.n	800bc66 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc54:	f7fe f926 	bl	8009ea4 <HAL_GetTick>
 800bc58:	0002      	movs	r2, r0
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d901      	bls.n	800bc66 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e0ae      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc66:	4b35      	ldr	r3, [pc, #212]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	2380      	movs	r3, #128	; 0x80
 800bc6c:	049b      	lsls	r3, r3, #18
 800bc6e:	4013      	ands	r3, r2
 800bc70:	d1f0      	bne.n	800bc54 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc72:	4b32      	ldr	r3, [pc, #200]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	4a37      	ldr	r2, [pc, #220]	; (800bd54 <HAL_RCC_OscConfig+0x644>)
 800bc78:	4013      	ands	r3, r2
 800bc7a:	0019      	movs	r1, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc84:	431a      	orrs	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc92:	431a      	orrs	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc98:	431a      	orrs	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	4b26      	ldr	r3, [pc, #152]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bca2:	430a      	orrs	r2, r1
 800bca4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bca6:	4b25      	ldr	r3, [pc, #148]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4b24      	ldr	r3, [pc, #144]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bcac:	2180      	movs	r1, #128	; 0x80
 800bcae:	0449      	lsls	r1, r1, #17
 800bcb0:	430a      	orrs	r2, r1
 800bcb2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800bcb4:	4b21      	ldr	r3, [pc, #132]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	4b20      	ldr	r3, [pc, #128]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bcba:	2180      	movs	r1, #128	; 0x80
 800bcbc:	0549      	lsls	r1, r1, #21
 800bcbe:	430a      	orrs	r2, r1
 800bcc0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc2:	f7fe f8ef 	bl	8009ea4 <HAL_GetTick>
 800bcc6:	0003      	movs	r3, r0
 800bcc8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcca:	e008      	b.n	800bcde <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bccc:	f7fe f8ea 	bl	8009ea4 <HAL_GetTick>
 800bcd0:	0002      	movs	r2, r0
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d901      	bls.n	800bcde <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	e072      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcde:	4b17      	ldr	r3, [pc, #92]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	2380      	movs	r3, #128	; 0x80
 800bce4:	049b      	lsls	r3, r3, #18
 800bce6:	4013      	ands	r3, r2
 800bce8:	d0f0      	beq.n	800bccc <HAL_RCC_OscConfig+0x5bc>
 800bcea:	e06a      	b.n	800bdc2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcec:	4b13      	ldr	r3, [pc, #76]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	4b12      	ldr	r3, [pc, #72]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bcf2:	4917      	ldr	r1, [pc, #92]	; (800bd50 <HAL_RCC_OscConfig+0x640>)
 800bcf4:	400a      	ands	r2, r1
 800bcf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcf8:	f7fe f8d4 	bl	8009ea4 <HAL_GetTick>
 800bcfc:	0003      	movs	r3, r0
 800bcfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd00:	e008      	b.n	800bd14 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd02:	f7fe f8cf 	bl	8009ea4 <HAL_GetTick>
 800bd06:	0002      	movs	r2, r0
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d901      	bls.n	800bd14 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e057      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd14:	4b09      	ldr	r3, [pc, #36]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	2380      	movs	r3, #128	; 0x80
 800bd1a:	049b      	lsls	r3, r3, #18
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	d1f0      	bne.n	800bd02 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800bd20:	4b06      	ldr	r3, [pc, #24]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bd22:	68da      	ldr	r2, [r3, #12]
 800bd24:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <HAL_RCC_OscConfig+0x62c>)
 800bd26:	490c      	ldr	r1, [pc, #48]	; (800bd58 <HAL_RCC_OscConfig+0x648>)
 800bd28:	400a      	ands	r2, r1
 800bd2a:	60da      	str	r2, [r3, #12]
 800bd2c:	e049      	b.n	800bdc2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d112      	bne.n	800bd5c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e044      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
 800bd3a:	46c0      	nop			; (mov r8, r8)
 800bd3c:	40021000 	.word	0x40021000
 800bd40:	40007000 	.word	0x40007000
 800bd44:	00001388 	.word	0x00001388
 800bd48:	efffffff 	.word	0xefffffff
 800bd4c:	ffbfffff 	.word	0xffbfffff
 800bd50:	feffffff 	.word	0xfeffffff
 800bd54:	11c1808c 	.word	0x11c1808c
 800bd58:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800bd5c:	4b1b      	ldr	r3, [pc, #108]	; (800bdcc <HAL_RCC_OscConfig+0x6bc>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	2203      	movs	r2, #3
 800bd66:	401a      	ands	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d126      	bne.n	800bdbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2270      	movs	r2, #112	; 0x70
 800bd74:	401a      	ands	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d11f      	bne.n	800bdbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	23fe      	movs	r3, #254	; 0xfe
 800bd82:	01db      	lsls	r3, r3, #7
 800bd84:	401a      	ands	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d116      	bne.n	800bdbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	23f8      	movs	r3, #248	; 0xf8
 800bd94:	039b      	lsls	r3, r3, #14
 800bd96:	401a      	ands	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d10e      	bne.n	800bdbe <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	23e0      	movs	r3, #224	; 0xe0
 800bda4:	051b      	lsls	r3, r3, #20
 800bda6:	401a      	ands	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d106      	bne.n	800bdbe <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	0f5b      	lsrs	r3, r3, #29
 800bdb4:	075a      	lsls	r2, r3, #29
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d001      	beq.n	800bdc2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	0018      	movs	r0, r3
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	b008      	add	sp, #32
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	40021000 	.word	0x40021000

0800bdd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d101      	bne.n	800bde4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e0e9      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bde4:	4b76      	ldr	r3, [pc, #472]	; (800bfc0 <HAL_RCC_ClockConfig+0x1f0>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2207      	movs	r2, #7
 800bdea:	4013      	ands	r3, r2
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d91e      	bls.n	800be30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdf2:	4b73      	ldr	r3, [pc, #460]	; (800bfc0 <HAL_RCC_ClockConfig+0x1f0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2207      	movs	r2, #7
 800bdf8:	4393      	bics	r3, r2
 800bdfa:	0019      	movs	r1, r3
 800bdfc:	4b70      	ldr	r3, [pc, #448]	; (800bfc0 <HAL_RCC_ClockConfig+0x1f0>)
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800be04:	f7fe f84e 	bl	8009ea4 <HAL_GetTick>
 800be08:	0003      	movs	r3, r0
 800be0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800be0c:	e009      	b.n	800be22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be0e:	f7fe f849 	bl	8009ea4 <HAL_GetTick>
 800be12:	0002      	movs	r2, r0
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	4a6a      	ldr	r2, [pc, #424]	; (800bfc4 <HAL_RCC_ClockConfig+0x1f4>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d901      	bls.n	800be22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800be1e:	2303      	movs	r3, #3
 800be20:	e0ca      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800be22:	4b67      	ldr	r3, [pc, #412]	; (800bfc0 <HAL_RCC_ClockConfig+0x1f0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2207      	movs	r2, #7
 800be28:	4013      	ands	r3, r2
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d1ee      	bne.n	800be0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2202      	movs	r2, #2
 800be36:	4013      	ands	r3, r2
 800be38:	d015      	beq.n	800be66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2204      	movs	r2, #4
 800be40:	4013      	ands	r3, r2
 800be42:	d006      	beq.n	800be52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800be44:	4b60      	ldr	r3, [pc, #384]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800be46:	689a      	ldr	r2, [r3, #8]
 800be48:	4b5f      	ldr	r3, [pc, #380]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800be4a:	21e0      	movs	r1, #224	; 0xe0
 800be4c:	01c9      	lsls	r1, r1, #7
 800be4e:	430a      	orrs	r2, r1
 800be50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be52:	4b5d      	ldr	r3, [pc, #372]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	4a5d      	ldr	r2, [pc, #372]	; (800bfcc <HAL_RCC_ClockConfig+0x1fc>)
 800be58:	4013      	ands	r3, r2
 800be5a:	0019      	movs	r1, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	689a      	ldr	r2, [r3, #8]
 800be60:	4b59      	ldr	r3, [pc, #356]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800be62:	430a      	orrs	r2, r1
 800be64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2201      	movs	r2, #1
 800be6c:	4013      	ands	r3, r2
 800be6e:	d057      	beq.n	800bf20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d107      	bne.n	800be88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be78:	4b53      	ldr	r3, [pc, #332]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	2380      	movs	r3, #128	; 0x80
 800be7e:	029b      	lsls	r3, r3, #10
 800be80:	4013      	ands	r3, r2
 800be82:	d12b      	bne.n	800bedc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e097      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d107      	bne.n	800bea0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be90:	4b4d      	ldr	r3, [pc, #308]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	2380      	movs	r3, #128	; 0x80
 800be96:	049b      	lsls	r3, r3, #18
 800be98:	4013      	ands	r3, r2
 800be9a:	d11f      	bne.n	800bedc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e08b      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d107      	bne.n	800beb8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bea8:	4b47      	ldr	r3, [pc, #284]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	2380      	movs	r3, #128	; 0x80
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	4013      	ands	r3, r2
 800beb2:	d113      	bne.n	800bedc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e07f      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d106      	bne.n	800bece <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bec0:	4b41      	ldr	r3, [pc, #260]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800bec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bec4:	2202      	movs	r2, #2
 800bec6:	4013      	ands	r3, r2
 800bec8:	d108      	bne.n	800bedc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e074      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bece:	4b3e      	ldr	r3, [pc, #248]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800bed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed2:	2202      	movs	r2, #2
 800bed4:	4013      	ands	r3, r2
 800bed6:	d101      	bne.n	800bedc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bed8:	2301      	movs	r3, #1
 800beda:	e06d      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bedc:	4b3a      	ldr	r3, [pc, #232]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	2207      	movs	r2, #7
 800bee2:	4393      	bics	r3, r2
 800bee4:	0019      	movs	r1, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	4b37      	ldr	r3, [pc, #220]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800beec:	430a      	orrs	r2, r1
 800beee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bef0:	f7fd ffd8 	bl	8009ea4 <HAL_GetTick>
 800bef4:	0003      	movs	r3, r0
 800bef6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bef8:	e009      	b.n	800bf0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800befa:	f7fd ffd3 	bl	8009ea4 <HAL_GetTick>
 800befe:	0002      	movs	r2, r0
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	4a2f      	ldr	r2, [pc, #188]	; (800bfc4 <HAL_RCC_ClockConfig+0x1f4>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d901      	bls.n	800bf0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e054      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf0e:	4b2e      	ldr	r3, [pc, #184]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	2238      	movs	r2, #56	; 0x38
 800bf14:	401a      	ands	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	00db      	lsls	r3, r3, #3
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d1ec      	bne.n	800befa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bf20:	4b27      	ldr	r3, [pc, #156]	; (800bfc0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2207      	movs	r2, #7
 800bf26:	4013      	ands	r3, r2
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d21e      	bcs.n	800bf6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf2e:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2207      	movs	r2, #7
 800bf34:	4393      	bics	r3, r2
 800bf36:	0019      	movs	r1, r3
 800bf38:	4b21      	ldr	r3, [pc, #132]	; (800bfc0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bf40:	f7fd ffb0 	bl	8009ea4 <HAL_GetTick>
 800bf44:	0003      	movs	r3, r0
 800bf46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bf48:	e009      	b.n	800bf5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf4a:	f7fd ffab 	bl	8009ea4 <HAL_GetTick>
 800bf4e:	0002      	movs	r2, r0
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	4a1b      	ldr	r2, [pc, #108]	; (800bfc4 <HAL_RCC_ClockConfig+0x1f4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d901      	bls.n	800bf5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	e02c      	b.n	800bfb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bf5e:	4b18      	ldr	r3, [pc, #96]	; (800bfc0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2207      	movs	r2, #7
 800bf64:	4013      	ands	r3, r2
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d1ee      	bne.n	800bf4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2204      	movs	r2, #4
 800bf72:	4013      	ands	r3, r2
 800bf74:	d009      	beq.n	800bf8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800bf76:	4b14      	ldr	r3, [pc, #80]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	4a15      	ldr	r2, [pc, #84]	; (800bfd0 <HAL_RCC_ClockConfig+0x200>)
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	0019      	movs	r1, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	4b10      	ldr	r3, [pc, #64]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800bf86:	430a      	orrs	r2, r1
 800bf88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800bf8a:	f000 f829 	bl	800bfe0 <HAL_RCC_GetSysClockFreq>
 800bf8e:	0001      	movs	r1, r0
 800bf90:	4b0d      	ldr	r3, [pc, #52]	; (800bfc8 <HAL_RCC_ClockConfig+0x1f8>)
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	0a1b      	lsrs	r3, r3, #8
 800bf96:	220f      	movs	r2, #15
 800bf98:	401a      	ands	r2, r3
 800bf9a:	4b0e      	ldr	r3, [pc, #56]	; (800bfd4 <HAL_RCC_ClockConfig+0x204>)
 800bf9c:	0092      	lsls	r2, r2, #2
 800bf9e:	58d3      	ldr	r3, [r2, r3]
 800bfa0:	221f      	movs	r2, #31
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	000a      	movs	r2, r1
 800bfa6:	40da      	lsrs	r2, r3
 800bfa8:	4b0b      	ldr	r3, [pc, #44]	; (800bfd8 <HAL_RCC_ClockConfig+0x208>)
 800bfaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bfac:	4b0b      	ldr	r3, [pc, #44]	; (800bfdc <HAL_RCC_ClockConfig+0x20c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	0018      	movs	r0, r3
 800bfb2:	f7fd ff1b 	bl	8009dec <HAL_InitTick>
 800bfb6:	0003      	movs	r3, r0
}
 800bfb8:	0018      	movs	r0, r3
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	b004      	add	sp, #16
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	40022000 	.word	0x40022000
 800bfc4:	00001388 	.word	0x00001388
 800bfc8:	40021000 	.word	0x40021000
 800bfcc:	fffff0ff 	.word	0xfffff0ff
 800bfd0:	ffff8fff 	.word	0xffff8fff
 800bfd4:	0801a670 	.word	0x0801a670
 800bfd8:	20000004 	.word	0x20000004
 800bfdc:	20000074 	.word	0x20000074

0800bfe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bfe6:	4b3c      	ldr	r3, [pc, #240]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	2238      	movs	r2, #56	; 0x38
 800bfec:	4013      	ands	r3, r2
 800bfee:	d10f      	bne.n	800c010 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bff0:	4b39      	ldr	r3, [pc, #228]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	0adb      	lsrs	r3, r3, #11
 800bff6:	2207      	movs	r2, #7
 800bff8:	4013      	ands	r3, r2
 800bffa:	2201      	movs	r2, #1
 800bffc:	409a      	lsls	r2, r3
 800bffe:	0013      	movs	r3, r2
 800c000:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	4835      	ldr	r0, [pc, #212]	; (800c0dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800c006:	f7fa f9ad 	bl	8006364 <__udivsi3>
 800c00a:	0003      	movs	r3, r0
 800c00c:	613b      	str	r3, [r7, #16]
 800c00e:	e05d      	b.n	800c0cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c010:	4b31      	ldr	r3, [pc, #196]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	2238      	movs	r2, #56	; 0x38
 800c016:	4013      	ands	r3, r2
 800c018:	2b08      	cmp	r3, #8
 800c01a:	d102      	bne.n	800c022 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c01c:	4b30      	ldr	r3, [pc, #192]	; (800c0e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800c01e:	613b      	str	r3, [r7, #16]
 800c020:	e054      	b.n	800c0cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c022:	4b2d      	ldr	r3, [pc, #180]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	2238      	movs	r2, #56	; 0x38
 800c028:	4013      	ands	r3, r2
 800c02a:	2b10      	cmp	r3, #16
 800c02c:	d138      	bne.n	800c0a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800c02e:	4b2a      	ldr	r3, [pc, #168]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	2203      	movs	r2, #3
 800c034:	4013      	ands	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c038:	4b27      	ldr	r3, [pc, #156]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	091b      	lsrs	r3, r3, #4
 800c03e:	2207      	movs	r2, #7
 800c040:	4013      	ands	r3, r2
 800c042:	3301      	adds	r3, #1
 800c044:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2b03      	cmp	r3, #3
 800c04a:	d10d      	bne.n	800c068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c04c:	68b9      	ldr	r1, [r7, #8]
 800c04e:	4824      	ldr	r0, [pc, #144]	; (800c0e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800c050:	f7fa f988 	bl	8006364 <__udivsi3>
 800c054:	0003      	movs	r3, r0
 800c056:	0019      	movs	r1, r3
 800c058:	4b1f      	ldr	r3, [pc, #124]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	0a1b      	lsrs	r3, r3, #8
 800c05e:	227f      	movs	r2, #127	; 0x7f
 800c060:	4013      	ands	r3, r2
 800c062:	434b      	muls	r3, r1
 800c064:	617b      	str	r3, [r7, #20]
        break;
 800c066:	e00d      	b.n	800c084 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800c068:	68b9      	ldr	r1, [r7, #8]
 800c06a:	481c      	ldr	r0, [pc, #112]	; (800c0dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800c06c:	f7fa f97a 	bl	8006364 <__udivsi3>
 800c070:	0003      	movs	r3, r0
 800c072:	0019      	movs	r1, r3
 800c074:	4b18      	ldr	r3, [pc, #96]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	0a1b      	lsrs	r3, r3, #8
 800c07a:	227f      	movs	r2, #127	; 0x7f
 800c07c:	4013      	ands	r3, r2
 800c07e:	434b      	muls	r3, r1
 800c080:	617b      	str	r3, [r7, #20]
        break;
 800c082:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800c084:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	0f5b      	lsrs	r3, r3, #29
 800c08a:	2207      	movs	r2, #7
 800c08c:	4013      	ands	r3, r2
 800c08e:	3301      	adds	r3, #1
 800c090:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800c092:	6879      	ldr	r1, [r7, #4]
 800c094:	6978      	ldr	r0, [r7, #20]
 800c096:	f7fa f965 	bl	8006364 <__udivsi3>
 800c09a:	0003      	movs	r3, r0
 800c09c:	613b      	str	r3, [r7, #16]
 800c09e:	e015      	b.n	800c0cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800c0a0:	4b0d      	ldr	r3, [pc, #52]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	2238      	movs	r2, #56	; 0x38
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	2b20      	cmp	r3, #32
 800c0aa:	d103      	bne.n	800c0b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800c0ac:	2380      	movs	r3, #128	; 0x80
 800c0ae:	021b      	lsls	r3, r3, #8
 800c0b0:	613b      	str	r3, [r7, #16]
 800c0b2:	e00b      	b.n	800c0cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800c0b4:	4b08      	ldr	r3, [pc, #32]	; (800c0d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	2238      	movs	r2, #56	; 0x38
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	2b18      	cmp	r3, #24
 800c0be:	d103      	bne.n	800c0c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800c0c0:	23fa      	movs	r3, #250	; 0xfa
 800c0c2:	01db      	lsls	r3, r3, #7
 800c0c4:	613b      	str	r3, [r7, #16]
 800c0c6:	e001      	b.n	800c0cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c0cc:	693b      	ldr	r3, [r7, #16]
}
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	b006      	add	sp, #24
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	46c0      	nop			; (mov r8, r8)
 800c0d8:	40021000 	.word	0x40021000
 800c0dc:	00f42400 	.word	0x00f42400
 800c0e0:	007a1200 	.word	0x007a1200

0800c0e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0e8:	4b02      	ldr	r3, [pc, #8]	; (800c0f4 <HAL_RCC_GetHCLKFreq+0x10>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
}
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	46c0      	nop			; (mov r8, r8)
 800c0f4:	20000004 	.word	0x20000004

0800c0f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0f8:	b5b0      	push	{r4, r5, r7, lr}
 800c0fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c0fc:	f7ff fff2 	bl	800c0e4 <HAL_RCC_GetHCLKFreq>
 800c100:	0004      	movs	r4, r0
 800c102:	f7ff faf9 	bl	800b6f8 <LL_RCC_GetAPB1Prescaler>
 800c106:	0003      	movs	r3, r0
 800c108:	0b1a      	lsrs	r2, r3, #12
 800c10a:	4b05      	ldr	r3, [pc, #20]	; (800c120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c10c:	0092      	lsls	r2, r2, #2
 800c10e:	58d3      	ldr	r3, [r2, r3]
 800c110:	221f      	movs	r2, #31
 800c112:	4013      	ands	r3, r2
 800c114:	40dc      	lsrs	r4, r3
 800c116:	0023      	movs	r3, r4
}
 800c118:	0018      	movs	r0, r3
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bdb0      	pop	{r4, r5, r7, pc}
 800c11e:	46c0      	nop			; (mov r8, r8)
 800c120:	0801a6b0 	.word	0x0801a6b0

0800c124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800c12c:	2313      	movs	r3, #19
 800c12e:	18fb      	adds	r3, r7, r3
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c134:	2312      	movs	r3, #18
 800c136:	18fb      	adds	r3, r7, r3
 800c138:	2200      	movs	r2, #0
 800c13a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	2380      	movs	r3, #128	; 0x80
 800c142:	029b      	lsls	r3, r3, #10
 800c144:	4013      	ands	r3, r2
 800c146:	d100      	bne.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800c148:	e0ad      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c14a:	2011      	movs	r0, #17
 800c14c:	183b      	adds	r3, r7, r0
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c152:	4b47      	ldr	r3, [pc, #284]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c156:	2380      	movs	r3, #128	; 0x80
 800c158:	055b      	lsls	r3, r3, #21
 800c15a:	4013      	ands	r3, r2
 800c15c:	d110      	bne.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c15e:	4b44      	ldr	r3, [pc, #272]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c162:	4b43      	ldr	r3, [pc, #268]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c164:	2180      	movs	r1, #128	; 0x80
 800c166:	0549      	lsls	r1, r1, #21
 800c168:	430a      	orrs	r2, r1
 800c16a:	63da      	str	r2, [r3, #60]	; 0x3c
 800c16c:	4b40      	ldr	r3, [pc, #256]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c16e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c170:	2380      	movs	r3, #128	; 0x80
 800c172:	055b      	lsls	r3, r3, #21
 800c174:	4013      	ands	r3, r2
 800c176:	60bb      	str	r3, [r7, #8]
 800c178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c17a:	183b      	adds	r3, r7, r0
 800c17c:	2201      	movs	r2, #1
 800c17e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c180:	4b3c      	ldr	r3, [pc, #240]	; (800c274 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	4b3b      	ldr	r3, [pc, #236]	; (800c274 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c186:	2180      	movs	r1, #128	; 0x80
 800c188:	0049      	lsls	r1, r1, #1
 800c18a:	430a      	orrs	r2, r1
 800c18c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c18e:	f7fd fe89 	bl	8009ea4 <HAL_GetTick>
 800c192:	0003      	movs	r3, r0
 800c194:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c196:	e00b      	b.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c198:	f7fd fe84 	bl	8009ea4 <HAL_GetTick>
 800c19c:	0002      	movs	r2, r0
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d904      	bls.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800c1a6:	2313      	movs	r3, #19
 800c1a8:	18fb      	adds	r3, r7, r3
 800c1aa:	2203      	movs	r2, #3
 800c1ac:	701a      	strb	r2, [r3, #0]
        break;
 800c1ae:	e005      	b.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1b0:	4b30      	ldr	r3, [pc, #192]	; (800c274 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	2380      	movs	r3, #128	; 0x80
 800c1b6:	005b      	lsls	r3, r3, #1
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	d0ed      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800c1bc:	2313      	movs	r3, #19
 800c1be:	18fb      	adds	r3, r7, r3
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d15e      	bne.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c1c6:	4b2a      	ldr	r3, [pc, #168]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1ca:	23c0      	movs	r3, #192	; 0xc0
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d019      	beq.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d014      	beq.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c1e2:	4b23      	ldr	r3, [pc, #140]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1e6:	4a24      	ldr	r2, [pc, #144]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c1ec:	4b20      	ldr	r3, [pc, #128]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1f0:	4b1f      	ldr	r3, [pc, #124]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1f2:	2180      	movs	r1, #128	; 0x80
 800c1f4:	0249      	lsls	r1, r1, #9
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c1fa:	4b1d      	ldr	r3, [pc, #116]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1fe:	4b1c      	ldr	r3, [pc, #112]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c200:	491e      	ldr	r1, [pc, #120]	; (800c27c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800c202:	400a      	ands	r2, r1
 800c204:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c206:	4b1a      	ldr	r3, [pc, #104]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	2201      	movs	r2, #1
 800c210:	4013      	ands	r3, r2
 800c212:	d016      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c214:	f7fd fe46 	bl	8009ea4 <HAL_GetTick>
 800c218:	0003      	movs	r3, r0
 800c21a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c21c:	e00c      	b.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c21e:	f7fd fe41 	bl	8009ea4 <HAL_GetTick>
 800c222:	0002      	movs	r2, r0
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	4a15      	ldr	r2, [pc, #84]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d904      	bls.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800c22e:	2313      	movs	r3, #19
 800c230:	18fb      	adds	r3, r7, r3
 800c232:	2203      	movs	r2, #3
 800c234:	701a      	strb	r2, [r3, #0]
            break;
 800c236:	e004      	b.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c238:	4b0d      	ldr	r3, [pc, #52]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c23a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c23c:	2202      	movs	r2, #2
 800c23e:	4013      	ands	r3, r2
 800c240:	d0ed      	beq.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800c242:	2313      	movs	r3, #19
 800c244:	18fb      	adds	r3, r7, r3
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c24c:	4b08      	ldr	r3, [pc, #32]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c250:	4a09      	ldr	r2, [pc, #36]	; (800c278 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800c252:	4013      	ands	r3, r2
 800c254:	0019      	movs	r1, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c25a:	4b05      	ldr	r3, [pc, #20]	; (800c270 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c25c:	430a      	orrs	r2, r1
 800c25e:	65da      	str	r2, [r3, #92]	; 0x5c
 800c260:	e016      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c262:	2312      	movs	r3, #18
 800c264:	18fb      	adds	r3, r7, r3
 800c266:	2213      	movs	r2, #19
 800c268:	18ba      	adds	r2, r7, r2
 800c26a:	7812      	ldrb	r2, [r2, #0]
 800c26c:	701a      	strb	r2, [r3, #0]
 800c26e:	e00f      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800c270:	40021000 	.word	0x40021000
 800c274:	40007000 	.word	0x40007000
 800c278:	fffffcff 	.word	0xfffffcff
 800c27c:	fffeffff 	.word	0xfffeffff
 800c280:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c284:	2312      	movs	r3, #18
 800c286:	18fb      	adds	r3, r7, r3
 800c288:	2213      	movs	r2, #19
 800c28a:	18ba      	adds	r2, r7, r2
 800c28c:	7812      	ldrb	r2, [r2, #0]
 800c28e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c290:	2311      	movs	r3, #17
 800c292:	18fb      	adds	r3, r7, r3
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d105      	bne.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c29a:	4bb6      	ldr	r3, [pc, #728]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c29c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c29e:	4bb5      	ldr	r3, [pc, #724]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2a0:	49b5      	ldr	r1, [pc, #724]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800c2a2:	400a      	ands	r2, r1
 800c2a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	d009      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c2b0:	4bb0      	ldr	r3, [pc, #704]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2b4:	2203      	movs	r2, #3
 800c2b6:	4393      	bics	r3, r2
 800c2b8:	0019      	movs	r1, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	4bad      	ldr	r3, [pc, #692]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	d009      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c2ce:	4ba9      	ldr	r3, [pc, #676]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d2:	220c      	movs	r2, #12
 800c2d4:	4393      	bics	r3, r2
 800c2d6:	0019      	movs	r1, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	689a      	ldr	r2, [r3, #8]
 800c2dc:	4ba5      	ldr	r3, [pc, #660]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2204      	movs	r2, #4
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	d009      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c2ec:	4ba1      	ldr	r3, [pc, #644]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f0:	2230      	movs	r2, #48	; 0x30
 800c2f2:	4393      	bics	r3, r2
 800c2f4:	0019      	movs	r1, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	4b9e      	ldr	r3, [pc, #632]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2fc:	430a      	orrs	r2, r1
 800c2fe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2210      	movs	r2, #16
 800c306:	4013      	ands	r3, r2
 800c308:	d009      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c30a:	4b9a      	ldr	r3, [pc, #616]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c30e:	4a9b      	ldr	r2, [pc, #620]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800c310:	4013      	ands	r3, r2
 800c312:	0019      	movs	r1, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691a      	ldr	r2, [r3, #16]
 800c318:	4b96      	ldr	r3, [pc, #600]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c31a:	430a      	orrs	r2, r1
 800c31c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	2380      	movs	r3, #128	; 0x80
 800c324:	015b      	lsls	r3, r3, #5
 800c326:	4013      	ands	r3, r2
 800c328:	d009      	beq.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800c32a:	4b92      	ldr	r3, [pc, #584]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32e:	4a94      	ldr	r2, [pc, #592]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c330:	4013      	ands	r3, r2
 800c332:	0019      	movs	r1, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	695a      	ldr	r2, [r3, #20]
 800c338:	4b8e      	ldr	r3, [pc, #568]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c33a:	430a      	orrs	r2, r1
 800c33c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	2380      	movs	r3, #128	; 0x80
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4013      	ands	r3, r2
 800c348:	d009      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c34a:	4b8a      	ldr	r3, [pc, #552]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34e:	4a8d      	ldr	r2, [pc, #564]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800c350:	4013      	ands	r3, r2
 800c352:	0019      	movs	r1, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c358:	4b86      	ldr	r3, [pc, #536]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c35a:	430a      	orrs	r2, r1
 800c35c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	2380      	movs	r3, #128	; 0x80
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	4013      	ands	r3, r2
 800c368:	d009      	beq.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c36a:	4b82      	ldr	r3, [pc, #520]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c36e:	4a86      	ldr	r2, [pc, #536]	; (800c588 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800c370:	4013      	ands	r3, r2
 800c372:	0019      	movs	r1, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c378:	4b7e      	ldr	r3, [pc, #504]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c37a:	430a      	orrs	r2, r1
 800c37c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2220      	movs	r2, #32
 800c384:	4013      	ands	r3, r2
 800c386:	d009      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c388:	4b7a      	ldr	r3, [pc, #488]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38c:	4a7f      	ldr	r2, [pc, #508]	; (800c58c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c38e:	4013      	ands	r3, r2
 800c390:	0019      	movs	r1, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	699a      	ldr	r2, [r3, #24]
 800c396:	4b77      	ldr	r3, [pc, #476]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c398:	430a      	orrs	r2, r1
 800c39a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2240      	movs	r2, #64	; 0x40
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	d009      	beq.n	800c3ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c3a6:	4b73      	ldr	r3, [pc, #460]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3aa:	4a79      	ldr	r2, [pc, #484]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	0019      	movs	r1, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	69da      	ldr	r2, [r3, #28]
 800c3b4:	4b6f      	ldr	r3, [pc, #444]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	2380      	movs	r3, #128	; 0x80
 800c3c0:	01db      	lsls	r3, r3, #7
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	d015      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c3c6:	4b6b      	ldr	r3, [pc, #428]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	0899      	lsrs	r1, r3, #2
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3d2:	4b68      	ldr	r3, [pc, #416]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3d4:	430a      	orrs	r2, r1
 800c3d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3dc:	2380      	movs	r3, #128	; 0x80
 800c3de:	05db      	lsls	r3, r3, #23
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d106      	bne.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c3e4:	4b63      	ldr	r3, [pc, #396]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3e6:	68da      	ldr	r2, [r3, #12]
 800c3e8:	4b62      	ldr	r3, [pc, #392]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3ea:	2180      	movs	r1, #128	; 0x80
 800c3ec:	0249      	lsls	r1, r1, #9
 800c3ee:	430a      	orrs	r2, r1
 800c3f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	2380      	movs	r3, #128	; 0x80
 800c3f8:	031b      	lsls	r3, r3, #12
 800c3fa:	4013      	ands	r3, r2
 800c3fc:	d009      	beq.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c3fe:	4b5d      	ldr	r3, [pc, #372]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c402:	2240      	movs	r2, #64	; 0x40
 800c404:	4393      	bics	r3, r2
 800c406:	0019      	movs	r1, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c40c:	4b59      	ldr	r3, [pc, #356]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c40e:	430a      	orrs	r2, r1
 800c410:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	2380      	movs	r3, #128	; 0x80
 800c418:	039b      	lsls	r3, r3, #14
 800c41a:	4013      	ands	r3, r2
 800c41c:	d016      	beq.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800c41e:	4b55      	ldr	r3, [pc, #340]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c422:	4a5c      	ldr	r2, [pc, #368]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c424:	4013      	ands	r3, r2
 800c426:	0019      	movs	r1, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c42c:	4b51      	ldr	r3, [pc, #324]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c42e:	430a      	orrs	r2, r1
 800c430:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c436:	2380      	movs	r3, #128	; 0x80
 800c438:	03db      	lsls	r3, r3, #15
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d106      	bne.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c43e:	4b4d      	ldr	r3, [pc, #308]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c440:	68da      	ldr	r2, [r3, #12]
 800c442:	4b4c      	ldr	r3, [pc, #304]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c444:	2180      	movs	r1, #128	; 0x80
 800c446:	0449      	lsls	r1, r1, #17
 800c448:	430a      	orrs	r2, r1
 800c44a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	2380      	movs	r3, #128	; 0x80
 800c452:	03db      	lsls	r3, r3, #15
 800c454:	4013      	ands	r3, r2
 800c456:	d016      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800c458:	4b46      	ldr	r3, [pc, #280]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45c:	4a4e      	ldr	r2, [pc, #312]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c45e:	4013      	ands	r3, r2
 800c460:	0019      	movs	r1, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c466:	4b43      	ldr	r3, [pc, #268]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c468:	430a      	orrs	r2, r1
 800c46a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c470:	2380      	movs	r3, #128	; 0x80
 800c472:	045b      	lsls	r3, r3, #17
 800c474:	429a      	cmp	r2, r3
 800c476:	d106      	bne.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c478:	4b3e      	ldr	r3, [pc, #248]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c47a:	68da      	ldr	r2, [r3, #12]
 800c47c:	4b3d      	ldr	r3, [pc, #244]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c47e:	2180      	movs	r1, #128	; 0x80
 800c480:	0449      	lsls	r1, r1, #17
 800c482:	430a      	orrs	r2, r1
 800c484:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	2380      	movs	r3, #128	; 0x80
 800c48c:	011b      	lsls	r3, r3, #4
 800c48e:	4013      	ands	r3, r2
 800c490:	d014      	beq.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800c492:	4b38      	ldr	r3, [pc, #224]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c496:	2203      	movs	r2, #3
 800c498:	4393      	bics	r3, r2
 800c49a:	0019      	movs	r1, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a1a      	ldr	r2, [r3, #32]
 800c4a0:	4b34      	ldr	r3, [pc, #208]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4a2:	430a      	orrs	r2, r1
 800c4a4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d106      	bne.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c4ae:	4b31      	ldr	r3, [pc, #196]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4b0:	68da      	ldr	r2, [r3, #12]
 800c4b2:	4b30      	ldr	r3, [pc, #192]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4b4:	2180      	movs	r1, #128	; 0x80
 800c4b6:	0249      	lsls	r1, r1, #9
 800c4b8:	430a      	orrs	r2, r1
 800c4ba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	2380      	movs	r3, #128	; 0x80
 800c4c2:	019b      	lsls	r3, r3, #6
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	d014      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800c4c8:	4b2a      	ldr	r3, [pc, #168]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4cc:	220c      	movs	r2, #12
 800c4ce:	4393      	bics	r3, r2
 800c4d0:	0019      	movs	r1, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4d6:	4b27      	ldr	r3, [pc, #156]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4d8:	430a      	orrs	r2, r1
 800c4da:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e0:	2b04      	cmp	r3, #4
 800c4e2:	d106      	bne.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c4e4:	4b23      	ldr	r3, [pc, #140]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4e6:	68da      	ldr	r2, [r3, #12]
 800c4e8:	4b22      	ldr	r3, [pc, #136]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4ea:	2180      	movs	r1, #128	; 0x80
 800c4ec:	0249      	lsls	r1, r1, #9
 800c4ee:	430a      	orrs	r2, r1
 800c4f0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	2380      	movs	r3, #128	; 0x80
 800c4f8:	045b      	lsls	r3, r3, #17
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	d016      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4fe:	4b1d      	ldr	r3, [pc, #116]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c502:	4a22      	ldr	r2, [pc, #136]	; (800c58c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c504:	4013      	ands	r3, r2
 800c506:	0019      	movs	r1, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c50c:	4b19      	ldr	r3, [pc, #100]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c50e:	430a      	orrs	r2, r1
 800c510:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c516:	2380      	movs	r3, #128	; 0x80
 800c518:	019b      	lsls	r3, r3, #6
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d106      	bne.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c51e:	4b15      	ldr	r3, [pc, #84]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c520:	68da      	ldr	r2, [r3, #12]
 800c522:	4b14      	ldr	r3, [pc, #80]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c524:	2180      	movs	r1, #128	; 0x80
 800c526:	0449      	lsls	r1, r1, #17
 800c528:	430a      	orrs	r2, r1
 800c52a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	2380      	movs	r3, #128	; 0x80
 800c532:	049b      	lsls	r3, r3, #18
 800c534:	4013      	ands	r3, r2
 800c536:	d016      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c538:	4b0e      	ldr	r3, [pc, #56]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53c:	4a10      	ldr	r2, [pc, #64]	; (800c580 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c53e:	4013      	ands	r3, r2
 800c540:	0019      	movs	r1, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c548:	430a      	orrs	r2, r1
 800c54a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c550:	2380      	movs	r3, #128	; 0x80
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	429a      	cmp	r2, r3
 800c556:	d106      	bne.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c558:	4b06      	ldr	r3, [pc, #24]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c55a:	68da      	ldr	r2, [r3, #12]
 800c55c:	4b05      	ldr	r3, [pc, #20]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c55e:	2180      	movs	r1, #128	; 0x80
 800c560:	0449      	lsls	r1, r1, #17
 800c562:	430a      	orrs	r2, r1
 800c564:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800c566:	2312      	movs	r3, #18
 800c568:	18fb      	adds	r3, r7, r3
 800c56a:	781b      	ldrb	r3, [r3, #0]
}
 800c56c:	0018      	movs	r0, r3
 800c56e:	46bd      	mov	sp, r7
 800c570:	b006      	add	sp, #24
 800c572:	bd80      	pop	{r7, pc}
 800c574:	40021000 	.word	0x40021000
 800c578:	efffffff 	.word	0xefffffff
 800c57c:	fffff3ff 	.word	0xfffff3ff
 800c580:	fffffcff 	.word	0xfffffcff
 800c584:	fff3ffff 	.word	0xfff3ffff
 800c588:	ffcfffff 	.word	0xffcfffff
 800c58c:	ffffcfff 	.word	0xffffcfff
 800c590:	ffff3fff 	.word	0xffff3fff
 800c594:	ffbfffff 	.word	0xffbfffff
 800c598:	feffffff 	.word	0xfeffffff

0800c59c <LL_ADC_REG_GetSequencerConfigurable>:
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	2380      	movs	r3, #128	; 0x80
 800c5aa:	039b      	lsls	r3, r3, #14
 800c5ac:	4013      	ands	r3, r2
}
 800c5ae:	0018      	movs	r0, r3
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	b002      	add	sp, #8
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <LL_ADC_REG_SetSequencerLength>:
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	431a      	orrs	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c5cc:	46c0      	nop			; (mov r8, r8)
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	b002      	add	sp, #8
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <LL_ADC_IsEnabled>:
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	4013      	ands	r3, r2
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d101      	bne.n	800c5ec <LL_ADC_IsEnabled+0x18>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e000      	b.n	800c5ee <LL_ADC_IsEnabled+0x1a>
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	0018      	movs	r0, r3
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	b002      	add	sp, #8
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *pADC_InitStruct)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800c602:	230f      	movs	r3, #15
 800c604:	18fb      	adds	r3, r7, r3
 800c606:	2200      	movs	r2, #0
 800c608:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	0018      	movs	r0, r3
 800c60e:	f7ff ffe1 	bl	800c5d4 <LL_ADC_IsEnabled>
 800c612:	1e03      	subs	r3, r0, #0
 800c614:	d118      	bne.n	800c648 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	4a11      	ldr	r2, [pc, #68]	; (800c660 <LL_ADC_Init+0x68>)
 800c61c:	401a      	ands	r2, r3
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	6859      	ldr	r1, [r3, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	4319      	orrs	r1, r3
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	430b      	orrs	r3, r1
 800c62e:	431a      	orrs	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	60da      	str	r2, [r3, #12]
               pADC_InitStruct->Resolution
               | pADC_InitStruct->DataAlignment
               | pADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	089a      	lsrs	r2, r3, #2
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	431a      	orrs	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	611a      	str	r2, [r3, #16]
 800c646:	e003      	b.n	800c650 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800c648:	230f      	movs	r3, #15
 800c64a:	18fb      	adds	r3, r7, r3
 800c64c:	2201      	movs	r2, #1
 800c64e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c650:	230f      	movs	r3, #15
 800c652:	18fb      	adds	r3, r7, r3
 800c654:	781b      	ldrb	r3, [r3, #0]
}
 800c656:	0018      	movs	r0, r3
 800c658:	46bd      	mov	sp, r7
 800c65a:	b004      	add	sp, #16
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	46c0      	nop			; (mov r8, r8)
 800c660:	ffff3fc7 	.word	0xffff3fc7

0800c664 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800c66e:	230f      	movs	r3, #15
 800c670:	18fb      	adds	r3, r7, r3
 800c672:	2200      	movs	r2, #0
 800c674:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(pADC_RegInitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(pADC_RegInitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	0018      	movs	r0, r3
 800c67a:	f7ff ff8f 	bl	800c59c <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(pADC_RegInitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	0018      	movs	r0, r3
 800c682:	f7ff ff8b 	bl	800c59c <LL_ADC_REG_GetSequencerConfigurable>
                 || (pADC_RegInitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	0018      	movs	r0, r3
 800c68a:	f7ff ffa3 	bl	800c5d4 <LL_ADC_IsEnabled>
 800c68e:	1e03      	subs	r3, r0, #0
 800c690:	d13f      	bne.n	800c712 <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	0018      	movs	r0, r3
 800c696:	f7ff ff81 	bl	800c59c <LL_ADC_REG_GetSequencerConfigurable>
 800c69a:	1e03      	subs	r3, r0, #0
 800c69c:	d003      	beq.n	800c6a6 <LL_ADC_REG_Init+0x42>
        || (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	2bf0      	cmp	r3, #240	; 0xf0
 800c6a4:	d015      	beq.n	800c6d2 <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	4a1f      	ldr	r2, [pc, #124]	; (800c728 <LL_ADC_REG_Init+0xc4>)
 800c6ac:	401a      	ands	r2, r3
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	6819      	ldr	r1, [r3, #0]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	4319      	orrs	r1, r3
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	4319      	orrs	r1, r3
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	4319      	orrs	r1, r3
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	695b      	ldr	r3, [r3, #20]
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	431a      	orrs	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	60da      	str	r2, [r3, #12]
 800c6d0:	e011      	b.n	800c6f6 <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	4a14      	ldr	r2, [pc, #80]	; (800c728 <LL_ADC_REG_Init+0xc4>)
 800c6d8:	401a      	ands	r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	6819      	ldr	r1, [r3, #0]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	4319      	orrs	r1, r3
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	4319      	orrs	r1, r3
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	430b      	orrs	r3, r1
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	f7ff ff4f 	bl	800c59c <LL_ADC_REG_GetSequencerConfigurable>
 800c6fe:	1e03      	subs	r3, r0, #0
 800c700:	d00b      	beq.n	800c71a <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	0011      	movs	r1, r2
 800c70a:	0018      	movs	r0, r3
 800c70c:	f7ff ff53 	bl	800c5b6 <LL_ADC_REG_SetSequencerLength>
 800c710:	e003      	b.n	800c71a <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800c712:	230f      	movs	r3, #15
 800c714:	18fb      	adds	r3, r7, r3
 800c716:	2201      	movs	r2, #1
 800c718:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800c71a:	230f      	movs	r3, #15
 800c71c:	18fb      	adds	r3, r7, r3
 800c71e:	781b      	ldrb	r3, [r3, #0]
}
 800c720:	0018      	movs	r0, r3
 800c722:	46bd      	mov	sp, r7
 800c724:	b004      	add	sp, #16
 800c726:	bd80      	pop	{r7, pc}
 800c728:	fffec23c 	.word	0xfffec23c

0800c72c <LL_DMA_ConfigTransfer>:
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800c73c:	4a0c      	ldr	r2, [pc, #48]	; (800c770 <LL_DMA_ConfigTransfer+0x44>)
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	18d3      	adds	r3, r2, r3
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	001a      	movs	r2, r3
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	18d3      	adds	r3, r2, r3
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a09      	ldr	r2, [pc, #36]	; (800c774 <LL_DMA_ConfigTransfer+0x48>)
 800c74e:	4013      	ands	r3, r2
 800c750:	0019      	movs	r1, r3
 800c752:	4a07      	ldr	r2, [pc, #28]	; (800c770 <LL_DMA_ConfigTransfer+0x44>)
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	18d3      	adds	r3, r2, r3
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	001a      	movs	r2, r3
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	18d3      	adds	r3, r2, r3
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	430a      	orrs	r2, r1
 800c764:	601a      	str	r2, [r3, #0]
}
 800c766:	46c0      	nop			; (mov r8, r8)
 800c768:	46bd      	mov	sp, r7
 800c76a:	b006      	add	sp, #24
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	46c0      	nop			; (mov r8, r8)
 800c770:	0801a75c 	.word	0x0801a75c
 800c774:	ffff800f 	.word	0xffff800f

0800c778 <LL_DMA_SetDataLength>:
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800c788:	4a0b      	ldr	r2, [pc, #44]	; (800c7b8 <LL_DMA_SetDataLength+0x40>)
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	18d3      	adds	r3, r2, r3
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	001a      	movs	r2, r3
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	18d3      	adds	r3, r2, r3
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	0c1b      	lsrs	r3, r3, #16
 800c79a:	0419      	lsls	r1, r3, #16
 800c79c:	4a06      	ldr	r2, [pc, #24]	; (800c7b8 <LL_DMA_SetDataLength+0x40>)
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	18d3      	adds	r3, r2, r3
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	001a      	movs	r2, r3
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	18d3      	adds	r3, r2, r3
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	430a      	orrs	r2, r1
 800c7ae:	605a      	str	r2, [r3, #4]
}
 800c7b0:	46c0      	nop			; (mov r8, r8)
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	b006      	add	sp, #24
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	0801a75c 	.word	0x0801a75c

0800c7bc <LL_DMA_SetMemoryAddress>:
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800c7cc:	4a06      	ldr	r2, [pc, #24]	; (800c7e8 <LL_DMA_SetMemoryAddress+0x2c>)
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	18d3      	adds	r3, r2, r3
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	001a      	movs	r2, r3
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	18d3      	adds	r3, r2, r3
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	60da      	str	r2, [r3, #12]
}
 800c7de:	46c0      	nop			; (mov r8, r8)
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	b006      	add	sp, #24
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	46c0      	nop			; (mov r8, r8)
 800c7e8:	0801a75c 	.word	0x0801a75c

0800c7ec <LL_DMA_SetPeriphAddress>:
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800c7fc:	4a06      	ldr	r2, [pc, #24]	; (800c818 <LL_DMA_SetPeriphAddress+0x2c>)
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	18d3      	adds	r3, r2, r3
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	001a      	movs	r2, r3
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	18d3      	adds	r3, r2, r3
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	609a      	str	r2, [r3, #8]
}
 800c80e:	46c0      	nop			; (mov r8, r8)
 800c810:	46bd      	mov	sp, r7
 800c812:	b006      	add	sp, #24
 800c814:	bd80      	pop	{r7, pc}
 800c816:	46c0      	nop			; (mov r8, r8)
 800c818:	0801a75c 	.word	0x0801a75c

0800c81c <LL_DMA_SetPeriphRequest>:
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	0a9b      	lsrs	r3, r3, #10
 800c82c:	4a0f      	ldr	r2, [pc, #60]	; (800c86c <LL_DMA_SetPeriphRequest+0x50>)
 800c82e:	405a      	eors	r2, r3
 800c830:	0013      	movs	r3, r2
 800c832:	00db      	lsls	r3, r3, #3
 800c834:	1a9b      	subs	r3, r3, r2
 800c836:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	18d3      	adds	r3, r2, r3
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4a0b      	ldr	r2, [pc, #44]	; (800c870 <LL_DMA_SetPeriphRequest+0x54>)
 800c842:	4694      	mov	ip, r2
 800c844:	4463      	add	r3, ip
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	227f      	movs	r2, #127	; 0x7f
 800c84a:	4393      	bics	r3, r2
 800c84c:	0019      	movs	r1, r3
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	18d3      	adds	r3, r2, r3
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4a06      	ldr	r2, [pc, #24]	; (800c870 <LL_DMA_SetPeriphRequest+0x54>)
 800c858:	4694      	mov	ip, r2
 800c85a:	4463      	add	r3, ip
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	430a      	orrs	r2, r1
 800c860:	601a      	str	r2, [r3, #0]
}
 800c862:	46c0      	nop			; (mov r8, r8)
 800c864:	46bd      	mov	sp, r7
 800c866:	b006      	add	sp, #24
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	46c0      	nop			; (mov r8, r8)
 800c86c:	00100080 	.word	0x00100080
 800c870:	40020800 	.word	0x40020800

0800c874 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c888:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800c88e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800c894:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800c89a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800c8a0:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c8a6:	431a      	orrs	r2, r3
 800c8a8:	68b9      	ldr	r1, [r7, #8]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	f7ff ff3d 	bl	800c72c <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	685a      	ldr	r2, [r3, #4]
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	0018      	movs	r0, r3
 800c8bc:	f7ff ff7e 	bl	800c7bc <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	0018      	movs	r0, r3
 800c8ca:	f7ff ff8f 	bl	800c7ec <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a1a      	ldr	r2, [r3, #32]
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	f7ff ff4e 	bl	800c778 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8e0:	68b9      	ldr	r1, [r7, #8]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	0018      	movs	r0, r3
 800c8e6:	f7ff ff99 	bl	800c81c <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	b004      	add	sp, #16
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c93e:	46c0      	nop			; (mov r8, r8)
 800c940:	46bd      	mov	sp, r7
 800c942:	b002      	add	sp, #8
 800c944:	bd80      	pop	{r7, pc}

0800c946 <LL_GPIO_SetPinMode>:
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b084      	sub	sp, #16
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	60b9      	str	r1, [r7, #8]
 800c950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6819      	ldr	r1, [r3, #0]
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	435b      	muls	r3, r3
 800c95a:	001a      	movs	r2, r3
 800c95c:	0013      	movs	r3, r2
 800c95e:	005b      	lsls	r3, r3, #1
 800c960:	189b      	adds	r3, r3, r2
 800c962:	43db      	mvns	r3, r3
 800c964:	400b      	ands	r3, r1
 800c966:	001a      	movs	r2, r3
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	435b      	muls	r3, r3
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	434b      	muls	r3, r1
 800c970:	431a      	orrs	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	601a      	str	r2, [r3, #0]
}
 800c976:	46c0      	nop			; (mov r8, r8)
 800c978:	46bd      	mov	sp, r7
 800c97a:	b004      	add	sp, #16
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <LL_GPIO_SetPinOutputType>:
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	60f8      	str	r0, [r7, #12]
 800c986:	60b9      	str	r1, [r7, #8]
 800c988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	43d2      	mvns	r2, r2
 800c992:	401a      	ands	r2, r3
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	6879      	ldr	r1, [r7, #4]
 800c998:	434b      	muls	r3, r1
 800c99a:	431a      	orrs	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	605a      	str	r2, [r3, #4]
}
 800c9a0:	46c0      	nop			; (mov r8, r8)
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b004      	add	sp, #16
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <LL_GPIO_SetPinSpeed>:
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6899      	ldr	r1, [r3, #8]
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	435b      	muls	r3, r3
 800c9bc:	001a      	movs	r2, r3
 800c9be:	0013      	movs	r3, r2
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	189b      	adds	r3, r3, r2
 800c9c4:	43db      	mvns	r3, r3
 800c9c6:	400b      	ands	r3, r1
 800c9c8:	001a      	movs	r2, r3
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	435b      	muls	r3, r3
 800c9ce:	6879      	ldr	r1, [r7, #4]
 800c9d0:	434b      	muls	r3, r1
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	609a      	str	r2, [r3, #8]
}
 800c9d8:	46c0      	nop			; (mov r8, r8)
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b004      	add	sp, #16
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <LL_GPIO_SetPinPull>:
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	68d9      	ldr	r1, [r3, #12]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	435b      	muls	r3, r3
 800c9f4:	001a      	movs	r2, r3
 800c9f6:	0013      	movs	r3, r2
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	189b      	adds	r3, r3, r2
 800c9fc:	43db      	mvns	r3, r3
 800c9fe:	400b      	ands	r3, r1
 800ca00:	001a      	movs	r2, r3
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	435b      	muls	r3, r3
 800ca06:	6879      	ldr	r1, [r7, #4]
 800ca08:	434b      	muls	r3, r1
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	60da      	str	r2, [r3, #12]
}
 800ca10:	46c0      	nop			; (mov r8, r8)
 800ca12:	46bd      	mov	sp, r7
 800ca14:	b004      	add	sp, #16
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <LL_GPIO_SetAFPin_0_7>:
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6a19      	ldr	r1, [r3, #32]
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	435b      	muls	r3, r3
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	4353      	muls	r3, r2
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	435a      	muls	r2, r3
 800ca34:	0013      	movs	r3, r2
 800ca36:	011b      	lsls	r3, r3, #4
 800ca38:	1a9b      	subs	r3, r3, r2
 800ca3a:	43db      	mvns	r3, r3
 800ca3c:	400b      	ands	r3, r1
 800ca3e:	001a      	movs	r2, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	435b      	muls	r3, r3
 800ca44:	68b9      	ldr	r1, [r7, #8]
 800ca46:	434b      	muls	r3, r1
 800ca48:	68b9      	ldr	r1, [r7, #8]
 800ca4a:	434b      	muls	r3, r1
 800ca4c:	6879      	ldr	r1, [r7, #4]
 800ca4e:	434b      	muls	r3, r1
 800ca50:	431a      	orrs	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	621a      	str	r2, [r3, #32]
}
 800ca56:	46c0      	nop			; (mov r8, r8)
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	b004      	add	sp, #16
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <LL_GPIO_SetAFPin_8_15>:
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b084      	sub	sp, #16
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	0a1b      	lsrs	r3, r3, #8
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	0a12      	lsrs	r2, r2, #8
 800ca76:	4353      	muls	r3, r2
 800ca78:	68ba      	ldr	r2, [r7, #8]
 800ca7a:	0a12      	lsrs	r2, r2, #8
 800ca7c:	4353      	muls	r3, r2
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	0a12      	lsrs	r2, r2, #8
 800ca82:	435a      	muls	r2, r3
 800ca84:	0013      	movs	r3, r2
 800ca86:	011b      	lsls	r3, r3, #4
 800ca88:	1a9b      	subs	r3, r3, r2
 800ca8a:	43db      	mvns	r3, r3
 800ca8c:	400b      	ands	r3, r1
 800ca8e:	001a      	movs	r2, r3
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	0a1b      	lsrs	r3, r3, #8
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	0a09      	lsrs	r1, r1, #8
 800ca98:	434b      	muls	r3, r1
 800ca9a:	68b9      	ldr	r1, [r7, #8]
 800ca9c:	0a09      	lsrs	r1, r1, #8
 800ca9e:	434b      	muls	r3, r1
 800caa0:	68b9      	ldr	r1, [r7, #8]
 800caa2:	0a09      	lsrs	r1, r1, #8
 800caa4:	434b      	muls	r3, r1
 800caa6:	6879      	ldr	r1, [r7, #4]
 800caa8:	434b      	muls	r3, r1
 800caaa:	431a      	orrs	r2, r3
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cab0:	46c0      	nop			; (mov r8, r8)
 800cab2:	46bd      	mov	sp, r7
 800cab4:	b004      	add	sp, #16
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800cac6:	e047      	b.n	800cb58 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2101      	movs	r1, #1
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	4091      	lsls	r1, r2
 800cad2:	000a      	movs	r2, r1
 800cad4:	4013      	ands	r3, r2
 800cad6:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d039      	beq.n	800cb52 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d003      	beq.n	800caee <LL_GPIO_Init+0x36>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	2b02      	cmp	r3, #2
 800caec:	d10d      	bne.n	800cb0a <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	689a      	ldr	r2, [r3, #8]
 800caf2:	68b9      	ldr	r1, [r7, #8]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	0018      	movs	r0, r3
 800caf8:	f7ff ff56 	bl	800c9a8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	68da      	ldr	r2, [r3, #12]
 800cb00:	68b9      	ldr	r1, [r7, #8]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	0018      	movs	r0, r3
 800cb06:	f7ff ff3a 	bl	800c97e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	691a      	ldr	r2, [r3, #16]
 800cb0e:	68b9      	ldr	r1, [r7, #8]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	0018      	movs	r0, r3
 800cb14:	f7ff ff64 	bl	800c9e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d111      	bne.n	800cb44 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2bff      	cmp	r3, #255	; 0xff
 800cb24:	d807      	bhi.n	800cb36 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	695a      	ldr	r2, [r3, #20]
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	0018      	movs	r0, r3
 800cb30:	f7ff ff72 	bl	800ca18 <LL_GPIO_SetAFPin_0_7>
 800cb34:	e006      	b.n	800cb44 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	695a      	ldr	r2, [r3, #20]
 800cb3a:	68b9      	ldr	r1, [r7, #8]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	0018      	movs	r0, r3
 800cb40:	f7ff ff8d 	bl	800ca5e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	f7ff fefa 	bl	800c946 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3301      	adds	r3, #1
 800cb56:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	40da      	lsrs	r2, r3
 800cb60:	1e13      	subs	r3, r2, #0
 800cb62:	d1b1      	bne.n	800cac8 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	0018      	movs	r0, r3
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	b004      	add	sp, #16
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <LL_LPUART_IsEnabled>:
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b082      	sub	sp, #8
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d101      	bne.n	800cb86 <LL_LPUART_IsEnabled+0x18>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e000      	b.n	800cb88 <LL_LPUART_IsEnabled+0x1a>
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	0018      	movs	r0, r3
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	b002      	add	sp, #8
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <LL_LPUART_SetPrescaler>:
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9e:	220f      	movs	r2, #15
 800cba0:	4393      	bics	r3, r2
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	b292      	uxth	r2, r2
 800cba6:	431a      	orrs	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800cbac:	46c0      	nop			; (mov r8, r8)
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	b002      	add	sp, #8
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <LL_LPUART_SetStopBitsLength>:
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	4a05      	ldr	r2, [pc, #20]	; (800cbd8 <LL_LPUART_SetStopBitsLength+0x24>)
 800cbc4:	401a      	ands	r2, r3
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	431a      	orrs	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	605a      	str	r2, [r3, #4]
}
 800cbce:	46c0      	nop			; (mov r8, r8)
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	b002      	add	sp, #8
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	ffffcfff 	.word	0xffffcfff

0800cbdc <LL_LPUART_SetHWFlowCtrl>:
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	4a05      	ldr	r2, [pc, #20]	; (800cc00 <LL_LPUART_SetHWFlowCtrl+0x24>)
 800cbec:	401a      	ands	r2, r3
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	431a      	orrs	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	609a      	str	r2, [r3, #8]
}
 800cbf6:	46c0      	nop			; (mov r8, r8)
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	b002      	add	sp, #8
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	46c0      	nop			; (mov r8, r8)
 800cc00:	fffffcff 	.word	0xfffffcff

0800cc04 <LL_LPUART_SetBaudRate>:
{
 800cc04:	b5b0      	push	{r4, r5, r7, lr}
 800cc06:	b08c      	sub	sp, #48	; 0x30
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cc0c:	62b9      	str	r1, [r7, #40]	; 0x28
 800cc0e:	627a      	str	r2, [r7, #36]	; 0x24
 800cc10:	623b      	str	r3, [r7, #32]
  if (BaudRate != 0U)
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d030      	beq.n	800cc7a <LL_LPUART_SetBaudRate+0x76>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800cc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1a:	61bb      	str	r3, [r7, #24]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	61fb      	str	r3, [r7, #28]
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	001a      	movs	r2, r3
 800cc26:	4b17      	ldr	r3, [pc, #92]	; (800cc84 <LL_LPUART_SetBaudRate+0x80>)
 800cc28:	0052      	lsls	r2, r2, #1
 800cc2a:	5ad3      	ldrh	r3, [r2, r3]
 800cc2c:	613b      	str	r3, [r7, #16]
 800cc2e:	2300      	movs	r3, #0
 800cc30:	617b      	str	r3, [r7, #20]
 800cc32:	693a      	ldr	r2, [r7, #16]
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	69b8      	ldr	r0, [r7, #24]
 800cc38:	69f9      	ldr	r1, [r7, #28]
 800cc3a:	f7f9 fc1f 	bl	800647c <__aeabi_uldivmod>
 800cc3e:	0002      	movs	r2, r0
 800cc40:	000b      	movs	r3, r1
 800cc42:	0e11      	lsrs	r1, r2, #24
 800cc44:	021d      	lsls	r5, r3, #8
 800cc46:	430d      	orrs	r5, r1
 800cc48:	0214      	lsls	r4, r2, #8
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	085b      	lsrs	r3, r3, #1
 800cc4e:	60bb      	str	r3, [r7, #8]
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	68b8      	ldr	r0, [r7, #8]
 800cc56:	68f9      	ldr	r1, [r7, #12]
 800cc58:	1900      	adds	r0, r0, r4
 800cc5a:	4169      	adcs	r1, r5
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	603b      	str	r3, [r7, #0]
 800cc60:	2300      	movs	r3, #0
 800cc62:	607b      	str	r3, [r7, #4]
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f7f9 fc08 	bl	800647c <__aeabi_uldivmod>
 800cc6c:	0002      	movs	r2, r0
 800cc6e:	000b      	movs	r3, r1
 800cc70:	0013      	movs	r3, r2
 800cc72:	031b      	lsls	r3, r3, #12
 800cc74:	0b1a      	lsrs	r2, r3, #12
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	60da      	str	r2, [r3, #12]
}
 800cc7a:	46c0      	nop			; (mov r8, r8)
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	b00c      	add	sp, #48	; 0x30
 800cc80:	bdb0      	pop	{r4, r5, r7, pc}
 800cc82:	46c0      	nop			; (mov r8, r8)
 800cc84:	0801a764 	.word	0x0801a764

0800cc88 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800cc92:	230f      	movs	r3, #15
 800cc94:	18fb      	adds	r3, r7, r3
 800cc96:	2201      	movs	r2, #1
 800cc98:	701a      	strb	r2, [r3, #0]
#if defined(LPUART2)
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	0018      	movs	r0, r3
 800cca2:	f7ff ff64 	bl	800cb6e <LL_LPUART_IsEnabled>
 800cca6:	1e03      	subs	r3, r0, #0
 800cca8:	d14d      	bne.n	800cd46 <LL_LPUART_Init+0xbe>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a29      	ldr	r2, [pc, #164]	; (800cd54 <LL_LPUART_Init+0xcc>)
 800ccb0:	401a      	ands	r2, r3
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	6899      	ldr	r1, [r3, #8]
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	4319      	orrs	r1, r3
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	695b      	ldr	r3, [r3, #20]
 800ccc0:	430b      	orrs	r3, r1
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	68da      	ldr	r2, [r3, #12]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	0011      	movs	r1, r2
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	f7ff ff6f 	bl	800cbb4 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	699a      	ldr	r2, [r3, #24]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	0011      	movs	r1, r2
 800ccde:	0018      	movs	r0, r3
 800cce0:	f7ff ff7c 	bl	800cbdc <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
#if defined(LPUART2)
    if (LPUARTx == LPUART1)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a1c      	ldr	r2, [pc, #112]	; (800cd58 <LL_LPUART_Init+0xd0>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d107      	bne.n	800ccfc <LL_LPUART_Init+0x74>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 800ccec:	23c0      	movs	r3, #192	; 0xc0
 800ccee:	011b      	lsls	r3, r3, #4
 800ccf0:	0018      	movs	r0, r3
 800ccf2:	f000 f8bf 	bl	800ce74 <LL_RCC_GetLPUARTClockFreq>
 800ccf6:	0003      	movs	r3, r0
 800ccf8:	60bb      	str	r3, [r7, #8]
 800ccfa:	e00a      	b.n	800cd12 <LL_LPUART_Init+0x8a>
    }
    else if (LPUARTx == LPUART2)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a17      	ldr	r2, [pc, #92]	; (800cd5c <LL_LPUART_Init+0xd4>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d106      	bne.n	800cd12 <LL_LPUART_Init+0x8a>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART2_CLKSOURCE);
 800cd04:	23c0      	movs	r3, #192	; 0xc0
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	0018      	movs	r0, r3
 800cd0a:	f000 f8b3 	bl	800ce74 <LL_RCC_GetLPUARTClockFreq>
 800cd0e:	0003      	movs	r3, r0
 800cd10:	60bb      	str	r3, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00f      	beq.n	800cd38 <LL_LPUART_Init+0xb0>
        && (LPUART_InitStruct->BaudRate != 0U))
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00b      	beq.n	800cd38 <LL_LPUART_Init+0xb0>
    {
      status = SUCCESS;
 800cd20:	230f      	movs	r3, #15
 800cd22:	18fb      	adds	r3, r7, r3
 800cd24:	2200      	movs	r2, #0
 800cd26:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 800cd30:	68b9      	ldr	r1, [r7, #8]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff ff66 	bl	800cc04 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	0011      	movs	r1, r2
 800cd40:	0018      	movs	r0, r3
 800cd42:	f7ff ff25 	bl	800cb90 <LL_LPUART_SetPrescaler>
  }

  return (status);
 800cd46:	230f      	movs	r3, #15
 800cd48:	18fb      	adds	r3, r7, r3
 800cd4a:	781b      	ldrb	r3, [r3, #0]
}
 800cd4c:	0018      	movs	r0, r3
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	b004      	add	sp, #16
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	efffe9f3 	.word	0xefffe9f3
 800cd58:	40008000 	.word	0x40008000
 800cd5c:	40008400 	.word	0x40008400

0800cd60 <LL_RCC_HSI_IsReady>:
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800cd64:	4b07      	ldr	r3, [pc, #28]	; (800cd84 <LL_RCC_HSI_IsReady+0x24>)
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	2380      	movs	r3, #128	; 0x80
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	401a      	ands	r2, r3
 800cd6e:	2380      	movs	r3, #128	; 0x80
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d101      	bne.n	800cd7a <LL_RCC_HSI_IsReady+0x1a>
 800cd76:	2301      	movs	r3, #1
 800cd78:	e000      	b.n	800cd7c <LL_RCC_HSI_IsReady+0x1c>
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	46c0      	nop			; (mov r8, r8)
 800cd84:	40021000 	.word	0x40021000

0800cd88 <LL_RCC_LSE_IsReady>:
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cd8c:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <LL_RCC_LSE_IsReady+0x1c>)
 800cd8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd90:	2202      	movs	r2, #2
 800cd92:	4013      	ands	r3, r2
 800cd94:	2b02      	cmp	r3, #2
 800cd96:	d101      	bne.n	800cd9c <LL_RCC_LSE_IsReady+0x14>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e000      	b.n	800cd9e <LL_RCC_LSE_IsReady+0x16>
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	0018      	movs	r0, r3
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	40021000 	.word	0x40021000

0800cda8 <LL_RCC_GetSysClkSource>:
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800cdac:	4b03      	ldr	r3, [pc, #12]	; (800cdbc <LL_RCC_GetSysClkSource+0x14>)
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	2238      	movs	r2, #56	; 0x38
 800cdb2:	4013      	ands	r3, r2
}
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	46c0      	nop			; (mov r8, r8)
 800cdbc:	40021000 	.word	0x40021000

0800cdc0 <LL_RCC_GetAHBPrescaler>:
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800cdc4:	4b03      	ldr	r3, [pc, #12]	; (800cdd4 <LL_RCC_GetAHBPrescaler+0x14>)
 800cdc6:	689a      	ldr	r2, [r3, #8]
 800cdc8:	23f0      	movs	r3, #240	; 0xf0
 800cdca:	011b      	lsls	r3, r3, #4
 800cdcc:	4013      	ands	r3, r2
}
 800cdce:	0018      	movs	r0, r3
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	40021000 	.word	0x40021000

0800cdd8 <LL_RCC_GetAPB1Prescaler>:
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800cddc:	4b03      	ldr	r3, [pc, #12]	; (800cdec <LL_RCC_GetAPB1Prescaler+0x14>)
 800cdde:	689a      	ldr	r2, [r3, #8]
 800cde0:	23e0      	movs	r3, #224	; 0xe0
 800cde2:	01db      	lsls	r3, r3, #7
 800cde4:	4013      	ands	r3, r2
}
 800cde6:	0018      	movs	r0, r3
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	40021000 	.word	0x40021000

0800cdf0 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx) | (LPUARTx << 16U));
 800cdf8:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <LL_RCC_GetLPUARTClockSource+0x20>)
 800cdfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	401a      	ands	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	041b      	lsls	r3, r3, #16
 800ce04:	4313      	orrs	r3, r2
}
 800ce06:	0018      	movs	r0, r3
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	b002      	add	sp, #8
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	40021000 	.word	0x40021000

0800ce14 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800ce18:	4b03      	ldr	r3, [pc, #12]	; (800ce28 <LL_RCC_PLL_GetN+0x14>)
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	0a1b      	lsrs	r3, r3, #8
 800ce1e:	227f      	movs	r2, #127	; 0x7f
 800ce20:	4013      	ands	r3, r2
}
 800ce22:	0018      	movs	r0, r3
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	40021000 	.word	0x40021000

0800ce2c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ce30:	4b03      	ldr	r3, [pc, #12]	; (800ce40 <LL_RCC_PLL_GetR+0x14>)
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	0f5b      	lsrs	r3, r3, #29
 800ce36:	075b      	lsls	r3, r3, #29
}
 800ce38:	0018      	movs	r0, r3
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	46c0      	nop			; (mov r8, r8)
 800ce40:	40021000 	.word	0x40021000

0800ce44 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ce48:	4b03      	ldr	r3, [pc, #12]	; (800ce58 <LL_RCC_PLL_GetMainSource+0x14>)
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	2203      	movs	r2, #3
 800ce4e:	4013      	ands	r3, r2
}
 800ce50:	0018      	movs	r0, r3
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	46c0      	nop			; (mov r8, r8)
 800ce58:	40021000 	.word	0x40021000

0800ce5c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ce60:	4b03      	ldr	r3, [pc, #12]	; (800ce70 <LL_RCC_PLL_GetDivider+0x14>)
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	2270      	movs	r2, #112	; 0x70
 800ce66:	4013      	ands	r3, r2
}
 800ce68:	0018      	movs	r0, r3
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	46c0      	nop			; (mov r8, r8)
 800ce70:	40021000 	.word	0x40021000

0800ce74 <LL_RCC_GetLPUARTClockFreq>:
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  * (*) feature not available on all devices
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  if (LPUARTxSource == LL_RCC_LPUART1_CLKSOURCE)
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	23c0      	movs	r3, #192	; 0xc0
 800ce84:	011b      	lsls	r3, r3, #4
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d134      	bne.n	800cef4 <LL_RCC_GetLPUARTClockFreq+0x80>
  {
    /* LPUART1CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	f7ff ffaf 	bl	800cdf0 <LL_RCC_GetLPUARTClockSource>
 800ce92:	0003      	movs	r3, r0
 800ce94:	4a3a      	ldr	r2, [pc, #232]	; (800cf80 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d016      	beq.n	800cec8 <LL_RCC_GetLPUARTClockFreq+0x54>
 800ce9a:	4a39      	ldr	r2, [pc, #228]	; (800cf80 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d81c      	bhi.n	800ceda <LL_RCC_GetLPUARTClockFreq+0x66>
 800cea0:	4a38      	ldr	r2, [pc, #224]	; (800cf84 <LL_RCC_GetLPUARTClockFreq+0x110>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d003      	beq.n	800ceae <LL_RCC_GetLPUARTClockFreq+0x3a>
 800cea6:	4a38      	ldr	r2, [pc, #224]	; (800cf88 <LL_RCC_GetLPUARTClockFreq+0x114>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d005      	beq.n	800ceb8 <LL_RCC_GetLPUARTClockFreq+0x44>
 800ceac:	e015      	b.n	800ceda <LL_RCC_GetLPUARTClockFreq+0x66>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 800ceae:	f000 f875 	bl	800cf9c <RCC_GetSystemClockFreq>
 800ceb2:	0003      	movs	r3, r0
 800ceb4:	60fb      	str	r3, [r7, #12]
        break;
 800ceb6:	e05e      	b.n	800cf76 <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800ceb8:	f7ff ff52 	bl	800cd60 <LL_RCC_HSI_IsReady>
 800cebc:	0003      	movs	r3, r0
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d152      	bne.n	800cf68 <LL_RCC_GetLPUARTClockFreq+0xf4>
        {
          lpuart_frequency = HSI_VALUE;
 800cec2:	4b32      	ldr	r3, [pc, #200]	; (800cf8c <LL_RCC_GetLPUARTClockFreq+0x118>)
 800cec4:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cec6:	e04f      	b.n	800cf68 <LL_RCC_GetLPUARTClockFreq+0xf4>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800cec8:	f7ff ff5e 	bl	800cd88 <LL_RCC_LSE_IsReady>
 800cecc:	0003      	movs	r3, r0
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d14c      	bne.n	800cf6c <LL_RCC_GetLPUARTClockFreq+0xf8>
        {
          lpuart_frequency = LSE_VALUE;
 800ced2:	2380      	movs	r3, #128	; 0x80
 800ced4:	021b      	lsls	r3, r3, #8
 800ced6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ced8:	e048      	b.n	800cf6c <LL_RCC_GetLPUARTClockFreq+0xf8>

      case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ceda:	f000 f85f 	bl	800cf9c <RCC_GetSystemClockFreq>
 800cede:	0003      	movs	r3, r0
 800cee0:	0018      	movs	r0, r3
 800cee2:	f000 f889 	bl	800cff8 <RCC_GetHCLKClockFreq>
 800cee6:	0003      	movs	r3, r0
 800cee8:	0018      	movs	r0, r3
 800ceea:	f000 f89d 	bl	800d028 <RCC_GetPCLK1ClockFreq>
 800ceee:	0003      	movs	r3, r0
 800cef0:	60fb      	str	r3, [r7, #12]
        break;
 800cef2:	e040      	b.n	800cf76 <LL_RCC_GetLPUARTClockFreq+0x102>
    }
  }
#if defined(LPUART2)
  else if (LPUARTxSource == LL_RCC_LPUART2_CLKSOURCE)
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	23c0      	movs	r3, #192	; 0xc0
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d13b      	bne.n	800cf76 <LL_RCC_GetLPUARTClockFreq+0x102>
  {
    /* LPUART2CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	0018      	movs	r0, r3
 800cf02:	f7ff ff75 	bl	800cdf0 <LL_RCC_GetLPUARTClockSource>
 800cf06:	0003      	movs	r3, r0
 800cf08:	4a21      	ldr	r2, [pc, #132]	; (800cf90 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d016      	beq.n	800cf3c <LL_RCC_GetLPUARTClockFreq+0xc8>
 800cf0e:	4a20      	ldr	r2, [pc, #128]	; (800cf90 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d81c      	bhi.n	800cf4e <LL_RCC_GetLPUARTClockFreq+0xda>
 800cf14:	4a1f      	ldr	r2, [pc, #124]	; (800cf94 <LL_RCC_GetLPUARTClockFreq+0x120>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d003      	beq.n	800cf22 <LL_RCC_GetLPUARTClockFreq+0xae>
 800cf1a:	4a1f      	ldr	r2, [pc, #124]	; (800cf98 <LL_RCC_GetLPUARTClockFreq+0x124>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d005      	beq.n	800cf2c <LL_RCC_GetLPUARTClockFreq+0xb8>
 800cf20:	e015      	b.n	800cf4e <LL_RCC_GetLPUARTClockFreq+0xda>
    {
      case LL_RCC_LPUART2_CLKSOURCE_SYSCLK: /* LPUART2 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 800cf22:	f000 f83b 	bl	800cf9c <RCC_GetSystemClockFreq>
 800cf26:	0003      	movs	r3, r0
 800cf28:	60fb      	str	r3, [r7, #12]
        break;
 800cf2a:	e024      	b.n	800cf76 <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART2_CLKSOURCE_HSI:    /* LPUART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800cf2c:	f7ff ff18 	bl	800cd60 <LL_RCC_HSI_IsReady>
 800cf30:	0003      	movs	r3, r0
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d11c      	bne.n	800cf70 <LL_RCC_GetLPUARTClockFreq+0xfc>
        {
          lpuart_frequency = HSI_VALUE;
 800cf36:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <LL_RCC_GetLPUARTClockFreq+0x118>)
 800cf38:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cf3a:	e019      	b.n	800cf70 <LL_RCC_GetLPUARTClockFreq+0xfc>

      case LL_RCC_LPUART2_CLKSOURCE_LSE:    /* LPUART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800cf3c:	f7ff ff24 	bl	800cd88 <LL_RCC_LSE_IsReady>
 800cf40:	0003      	movs	r3, r0
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d116      	bne.n	800cf74 <LL_RCC_GetLPUARTClockFreq+0x100>
        {
          lpuart_frequency = LSE_VALUE;
 800cf46:	2380      	movs	r3, #128	; 0x80
 800cf48:	021b      	lsls	r3, r3, #8
 800cf4a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cf4c:	e012      	b.n	800cf74 <LL_RCC_GetLPUARTClockFreq+0x100>

      case LL_RCC_LPUART2_CLKSOURCE_PCLK1:  /* LPUART2 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cf4e:	f000 f825 	bl	800cf9c <RCC_GetSystemClockFreq>
 800cf52:	0003      	movs	r3, r0
 800cf54:	0018      	movs	r0, r3
 800cf56:	f000 f84f 	bl	800cff8 <RCC_GetHCLKClockFreq>
 800cf5a:	0003      	movs	r3, r0
 800cf5c:	0018      	movs	r0, r3
 800cf5e:	f000 f863 	bl	800d028 <RCC_GetPCLK1ClockFreq>
 800cf62:	0003      	movs	r3, r0
 800cf64:	60fb      	str	r3, [r7, #12]
        break;
 800cf66:	e006      	b.n	800cf76 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800cf68:	46c0      	nop			; (mov r8, r8)
 800cf6a:	e004      	b.n	800cf76 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800cf6c:	46c0      	nop			; (mov r8, r8)
 800cf6e:	e002      	b.n	800cf76 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800cf70:	46c0      	nop			; (mov r8, r8)
 800cf72:	e000      	b.n	800cf76 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800cf74:	46c0      	nop			; (mov r8, r8)
  else
  {
    /*nothing to do*/
  }

  return lpuart_frequency;
 800cf76:	68fb      	ldr	r3, [r7, #12]
}
 800cf78:	0018      	movs	r0, r3
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	b004      	add	sp, #16
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	0c000c00 	.word	0x0c000c00
 800cf84:	0c000400 	.word	0x0c000400
 800cf88:	0c000800 	.word	0x0c000800
 800cf8c:	00f42400 	.word	0x00f42400
 800cf90:	03000300 	.word	0x03000300
 800cf94:	03000100 	.word	0x03000100
 800cf98:	03000200 	.word	0x03000200

0800cf9c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800cfa2:	f7ff ff01 	bl	800cda8 <LL_RCC_GetSysClkSource>
 800cfa6:	0003      	movs	r3, r0
 800cfa8:	2b08      	cmp	r3, #8
 800cfaa:	d002      	beq.n	800cfb2 <RCC_GetSystemClockFreq+0x16>
 800cfac:	2b10      	cmp	r3, #16
 800cfae:	d003      	beq.n	800cfb8 <RCC_GetSystemClockFreq+0x1c>
 800cfb0:	e007      	b.n	800cfc2 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800cfb2:	4b0e      	ldr	r3, [pc, #56]	; (800cfec <RCC_GetSystemClockFreq+0x50>)
 800cfb4:	607b      	str	r3, [r7, #4]
      break;
 800cfb6:	e014      	b.n	800cfe2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800cfb8:	f000 f84c 	bl	800d054 <RCC_PLL_GetFreqDomain_SYS>
 800cfbc:	0003      	movs	r3, r0
 800cfbe:	607b      	str	r3, [r7, #4]
      break;
 800cfc0:	e00f      	b.n	800cfe2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800cfc2:	4b0b      	ldr	r3, [pc, #44]	; (800cff0 <RCC_GetSystemClockFreq+0x54>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	0adb      	lsrs	r3, r3, #11
 800cfc8:	2207      	movs	r2, #7
 800cfca:	4013      	ands	r3, r2
 800cfcc:	2201      	movs	r2, #1
 800cfce:	409a      	lsls	r2, r3
 800cfd0:	0013      	movs	r3, r2
 800cfd2:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	4807      	ldr	r0, [pc, #28]	; (800cff4 <RCC_GetSystemClockFreq+0x58>)
 800cfd8:	f7f9 f9c4 	bl	8006364 <__udivsi3>
 800cfdc:	0003      	movs	r3, r0
 800cfde:	607b      	str	r3, [r7, #4]
      break;
 800cfe0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800cfe2:	687b      	ldr	r3, [r7, #4]
}
 800cfe4:	0018      	movs	r0, r3
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	b002      	add	sp, #8
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	007a1200 	.word	0x007a1200
 800cff0:	40021000 	.word	0x40021000
 800cff4:	00f42400 	.word	0x00f42400

0800cff8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800d000:	f7ff fede 	bl	800cdc0 <LL_RCC_GetAHBPrescaler>
 800d004:	0003      	movs	r3, r0
 800d006:	0a1b      	lsrs	r3, r3, #8
 800d008:	220f      	movs	r2, #15
 800d00a:	401a      	ands	r2, r3
 800d00c:	4b05      	ldr	r3, [pc, #20]	; (800d024 <RCC_GetHCLKClockFreq+0x2c>)
 800d00e:	0092      	lsls	r2, r2, #2
 800d010:	58d3      	ldr	r3, [r2, r3]
 800d012:	221f      	movs	r2, #31
 800d014:	4013      	ands	r3, r2
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	40da      	lsrs	r2, r3
 800d01a:	0013      	movs	r3, r2
}
 800d01c:	0018      	movs	r0, r3
 800d01e:	46bd      	mov	sp, r7
 800d020:	b002      	add	sp, #8
 800d022:	bd80      	pop	{r7, pc}
 800d024:	0801a670 	.word	0x0801a670

0800d028 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800d030:	f7ff fed2 	bl	800cdd8 <LL_RCC_GetAPB1Prescaler>
 800d034:	0003      	movs	r3, r0
 800d036:	0b1a      	lsrs	r2, r3, #12
 800d038:	4b05      	ldr	r3, [pc, #20]	; (800d050 <RCC_GetPCLK1ClockFreq+0x28>)
 800d03a:	0092      	lsls	r2, r2, #2
 800d03c:	58d3      	ldr	r3, [r2, r3]
 800d03e:	221f      	movs	r2, #31
 800d040:	4013      	ands	r3, r2
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	40da      	lsrs	r2, r3
 800d046:	0013      	movs	r3, r2
}
 800d048:	0018      	movs	r0, r3
 800d04a:	46bd      	mov	sp, r7
 800d04c:	b002      	add	sp, #8
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	0801a6b0 	.word	0x0801a6b0

0800d054 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800d054:	b590      	push	{r4, r7, lr}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800d05a:	f7ff fef3 	bl	800ce44 <LL_RCC_PLL_GetMainSource>
 800d05e:	0003      	movs	r3, r0
 800d060:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b02      	cmp	r3, #2
 800d066:	d003      	beq.n	800d070 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d003      	beq.n	800d076 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800d06e:	e005      	b.n	800d07c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800d070:	4b13      	ldr	r3, [pc, #76]	; (800d0c0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800d072:	607b      	str	r3, [r7, #4]
      break;
 800d074:	e005      	b.n	800d082 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800d076:	4b13      	ldr	r3, [pc, #76]	; (800d0c4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800d078:	607b      	str	r3, [r7, #4]
      break;
 800d07a:	e002      	b.n	800d082 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800d07c:	4b10      	ldr	r3, [pc, #64]	; (800d0c0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800d07e:	607b      	str	r3, [r7, #4]
      break;
 800d080:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800d082:	f7ff fec7 	bl	800ce14 <LL_RCC_PLL_GetN>
 800d086:	0002      	movs	r2, r0
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4353      	muls	r3, r2
 800d08c:	001c      	movs	r4, r3
 800d08e:	f7ff fee5 	bl	800ce5c <LL_RCC_PLL_GetDivider>
 800d092:	0003      	movs	r3, r0
 800d094:	091b      	lsrs	r3, r3, #4
 800d096:	3301      	adds	r3, #1
 800d098:	0019      	movs	r1, r3
 800d09a:	0020      	movs	r0, r4
 800d09c:	f7f9 f962 	bl	8006364 <__udivsi3>
 800d0a0:	0003      	movs	r3, r0
 800d0a2:	001c      	movs	r4, r3
 800d0a4:	f7ff fec2 	bl	800ce2c <LL_RCC_PLL_GetR>
 800d0a8:	0003      	movs	r3, r0
 800d0aa:	0f5b      	lsrs	r3, r3, #29
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	0019      	movs	r1, r3
 800d0b0:	0020      	movs	r0, r4
 800d0b2:	f7f9 f957 	bl	8006364 <__udivsi3>
 800d0b6:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	b003      	add	sp, #12
 800d0be:	bd90      	pop	{r4, r7, pc}
 800d0c0:	00f42400 	.word	0x00f42400
 800d0c4:	007a1200 	.word	0x007a1200

0800d0c8 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	085a      	lsrs	r2, r3, #1
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	601a      	str	r2, [r3, #0]
}
 800d0dc:	46c0      	nop			; (mov r8, r8)
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	b002      	add	sp, #8
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <LL_APB1_GRP1_EnableClock>:
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800d0ec:	4b07      	ldr	r3, [pc, #28]	; (800d10c <LL_APB1_GRP1_EnableClock+0x28>)
 800d0ee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d0f0:	4b06      	ldr	r3, [pc, #24]	; (800d10c <LL_APB1_GRP1_EnableClock+0x28>)
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	430a      	orrs	r2, r1
 800d0f6:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800d0f8:	4b04      	ldr	r3, [pc, #16]	; (800d10c <LL_APB1_GRP1_EnableClock+0x28>)
 800d0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	4013      	ands	r3, r2
 800d100:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d102:	68fb      	ldr	r3, [r7, #12]
}
 800d104:	46c0      	nop			; (mov r8, r8)
 800d106:	46bd      	mov	sp, r7
 800d108:	b004      	add	sp, #16
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	40021000 	.word	0x40021000

0800d110 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a16      	ldr	r2, [pc, #88]	; (800d178 <LL_UCPD_Init+0x68>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d104      	bne.n	800d12c <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800d122:	2380      	movs	r3, #128	; 0x80
 800d124:	049b      	lsls	r3, r3, #18
 800d126:	0018      	movs	r0, r3
 800d128:	f7ff ffdc 	bl	800d0e4 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	4a13      	ldr	r2, [pc, #76]	; (800d17c <LL_UCPD_Init+0x6c>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d104      	bne.n	800d13e <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800d134:	2380      	movs	r3, #128	; 0x80
 800d136:	04db      	lsls	r3, r3, #19
 800d138:	0018      	movs	r0, r3
 800d13a:	f7ff ffd3 	bl	800d0e4 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	0018      	movs	r0, r3
 800d142:	f7ff ffc1 	bl	800d0c8 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a0d      	ldr	r2, [pc, #52]	; (800d180 <LL_UCPD_Init+0x70>)
 800d14c:	401a      	ands	r2, r3
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	6819      	ldr	r1, [r3, #0]
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	02db      	lsls	r3, r3, #11
 800d158:	4319      	orrs	r1, r3
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	019b      	lsls	r3, r3, #6
 800d160:	4319      	orrs	r1, r3
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	430b      	orrs	r3, r1
 800d168:	431a      	orrs	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	0018      	movs	r0, r3
 800d172:	46bd      	mov	sp, r7
 800d174:	b002      	add	sp, #8
 800d176:	bd80      	pop	{r7, pc}
 800d178:	4000a000 	.word	0x4000a000
 800d17c:	4000a400 	.word	0x4000a400
 800d180:	fff10000 	.word	0xfff10000

0800d184 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2280      	movs	r2, #128	; 0x80
 800d190:	0292      	lsls	r2, r2, #10
 800d192:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2207      	movs	r2, #7
 800d198:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2210      	movs	r2, #16
 800d19e:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	220d      	movs	r2, #13
 800d1a4:	60da      	str	r2, [r3, #12]
}
 800d1a6:	46c0      	nop			; (mov r8, r8)
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	b002      	add	sp, #8
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	af00      	add	r7, sp, #0
    'T', 'R', 'A', 'C', 'E', ' ', 'O', 'V', 'E', 'R', '_', 'F', 'L', 'O', 'W', /* Data */
    TLV_EOF, TLV_EOF, TLV_EOF, TLV_EOF                                         /* Buffer end */
  };

  /* initialize tracer module */
  TRACER_EMB_Init();
 800d1b4:	f00a ff8a 	bl	80180cc <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 800d1b8:	4b06      	ldr	r3, [pc, #24]	; (800d1d4 <USBPD_TRACE_Init+0x24>)
 800d1ba:	2103      	movs	r1, #3
 800d1bc:	0018      	movs	r0, r3
 800d1be:	f7f4 f9db 	bl	8001578 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, (uint8_t)sizeof(OverFlow_String));
 800d1c2:	4b05      	ldr	r3, [pc, #20]	; (800d1d8 <USBPD_TRACE_Init+0x28>)
 800d1c4:	2123      	movs	r1, #35	; 0x23
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	f00b f80c 	bl	80181e4 <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif /* _TRACE */
}
 800d1cc:	46c0      	nop			; (mov r8, r8)
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	46c0      	nop			; (mov r8, r8)
 800d1d4:	0800d1dd 	.word	0x0800d1dd
 800d1d8:	0801a77c 	.word	0x0801a77c

0800d1dc <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 800d1dc:	b5b0      	push	{r4, r5, r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	0004      	movs	r4, r0
 800d1e4:	0008      	movs	r0, r1
 800d1e6:	0011      	movs	r1, r2
 800d1e8:	603b      	str	r3, [r7, #0]
 800d1ea:	1dfb      	adds	r3, r7, #7
 800d1ec:	1c22      	adds	r2, r4, #0
 800d1ee:	701a      	strb	r2, [r3, #0]
 800d1f0:	1dbb      	adds	r3, r7, #6
 800d1f2:	1c02      	adds	r2, r0, #0
 800d1f4:	701a      	strb	r2, [r3, #0]
 800d1f6:	1d7b      	adds	r3, r7, #5
 800d1f8:	1c0a      	adds	r2, r1, #0
 800d1fa:	701a      	strb	r2, [r3, #0]
  uint32_t _time;
  int32_t _allocation;
  uint16_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 800d1fc:	f7fc fe52 	bl	8009ea4 <HAL_GetTick>
 800d200:	0003      	movs	r3, r0
 800d202:	613b      	str	r3, [r7, #16]

  TRACER_EMB_Lock();
 800d204:	f00b f852 	bl	80182ac <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _allocation = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE +
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	3314      	adds	r3, #20
 800d20c:	0018      	movs	r0, r3
 800d20e:	f00b f8e7 	bl	80183e0 <TRACER_EMB_AllocateBufer>
 800d212:	0003      	movs	r3, r0
 800d214:	60fb      	str	r3, [r7, #12]
                                         TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);

  /* Check allocation */
  if (_allocation  != -1)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	3301      	adds	r3, #1
 800d21a:	d100      	bne.n	800d21e <USBPD_TRACE_Add+0x42>
 800d21c:	e11d      	b.n	800d45a <USBPD_TRACE_Add+0x27e>
  {
    uint16_t _writepos = (uint16_t)_allocation;
 800d21e:	2314      	movs	r3, #20
 800d220:	18fb      	adds	r3, r7, r3
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	801a      	strh	r2, [r3, #0]

    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800d226:	2316      	movs	r3, #22
 800d228:	18fb      	adds	r3, r7, r3
 800d22a:	2200      	movs	r2, #0
 800d22c:	801a      	strh	r2, [r3, #0]
 800d22e:	e011      	b.n	800d254 <USBPD_TRACE_Add+0x78>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 800d230:	2414      	movs	r4, #20
 800d232:	193b      	adds	r3, r7, r4
 800d234:	881b      	ldrh	r3, [r3, #0]
 800d236:	21fd      	movs	r1, #253	; 0xfd
 800d238:	0018      	movs	r0, r3
 800d23a:	f00a ffad 	bl	8018198 <TRACER_EMB_WriteData>
 800d23e:	193b      	adds	r3, r7, r4
 800d240:	193a      	adds	r2, r7, r4
 800d242:	8812      	ldrh	r2, [r2, #0]
 800d244:	3201      	adds	r2, #1
 800d246:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800d248:	2116      	movs	r1, #22
 800d24a:	187b      	adds	r3, r7, r1
 800d24c:	881a      	ldrh	r2, [r3, #0]
 800d24e:	187b      	adds	r3, r7, r1
 800d250:	3201      	adds	r2, #1
 800d252:	801a      	strh	r2, [r3, #0]
 800d254:	2516      	movs	r5, #22
 800d256:	197b      	adds	r3, r7, r5
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	d9e8      	bls.n	800d230 <USBPD_TRACE_Add+0x54>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 800d25e:	1dbb      	adds	r3, r7, #6
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	3301      	adds	r3, #1
 800d264:	b2db      	uxtb	r3, r3
 800d266:	015b      	lsls	r3, r3, #5
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2212      	movs	r2, #18
 800d26c:	4313      	orrs	r3, r2
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	2414      	movs	r4, #20
 800d272:	193b      	adds	r3, r7, r4
 800d274:	881b      	ldrh	r3, [r3, #0]
 800d276:	0011      	movs	r1, r2
 800d278:	0018      	movs	r0, r3
 800d27a:	f00a ff8d 	bl	8018198 <TRACER_EMB_WriteData>
 800d27e:	0021      	movs	r1, r4
 800d280:	187b      	adds	r3, r7, r1
 800d282:	187a      	adds	r2, r7, r1
 800d284:	8812      	ldrh	r2, [r2, #0]
 800d286:	3201      	adds	r2, #1
 800d288:	801a      	strh	r2, [r3, #0]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 800d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28c:	3309      	adds	r3, #9
 800d28e:	0a1b      	lsrs	r3, r3, #8
 800d290:	b2da      	uxtb	r2, r3
 800d292:	000c      	movs	r4, r1
 800d294:	187b      	adds	r3, r7, r1
 800d296:	881b      	ldrh	r3, [r3, #0]
 800d298:	0011      	movs	r1, r2
 800d29a:	0018      	movs	r0, r3
 800d29c:	f00a ff7c 	bl	8018198 <TRACER_EMB_WriteData>
 800d2a0:	0021      	movs	r1, r4
 800d2a2:	187b      	adds	r3, r7, r1
 800d2a4:	187a      	adds	r2, r7, r1
 800d2a6:	8812      	ldrh	r2, [r2, #0]
 800d2a8:	3201      	adds	r2, #1
 800d2aa:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	3309      	adds	r3, #9
 800d2b2:	b2da      	uxtb	r2, r3
 800d2b4:	000c      	movs	r4, r1
 800d2b6:	187b      	adds	r3, r7, r1
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	0011      	movs	r1, r2
 800d2bc:	0018      	movs	r0, r3
 800d2be:	f00a ff6b 	bl	8018198 <TRACER_EMB_WriteData>
 800d2c2:	0021      	movs	r1, r4
 800d2c4:	187b      	adds	r3, r7, r1
 800d2c6:	187a      	adds	r2, r7, r1
 800d2c8:	8812      	ldrh	r2, [r2, #0]
 800d2ca:	3201      	adds	r2, #1
 800d2cc:	801a      	strh	r2, [r3, #0]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 800d2ce:	1dfb      	adds	r3, r7, #7
 800d2d0:	781a      	ldrb	r2, [r3, #0]
 800d2d2:	000c      	movs	r4, r1
 800d2d4:	187b      	adds	r3, r7, r1
 800d2d6:	881b      	ldrh	r3, [r3, #0]
 800d2d8:	0011      	movs	r1, r2
 800d2da:	0018      	movs	r0, r3
 800d2dc:	f00a ff5c 	bl	8018198 <TRACER_EMB_WriteData>
 800d2e0:	0021      	movs	r1, r4
 800d2e2:	187b      	adds	r3, r7, r1
 800d2e4:	187a      	adds	r2, r7, r1
 800d2e6:	8812      	ldrh	r2, [r2, #0]
 800d2e8:	3201      	adds	r2, #1
 800d2ea:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	000c      	movs	r4, r1
 800d2f2:	187b      	adds	r3, r7, r1
 800d2f4:	881b      	ldrh	r3, [r3, #0]
 800d2f6:	0011      	movs	r1, r2
 800d2f8:	0018      	movs	r0, r3
 800d2fa:	f00a ff4d 	bl	8018198 <TRACER_EMB_WriteData>
 800d2fe:	0021      	movs	r1, r4
 800d300:	187b      	adds	r3, r7, r1
 800d302:	187a      	adds	r2, r7, r1
 800d304:	8812      	ldrh	r2, [r2, #0]
 800d306:	3201      	adds	r2, #1
 800d308:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	0a1b      	lsrs	r3, r3, #8
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	000c      	movs	r4, r1
 800d312:	187b      	adds	r3, r7, r1
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	0011      	movs	r1, r2
 800d318:	0018      	movs	r0, r3
 800d31a:	f00a ff3d 	bl	8018198 <TRACER_EMB_WriteData>
 800d31e:	0021      	movs	r1, r4
 800d320:	187b      	adds	r3, r7, r1
 800d322:	187a      	adds	r2, r7, r1
 800d324:	8812      	ldrh	r2, [r2, #0]
 800d326:	3201      	adds	r2, #1
 800d328:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	0c1b      	lsrs	r3, r3, #16
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	000c      	movs	r4, r1
 800d332:	187b      	adds	r3, r7, r1
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	0011      	movs	r1, r2
 800d338:	0018      	movs	r0, r3
 800d33a:	f00a ff2d 	bl	8018198 <TRACER_EMB_WriteData>
 800d33e:	0021      	movs	r1, r4
 800d340:	187b      	adds	r3, r7, r1
 800d342:	187a      	adds	r2, r7, r1
 800d344:	8812      	ldrh	r2, [r2, #0]
 800d346:	3201      	adds	r2, #1
 800d348:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	0e1b      	lsrs	r3, r3, #24
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	000c      	movs	r4, r1
 800d352:	187b      	adds	r3, r7, r1
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	0011      	movs	r1, r2
 800d358:	0018      	movs	r0, r3
 800d35a:	f00a ff1d 	bl	8018198 <TRACER_EMB_WriteData>
 800d35e:	0021      	movs	r1, r4
 800d360:	187b      	adds	r3, r7, r1
 800d362:	187a      	adds	r2, r7, r1
 800d364:	8812      	ldrh	r2, [r2, #0]
 800d366:	3201      	adds	r2, #1
 800d368:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 800d36a:	1dbb      	adds	r3, r7, #6
 800d36c:	781a      	ldrb	r2, [r3, #0]
 800d36e:	000c      	movs	r4, r1
 800d370:	187b      	adds	r3, r7, r1
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	0011      	movs	r1, r2
 800d376:	0018      	movs	r0, r3
 800d378:	f00a ff0e 	bl	8018198 <TRACER_EMB_WriteData>
 800d37c:	0021      	movs	r1, r4
 800d37e:	187b      	adds	r3, r7, r1
 800d380:	187a      	adds	r2, r7, r1
 800d382:	8812      	ldrh	r2, [r2, #0]
 800d384:	3201      	adds	r2, #1
 800d386:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 800d388:	1d7b      	adds	r3, r7, #5
 800d38a:	781a      	ldrb	r2, [r3, #0]
 800d38c:	000c      	movs	r4, r1
 800d38e:	187b      	adds	r3, r7, r1
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	0011      	movs	r1, r2
 800d394:	0018      	movs	r0, r3
 800d396:	f00a feff 	bl	8018198 <TRACER_EMB_WriteData>
 800d39a:	0021      	movs	r1, r4
 800d39c:	187b      	adds	r3, r7, r1
 800d39e:	187a      	adds	r2, r7, r1
 800d3a0:	8812      	ldrh	r2, [r2, #0]
 800d3a2:	3201      	adds	r2, #1
 800d3a4:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 800d3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a8:	0a1b      	lsrs	r3, r3, #8
 800d3aa:	b2da      	uxtb	r2, r3
 800d3ac:	000c      	movs	r4, r1
 800d3ae:	187b      	adds	r3, r7, r1
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	0011      	movs	r1, r2
 800d3b4:	0018      	movs	r0, r3
 800d3b6:	f00a feef 	bl	8018198 <TRACER_EMB_WriteData>
 800d3ba:	0021      	movs	r1, r4
 800d3bc:	187b      	adds	r3, r7, r1
 800d3be:	187a      	adds	r2, r7, r1
 800d3c0:	8812      	ldrh	r2, [r2, #0]
 800d3c2:	3201      	adds	r2, #1
 800d3c4:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 800d3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	000c      	movs	r4, r1
 800d3cc:	187b      	adds	r3, r7, r1
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	0011      	movs	r1, r2
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	f00a fee0 	bl	8018198 <TRACER_EMB_WriteData>
 800d3d8:	193b      	adds	r3, r7, r4
 800d3da:	193a      	adds	r2, r7, r4
 800d3dc:	8812      	ldrh	r2, [r2, #0]
 800d3de:	3201      	adds	r2, #1
 800d3e0:	801a      	strh	r2, [r3, #0]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 800d3e2:	197b      	adds	r3, r7, r5
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	801a      	strh	r2, [r3, #0]
 800d3e8:	e016      	b.n	800d418 <USBPD_TRACE_Add+0x23c>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 800d3ea:	2416      	movs	r4, #22
 800d3ec:	193b      	adds	r3, r7, r4
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	18d3      	adds	r3, r2, r3
 800d3f4:	781a      	ldrb	r2, [r3, #0]
 800d3f6:	2514      	movs	r5, #20
 800d3f8:	197b      	adds	r3, r7, r5
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	0011      	movs	r1, r2
 800d3fe:	0018      	movs	r0, r3
 800d400:	f00a feca 	bl	8018198 <TRACER_EMB_WriteData>
 800d404:	197b      	adds	r3, r7, r5
 800d406:	197a      	adds	r2, r7, r5
 800d408:	8812      	ldrh	r2, [r2, #0]
 800d40a:	3201      	adds	r2, #1
 800d40c:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < Size; index++)
 800d40e:	193b      	adds	r3, r7, r4
 800d410:	881a      	ldrh	r2, [r3, #0]
 800d412:	193b      	adds	r3, r7, r4
 800d414:	3201      	adds	r2, #1
 800d416:	801a      	strh	r2, [r3, #0]
 800d418:	2116      	movs	r1, #22
 800d41a:	187b      	adds	r3, r7, r1
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d420:	429a      	cmp	r2, r3
 800d422:	d8e2      	bhi.n	800d3ea <USBPD_TRACE_Add+0x20e>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800d424:	187b      	adds	r3, r7, r1
 800d426:	2200      	movs	r2, #0
 800d428:	801a      	strh	r2, [r3, #0]
 800d42a:	e011      	b.n	800d450 <USBPD_TRACE_Add+0x274>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 800d42c:	2414      	movs	r4, #20
 800d42e:	193b      	adds	r3, r7, r4
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	21a5      	movs	r1, #165	; 0xa5
 800d434:	0018      	movs	r0, r3
 800d436:	f00a feaf 	bl	8018198 <TRACER_EMB_WriteData>
 800d43a:	193b      	adds	r3, r7, r4
 800d43c:	193a      	adds	r2, r7, r4
 800d43e:	8812      	ldrh	r2, [r2, #0]
 800d440:	3201      	adds	r2, #1
 800d442:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800d444:	2116      	movs	r1, #22
 800d446:	187b      	adds	r3, r7, r1
 800d448:	881a      	ldrh	r2, [r3, #0]
 800d44a:	187b      	adds	r3, r7, r1
 800d44c:	3201      	adds	r2, #1
 800d44e:	801a      	strh	r2, [r3, #0]
 800d450:	2316      	movs	r3, #22
 800d452:	18fb      	adds	r3, r7, r3
 800d454:	881b      	ldrh	r3, [r3, #0]
 800d456:	2b03      	cmp	r3, #3
 800d458:	d9e8      	bls.n	800d42c <USBPD_TRACE_Add+0x250>
    }
  }

  TRACER_EMB_UnLock();
 800d45a:	f00a ff45 	bl	80182e8 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 800d45e:	f00a ff61 	bl	8018324 <TRACER_EMB_SendData>
#else
  return;
#endif /* _TRACE */
}
 800d462:	46c0      	nop			; (mov r8, r8)
 800d464:	46bd      	mov	sp, r7
 800d466:	b006      	add	sp, #24
 800d468:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d46c <__NVIC_EnableIRQ>:
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	0002      	movs	r2, r0
 800d474:	1dfb      	adds	r3, r7, #7
 800d476:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d478:	1dfb      	adds	r3, r7, #7
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b7f      	cmp	r3, #127	; 0x7f
 800d47e:	d809      	bhi.n	800d494 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d480:	1dfb      	adds	r3, r7, #7
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	001a      	movs	r2, r3
 800d486:	231f      	movs	r3, #31
 800d488:	401a      	ands	r2, r3
 800d48a:	4b04      	ldr	r3, [pc, #16]	; (800d49c <__NVIC_EnableIRQ+0x30>)
 800d48c:	2101      	movs	r1, #1
 800d48e:	4091      	lsls	r1, r2
 800d490:	000a      	movs	r2, r1
 800d492:	601a      	str	r2, [r3, #0]
}
 800d494:	46c0      	nop			; (mov r8, r8)
 800d496:	46bd      	mov	sp, r7
 800d498:	b002      	add	sp, #8
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	e000e100 	.word	0xe000e100

0800d4a0 <__NVIC_SetPriority>:
{
 800d4a0:	b590      	push	{r4, r7, lr}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	0002      	movs	r2, r0
 800d4a8:	6039      	str	r1, [r7, #0]
 800d4aa:	1dfb      	adds	r3, r7, #7
 800d4ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d4ae:	1dfb      	adds	r3, r7, #7
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	2b7f      	cmp	r3, #127	; 0x7f
 800d4b4:	d828      	bhi.n	800d508 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d4b6:	4a2f      	ldr	r2, [pc, #188]	; (800d574 <__NVIC_SetPriority+0xd4>)
 800d4b8:	1dfb      	adds	r3, r7, #7
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	b25b      	sxtb	r3, r3
 800d4be:	089b      	lsrs	r3, r3, #2
 800d4c0:	33c0      	adds	r3, #192	; 0xc0
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	589b      	ldr	r3, [r3, r2]
 800d4c6:	1dfa      	adds	r2, r7, #7
 800d4c8:	7812      	ldrb	r2, [r2, #0]
 800d4ca:	0011      	movs	r1, r2
 800d4cc:	2203      	movs	r2, #3
 800d4ce:	400a      	ands	r2, r1
 800d4d0:	00d2      	lsls	r2, r2, #3
 800d4d2:	21ff      	movs	r1, #255	; 0xff
 800d4d4:	4091      	lsls	r1, r2
 800d4d6:	000a      	movs	r2, r1
 800d4d8:	43d2      	mvns	r2, r2
 800d4da:	401a      	ands	r2, r3
 800d4dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	019b      	lsls	r3, r3, #6
 800d4e2:	22ff      	movs	r2, #255	; 0xff
 800d4e4:	401a      	ands	r2, r3
 800d4e6:	1dfb      	adds	r3, r7, #7
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	0018      	movs	r0, r3
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	4003      	ands	r3, r0
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d4f4:	481f      	ldr	r0, [pc, #124]	; (800d574 <__NVIC_SetPriority+0xd4>)
 800d4f6:	1dfb      	adds	r3, r7, #7
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	b25b      	sxtb	r3, r3
 800d4fc:	089b      	lsrs	r3, r3, #2
 800d4fe:	430a      	orrs	r2, r1
 800d500:	33c0      	adds	r3, #192	; 0xc0
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	501a      	str	r2, [r3, r0]
}
 800d506:	e031      	b.n	800d56c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d508:	4a1b      	ldr	r2, [pc, #108]	; (800d578 <__NVIC_SetPriority+0xd8>)
 800d50a:	1dfb      	adds	r3, r7, #7
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	0019      	movs	r1, r3
 800d510:	230f      	movs	r3, #15
 800d512:	400b      	ands	r3, r1
 800d514:	3b08      	subs	r3, #8
 800d516:	089b      	lsrs	r3, r3, #2
 800d518:	3306      	adds	r3, #6
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	18d3      	adds	r3, r2, r3
 800d51e:	3304      	adds	r3, #4
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	1dfa      	adds	r2, r7, #7
 800d524:	7812      	ldrb	r2, [r2, #0]
 800d526:	0011      	movs	r1, r2
 800d528:	2203      	movs	r2, #3
 800d52a:	400a      	ands	r2, r1
 800d52c:	00d2      	lsls	r2, r2, #3
 800d52e:	21ff      	movs	r1, #255	; 0xff
 800d530:	4091      	lsls	r1, r2
 800d532:	000a      	movs	r2, r1
 800d534:	43d2      	mvns	r2, r2
 800d536:	401a      	ands	r2, r3
 800d538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	019b      	lsls	r3, r3, #6
 800d53e:	22ff      	movs	r2, #255	; 0xff
 800d540:	401a      	ands	r2, r3
 800d542:	1dfb      	adds	r3, r7, #7
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	0018      	movs	r0, r3
 800d548:	2303      	movs	r3, #3
 800d54a:	4003      	ands	r3, r0
 800d54c:	00db      	lsls	r3, r3, #3
 800d54e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d550:	4809      	ldr	r0, [pc, #36]	; (800d578 <__NVIC_SetPriority+0xd8>)
 800d552:	1dfb      	adds	r3, r7, #7
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	001c      	movs	r4, r3
 800d558:	230f      	movs	r3, #15
 800d55a:	4023      	ands	r3, r4
 800d55c:	3b08      	subs	r3, #8
 800d55e:	089b      	lsrs	r3, r3, #2
 800d560:	430a      	orrs	r2, r1
 800d562:	3306      	adds	r3, #6
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	18c3      	adds	r3, r0, r3
 800d568:	3304      	adds	r3, #4
 800d56a:	601a      	str	r2, [r3, #0]
}
 800d56c:	46c0      	nop			; (mov r8, r8)
 800d56e:	46bd      	mov	sp, r7
 800d570:	b003      	add	sp, #12
 800d572:	bd90      	pop	{r4, r7, pc}
 800d574:	e000e100 	.word	0xe000e100
 800d578:	e000ed00 	.word	0xe000ed00

0800d57c <LL_UCPD_Enable>:
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2280      	movs	r2, #128	; 0x80
 800d58a:	0612      	lsls	r2, r2, #24
 800d58c:	431a      	orrs	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	601a      	str	r2, [r3, #0]
}
 800d592:	46c0      	nop			; (mov r8, r8)
 800d594:	46bd      	mov	sp, r7
 800d596:	b002      	add	sp, #8
 800d598:	bd80      	pop	{r7, pc}
	...

0800d59c <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a05      	ldr	r2, [pc, #20]	; (800d5c0 <LL_UCPD_SetRxOrderSet+0x24>)
 800d5ac:	401a      	ands	r2, r3
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	431a      	orrs	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	601a      	str	r2, [r3, #0]
}
 800d5b6:	46c0      	nop			; (mov r8, r8)
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	b002      	add	sp, #8
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	46c0      	nop			; (mov r8, r8)
 800d5c0:	e00fffff 	.word	0xe00fffff

0800d5c4 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	4a05      	ldr	r2, [pc, #20]	; (800d5e8 <LL_UCPD_SetccEnable+0x24>)
 800d5d4:	401a      	ands	r2, r3
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	431a      	orrs	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	60da      	str	r2, [r3, #12]
}
 800d5de:	46c0      	nop			; (mov r8, r8)
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	b002      	add	sp, #8
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	46c0      	nop			; (mov r8, r8)
 800d5e8:	fffff3ff 	.word	0xfffff3ff

0800d5ec <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	2280      	movs	r2, #128	; 0x80
 800d5fa:	0212      	lsls	r2, r2, #8
 800d5fc:	431a      	orrs	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	611a      	str	r2, [r3, #16]
}
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	46bd      	mov	sp, r7
 800d606:	b002      	add	sp, #8
 800d608:	bd80      	pop	{r7, pc}

0800d60a <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b082      	sub	sp, #8
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	2280      	movs	r2, #128	; 0x80
 800d618:	01d2      	lsls	r2, r2, #7
 800d61a:	431a      	orrs	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	611a      	str	r2, [r3, #16]
}
 800d620:	46c0      	nop			; (mov r8, r8)
 800d622:	46bd      	mov	sp, r7
 800d624:	b002      	add	sp, #8
 800d626:	bd80      	pop	{r7, pc}

0800d628 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800d628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d62a:	b08b      	sub	sp, #44	; 0x2c
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
 800d632:	603b      	str	r3, [r7, #0]
 800d634:	240f      	movs	r4, #15
 800d636:	193b      	adds	r3, r7, r4
 800d638:	1c02      	adds	r2, r0, #0
 800d63a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d63c:	193b      	adds	r3, r7, r4
 800d63e:	781a      	ldrb	r2, [r3, #0]
 800d640:	0013      	movs	r3, r2
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	189b      	adds	r3, r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4a7e      	ldr	r2, [pc, #504]	; (800d844 <CAD_Init+0x21c>)
 800d64a:	189b      	adds	r3, r3, r2
 800d64c:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800d64e:	193b      	adds	r3, r7, r4
 800d650:	781a      	ldrb	r2, [r3, #0]
 800d652:	497d      	ldr	r1, [pc, #500]	; (800d848 <CAD_Init+0x220>)
 800d654:	0013      	movs	r3, r2
 800d656:	00db      	lsls	r3, r3, #3
 800d658:	1a9b      	subs	r3, r3, r2
 800d65a:	00db      	lsls	r3, r3, #3
 800d65c:	18cb      	adds	r3, r1, r3
 800d65e:	3310      	adds	r3, #16
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800d664:	193b      	adds	r3, r7, r4
 800d666:	781a      	ldrb	r2, [r3, #0]
 800d668:	4977      	ldr	r1, [pc, #476]	; (800d848 <CAD_Init+0x220>)
 800d66a:	0013      	movs	r3, r2
 800d66c:	00db      	lsls	r3, r3, #3
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	00db      	lsls	r3, r3, #3
 800d672:	18cb      	adds	r3, r1, r3
 800d674:	330c      	adds	r3, #12
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800d67a:	193b      	adds	r3, r7, r4
 800d67c:	781a      	ldrb	r2, [r3, #0]
 800d67e:	4972      	ldr	r1, [pc, #456]	; (800d848 <CAD_Init+0x220>)
 800d680:	0013      	movs	r3, r2
 800d682:	00db      	lsls	r3, r3, #3
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	00db      	lsls	r3, r3, #3
 800d688:	18cb      	adds	r3, r1, r3
 800d68a:	330c      	adds	r3, #12
 800d68c:	6819      	ldr	r1, [r3, #0]
 800d68e:	193b      	adds	r3, r7, r4
 800d690:	781a      	ldrb	r2, [r3, #0]
 800d692:	486d      	ldr	r0, [pc, #436]	; (800d848 <CAD_Init+0x220>)
 800d694:	0013      	movs	r3, r2
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	1a9b      	subs	r3, r3, r2
 800d69a:	00db      	lsls	r3, r3, #3
 800d69c:	18c3      	adds	r3, r0, r3
 800d69e:	3310      	adds	r3, #16
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	794a      	ldrb	r2, [r1, #5]
 800d6a4:	0612      	lsls	r2, r2, #24
 800d6a6:	0f92      	lsrs	r2, r2, #30
 800d6a8:	b2d2      	uxtb	r2, r2
 800d6aa:	2103      	movs	r1, #3
 800d6ac:	400a      	ands	r2, r1
 800d6ae:	0010      	movs	r0, r2
 800d6b0:	789a      	ldrb	r2, [r3, #2]
 800d6b2:	2103      	movs	r1, #3
 800d6b4:	438a      	bics	r2, r1
 800d6b6:	1c11      	adds	r1, r2, #0
 800d6b8:	1c02      	adds	r2, r0, #0
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800d6be:	193b      	adds	r3, r7, r4
 800d6c0:	781a      	ldrb	r2, [r3, #0]
 800d6c2:	4961      	ldr	r1, [pc, #388]	; (800d848 <CAD_Init+0x220>)
 800d6c4:	0013      	movs	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	1a9b      	subs	r3, r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	18cb      	adds	r3, r1, r3
 800d6ce:	3310      	adds	r3, #16
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	789a      	ldrb	r2, [r3, #2]
 800d6d4:	210c      	movs	r1, #12
 800d6d6:	438a      	bics	r2, r1
 800d6d8:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	220c      	movs	r2, #12
 800d6de:	2100      	movs	r1, #0
 800d6e0:	0018      	movs	r0, r3
 800d6e2:	f00b fe39 	bl	8019358 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800d6e6:	193b      	adds	r3, r7, r4
 800d6e8:	781a      	ldrb	r2, [r3, #0]
 800d6ea:	4957      	ldr	r1, [pc, #348]	; (800d848 <CAD_Init+0x220>)
 800d6ec:	0013      	movs	r3, r2
 800d6ee:	00db      	lsls	r3, r3, #3
 800d6f0:	1a9b      	subs	r3, r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	18cb      	adds	r3, r1, r3
 800d6f6:	332c      	adds	r3, #44	; 0x2c
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800d6fc:	0025      	movs	r5, r4
 800d6fe:	193b      	adds	r3, r7, r4
 800d700:	781c      	ldrb	r4, [r3, #0]
 800d702:	197b      	adds	r3, r7, r5
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	0018      	movs	r0, r3
 800d708:	f000 fd9e 	bl	800e248 <USBPD_HW_GetUSPDInstance>
 800d70c:	0001      	movs	r1, r0
 800d70e:	4a4e      	ldr	r2, [pc, #312]	; (800d848 <CAD_Init+0x220>)
 800d710:	0023      	movs	r3, r4
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	1b1b      	subs	r3, r3, r4
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800d71a:	2614      	movs	r6, #20
 800d71c:	19bb      	adds	r3, r7, r6
 800d71e:	0018      	movs	r0, r3
 800d720:	f7ff fd30 	bl	800d184 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800d724:	002c      	movs	r4, r5
 800d726:	193b      	adds	r3, r7, r4
 800d728:	781a      	ldrb	r2, [r3, #0]
 800d72a:	4947      	ldr	r1, [pc, #284]	; (800d848 <CAD_Init+0x220>)
 800d72c:	0013      	movs	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	1a9b      	subs	r3, r3, r2
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	585b      	ldr	r3, [r3, r1]
 800d736:	19ba      	adds	r2, r7, r6
 800d738:	0011      	movs	r1, r2
 800d73a:	0018      	movs	r0, r3
 800d73c:	f7ff fce8 	bl	800d110 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800d740:	193b      	adds	r3, r7, r4
 800d742:	781a      	ldrb	r2, [r3, #0]
 800d744:	4940      	ldr	r1, [pc, #256]	; (800d848 <CAD_Init+0x220>)
 800d746:	0013      	movs	r3, r2
 800d748:	00db      	lsls	r3, r3, #3
 800d74a:	1a9b      	subs	r3, r3, r2
 800d74c:	00db      	lsls	r3, r3, #3
 800d74e:	585b      	ldr	r3, [r3, r1]
 800d750:	22f8      	movs	r2, #248	; 0xf8
 800d752:	0452      	lsls	r2, r2, #17
 800d754:	0011      	movs	r1, r2
 800d756:	0018      	movs	r0, r3
 800d758:	f7ff ff20 	bl	800d59c <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800d75c:	193b      	adds	r3, r7, r4
 800d75e:	781a      	ldrb	r2, [r3, #0]
 800d760:	4939      	ldr	r1, [pc, #228]	; (800d848 <CAD_Init+0x220>)
 800d762:	0013      	movs	r3, r2
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	1a9b      	subs	r3, r3, r2
 800d768:	00db      	lsls	r3, r3, #3
 800d76a:	585b      	ldr	r3, [r3, r1]
 800d76c:	22c0      	movs	r2, #192	; 0xc0
 800d76e:	0112      	lsls	r2, r2, #4
 800d770:	0011      	movs	r1, r2
 800d772:	0018      	movs	r0, r3
 800d774:	f7ff ff26 	bl	800d5c4 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800d778:	193b      	adds	r3, r7, r4
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	0018      	movs	r0, r3
 800d77e:	f7fb fa6d 	bl	8008c5c <BSP_USBPD_PWR_Init>

#if defined(TCPP0203_SUPPORT)
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
 800d782:	193b      	adds	r3, r7, r4
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	4a31      	ldr	r2, [pc, #196]	; (800d84c <CAD_Init+0x224>)
 800d788:	0011      	movs	r1, r2
 800d78a:	0018      	movs	r0, r3
 800d78c:	f7fb fdc0 	bl	8009310 <BSP_USBPD_PWR_RegisterVBUSDetectCallback>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800d790:	193b      	adds	r3, r7, r4
 800d792:	781a      	ldrb	r2, [r3, #0]
 800d794:	492c      	ldr	r1, [pc, #176]	; (800d848 <CAD_Init+0x220>)
 800d796:	0013      	movs	r3, r2
 800d798:	00db      	lsls	r3, r3, #3
 800d79a:	1a9b      	subs	r3, r3, r2
 800d79c:	00db      	lsls	r3, r3, #3
 800d79e:	585b      	ldr	r3, [r3, r1]
 800d7a0:	0018      	movs	r0, r3
 800d7a2:	f7ff feeb 	bl	800d57c <LL_UCPD_Enable>

#if defined(_SRC) || defined(_DRP)
  /* Initialize usbpd interrupt */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800d7a6:	0020      	movs	r0, r4
 800d7a8:	183b      	adds	r3, r7, r0
 800d7aa:	781a      	ldrb	r2, [r3, #0]
 800d7ac:	4926      	ldr	r1, [pc, #152]	; (800d848 <CAD_Init+0x220>)
 800d7ae:	0013      	movs	r3, r2
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	00db      	lsls	r3, r3, #3
 800d7b6:	18cb      	adds	r3, r1, r3
 800d7b8:	3310      	adds	r3, #16
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	2204      	movs	r2, #4
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00b      	beq.n	800d7e0 <CAD_Init+0x1b8>
  {
    USBPDM1_AssertRp(PortNum);
 800d7c8:	0004      	movs	r4, r0
 800d7ca:	183b      	adds	r3, r7, r0
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	0018      	movs	r0, r3
 800d7d0:	f001 fd98 	bl	800f304 <USBPDM1_AssertRp>
#if defined(TCPP0203_SUPPORT)
    /* Switch to Low Power mode */
    BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 800d7d4:	193b      	adds	r3, r7, r4
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	2102      	movs	r1, #2
 800d7da:	0018      	movs	r0, r3
 800d7dc:	f7fb fb2c 	bl	8008e38 <BSP_USBPD_PWR_SetPowerMode>
  }
  else
#endif /* _DRP */
  {
#if defined(_SRC)
    if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].settings->PE_DefaultRole)
 800d7e0:	200f      	movs	r0, #15
 800d7e2:	183b      	adds	r3, r7, r0
 800d7e4:	781a      	ldrb	r2, [r3, #0]
 800d7e6:	4918      	ldr	r1, [pc, #96]	; (800d848 <CAD_Init+0x220>)
 800d7e8:	0013      	movs	r3, r2
 800d7ea:	00db      	lsls	r3, r3, #3
 800d7ec:	1a9b      	subs	r3, r3, r2
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	18cb      	adds	r3, r1, r3
 800d7f2:	330c      	adds	r3, #12
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	791b      	ldrb	r3, [r3, #4]
 800d7f8:	2204      	movs	r2, #4
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d01b      	beq.n	800d83a <CAD_Init+0x212>
    {
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SRC;
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	4a12      	ldr	r2, [pc, #72]	; (800d850 <CAD_Init+0x228>)
 800d806:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SRC = Ports[PortNum].settings->CAD_AccesorySupport;
 800d808:	183b      	adds	r3, r7, r0
 800d80a:	781a      	ldrb	r2, [r3, #0]
 800d80c:	490e      	ldr	r1, [pc, #56]	; (800d848 <CAD_Init+0x220>)
 800d80e:	0013      	movs	r3, r2
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	1a9b      	subs	r3, r3, r2
 800d814:	00db      	lsls	r3, r3, #3
 800d816:	18cb      	adds	r3, r1, r3
 800d818:	330c      	adds	r3, #12
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	795b      	ldrb	r3, [r3, #5]
 800d81e:	06db      	lsls	r3, r3, #27
 800d820:	0fdb      	lsrs	r3, r3, #31
 800d822:	b2da      	uxtb	r2, r3
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	2101      	movs	r1, #1
 800d828:	400a      	ands	r2, r1
 800d82a:	0190      	lsls	r0, r2, #6
 800d82c:	785a      	ldrb	r2, [r3, #1]
 800d82e:	2140      	movs	r1, #64	; 0x40
 800d830:	438a      	bics	r2, r1
 800d832:	1c11      	adds	r1, r2, #0
 800d834:	1c02      	adds	r2, r0, #0
 800d836:	430a      	orrs	r2, r1
 800d838:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800d83a:	46c0      	nop			; (mov r8, r8)
 800d83c:	46bd      	mov	sp, r7
 800d83e:	b00b      	add	sp, #44	; 0x2c
 800d840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d842:	46c0      	nop			; (mov r8, r8)
 800d844:	20000ad4 	.word	0x20000ad4
 800d848:	20000aec 	.word	0x20000aec
 800d84c:	0800e1d1 	.word	0x0800e1d1
 800d850:	0800d951 	.word	0x0800d951

0800d854 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	0002      	movs	r2, r0
 800d85c:	1dfb      	adds	r3, r7, #7
 800d85e:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800d860:	1dfb      	adds	r3, r7, #7
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	0018      	movs	r0, r3
 800d866:	f001 fecb 	bl	800f600 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800d86a:	1dfb      	adds	r3, r7, #7
 800d86c:	7819      	ldrb	r1, [r3, #0]
 800d86e:	4a0c      	ldr	r2, [pc, #48]	; (800d8a0 <CAD_Enter_ErrorRecovery+0x4c>)
 800d870:	000b      	movs	r3, r1
 800d872:	005b      	lsls	r3, r3, #1
 800d874:	185b      	adds	r3, r3, r1
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	5c99      	ldrb	r1, [r3, r2]
 800d87a:	2080      	movs	r0, #128	; 0x80
 800d87c:	4240      	negs	r0, r0
 800d87e:	4301      	orrs	r1, r0
 800d880:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800d882:	1dfb      	adds	r3, r7, #7
 800d884:	781a      	ldrb	r2, [r3, #0]
 800d886:	4907      	ldr	r1, [pc, #28]	; (800d8a4 <CAD_Enter_ErrorRecovery+0x50>)
 800d888:	0013      	movs	r3, r2
 800d88a:	00db      	lsls	r3, r3, #3
 800d88c:	1a9b      	subs	r3, r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	18cb      	adds	r3, r1, r3
 800d892:	332c      	adds	r3, #44	; 0x2c
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4798      	blx	r3
}
 800d898:	46c0      	nop			; (mov r8, r8)
 800d89a:	46bd      	mov	sp, r7
 800d89c:	b002      	add	sp, #8
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	20000ad4 	.word	0x20000ad4
 800d8a4:	20000aec 	.word	0x20000aec

0800d8a8 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	0002      	movs	r2, r0
 800d8b0:	6039      	str	r1, [r7, #0]
 800d8b2:	1dfb      	adds	r3, r7, #7
 800d8b4:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800d8b6:	1dfb      	adds	r3, r7, #7
 800d8b8:	781a      	ldrb	r2, [r3, #0]
 800d8ba:	4919      	ldr	r1, [pc, #100]	; (800d920 <CAD_SRC_Set_ResistorRp+0x78>)
 800d8bc:	0013      	movs	r3, r2
 800d8be:	00db      	lsls	r3, r3, #3
 800d8c0:	1a9b      	subs	r3, r3, r2
 800d8c2:	00db      	lsls	r3, r3, #3
 800d8c4:	18cb      	adds	r3, r1, r3
 800d8c6:	3310      	adds	r3, #16
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	683a      	ldr	r2, [r7, #0]
 800d8cc:	1c11      	adds	r1, r2, #0
 800d8ce:	2203      	movs	r2, #3
 800d8d0:	400a      	ands	r2, r1
 800d8d2:	b2d2      	uxtb	r2, r2
 800d8d4:	2103      	movs	r1, #3
 800d8d6:	400a      	ands	r2, r1
 800d8d8:	0010      	movs	r0, r2
 800d8da:	789a      	ldrb	r2, [r3, #2]
 800d8dc:	2103      	movs	r1, #3
 800d8de:	438a      	bics	r2, r1
 800d8e0:	1c11      	adds	r1, r2, #0
 800d8e2:	1c02      	adds	r2, r0, #0
 800d8e4:	430a      	orrs	r2, r1
 800d8e6:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800d8e8:	1dfb      	adds	r3, r7, #7
 800d8ea:	781a      	ldrb	r2, [r3, #0]
 800d8ec:	490d      	ldr	r1, [pc, #52]	; (800d924 <CAD_SRC_Set_ResistorRp+0x7c>)
 800d8ee:	0013      	movs	r3, r2
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	189b      	adds	r3, r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	18cb      	adds	r3, r1, r3
 800d8f8:	785a      	ldrb	r2, [r3, #1]
 800d8fa:	2101      	movs	r1, #1
 800d8fc:	430a      	orrs	r2, r1
 800d8fe:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800d900:	1dfb      	adds	r3, r7, #7
 800d902:	781a      	ldrb	r2, [r3, #0]
 800d904:	4906      	ldr	r1, [pc, #24]	; (800d920 <CAD_SRC_Set_ResistorRp+0x78>)
 800d906:	0013      	movs	r3, r2
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	1a9b      	subs	r3, r3, r2
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	18cb      	adds	r3, r1, r3
 800d910:	332c      	adds	r3, #44	; 0x2c
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4798      	blx	r3
  return 0;
 800d916:	2300      	movs	r3, #0
}
 800d918:	0018      	movs	r0, r3
 800d91a:	46bd      	mov	sp, r7
 800d91c:	b002      	add	sp, #8
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20000aec 	.word	0x20000aec
 800d924:	20000ad4 	.word	0x20000ad4

0800d928 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	0002      	movs	r2, r0
 800d930:	6039      	str	r1, [r7, #0]
 800d932:	1dfb      	adds	r3, r7, #7
 800d934:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	1dfb      	adds	r3, r7, #7
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	0011      	movs	r1, r2
 800d93e:	0018      	movs	r0, r3
 800d940:	f7ff ffb2 	bl	800d8a8 <CAD_SRC_Set_ResistorRp>
 800d944:	0003      	movs	r3, r0
}
 800d946:	0018      	movs	r0, r3
 800d948:	46bd      	mov	sp, r7
 800d94a:	b002      	add	sp, #8
 800d94c:	bd80      	pop	{r7, pc}
	...

0800d950 <CAD_StateMachine_SRC>:
#endif /* _SNK */

#if defined(_SRC)
/* function to handle SRC */
uint32_t CAD_StateMachine_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800d950:	b590      	push	{r4, r7, lr}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	60b9      	str	r1, [r7, #8]
 800d958:	607a      	str	r2, [r7, #4]
 800d95a:	210f      	movs	r1, #15
 800d95c:	187b      	adds	r3, r7, r1
 800d95e:	1c02      	adds	r2, r0, #0
 800d960:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d962:	187b      	adds	r3, r7, r1
 800d964:	781a      	ldrb	r2, [r3, #0]
 800d966:	0013      	movs	r3, r2
 800d968:	005b      	lsls	r3, r3, #1
 800d96a:	189b      	adds	r3, r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4a2b      	ldr	r2, [pc, #172]	; (800da1c <CAD_StateMachine_SRC+0xcc>)
 800d970:	189b      	adds	r3, r3, r2
 800d972:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800d974:	2302      	movs	r3, #2
 800d976:	617b      	str	r3, [r7, #20]

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	785b      	ldrb	r3, [r3, #1]
 800d97c:	069b      	lsls	r3, r3, #26
 800d97e:	0edb      	lsrs	r3, r3, #27
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b0b      	cmp	r3, #11
 800d984:	d844      	bhi.n	800da10 <CAD_StateMachine_SRC+0xc0>
 800d986:	009a      	lsls	r2, r3, #2
 800d988:	4b25      	ldr	r3, [pc, #148]	; (800da20 <CAD_StateMachine_SRC+0xd0>)
 800d98a:	18d3      	adds	r3, r2, r3
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	469f      	mov	pc, r3
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn management */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800d990:	240f      	movs	r4, #15
 800d992:	193b      	adds	r3, r7, r4
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	0018      	movs	r0, r3
 800d998:	f7fb fb9a 	bl	80090d0 <BSP_USBPD_PWR_VBUSDeInit>
      /* Reset the resistor */
      USBPDM1_AssertRp(PortNum);
 800d99c:	193b      	adds	r3, r7, r4
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	0018      	movs	r0, r3
 800d9a2:	f001 fcaf 	bl	800f304 <USBPDM1_AssertRp>
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	785a      	ldrb	r2, [r3, #1]
 800d9aa:	213e      	movs	r1, #62	; 0x3e
 800d9ac:	438a      	bics	r2, r1
 800d9ae:	1c11      	adds	r1, r2, #0
 800d9b0:	2202      	movs	r2, #2
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	705a      	strb	r2, [r3, #1]
      _timing = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	617b      	str	r3, [r7, #20]
      break;
 800d9ba:	e02a      	b.n	800da12 <CAD_StateMachine_SRC+0xc2>
    }

    case USBPD_CAD_STATE_SWITCH_TO_SNK :
    case USBPD_CAD_STATE_DETACHED:
    {
      _timing = ManageStateDetached_SRC(PortNum);
 800d9bc:	230f      	movs	r3, #15
 800d9be:	18fb      	adds	r3, r7, r3
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	0018      	movs	r0, r3
 800d9c4:	f000 f9c4 	bl	800dd50 <ManageStateDetached_SRC>
 800d9c8:	0003      	movs	r3, r0
 800d9ca:	617b      	str	r3, [r7, #20]
      break;
 800d9cc:	e021      	b.n	800da12 <CAD_StateMachine_SRC+0xc2>
    }

    case USBPD_CAD_STATE_ATTACHED_WAIT:
    {
      _timing = ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	68b9      	ldr	r1, [r7, #8]
 800d9d2:	230f      	movs	r3, #15
 800d9d4:	18fb      	adds	r3, r7, r3
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	0018      	movs	r0, r3
 800d9da:	f000 fa17 	bl	800de0c <ManageStateAttachedWait_SRC>
 800d9de:	0003      	movs	r3, r0
 800d9e0:	617b      	str	r3, [r7, #20]
      break;
 800d9e2:	e016      	b.n	800da12 <CAD_StateMachine_SRC+0xc2>
    }
#endif /* _ACCESSORY_SRC */

    case USBPD_CAD_STATE_EMC :
    {
      _timing = ManageStateEMC(PortNum, pEvent, pCCXX);
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	68b9      	ldr	r1, [r7, #8]
 800d9e8:	230f      	movs	r3, #15
 800d9ea:	18fb      	adds	r3, r7, r3
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f000 fafe 	bl	800dff0 <ManageStateEMC>
 800d9f4:	0003      	movs	r3, r0
 800d9f6:	617b      	str	r3, [r7, #20]
      break;
 800d9f8:	e00b      	b.n	800da12 <CAD_StateMachine_SRC+0xc2>

    /*CAD electronic cable with Sink ATTACHED*/
    case USBPD_CAD_STATE_ATTEMC:
    case USBPD_CAD_STATE_ATTACHED:
    {
      _timing = ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	68b9      	ldr	r1, [r7, #8]
 800d9fe:	230f      	movs	r3, #15
 800da00:	18fb      	adds	r3, r7, r3
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	0018      	movs	r0, r3
 800da06:	f000 fb45 	bl	800e094 <ManageStateAttached_SRC>
 800da0a:	0003      	movs	r3, r0
 800da0c:	617b      	str	r3, [r7, #20]
      break;
 800da0e:	e000      	b.n	800da12 <CAD_StateMachine_SRC+0xc2>
    }

    default :
    {
      break;
 800da10:	46c0      	nop			; (mov r8, r8)
    }
  }

  return _timing;
 800da12:	697b      	ldr	r3, [r7, #20]
}
 800da14:	0018      	movs	r0, r3
 800da16:	46bd      	mov	sp, r7
 800da18:	b007      	add	sp, #28
 800da1a:	bd90      	pop	{r4, r7, pc}
 800da1c:	20000ad4 	.word	0x20000ad4
 800da20:	0801a7a0 	.word	0x0801a7a0

0800da24 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800da24:	b590      	push	{r4, r7, lr}
 800da26:	b089      	sub	sp, #36	; 0x24
 800da28:	af02      	add	r7, sp, #8
 800da2a:	60b9      	str	r1, [r7, #8]
 800da2c:	607a      	str	r2, [r7, #4]
 800da2e:	210f      	movs	r1, #15
 800da30:	187b      	adds	r3, r7, r1
 800da32:	1c02      	adds	r2, r0, #0
 800da34:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800da36:	187b      	adds	r3, r7, r1
 800da38:	781a      	ldrb	r2, [r3, #0]
 800da3a:	0013      	movs	r3, r2
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	189b      	adds	r3, r3, r2
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	4a83      	ldr	r2, [pc, #524]	; (800dc50 <CAD_StateMachine+0x22c>)
 800da44:	189b      	adds	r3, r3, r2
 800da46:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800da48:	2302      	movs	r3, #2
 800da4a:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	2200      	movs	r2, #0
 800da50:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800da52:	187b      	adds	r3, r7, r1
 800da54:	781a      	ldrb	r2, [r3, #0]
 800da56:	497f      	ldr	r1, [pc, #508]	; (800dc54 <CAD_StateMachine+0x230>)
 800da58:	0013      	movs	r3, r2
 800da5a:	00db      	lsls	r3, r3, #3
 800da5c:	1a9b      	subs	r3, r3, r2
 800da5e:	00db      	lsls	r3, r3, #3
 800da60:	18cb      	adds	r3, r1, r3
 800da62:	3310      	adds	r3, #16
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2210      	movs	r2, #16
 800da6a:	4013      	ands	r3, r2
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d001      	beq.n	800da76 <CAD_StateMachine+0x52>
  {
    return _timing;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	e0e7      	b.n	800dc46 <CAD_StateMachine+0x222>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	227f      	movs	r2, #127	; 0x7f
 800da7c:	4393      	bics	r3, r2
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	d01b      	beq.n	800dabc <CAD_StateMachine+0x98>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	781a      	ldrb	r2, [r3, #0]
 800da88:	217f      	movs	r1, #127	; 0x7f
 800da8a:	400a      	ands	r2, r1
 800da8c:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	785a      	ldrb	r2, [r3, #1]
 800da92:	213e      	movs	r1, #62	; 0x3e
 800da94:	438a      	bics	r2, r1
 800da96:	1c11      	adds	r1, r2, #0
 800da98:	2218      	movs	r2, #24
 800da9a:	430a      	orrs	r2, r1
 800da9c:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	785b      	ldrb	r3, [r3, #1]
 800daa2:	069b      	lsls	r3, r3, #26
 800daa4:	0edb      	lsrs	r3, r3, #27
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	001a      	movs	r2, r3
 800daaa:	230f      	movs	r3, #15
 800daac:	18fb      	adds	r3, r7, r3
 800daae:	7819      	ldrb	r1, [r3, #0]
 800dab0:	2300      	movs	r3, #0
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	2300      	movs	r3, #0
 800dab6:	2005      	movs	r0, #5
 800dab8:	f7ff fb90 	bl	800d1dc <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	785b      	ldrb	r3, [r3, #1]
 800dac0:	069b      	lsls	r3, r3, #26
 800dac2:	0edb      	lsrs	r3, r3, #27
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b0d      	cmp	r3, #13
 800dac8:	d05d      	beq.n	800db86 <CAD_StateMachine+0x162>
 800daca:	dd00      	ble.n	800dace <CAD_StateMachine+0xaa>
 800dacc:	e082      	b.n	800dbd4 <CAD_StateMachine+0x1b0>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <CAD_StateMachine+0xb4>
 800dad2:	2b0c      	cmp	r3, #12
 800dad4:	d02b      	beq.n	800db2e <CAD_StateMachine+0x10a>
 800dad6:	e07d      	b.n	800dbd4 <CAD_StateMachine+0x1b0>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800dad8:	240f      	movs	r4, #15
 800dada:	193b      	adds	r3, r7, r4
 800dadc:	781a      	ldrb	r2, [r3, #0]
 800dade:	495d      	ldr	r1, [pc, #372]	; (800dc54 <CAD_StateMachine+0x230>)
 800dae0:	0013      	movs	r3, r2
 800dae2:	00db      	lsls	r3, r3, #3
 800dae4:	1a9b      	subs	r3, r3, r2
 800dae6:	00db      	lsls	r3, r3, #3
 800dae8:	585b      	ldr	r3, [r3, r1]
 800daea:	0018      	movs	r0, r3
 800daec:	f7ff fd7e 	bl	800d5ec <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800daf0:	193b      	adds	r3, r7, r4
 800daf2:	781a      	ldrb	r2, [r3, #0]
 800daf4:	4957      	ldr	r1, [pc, #348]	; (800dc54 <CAD_StateMachine+0x230>)
 800daf6:	0013      	movs	r3, r2
 800daf8:	00db      	lsls	r3, r3, #3
 800dafa:	1a9b      	subs	r3, r3, r2
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	585b      	ldr	r3, [r3, r1]
 800db00:	0018      	movs	r0, r3
 800db02:	f7ff fd82 	bl	800d60a <LL_UCPD_EnableIT_TypeCEventCC1>
#endif /* !_LOW_POWER */
      if (0 == PortNum)
 800db06:	193b      	adds	r3, r7, r4
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <CAD_StateMachine+0xf8>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 800db0e:	2102      	movs	r1, #2
 800db10:	2008      	movs	r0, #8
 800db12:	f7ff fcc5 	bl	800d4a0 <__NVIC_SetPriority>
 800db16:	2008      	movs	r0, #8
 800db18:	f7ff fca8 	bl	800d46c <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	785a      	ldrb	r2, [r3, #1]
 800db20:	213e      	movs	r1, #62	; 0x3e
 800db22:	438a      	bics	r2, r1
 800db24:	1c11      	adds	r1, r2, #0
 800db26:	2202      	movs	r2, #2
 800db28:	430a      	orrs	r2, r1
 800db2a:	705a      	strb	r2, [r3, #1]
      break;
 800db2c:	e05f      	b.n	800dbee <CAD_StateMachine+0x1ca>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800db2e:	240f      	movs	r4, #15
 800db30:	193b      	adds	r3, r7, r4
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	0018      	movs	r0, r3
 800db36:	f001 fd63 	bl	800f600 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800db3a:	193b      	adds	r3, r7, r4
 800db3c:	781a      	ldrb	r2, [r3, #0]
 800db3e:	4945      	ldr	r1, [pc, #276]	; (800dc54 <CAD_StateMachine+0x230>)
 800db40:	0013      	movs	r3, r2
 800db42:	00db      	lsls	r3, r3, #3
 800db44:	1a9b      	subs	r3, r3, r2
 800db46:	00db      	lsls	r3, r3, #3
 800db48:	18cb      	adds	r3, r1, r3
 800db4a:	3334      	adds	r3, #52	; 0x34
 800db4c:	2200      	movs	r2, #0
 800db4e:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	781a      	ldrb	r2, [r3, #0]
 800db5a:	2103      	movs	r1, #3
 800db5c:	438a      	bics	r2, r1
 800db5e:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	2201      	movs	r2, #1
 800db64:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800db66:	f7fc f99d 	bl	8009ea4 <HAL_GetTick>
 800db6a:	0002      	movs	r2, r0
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800db70:	231a      	movs	r3, #26
 800db72:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	785a      	ldrb	r2, [r3, #1]
 800db78:	213e      	movs	r1, #62	; 0x3e
 800db7a:	438a      	bics	r2, r1
 800db7c:	1c11      	adds	r1, r2, #0
 800db7e:	221a      	movs	r2, #26
 800db80:	430a      	orrs	r2, r1
 800db82:	705a      	strb	r2, [r3, #1]
      break;
 800db84:	e033      	b.n	800dbee <CAD_StateMachine+0x1ca>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800db86:	f7fc f98d 	bl	8009ea4 <HAL_GetTick>
 800db8a:	0002      	movs	r2, r0
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	2b1a      	cmp	r3, #26
 800db94:	d92a      	bls.n	800dbec <CAD_StateMachine+0x1c8>
        port source  to src
        port snk     to snk
        port drp     to src   */

#if defined(_SRC) || defined(_DRP)
        if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800db96:	200f      	movs	r0, #15
 800db98:	183b      	adds	r3, r7, r0
 800db9a:	781a      	ldrb	r2, [r3, #0]
 800db9c:	492d      	ldr	r1, [pc, #180]	; (800dc54 <CAD_StateMachine+0x230>)
 800db9e:	0013      	movs	r3, r2
 800dba0:	00db      	lsls	r3, r3, #3
 800dba2:	1a9b      	subs	r3, r3, r2
 800dba4:	00db      	lsls	r3, r3, #3
 800dba6:	18cb      	adds	r3, r1, r3
 800dba8:	3310      	adds	r3, #16
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	2204      	movs	r2, #4
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d004      	beq.n	800dbc2 <CAD_StateMachine+0x19e>
        {
          USBPDM1_AssertRp(PortNum);
 800dbb8:	183b      	adds	r3, r7, r0
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	0018      	movs	r0, r3
 800dbbe:	f001 fba1 	bl	800f304 <USBPDM1_AssertRp>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	785a      	ldrb	r2, [r3, #1]
 800dbc6:	213e      	movs	r1, #62	; 0x3e
 800dbc8:	438a      	bics	r2, r1
 800dbca:	1c11      	adds	r1, r2, #0
 800dbcc:	2202      	movs	r2, #2
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	705a      	strb	r2, [r3, #1]
      }
      break;
 800dbd2:	e00b      	b.n	800dbec <CAD_StateMachine+0x1c8>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	687c      	ldr	r4, [r7, #4]
 800dbda:	68b9      	ldr	r1, [r7, #8]
 800dbdc:	220f      	movs	r2, #15
 800dbde:	18ba      	adds	r2, r7, r2
 800dbe0:	7810      	ldrb	r0, [r2, #0]
 800dbe2:	0022      	movs	r2, r4
 800dbe4:	4798      	blx	r3
 800dbe6:	0003      	movs	r3, r0
 800dbe8:	617b      	str	r3, [r7, #20]
      break;
 800dbea:	e000      	b.n	800dbee <CAD_StateMachine+0x1ca>
      break;
 800dbec:	46c0      	nop			; (mov r8, r8)
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	785b      	ldrb	r3, [r3, #1]
 800dbf2:	069b      	lsls	r3, r3, #26
 800dbf4:	0edb      	lsrs	r3, r3, #27
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	789b      	ldrb	r3, [r3, #2]
 800dbfc:	069b      	lsls	r3, r3, #26
 800dbfe:	0edb      	lsrs	r3, r3, #27
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d01e      	beq.n	800dc44 <CAD_StateMachine+0x220>
  {
    _handle->pstate = _handle->cstate;
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	785b      	ldrb	r3, [r3, #1]
 800dc0a:	069b      	lsls	r3, r3, #26
 800dc0c:	0edb      	lsrs	r3, r3, #27
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	211f      	movs	r1, #31
 800dc14:	400a      	ands	r2, r1
 800dc16:	1890      	adds	r0, r2, r2
 800dc18:	789a      	ldrb	r2, [r3, #2]
 800dc1a:	213e      	movs	r1, #62	; 0x3e
 800dc1c:	438a      	bics	r2, r1
 800dc1e:	1c11      	adds	r1, r2, #0
 800dc20:	1c02      	adds	r2, r0, #0
 800dc22:	430a      	orrs	r2, r1
 800dc24:	709a      	strb	r2, [r3, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	785b      	ldrb	r3, [r3, #1]
 800dc2a:	069b      	lsls	r3, r3, #26
 800dc2c:	0edb      	lsrs	r3, r3, #27
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	001a      	movs	r2, r3
 800dc32:	230f      	movs	r3, #15
 800dc34:	18fb      	adds	r3, r7, r3
 800dc36:	7819      	ldrb	r1, [r3, #0]
 800dc38:	2300      	movs	r3, #0
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	2005      	movs	r0, #5
 800dc40:	f7ff facc 	bl	800d1dc <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800dc44:	697b      	ldr	r3, [r7, #20]
}
 800dc46:	0018      	movs	r0, r3
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	b007      	add	sp, #28
 800dc4c:	bd90      	pop	{r4, r7, pc}
 800dc4e:	46c0      	nop			; (mov r8, r8)
 800dc50:	20000ad4 	.word	0x20000ad4
 800dc54:	20000aec 	.word	0x20000aec

0800dc58 <CAD_Check_HW_SRC>:
}
#endif /* _DRP || _SNK */

#if defined(_DRP) || defined(_SRC)
void CAD_Check_HW_SRC(uint8_t PortNum)
{
 800dc58:	b5b0      	push	{r4, r5, r7, lr}
 800dc5a:	b092      	sub	sp, #72	; 0x48
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	0002      	movs	r2, r0
 800dc60:	1dfb      	adds	r3, r7, #7
 800dc62:	701a      	strb	r2, [r3, #0]
#if !defined(_RTOS)
  uint32_t CC1_value_temp;
  uint32_t CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800dc64:	1dfb      	adds	r3, r7, #7
 800dc66:	781a      	ldrb	r2, [r3, #0]
 800dc68:	0013      	movs	r3, r2
 800dc6a:	005b      	lsls	r3, r3, #1
 800dc6c:	189b      	adds	r3, r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4a33      	ldr	r2, [pc, #204]	; (800dd40 <CAD_Check_HW_SRC+0xe8>)
 800dc72:	189b      	adds	r3, r3, r2
 800dc74:	647b      	str	r3, [r7, #68]	; 0x44
  {
    __DSB();
  };
#endif /* _LOW_POWER */

  CC1_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800dc76:	1dfb      	adds	r3, r7, #7
 800dc78:	781a      	ldrb	r2, [r3, #0]
 800dc7a:	4932      	ldr	r1, [pc, #200]	; (800dd44 <CAD_Check_HW_SRC+0xec>)
 800dc7c:	0013      	movs	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	00db      	lsls	r3, r3, #3
 800dc84:	585b      	ldr	r3, [r3, r1]
 800dc86:	695b      	ldr	r3, [r3, #20]
 800dc88:	0c1b      	lsrs	r3, r3, #16
 800dc8a:	2203      	movs	r2, #3
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	643b      	str	r3, [r7, #64]	; 0x40
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 800dc90:	1dfb      	adds	r3, r7, #7
 800dc92:	781a      	ldrb	r2, [r3, #0]
 800dc94:	492b      	ldr	r1, [pc, #172]	; (800dd44 <CAD_Check_HW_SRC+0xec>)
 800dc96:	0013      	movs	r3, r2
 800dc98:	00db      	lsls	r3, r3, #3
 800dc9a:	1a9b      	subs	r3, r3, r2
 800dc9c:	00db      	lsls	r3, r3, #3
 800dc9e:	585b      	ldr	r3, [r3, r1]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	0c9b      	lsrs	r3, r3, #18
 800dca4:	2203      	movs	r2, #3
 800dca6:	4013      	ands	r3, r2
 800dca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
    return;
  }
#endif /* !_RTOS */

  const CCxPin_TypeDef table_cc[] =
 800dcaa:	2518      	movs	r5, #24
 800dcac:	197b      	adds	r3, r7, r5
 800dcae:	4a26      	ldr	r2, [pc, #152]	; (800dd48 <CAD_Check_HW_SRC+0xf0>)
 800dcb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 800dcb2:	c313      	stmia	r3!, {r0, r1, r4}
 800dcb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 800dcb6:	c313      	stmia	r3!, {r0, r1, r4}
 800dcb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 800dcba:	c313      	stmia	r3!, {r0, r1, r4}
    CCNONE,  CC2,       CC2,
    CC1,     CCNONE,   CC1,
    CC1,     CC2,       CCNONE
  };

  const CAD_HW_Condition_TypeDef table_CurrentHWcondition[] =
 800dcbc:	240c      	movs	r4, #12
 800dcbe:	193b      	adds	r3, r7, r4
 800dcc0:	4a22      	ldr	r2, [pc, #136]	; (800dd4c <CAD_Check_HW_SRC+0xf4>)
 800dcc2:	ca03      	ldmia	r2!, {r0, r1}
 800dcc4:	c303      	stmia	r3!, {r0, r1}
 800dcc6:	7812      	ldrb	r2, [r2, #0]
 800dcc8:	701a      	strb	r2, [r3, #0]
    HW_AudioAdapter_Attachment,  HW_PwrCable_Sink_Attachment, HW_PwrCable_NoSink_Attachment,
    HW_PwrCable_Sink_Attachment,         HW_Debug_Attachment,                 HW_Attachment,
    HW_PwrCable_NoSink_Attachment,             HW_Attachment,                 HW_Detachment
  };

  if (CC1_value * 3 + CC2_value < 9)
 800dcca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dccc:	0013      	movs	r3, r2
 800dcce:	005b      	lsls	r3, r3, #1
 800dcd0:	189a      	adds	r2, r3, r2
 800dcd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd4:	18d3      	adds	r3, r2, r3
 800dcd6:	2b08      	cmp	r3, #8
 800dcd8:	d82e      	bhi.n	800dd38 <CAD_Check_HW_SRC+0xe0>
  {
    _handle->cc  = table_cc[CC1_value * 3 + CC2_value];
 800dcda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcdc:	0013      	movs	r3, r2
 800dcde:	005b      	lsls	r3, r3, #1
 800dce0:	189a      	adds	r2, r3, r2
 800dce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce4:	18d2      	adds	r2, r2, r3
 800dce6:	197b      	adds	r3, r7, r5
 800dce8:	0092      	lsls	r2, r2, #2
 800dcea:	58d3      	ldr	r3, [r2, r3]
 800dcec:	1c1a      	adds	r2, r3, #0
 800dcee:	2303      	movs	r3, #3
 800dcf0:	4013      	ands	r3, r2
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcf6:	2103      	movs	r1, #3
 800dcf8:	400a      	ands	r2, r1
 800dcfa:	0010      	movs	r0, r2
 800dcfc:	781a      	ldrb	r2, [r3, #0]
 800dcfe:	2103      	movs	r1, #3
 800dd00:	438a      	bics	r2, r1
 800dd02:	1c11      	adds	r1, r2, #0
 800dd04:	1c02      	adds	r2, r0, #0
 800dd06:	430a      	orrs	r2, r1
 800dd08:	701a      	strb	r2, [r3, #0]
    _handle->CurrentHWcondition     = table_CurrentHWcondition[CC1_value * 3 + CC2_value];
 800dd0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd0c:	0013      	movs	r3, r2
 800dd0e:	005b      	lsls	r3, r3, #1
 800dd10:	189a      	adds	r2, r3, r2
 800dd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd14:	18d3      	adds	r3, r2, r3
 800dd16:	193a      	adds	r2, r7, r4
 800dd18:	5cd3      	ldrb	r3, [r2, r3]
 800dd1a:	1c1a      	adds	r2, r3, #0
 800dd1c:	2307      	movs	r3, #7
 800dd1e:	4013      	ands	r3, r2
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd24:	2107      	movs	r1, #7
 800dd26:	400a      	ands	r2, r1
 800dd28:	0090      	lsls	r0, r2, #2
 800dd2a:	781a      	ldrb	r2, [r3, #0]
 800dd2c:	211c      	movs	r1, #28
 800dd2e:	438a      	bics	r2, r1
 800dd30:	1c11      	adds	r1, r2, #0
 800dd32:	1c02      	adds	r2, r0, #0
 800dd34:	430a      	orrs	r2, r1
 800dd36:	701a      	strb	r2, [r3, #0]
  }
}
 800dd38:	46c0      	nop			; (mov r8, r8)
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	b012      	add	sp, #72	; 0x48
 800dd3e:	bdb0      	pop	{r4, r5, r7, pc}
 800dd40:	20000ad4 	.word	0x20000ad4
 800dd44:	20000aec 	.word	0x20000aec
 800dd48:	08019ee0 	.word	0x08019ee0
 800dd4c:	08019f04 	.word	0x08019f04

0800dd50 <ManageStateDetached_SRC>:
}
#endif /* _DRP || _SNK */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateDetached_SRC(uint8_t PortNum)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	0002      	movs	r2, r0
 800dd58:	1dfb      	adds	r3, r7, #7
 800dd5a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800dd5c:	1dfb      	adds	r3, r7, #7
 800dd5e:	781a      	ldrb	r2, [r3, #0]
 800dd60:	0013      	movs	r3, r2
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	189b      	adds	r3, r3, r2
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	4a27      	ldr	r2, [pc, #156]	; (800de08 <ManageStateDetached_SRC+0xb8>)
 800dd6a:	189b      	adds	r3, r3, r2
 800dd6c:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800dd6e:	2302      	movs	r3, #2
 800dd70:	60fb      	str	r3, [r7, #12]

  if (_handle->CAD_ResistorUpdateflag == USBPD_TRUE)
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	785b      	ldrb	r3, [r3, #1]
 800dd76:	2201      	movs	r2, #1
 800dd78:	4013      	ands	r3, r2
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00c      	beq.n	800dd9a <ManageStateDetached_SRC+0x4a>
  {
    /* update the resistor value */
    USBPDM1_AssertRp(PortNum);
 800dd80:	1dfb      	adds	r3, r7, #7
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	0018      	movs	r0, r3
 800dd86:	f001 fabd 	bl	800f304 <USBPDM1_AssertRp>
    _handle->CAD_ResistorUpdateflag = USBPD_FALSE;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	785a      	ldrb	r2, [r3, #1]
 800dd8e:	2101      	movs	r1, #1
 800dd90:	438a      	bics	r2, r1
 800dd92:	705a      	strb	r2, [r3, #1]

    /* let time to internal state machine update */
    HAL_Delay(1);
 800dd94:	2001      	movs	r0, #1
 800dd96:	f7fc f88f 	bl	8009eb8 <HAL_Delay>
  }

  CAD_Check_HW_SRC(PortNum);
 800dd9a:	1dfb      	adds	r3, r7, #7
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	0018      	movs	r0, r3
 800dda0:	f7ff ff5a 	bl	800dc58 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	221c      	movs	r2, #28
 800ddaa:	4013      	ands	r3, r2
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d103      	bne.n	800ddba <ManageStateDetached_SRC+0x6a>
  {
#ifdef _LOW_POWER
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#else
    _timing = CAD_INFINITE_TIME;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	425b      	negs	r3, r3
 800ddb6:	60fb      	str	r3, [r7, #12]
 800ddb8:	e021      	b.n	800ddfe <ManageStateDetached_SRC+0xae>
#endif /* _LOW_POWER */
  }
  else
  {
    if (_handle->CurrentHWcondition == HW_PwrCable_NoSink_Attachment)
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	221c      	movs	r2, #28
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	2b08      	cmp	r3, #8
 800ddc6:	d108      	bne.n	800ddda <ManageStateDetached_SRC+0x8a>
    {
      _handle->cstate = USBPD_CAD_STATE_EMC;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	785a      	ldrb	r2, [r3, #1]
 800ddcc:	213e      	movs	r1, #62	; 0x3e
 800ddce:	438a      	bics	r2, r1
 800ddd0:	1c11      	adds	r1, r2, #0
 800ddd2:	2208      	movs	r2, #8
 800ddd4:	430a      	orrs	r2, r1
 800ddd6:	705a      	strb	r2, [r3, #1]
 800ddd8:	e011      	b.n	800ddfe <ManageStateDetached_SRC+0xae>
    }
    else
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800ddda:	f7fc f863 	bl	8009ea4 <HAL_GetTick>
 800ddde:	0002      	movs	r2, r0
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	785a      	ldrb	r2, [r3, #1]
 800dde8:	213e      	movs	r1, #62	; 0x3e
 800ddea:	438a      	bics	r2, r1
 800ddec:	1c11      	adds	r1, r2, #0
 800ddee:	2204      	movs	r2, #4
 800ddf0:	430a      	orrs	r2, r1
 800ddf2:	705a      	strb	r2, [r3, #1]

      BSP_USBPD_PWR_VBUSInit(PortNum);
 800ddf4:	1dfb      	adds	r3, r7, #7
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	0018      	movs	r0, r3
 800ddfa:	f7fb f92f 	bl	800905c <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
}
 800de00:	0018      	movs	r0, r3
 800de02:	46bd      	mov	sp, r7
 800de04:	b004      	add	sp, #16
 800de06:	bd80      	pop	{r7, pc}
 800de08:	20000ad4 	.word	0x20000ad4

0800de0c <ManageStateAttachedWait_SRC>:
}
#endif /* _DRP */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateAttachedWait_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800de0c:	b590      	push	{r4, r7, lr}
 800de0e:	b089      	sub	sp, #36	; 0x24
 800de10:	af00      	add	r7, sp, #0
 800de12:	60b9      	str	r1, [r7, #8]
 800de14:	607a      	str	r2, [r7, #4]
 800de16:	240f      	movs	r4, #15
 800de18:	193b      	adds	r3, r7, r4
 800de1a:	1c02      	adds	r2, r0, #0
 800de1c:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800de1e:	193b      	adds	r3, r7, r4
 800de20:	781a      	ldrb	r2, [r3, #0]
 800de22:	0013      	movs	r3, r2
 800de24:	005b      	lsls	r3, r3, #1
 800de26:	189b      	adds	r3, r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	4a70      	ldr	r2, [pc, #448]	; (800dfec <ManageStateAttachedWait_SRC+0x1e0>)
 800de2c:	189b      	adds	r3, r3, r2
 800de2e:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = 2;
 800de30:	2302      	movs	r3, #2
 800de32:	61fb      	str	r3, [r7, #28]

  /* Evaluate elapsed time in Attach_Wait state */
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800de34:	f7fc f836 	bl	8009ea4 <HAL_GetTick>
 800de38:	0002      	movs	r2, r0
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SRC(PortNum);
 800de42:	193b      	adds	r3, r7, r4
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	0018      	movs	r0, r3
 800de48:	f7ff ff06 	bl	800dc58 <CAD_Check_HW_SRC>

  if ((_handle->CurrentHWcondition != HW_Detachment) && (_handle->CurrentHWcondition != HW_PwrCable_NoSink_Attachment))
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	221c      	movs	r2, #28
 800de52:	4013      	ands	r3, r2
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b00      	cmp	r3, #0
 800de58:	d100      	bne.n	800de5c <ManageStateAttachedWait_SRC+0x50>
 800de5a:	e094      	b.n	800df86 <ManageStateAttachedWait_SRC+0x17a>
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	221c      	movs	r2, #28
 800de62:	4013      	ands	r3, r2
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2b08      	cmp	r3, #8
 800de68:	d100      	bne.n	800de6c <ManageStateAttachedWait_SRC+0x60>
 800de6a:	e08c      	b.n	800df86 <ManageStateAttachedWait_SRC+0x17a>
  {
    if (USBPD_FALSE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_BELOWVSAFE0V))
 800de6c:	193b      	adds	r3, r7, r4
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2100      	movs	r1, #0
 800de72:	0018      	movs	r0, r3
 800de74:	f004 ff2a 	bl	8012ccc <USBPD_PWR_IF_GetVBUSStatus>
 800de78:	1e03      	subs	r3, r0, #0
 800de7a:	d106      	bne.n	800de8a <ManageStateAttachedWait_SRC+0x7e>
    {
      /* reset the timing because VBUS threshold not yet reach */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800de7c:	f7fc f812 	bl	8009ea4 <HAL_GetTick>
 800de80:	0002      	movs	r2, r0
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	605a      	str	r2, [r3, #4]
      return CAD_TCCDEBOUCE_THRESHOLD;
 800de86:	2378      	movs	r3, #120	; 0x78
 800de88:	e0ab      	b.n	800dfe2 <ManageStateAttachedWait_SRC+0x1d6>
    }

    /* Check tCCDebounce */
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2b78      	cmp	r3, #120	; 0x78
 800de8e:	d800      	bhi.n	800de92 <ManageStateAttachedWait_SRC+0x86>
 800de90:	e073      	b.n	800df7a <ManageStateAttachedWait_SRC+0x16e>
    {
      switch (_handle->CurrentHWcondition)
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	06db      	lsls	r3, r3, #27
 800de98:	0f5b      	lsrs	r3, r3, #29
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d026      	beq.n	800deee <ManageStateAttachedWait_SRC+0xe2>
 800dea0:	dc58      	bgt.n	800df54 <ManageStateAttachedWait_SRC+0x148>
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d002      	beq.n	800deac <ManageStateAttachedWait_SRC+0xa0>
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	d03a      	beq.n	800df20 <ManageStateAttachedWait_SRC+0x114>
 800deaa:	e053      	b.n	800df54 <ManageStateAttachedWait_SRC+0x148>
      {
        case HW_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	079b      	lsls	r3, r3, #30
 800deb2:	0f9b      	lsrs	r3, r3, #30
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	001a      	movs	r2, r3
 800deb8:	230f      	movs	r3, #15
 800deba:	18fb      	adds	r3, r7, r3
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	0011      	movs	r1, r2
 800dec0:	0018      	movs	r0, r3
 800dec2:	f001 fc3f 	bl	800f744 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	785a      	ldrb	r2, [r3, #1]
 800deca:	213e      	movs	r1, #62	; 0x3e
 800decc:	438a      	bics	r2, r1
 800dece:	1c11      	adds	r1, r2, #0
 800ded0:	2206      	movs	r2, #6
 800ded2:	430a      	orrs	r2, r1
 800ded4:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2202      	movs	r2, #2
 800deda:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	079b      	lsls	r3, r3, #30
 800dee2:	0f9b      	lsrs	r3, r3, #30
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	001a      	movs	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	601a      	str	r2, [r3, #0]
          break;
 800deec:	e03b      	b.n	800df66 <ManageStateAttachedWait_SRC+0x15a>

        case HW_PwrCable_Sink_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	079b      	lsls	r3, r3, #30
 800def4:	0f9b      	lsrs	r3, r3, #30
 800def6:	b2db      	uxtb	r3, r3
 800def8:	001a      	movs	r2, r3
 800defa:	230f      	movs	r3, #15
 800defc:	18fb      	adds	r3, r7, r3
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	0011      	movs	r1, r2
 800df02:	0018      	movs	r0, r3
 800df04:	f001 fc1e 	bl	800f744 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTEMC;
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	785a      	ldrb	r2, [r3, #1]
 800df0c:	213e      	movs	r1, #62	; 0x3e
 800df0e:	438a      	bics	r2, r1
 800df10:	1c11      	adds	r1, r2, #0
 800df12:	220a      	movs	r2, #10
 800df14:	430a      	orrs	r2, r1
 800df16:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_ATTEMC;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	2204      	movs	r2, #4
 800df1c:	701a      	strb	r2, [r3, #0]
          break;
 800df1e:	e022      	b.n	800df66 <ManageStateAttachedWait_SRC+0x15a>

        case HW_PwrCable_NoSink_Attachment:
          BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800df20:	230f      	movs	r3, #15
 800df22:	18fb      	adds	r3, r7, r3
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	0018      	movs	r0, r3
 800df28:	f7fb f8d2 	bl	80090d0 <BSP_USBPD_PWR_VBUSDeInit>
          _handle->cstate = USBPD_CAD_STATE_EMC;
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	785a      	ldrb	r2, [r3, #1]
 800df30:	213e      	movs	r1, #62	; 0x3e
 800df32:	438a      	bics	r2, r1
 800df34:	1c11      	adds	r1, r2, #0
 800df36:	2208      	movs	r2, #8
 800df38:	430a      	orrs	r2, r1
 800df3a:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_EMC;
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2203      	movs	r2, #3
 800df40:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	079b      	lsls	r3, r3, #30
 800df48:	0f9b      	lsrs	r3, r3, #30
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	001a      	movs	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	601a      	str	r2, [r3, #0]
          break;
 800df52:	e008      	b.n	800df66 <ManageStateAttachedWait_SRC+0x15a>
#endif /* _ACCESSORY_SRC */

        case HW_Detachment:
        default:
#if !defined(_ACCESSORY_SRC)
          _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	785a      	ldrb	r2, [r3, #1]
 800df58:	213e      	movs	r1, #62	; 0x3e
 800df5a:	438a      	bics	r2, r1
 800df5c:	1c11      	adds	r1, r2, #0
 800df5e:	2216      	movs	r2, #22
 800df60:	430a      	orrs	r2, r1
 800df62:	705a      	strb	r2, [r3, #1]
#endif /* _ACCESSORY_SRC */
          break;
 800df64:	46c0      	nop			; (mov r8, r8)
      } /* end of switch */
      *pCCXX = _handle->cc;
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	079b      	lsls	r3, r3, #30
 800df6c:	0f9b      	lsrs	r3, r3, #30
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	001a      	movs	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	601a      	str	r2, [r3, #0]
      _timing = 2;
 800df76:	2302      	movs	r3, #2
 800df78:	61fb      	str	r3, [r7, #28]
    }
    /* reset the flag for CAD_tDebounce */
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	781a      	ldrb	r2, [r3, #0]
 800df7e:	2120      	movs	r1, #32
 800df80:	438a      	bics	r2, r1
 800df82:	701a      	strb	r2, [r3, #0]
 800df84:	e02c      	b.n	800dfe0 <ManageStateAttachedWait_SRC+0x1d4>
  }
  else /* CAD_HW_Condition[PortNum] = HW_Detachment */
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2220      	movs	r2, #32
 800df8c:	4013      	ands	r3, r2
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10c      	bne.n	800dfae <ManageStateAttachedWait_SRC+0x1a2>
    {
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 800df94:	f7fb ff86 	bl	8009ea4 <HAL_GetTick>
 800df98:	0002      	movs	r2, r0
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	781a      	ldrb	r2, [r3, #0]
 800dfa2:	2120      	movs	r1, #32
 800dfa4:	430a      	orrs	r2, r1
 800dfa6:	701a      	strb	r2, [r3, #0]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	61fb      	str	r3, [r7, #28]
 800dfac:	e018      	b.n	800dfe0 <ManageStateAttachedWait_SRC+0x1d4>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800dfae:	f7fb ff79 	bl	8009ea4 <HAL_GetTick>
 800dfb2:	0002      	movs	r2, r0
 800dfb4:	69bb      	ldr	r3, [r7, #24]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	d90e      	bls.n	800dfe0 <ManageStateAttachedWait_SRC+0x1d4>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	781a      	ldrb	r2, [r3, #0]
 800dfc6:	2120      	movs	r1, #32
 800dfc8:	438a      	bics	r2, r1
 800dfca:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	785a      	ldrb	r2, [r3, #1]
 800dfd0:	213e      	movs	r1, #62	; 0x3e
 800dfd2:	438a      	bics	r2, r1
 800dfd4:	1c11      	adds	r1, r2, #0
 800dfd6:	2216      	movs	r2, #22
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	705a      	strb	r2, [r3, #1]
        _timing = 0;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return _timing;
 800dfe0:	69fb      	ldr	r3, [r7, #28]
}
 800dfe2:	0018      	movs	r0, r3
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	b009      	add	sp, #36	; 0x24
 800dfe8:	bd90      	pop	{r4, r7, pc}
 800dfea:	46c0      	nop			; (mov r8, r8)
 800dfec:	20000ad4 	.word	0x20000ad4

0800dff0 <ManageStateEMC>:
#endif /* _DRP || _SRC || (_ACCESSORY && _SNK) */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateEMC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60b9      	str	r1, [r7, #8]
 800dff8:	607a      	str	r2, [r7, #4]
 800dffa:	210f      	movs	r1, #15
 800dffc:	187b      	adds	r3, r7, r1
 800dffe:	1c02      	adds	r2, r0, #0
 800e000:	701a      	strb	r2, [r3, #0]
  uint32_t _timing = CAD_INFINITE_TIME;
 800e002:	2301      	movs	r3, #1
 800e004:	425b      	negs	r3, r3
 800e006:	617b      	str	r3, [r7, #20]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e008:	187b      	adds	r3, r7, r1
 800e00a:	781a      	ldrb	r2, [r3, #0]
 800e00c:	0013      	movs	r3, r2
 800e00e:	005b      	lsls	r3, r3, #1
 800e010:	189b      	adds	r3, r3, r2
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	4a1e      	ldr	r2, [pc, #120]	; (800e090 <ManageStateEMC+0xa0>)
 800e016:	189b      	adds	r3, r3, r2
 800e018:	613b      	str	r3, [r7, #16]

  CAD_Check_HW_SRC(PortNum);
 800e01a:	187b      	adds	r3, r7, r1
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	0018      	movs	r0, r3
 800e020:	f7ff fe1a 	bl	800dc58 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  switch (_handle->CurrentHWcondition)
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	06db      	lsls	r3, r3, #27
 800e02a:	0f5b      	lsrs	r3, r3, #29
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d010      	beq.n	800e054 <ManageStateEMC+0x64>
 800e032:	dc26      	bgt.n	800e082 <ManageStateEMC+0x92>
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <ManageStateEMC+0x4e>
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d00b      	beq.n	800e054 <ManageStateEMC+0x64>
          _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
        }
        _timing = 0;
      }
#endif /* _DRP */
      break;
 800e03c:	e021      	b.n	800e082 <ManageStateEMC+0x92>
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	785a      	ldrb	r2, [r3, #1]
 800e042:	213e      	movs	r1, #62	; 0x3e
 800e044:	438a      	bics	r2, r1
 800e046:	1c11      	adds	r1, r2, #0
 800e048:	2212      	movs	r2, #18
 800e04a:	430a      	orrs	r2, r1
 800e04c:	705a      	strb	r2, [r3, #1]
      _timing = 1;
 800e04e:	2301      	movs	r3, #1
 800e050:	617b      	str	r3, [r7, #20]
      break;
 800e052:	e017      	b.n	800e084 <ManageStateEMC+0x94>
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	785a      	ldrb	r2, [r3, #1]
 800e058:	213e      	movs	r1, #62	; 0x3e
 800e05a:	438a      	bics	r2, r1
 800e05c:	1c11      	adds	r1, r2, #0
 800e05e:	2204      	movs	r2, #4
 800e060:	430a      	orrs	r2, r1
 800e062:	705a      	strb	r2, [r3, #1]
      _handle->CAD_tDebounce_start = HAL_GetTick() - 5u;  /* this is only to check cable presence */
 800e064:	f7fb ff1e 	bl	8009ea4 <HAL_GetTick>
 800e068:	0003      	movs	r3, r0
 800e06a:	1f5a      	subs	r2, r3, #5
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	605a      	str	r2, [r3, #4]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800e070:	230f      	movs	r3, #15
 800e072:	18fb      	adds	r3, r7, r3
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	0018      	movs	r0, r3
 800e078:	f7fa fff0 	bl	800905c <BSP_USBPD_PWR_VBUSInit>
      _timing = 2;
 800e07c:	2302      	movs	r3, #2
 800e07e:	617b      	str	r3, [r7, #20]
      break;
 800e080:	e000      	b.n	800e084 <ManageStateEMC+0x94>
      break;
 800e082:	46c0      	nop			; (mov r8, r8)
  }
  return _timing;
 800e084:	697b      	ldr	r3, [r7, #20]
}
 800e086:	0018      	movs	r0, r3
 800e088:	46bd      	mov	sp, r7
 800e08a:	b006      	add	sp, #24
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	46c0      	nop			; (mov r8, r8)
 800e090:	20000ad4 	.word	0x20000ad4

0800e094 <ManageStateAttached_SRC>:
}
#endif /* _DRP || (_ACCESSORY && _SNK) */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateAttached_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b08a      	sub	sp, #40	; 0x28
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60b9      	str	r1, [r7, #8]
 800e09c:	607a      	str	r2, [r7, #4]
 800e09e:	210f      	movs	r1, #15
 800e0a0:	187b      	adds	r3, r7, r1
 800e0a2:	1c02      	adds	r2, r0, #0
 800e0a4:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e0a6:	0008      	movs	r0, r1
 800e0a8:	183b      	adds	r3, r7, r0
 800e0aa:	781a      	ldrb	r2, [r3, #0]
 800e0ac:	0013      	movs	r3, r2
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	189b      	adds	r3, r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4a44      	ldr	r2, [pc, #272]	; (800e1c8 <ManageStateAttached_SRC+0x134>)
 800e0b6:	189b      	adds	r3, r3, r2
 800e0b8:	623b      	str	r3, [r7, #32]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800e0ba:	2302      	movs	r3, #2
 800e0bc:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 800e0be:	183b      	adds	r3, r7, r0
 800e0c0:	781a      	ldrb	r2, [r3, #0]
 800e0c2:	4942      	ldr	r1, [pc, #264]	; (800e1cc <ManageStateAttached_SRC+0x138>)
 800e0c4:	0013      	movs	r3, r2
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	1a9b      	subs	r3, r3, r2
 800e0ca:	00db      	lsls	r3, r3, #3
 800e0cc:	18cb      	adds	r3, r1, r3
 800e0ce:	3334      	adds	r3, #52	; 0x34
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d10c      	bne.n	800e0f0 <ManageStateAttached_SRC+0x5c>
 800e0d6:	183b      	adds	r3, r7, r0
 800e0d8:	781a      	ldrb	r2, [r3, #0]
 800e0da:	493c      	ldr	r1, [pc, #240]	; (800e1cc <ManageStateAttached_SRC+0x138>)
 800e0dc:	0013      	movs	r3, r2
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	1a9b      	subs	r3, r3, r2
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	585b      	ldr	r3, [r3, r1]
 800e0e6:	695a      	ldr	r2, [r3, #20]
 800e0e8:	23c0      	movs	r3, #192	; 0xc0
 800e0ea:	029b      	lsls	r3, r3, #10
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	e00c      	b.n	800e10a <ManageStateAttached_SRC+0x76>
                  (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800e0f0:	230f      	movs	r3, #15
 800e0f2:	18fb      	adds	r3, r7, r3
 800e0f4:	781a      	ldrb	r2, [r3, #0]
 800e0f6:	4935      	ldr	r1, [pc, #212]	; (800e1cc <ManageStateAttached_SRC+0x138>)
 800e0f8:	0013      	movs	r3, r2
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	1a9b      	subs	r3, r3, r2
 800e0fe:	00db      	lsls	r3, r3, #3
 800e100:	585b      	ldr	r3, [r3, r1]
 800e102:	695a      	ldr	r2, [r3, #20]
  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 800e104:	23c0      	movs	r3, #192	; 0xc0
 800e106:	031b      	lsls	r3, r3, #12
 800e108:	4013      	ands	r3, r2
 800e10a:	61fb      	str	r3, [r7, #28]
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SRC_CC1_VRD : LL_UCPD_SRC_CC2_VRD;
 800e10c:	230f      	movs	r3, #15
 800e10e:	18fb      	adds	r3, r7, r3
 800e110:	781a      	ldrb	r2, [r3, #0]
 800e112:	492e      	ldr	r1, [pc, #184]	; (800e1cc <ManageStateAttached_SRC+0x138>)
 800e114:	0013      	movs	r3, r2
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	1a9b      	subs	r3, r3, r2
 800e11a:	00db      	lsls	r3, r3, #3
 800e11c:	18cb      	adds	r3, r1, r3
 800e11e:	3334      	adds	r3, #52	; 0x34
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b01      	cmp	r3, #1
 800e124:	d102      	bne.n	800e12c <ManageStateAttached_SRC+0x98>
 800e126:	2380      	movs	r3, #128	; 0x80
 800e128:	025b      	lsls	r3, r3, #9
 800e12a:	e001      	b.n	800e130 <ManageStateAttached_SRC+0x9c>
 800e12c:	2380      	movs	r3, #128	; 0x80
 800e12e:	02db      	lsls	r3, r3, #11
 800e130:	61bb      	str	r3, [r7, #24]

  /* Check if CC lines is opened or switch to debug accessory */
  if (comp != ccx)
 800e132:	69ba      	ldr	r2, [r7, #24]
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	429a      	cmp	r2, r3
 800e138:	d039      	beq.n	800e1ae <ManageStateAttached_SRC+0x11a>
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	2220      	movs	r2, #32
 800e140:	4013      	ands	r3, r2
 800e142:	b2db      	uxtb	r3, r3
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10c      	bne.n	800e162 <ManageStateAttached_SRC+0xce>
    {
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 800e148:	6a3b      	ldr	r3, [r7, #32]
 800e14a:	781a      	ldrb	r2, [r3, #0]
 800e14c:	2120      	movs	r1, #32
 800e14e:	430a      	orrs	r2, r1
 800e150:	701a      	strb	r2, [r3, #0]
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 800e152:	f7fb fea7 	bl	8009ea4 <HAL_GetTick>
 800e156:	0002      	movs	r2, r0
 800e158:	6a3b      	ldr	r3, [r7, #32]
 800e15a:	605a      	str	r2, [r3, #4]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 800e15c:	2302      	movs	r3, #2
 800e15e:	627b      	str	r3, [r7, #36]	; 0x24
 800e160:	e02d      	b.n	800e1be <ManageStateAttached_SRC+0x12a>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800e162:	f7fb fe9f 	bl	8009ea4 <HAL_GetTick>
 800e166:	0002      	movs	r2, r0
 800e168:	6a3b      	ldr	r3, [r7, #32]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2b02      	cmp	r3, #2
 800e174:	d923      	bls.n	800e1be <ManageStateAttached_SRC+0x12a>
      {
        HW_SignalDetachment(PortNum);
 800e176:	230f      	movs	r3, #15
 800e178:	18fb      	adds	r3, r7, r3
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	0018      	movs	r0, r3
 800e17e:	f001 fc43 	bl	800fa08 <HW_SignalDetachment>
        if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
        {
          USBPDM1_AssertRd(PortNum);
        }
#endif /* _DRP */
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	781a      	ldrb	r2, [r3, #0]
 800e186:	2120      	movs	r1, #32
 800e188:	438a      	bics	r2, r1
 800e18a:	701a      	strb	r2, [r3, #0]
        /* move inside state DETACH to avoid wrong VCONN level*/
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800e18c:	6a3b      	ldr	r3, [r7, #32]
 800e18e:	785a      	ldrb	r2, [r3, #1]
 800e190:	213e      	movs	r1, #62	; 0x3e
 800e192:	438a      	bics	r2, r1
 800e194:	1c11      	adds	r1, r2, #0
 800e196:	2216      	movs	r2, #22
 800e198:	430a      	orrs	r2, r1
 800e19a:	705a      	strb	r2, [r3, #1]
        *pEvent                     = USBPD_CAD_EVENT_DETACHED;
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	701a      	strb	r2, [r3, #0]
        *pCCXX                      = CCNONE;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]
        _timing                     = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ac:	e007      	b.n	800e1be <ManageStateAttached_SRC+0x12a>
    }
  }
  else
  {
    /* Reset tPDDebounce flag*/
    _handle->CAD_tDebounce_flag   = USBPD_FALSE;
 800e1ae:	6a3b      	ldr	r3, [r7, #32]
 800e1b0:	781a      	ldrb	r2, [r3, #0]
 800e1b2:	2120      	movs	r1, #32
 800e1b4:	438a      	bics	r2, r1
 800e1b6:	701a      	strb	r2, [r3, #0]
    _timing = CAD_INFINITE_TIME;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	425b      	negs	r3, r3
 800e1bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return _timing;
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1c0:	0018      	movs	r0, r3
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	b00a      	add	sp, #40	; 0x28
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	20000ad4 	.word	0x20000ad4
 800e1cc:	20000aec 	.word	0x20000aec

0800e1d0 <CAD_HW_IF_VBUSDetectCallback>:
#endif /* _SNK || _DRP */

#if defined(TCPP0203_SUPPORT)
void CAD_HW_IF_VBUSDetectCallback(uint32_t PortNum,
                                  USBPD_PWR_VBUSConnectionStatusTypeDef VBUSConnectionStatus)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af02      	add	r7, sp, #8
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	000a      	movs	r2, r1
 800e1da:	1cfb      	adds	r3, r7, #3
 800e1dc:	701a      	strb	r2, [r3, #0]
#if defined(_TRACE)
  if (VBUSConnectionStatus == VBUS_CONNECTED)
 800e1de:	1cfb      	adds	r3, r7, #3
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d109      	bne.n	800e1fa <CAD_HW_IF_VBUSDetectCallback+0x2a>
  {
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0,
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	b2d9      	uxtb	r1, r3
 800e1ea:	4b0a      	ldr	r3, [pc, #40]	; (800e214 <CAD_HW_IF_VBUSDetectCallback+0x44>)
 800e1ec:	2233      	movs	r2, #51	; 0x33
 800e1ee:	9200      	str	r2, [sp, #0]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	2006      	movs	r0, #6
 800e1f4:	f7fe fff2 	bl	800d1dc <USBPD_TRACE_Add>
  {
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0,
                    (uint8_t *)"-- USBPD_PWR_VBUSDetectCallback : VBUS_NOT_CONNECTED --", 55);
  }
#endif /* _TRACE */
}
 800e1f8:	e008      	b.n	800e20c <CAD_HW_IF_VBUSDetectCallback+0x3c>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0,
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	b2d9      	uxtb	r1, r3
 800e1fe:	4b06      	ldr	r3, [pc, #24]	; (800e218 <CAD_HW_IF_VBUSDetectCallback+0x48>)
 800e200:	2237      	movs	r2, #55	; 0x37
 800e202:	9200      	str	r2, [sp, #0]
 800e204:	2200      	movs	r2, #0
 800e206:	2006      	movs	r0, #6
 800e208:	f7fe ffe8 	bl	800d1dc <USBPD_TRACE_Add>
}
 800e20c:	46c0      	nop			; (mov r8, r8)
 800e20e:	46bd      	mov	sp, r7
 800e210:	b002      	add	sp, #8
 800e212:	bd80      	pop	{r7, pc}
 800e214:	08019f10 	.word	0x08019f10
 800e218:	08019f44 	.word	0x08019f44

0800e21c <LL_AHB1_GRP1_EnableClock>:
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800e224:	4b07      	ldr	r3, [pc, #28]	; (800e244 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e226:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800e228:	4b06      	ldr	r3, [pc, #24]	; (800e244 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	430a      	orrs	r2, r1
 800e22e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800e230:	4b04      	ldr	r3, [pc, #16]	; (800e244 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	4013      	ands	r3, r2
 800e238:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e23a:	68fb      	ldr	r3, [r7, #12]
}
 800e23c:	46c0      	nop			; (mov r8, r8)
 800e23e:	46bd      	mov	sp, r7
 800e240:	b004      	add	sp, #16
 800e242:	bd80      	pop	{r7, pc}
 800e244:	40021000 	.word	0x40021000

0800e248 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	0002      	movs	r2, r0
 800e250:	1dfb      	adds	r3, r7, #7
 800e252:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 800e254:	4b02      	ldr	r3, [pc, #8]	; (800e260 <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 800e256:	0018      	movs	r0, r3
 800e258:	46bd      	mov	sp, r7
 800e25a:	b002      	add	sp, #8
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	46c0      	nop			; (mov r8, r8)
 800e260:	4000a000 	.word	0x4000a000

0800e264 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800e264:	b590      	push	{r4, r7, lr}
 800e266:	b08f      	sub	sp, #60	; 0x3c
 800e268:	af00      	add	r7, sp, #0
 800e26a:	0002      	movs	r2, r0
 800e26c:	1dfb      	adds	r3, r7, #7
 800e26e:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800e270:	240c      	movs	r4, #12
 800e272:	193b      	adds	r3, r7, r4
 800e274:	0018      	movs	r0, r3
 800e276:	f7fe fb3d 	bl	800c8f4 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800e27a:	193b      	adds	r3, r7, r4
 800e27c:	2200      	movs	r2, #0
 800e27e:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800e280:	193b      	adds	r3, r7, r4
 800e282:	2200      	movs	r2, #0
 800e284:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800e286:	193b      	adds	r3, r7, r4
 800e288:	2200      	movs	r2, #0
 800e28a:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800e28c:	193b      	adds	r3, r7, r4
 800e28e:	2280      	movs	r2, #128	; 0x80
 800e290:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800e292:	193b      	adds	r3, r7, r4
 800e294:	2200      	movs	r2, #0
 800e296:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800e298:	193b      	adds	r3, r7, r4
 800e29a:	2200      	movs	r2, #0
 800e29c:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800e29e:	193b      	adds	r3, r7, r4
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800e2a4:	193b      	adds	r3, r7, r4
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800e2aa:	193b      	adds	r3, r7, r4
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800e2b0:	193b      	adds	r3, r7, r4
 800e2b2:	2280      	movs	r2, #128	; 0x80
 800e2b4:	0192      	lsls	r2, r2, #6
 800e2b6:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 800e2b8:	1dfb      	adds	r3, r7, #7
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10c      	bne.n	800e2da <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	f7ff ffab 	bl	800e21c <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800e2c6:	193b      	adds	r3, r7, r4
 800e2c8:	223a      	movs	r2, #58	; 0x3a
 800e2ca:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800e2cc:	193b      	adds	r3, r7, r4
 800e2ce:	4806      	ldr	r0, [pc, #24]	; (800e2e8 <USBPD_HW_Init_DMARxInstance+0x84>)
 800e2d0:	001a      	movs	r2, r3
 800e2d2:	2103      	movs	r1, #3
 800e2d4:	f7fe face 	bl	800c874 <LL_DMA_Init>
      break;
 800e2d8:	e000      	b.n	800e2dc <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800e2da:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800e2dc:	4b03      	ldr	r3, [pc, #12]	; (800e2ec <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800e2de:	0018      	movs	r0, r3
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	b00f      	add	sp, #60	; 0x3c
 800e2e4:	bd90      	pop	{r4, r7, pc}
 800e2e6:	46c0      	nop			; (mov r8, r8)
 800e2e8:	40020000 	.word	0x40020000
 800e2ec:	40020044 	.word	0x40020044

0800e2f0 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	0002      	movs	r2, r0
 800e2f8:	1dfb      	adds	r3, r7, #7
 800e2fa:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800e2fc:	46c0      	nop			; (mov r8, r8)
 800e2fe:	46bd      	mov	sp, r7
 800e300:	b002      	add	sp, #8
 800e302:	bd80      	pop	{r7, pc}

0800e304 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800e304:	b590      	push	{r4, r7, lr}
 800e306:	b08f      	sub	sp, #60	; 0x3c
 800e308:	af00      	add	r7, sp, #0
 800e30a:	0002      	movs	r2, r0
 800e30c:	1dfb      	adds	r3, r7, #7
 800e30e:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800e310:	240c      	movs	r4, #12
 800e312:	193b      	adds	r3, r7, r4
 800e314:	0018      	movs	r0, r3
 800e316:	f7fe faed 	bl	800c8f4 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800e31a:	193b      	adds	r3, r7, r4
 800e31c:	2210      	movs	r2, #16
 800e31e:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800e320:	193b      	adds	r3, r7, r4
 800e322:	2200      	movs	r2, #0
 800e324:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800e326:	193b      	adds	r3, r7, r4
 800e328:	2200      	movs	r2, #0
 800e32a:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800e32c:	193b      	adds	r3, r7, r4
 800e32e:	2280      	movs	r2, #128	; 0x80
 800e330:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800e332:	193b      	adds	r3, r7, r4
 800e334:	2200      	movs	r2, #0
 800e336:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800e338:	193b      	adds	r3, r7, r4
 800e33a:	2200      	movs	r2, #0
 800e33c:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800e33e:	193b      	adds	r3, r7, r4
 800e340:	2200      	movs	r2, #0
 800e342:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800e344:	193b      	adds	r3, r7, r4
 800e346:	2200      	movs	r2, #0
 800e348:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800e34a:	193b      	adds	r3, r7, r4
 800e34c:	2200      	movs	r2, #0
 800e34e:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 800e350:	1dfb      	adds	r3, r7, #7
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d110      	bne.n	800e37a <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800e358:	2001      	movs	r0, #1
 800e35a:	f7ff ff5f 	bl	800e21c <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800e35e:	193b      	adds	r3, r7, r4
 800e360:	223b      	movs	r2, #59	; 0x3b
 800e362:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800e364:	193b      	adds	r3, r7, r4
 800e366:	2280      	movs	r2, #128	; 0x80
 800e368:	0152      	lsls	r2, r2, #5
 800e36a:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800e36c:	193b      	adds	r3, r7, r4
 800e36e:	4806      	ldr	r0, [pc, #24]	; (800e388 <USBPD_HW_Init_DMATxInstance+0x84>)
 800e370:	001a      	movs	r2, r3
 800e372:	2101      	movs	r1, #1
 800e374:	f7fe fa7e 	bl	800c874 <LL_DMA_Init>
      break;
 800e378:	e000      	b.n	800e37c <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800e37a:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800e37c:	4b03      	ldr	r3, [pc, #12]	; (800e38c <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800e37e:	0018      	movs	r0, r3
 800e380:	46bd      	mov	sp, r7
 800e382:	b00f      	add	sp, #60	; 0x3c
 800e384:	bd90      	pop	{r4, r7, pc}
 800e386:	46c0      	nop			; (mov r8, r8)
 800e388:	40020000 	.word	0x40020000
 800e38c:	4002001c 	.word	0x4002001c

0800e390 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	0002      	movs	r2, r0
 800e398:	1dfb      	adds	r3, r7, #7
 800e39a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800e39c:	46c0      	nop			; (mov r8, r8)
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	b002      	add	sp, #8
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	0002      	movs	r2, r0
 800e3ac:	1dfb      	adds	r3, r7, #7
 800e3ae:	701a      	strb	r2, [r3, #0]
 800e3b0:	1dbb      	adds	r3, r7, #6
 800e3b2:	1c0a      	adds	r2, r1, #0
 800e3b4:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800e3b6:	46c0      	nop			; (mov r8, r8)
  }
}
 800e3b8:	46c0      	nop			; (mov r8, r8)
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	b002      	add	sp, #8
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	699b      	ldr	r3, [r3, #24]
 800e3cc:	2280      	movs	r2, #128	; 0x80
 800e3ce:	0212      	lsls	r2, r2, #8
 800e3d0:	431a      	orrs	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	619a      	str	r2, [r3, #24]
}
 800e3d6:	46c0      	nop			; (mov r8, r8)
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	b002      	add	sp, #8
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	699b      	ldr	r3, [r3, #24]
 800e3ea:	2280      	movs	r2, #128	; 0x80
 800e3ec:	01d2      	lsls	r2, r2, #7
 800e3ee:	431a      	orrs	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	619a      	str	r2, [r3, #24]
}
 800e3f4:	46c0      	nop			; (mov r8, r8)
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	b002      	add	sp, #8
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	2280      	movs	r2, #128	; 0x80
 800e40a:	0152      	lsls	r2, r2, #5
 800e40c:	431a      	orrs	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	619a      	str	r2, [r3, #24]
}
 800e412:	46c0      	nop			; (mov r8, r8)
 800e414:	46bd      	mov	sp, r7
 800e416:	b002      	add	sp, #8
 800e418:	bd80      	pop	{r7, pc}

0800e41a <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b082      	sub	sp, #8
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	2280      	movs	r2, #128	; 0x80
 800e428:	0112      	lsls	r2, r2, #4
 800e42a:	431a      	orrs	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	619a      	str	r2, [r3, #24]
}
 800e430:	46c0      	nop			; (mov r8, r8)
 800e432:	46bd      	mov	sp, r7
 800e434:	b002      	add	sp, #8
 800e436:	bd80      	pop	{r7, pc}

0800e438 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	2280      	movs	r2, #128	; 0x80
 800e446:	00d2      	lsls	r2, r2, #3
 800e448:	431a      	orrs	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	619a      	str	r2, [r3, #24]
}
 800e44e:	46c0      	nop			; (mov r8, r8)
 800e450:	46bd      	mov	sp, r7
 800e452:	b002      	add	sp, #8
 800e454:	bd80      	pop	{r7, pc}

0800e456 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b082      	sub	sp, #8
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	699b      	ldr	r3, [r3, #24]
 800e462:	2280      	movs	r2, #128	; 0x80
 800e464:	0092      	lsls	r2, r2, #2
 800e466:	431a      	orrs	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	619a      	str	r2, [r3, #24]
}
 800e46c:	46c0      	nop			; (mov r8, r8)
 800e46e:	46bd      	mov	sp, r7
 800e470:	b002      	add	sp, #8
 800e472:	bd80      	pop	{r7, pc}

0800e474 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	699b      	ldr	r3, [r3, #24]
 800e480:	2240      	movs	r2, #64	; 0x40
 800e482:	431a      	orrs	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	619a      	str	r2, [r3, #24]
}
 800e488:	46c0      	nop			; (mov r8, r8)
 800e48a:	46bd      	mov	sp, r7
 800e48c:	b002      	add	sp, #8
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	699b      	ldr	r3, [r3, #24]
 800e49c:	2220      	movs	r2, #32
 800e49e:	431a      	orrs	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	619a      	str	r2, [r3, #24]
}
 800e4a4:	46c0      	nop			; (mov r8, r8)
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	b002      	add	sp, #8
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	2210      	movs	r2, #16
 800e4ba:	431a      	orrs	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	619a      	str	r2, [r3, #24]
}
 800e4c0:	46c0      	nop			; (mov r8, r8)
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	b002      	add	sp, #8
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	699b      	ldr	r3, [r3, #24]
 800e4d4:	2208      	movs	r2, #8
 800e4d6:	431a      	orrs	r2, r3
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	619a      	str	r2, [r3, #24]
}
 800e4dc:	46c0      	nop			; (mov r8, r8)
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	b002      	add	sp, #8
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	699b      	ldr	r3, [r3, #24]
 800e4f0:	2204      	movs	r2, #4
 800e4f2:	431a      	orrs	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	619a      	str	r2, [r3, #24]
}
 800e4f8:	46c0      	nop			; (mov r8, r8)
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	b002      	add	sp, #8
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	699b      	ldr	r3, [r3, #24]
 800e50c:	2202      	movs	r2, #2
 800e50e:	431a      	orrs	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	619a      	str	r2, [r3, #24]
}
 800e514:	46c0      	nop			; (mov r8, r8)
 800e516:	46bd      	mov	sp, r7
 800e518:	b002      	add	sp, #8
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800e520:	2000      	movs	r0, #0
 800e522:	f000 f803 	bl	800e52c <PORTx_IRQHandler>
}
 800e526:	46c0      	nop			; (mov r8, r8)
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	0002      	movs	r2, r0
 800e534:	1dfb      	adds	r3, r7, #7
 800e536:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800e538:	1dfb      	adds	r3, r7, #7
 800e53a:	781a      	ldrb	r2, [r3, #0]
 800e53c:	49d1      	ldr	r1, [pc, #836]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e53e:	0013      	movs	r3, r2
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	1a9b      	subs	r3, r3, r2
 800e544:	00db      	lsls	r3, r3, #3
 800e546:	585b      	ldr	r3, [r3, r1]
 800e548:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	68ba      	ldr	r2, [r7, #8]
 800e556:	4013      	ands	r3, r2
 800e558:	d100      	bne.n	800e55c <PORTx_IRQHandler+0x30>
 800e55a:	e1b5      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2202      	movs	r2, #2
 800e560:	4013      	ands	r3, r2
 800e562:	d02c      	beq.n	800e5be <PORTx_IRQHandler+0x92>
    {
      /* the message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	0018      	movs	r0, r3
 800e568:	f7ff ffca 	bl	800e500 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e56c:	1dfb      	adds	r3, r7, #7
 800e56e:	781a      	ldrb	r2, [r3, #0]
 800e570:	49c4      	ldr	r1, [pc, #784]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e572:	0013      	movs	r3, r2
 800e574:	00db      	lsls	r3, r3, #3
 800e576:	1a9b      	subs	r3, r3, r2
 800e578:	00db      	lsls	r3, r3, #3
 800e57a:	18cb      	adds	r3, r1, r3
 800e57c:	3304      	adds	r3, #4
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	6819      	ldr	r1, [r3, #0]
 800e582:	1dfb      	adds	r3, r7, #7
 800e584:	781a      	ldrb	r2, [r3, #0]
 800e586:	48bf      	ldr	r0, [pc, #764]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e588:	0013      	movs	r3, r2
 800e58a:	00db      	lsls	r3, r3, #3
 800e58c:	1a9b      	subs	r3, r3, r2
 800e58e:	00db      	lsls	r3, r3, #3
 800e590:	18c3      	adds	r3, r0, r3
 800e592:	3304      	adds	r3, #4
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2201      	movs	r2, #1
 800e598:	4391      	bics	r1, r2
 800e59a:	000a      	movs	r2, r1
 800e59c:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800e59e:	1dfb      	adds	r3, r7, #7
 800e5a0:	781a      	ldrb	r2, [r3, #0]
 800e5a2:	49b8      	ldr	r1, [pc, #736]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e5a4:	0013      	movs	r3, r2
 800e5a6:	00db      	lsls	r3, r3, #3
 800e5a8:	1a9b      	subs	r3, r3, r2
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	18cb      	adds	r3, r1, r3
 800e5ae:	3314      	adds	r3, #20
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	1dfa      	adds	r2, r7, #7
 800e5b4:	7812      	ldrb	r2, [r2, #0]
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	0010      	movs	r0, r2
 800e5ba:	4798      	blx	r3
      return;
 800e5bc:	e184      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	2204      	movs	r2, #4
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	d02c      	beq.n	800e620 <PORTx_IRQHandler+0xf4>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	0018      	movs	r0, r3
 800e5ca:	f7ff ff8b 	bl	800e4e4 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e5ce:	1dfb      	adds	r3, r7, #7
 800e5d0:	781a      	ldrb	r2, [r3, #0]
 800e5d2:	49ac      	ldr	r1, [pc, #688]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e5d4:	0013      	movs	r3, r2
 800e5d6:	00db      	lsls	r3, r3, #3
 800e5d8:	1a9b      	subs	r3, r3, r2
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	18cb      	adds	r3, r1, r3
 800e5de:	3304      	adds	r3, #4
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6819      	ldr	r1, [r3, #0]
 800e5e4:	1dfb      	adds	r3, r7, #7
 800e5e6:	781a      	ldrb	r2, [r3, #0]
 800e5e8:	48a6      	ldr	r0, [pc, #664]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e5ea:	0013      	movs	r3, r2
 800e5ec:	00db      	lsls	r3, r3, #3
 800e5ee:	1a9b      	subs	r3, r3, r2
 800e5f0:	00db      	lsls	r3, r3, #3
 800e5f2:	18c3      	adds	r3, r0, r3
 800e5f4:	3304      	adds	r3, #4
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	4391      	bics	r1, r2
 800e5fc:	000a      	movs	r2, r1
 800e5fe:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800e600:	1dfb      	adds	r3, r7, #7
 800e602:	781a      	ldrb	r2, [r3, #0]
 800e604:	499f      	ldr	r1, [pc, #636]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e606:	0013      	movs	r3, r2
 800e608:	00db      	lsls	r3, r3, #3
 800e60a:	1a9b      	subs	r3, r3, r2
 800e60c:	00db      	lsls	r3, r3, #3
 800e60e:	18cb      	adds	r3, r1, r3
 800e610:	3314      	adds	r3, #20
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	1dfa      	adds	r2, r7, #7
 800e616:	7812      	ldrb	r2, [r2, #0]
 800e618:	2100      	movs	r1, #0
 800e61a:	0010      	movs	r0, r2
 800e61c:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 800e61e:	e153      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2208      	movs	r2, #8
 800e624:	4013      	ands	r3, r2
 800e626:	d02c      	beq.n	800e682 <PORTx_IRQHandler+0x156>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	0018      	movs	r0, r3
 800e62c:	f7ff ff4c 	bl	800e4c8 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e630:	1dfb      	adds	r3, r7, #7
 800e632:	781a      	ldrb	r2, [r3, #0]
 800e634:	4993      	ldr	r1, [pc, #588]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e636:	0013      	movs	r3, r2
 800e638:	00db      	lsls	r3, r3, #3
 800e63a:	1a9b      	subs	r3, r3, r2
 800e63c:	00db      	lsls	r3, r3, #3
 800e63e:	18cb      	adds	r3, r1, r3
 800e640:	3304      	adds	r3, #4
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	6819      	ldr	r1, [r3, #0]
 800e646:	1dfb      	adds	r3, r7, #7
 800e648:	781a      	ldrb	r2, [r3, #0]
 800e64a:	488e      	ldr	r0, [pc, #568]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e64c:	0013      	movs	r3, r2
 800e64e:	00db      	lsls	r3, r3, #3
 800e650:	1a9b      	subs	r3, r3, r2
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	18c3      	adds	r3, r0, r3
 800e656:	3304      	adds	r3, #4
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2201      	movs	r2, #1
 800e65c:	4391      	bics	r1, r2
 800e65e:	000a      	movs	r2, r1
 800e660:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800e662:	1dfb      	adds	r3, r7, #7
 800e664:	781a      	ldrb	r2, [r3, #0]
 800e666:	4987      	ldr	r1, [pc, #540]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e668:	0013      	movs	r3, r2
 800e66a:	00db      	lsls	r3, r3, #3
 800e66c:	1a9b      	subs	r3, r3, r2
 800e66e:	00db      	lsls	r3, r3, #3
 800e670:	18cb      	adds	r3, r1, r3
 800e672:	3314      	adds	r3, #20
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	1dfa      	adds	r2, r7, #7
 800e678:	7812      	ldrb	r2, [r2, #0]
 800e67a:	2102      	movs	r1, #2
 800e67c:	0010      	movs	r0, r2
 800e67e:	4798      	blx	r3
      return;
 800e680:	e122      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    /* HRSTDISC : the sent of the hrad reset has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	2210      	movs	r2, #16
 800e686:	4013      	ands	r3, r2
 800e688:	d004      	beq.n	800e694 <PORTx_IRQHandler+0x168>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	0018      	movs	r0, r3
 800e68e:	f7ff ff0d 	bl	800e4ac <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800e692:	e119      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	2220      	movs	r2, #32
 800e698:	4013      	ands	r3, r2
 800e69a:	d013      	beq.n	800e6c4 <PORTx_IRQHandler+0x198>
    {
      /* Mhum, the stack is not expected to get this answer */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	0018      	movs	r0, r3
 800e6a0:	f7ff fef6 	bl	800e490 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800e6a4:	1dfb      	adds	r3, r7, #7
 800e6a6:	781a      	ldrb	r2, [r3, #0]
 800e6a8:	4976      	ldr	r1, [pc, #472]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e6aa:	0013      	movs	r3, r2
 800e6ac:	00db      	lsls	r3, r3, #3
 800e6ae:	1a9b      	subs	r3, r3, r2
 800e6b0:	00db      	lsls	r3, r3, #3
 800e6b2:	18cb      	adds	r3, r1, r3
 800e6b4:	3324      	adds	r3, #36	; 0x24
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	1dfa      	adds	r2, r7, #7
 800e6ba:	7812      	ldrb	r2, [r2, #0]
 800e6bc:	2105      	movs	r1, #5
 800e6be:	0010      	movs	r0, r2
 800e6c0:	4798      	blx	r3
      return;
 800e6c2:	e101      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	2240      	movs	r2, #64	; 0x40
 800e6c8:	4013      	ands	r3, r2
 800e6ca:	d004      	beq.n	800e6d6 <PORTx_IRQHandler+0x1aa>
    {
      /* nothing to do the port partner check message integrity with CRC so PRL will repeat the sent
         can be used for debug purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	0018      	movs	r0, r3
 800e6d0:	f7ff fed0 	bl	800e474 <LL_UCPD_ClearFlag_TxUND>
      return;
 800e6d4:	e0f8      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800e6d6:	68ba      	ldr	r2, [r7, #8]
 800e6d8:	2380      	movs	r3, #128	; 0x80
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	4013      	ands	r3, r2
 800e6de:	d017      	beq.n	800e710 <PORTx_IRQHandler+0x1e4>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e4:	2b05      	cmp	r3, #5
 800e6e6:	d10e      	bne.n	800e706 <PORTx_IRQHandler+0x1da>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800e6e8:	1dfb      	adds	r3, r7, #7
 800e6ea:	781a      	ldrb	r2, [r3, #0]
 800e6ec:	4965      	ldr	r1, [pc, #404]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e6ee:	0013      	movs	r3, r2
 800e6f0:	00db      	lsls	r3, r3, #3
 800e6f2:	1a9b      	subs	r3, r3, r2
 800e6f4:	00db      	lsls	r3, r3, #3
 800e6f6:	18cb      	adds	r3, r1, r3
 800e6f8:	331c      	adds	r3, #28
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	1dfa      	adds	r2, r7, #7
 800e6fe:	7812      	ldrb	r2, [r2, #0]
 800e700:	2106      	movs	r1, #6
 800e702:	0010      	movs	r0, r2
 800e704:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	0018      	movs	r0, r3
 800e70a:	f7ff fea4 	bl	800e456 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
      return;
 800e70e:	e0db      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    /* check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	2380      	movs	r3, #128	; 0x80
 800e714:	00db      	lsls	r3, r3, #3
 800e716:	4013      	ands	r3, r2
 800e718:	d013      	beq.n	800e742 <PORTx_IRQHandler+0x216>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800e71a:	1dfb      	adds	r3, r7, #7
 800e71c:	781a      	ldrb	r2, [r3, #0]
 800e71e:	4959      	ldr	r1, [pc, #356]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e720:	0013      	movs	r3, r2
 800e722:	00db      	lsls	r3, r3, #3
 800e724:	1a9b      	subs	r3, r3, r2
 800e726:	00db      	lsls	r3, r3, #3
 800e728:	18cb      	adds	r3, r1, r3
 800e72a:	331c      	adds	r3, #28
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	1dfa      	adds	r2, r7, #7
 800e730:	7812      	ldrb	r2, [r2, #0]
 800e732:	2105      	movs	r1, #5
 800e734:	0010      	movs	r0, r2
 800e736:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	0018      	movs	r0, r3
 800e73c:	f7ff fe7c 	bl	800e438 <LL_UCPD_ClearFlag_RxHRST>
      return;
 800e740:	e0c2      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    /* check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	2380      	movs	r3, #128	; 0x80
 800e746:	011b      	lsls	r3, r3, #4
 800e748:	4013      	ands	r3, r2
 800e74a:	d009      	beq.n	800e760 <PORTx_IRQHandler+0x234>
    {
      /* nothing to do the message will be discarded and the port partner retry the send */
      ovrflag[PortNum] = 1;
 800e74c:	1dfb      	adds	r3, r7, #7
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	4a4d      	ldr	r2, [pc, #308]	; (800e888 <PORTx_IRQHandler+0x35c>)
 800e752:	2101      	movs	r1, #1
 800e754:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	0018      	movs	r0, r3
 800e75a:	f7ff fe5e 	bl	800e41a <LL_UCPD_ClearFlag_RxOvr>
      return;
 800e75e:	e0b3      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
    }

    /* check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	2380      	movs	r3, #128	; 0x80
 800e764:	015b      	lsls	r3, r3, #5
 800e766:	4013      	ands	r3, r2
 800e768:	d100      	bne.n	800e76c <PORTx_IRQHandler+0x240>
 800e76a:	e08f      	b.n	800e88c <PORTx_IRQHandler+0x360>
    {
      /* for DMA mode add a control to check if the number of data received is corresponding with the number of
         data receive by USBPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	0018      	movs	r0, r3
 800e770:	f7ff fe44 	bl	800e3fc <LL_UCPD_ClearFlag_RxMsgEnd>

      /* disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800e774:	1dfb      	adds	r3, r7, #7
 800e776:	781a      	ldrb	r2, [r3, #0]
 800e778:	4942      	ldr	r1, [pc, #264]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e77a:	0013      	movs	r3, r2
 800e77c:	00db      	lsls	r3, r3, #3
 800e77e:	1a9b      	subs	r3, r3, r2
 800e780:	00db      	lsls	r3, r3, #3
 800e782:	18cb      	adds	r3, r1, r3
 800e784:	3308      	adds	r3, #8
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	6819      	ldr	r1, [r3, #0]
 800e78a:	1dfb      	adds	r3, r7, #7
 800e78c:	781a      	ldrb	r2, [r3, #0]
 800e78e:	483d      	ldr	r0, [pc, #244]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e790:	0013      	movs	r3, r2
 800e792:	00db      	lsls	r3, r3, #3
 800e794:	1a9b      	subs	r3, r3, r2
 800e796:	00db      	lsls	r3, r3, #3
 800e798:	18c3      	adds	r3, r0, r3
 800e79a:	3308      	adds	r3, #8
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	4391      	bics	r1, r2
 800e7a2:	000a      	movs	r2, r1
 800e7a4:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800e7a6:	46c0      	nop			; (mov r8, r8)
 800e7a8:	1dfb      	adds	r3, r7, #7
 800e7aa:	781a      	ldrb	r2, [r3, #0]
 800e7ac:	4935      	ldr	r1, [pc, #212]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e7ae:	0013      	movs	r3, r2
 800e7b0:	00db      	lsls	r3, r3, #3
 800e7b2:	1a9b      	subs	r3, r3, r2
 800e7b4:	00db      	lsls	r3, r3, #3
 800e7b6:	18cb      	adds	r3, r1, r3
 800e7b8:	3308      	adds	r3, #8
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	4013      	ands	r3, r2
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d0f0      	beq.n	800e7a8 <PORTx_IRQHandler+0x27c>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800e7c6:	1dfb      	adds	r3, r7, #7
 800e7c8:	781a      	ldrb	r2, [r3, #0]
 800e7ca:	492e      	ldr	r1, [pc, #184]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e7cc:	0013      	movs	r3, r2
 800e7ce:	00db      	lsls	r3, r3, #3
 800e7d0:	1a9b      	subs	r3, r3, r2
 800e7d2:	00db      	lsls	r3, r3, #3
 800e7d4:	18cb      	adds	r3, r1, r3
 800e7d6:	3330      	adds	r3, #48	; 0x30
 800e7d8:	6818      	ldr	r0, [r3, #0]
 800e7da:	1dfb      	adds	r3, r7, #7
 800e7dc:	781a      	ldrb	r2, [r3, #0]
 800e7de:	4929      	ldr	r1, [pc, #164]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e7e0:	0013      	movs	r3, r2
 800e7e2:	00db      	lsls	r3, r3, #3
 800e7e4:	1a9b      	subs	r3, r3, r2
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	18cb      	adds	r3, r1, r3
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	0002      	movs	r2, r0
 800e7f0:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800e7f2:	1dfb      	adds	r3, r7, #7
 800e7f4:	781a      	ldrb	r2, [r3, #0]
 800e7f6:	4923      	ldr	r1, [pc, #140]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e7f8:	0013      	movs	r3, r2
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	1a9b      	subs	r3, r3, r2
 800e7fe:	00db      	lsls	r3, r3, #3
 800e800:	18cb      	adds	r3, r1, r3
 800e802:	3308      	adds	r3, #8
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2284      	movs	r2, #132	; 0x84
 800e808:	0052      	lsls	r2, r2, #1
 800e80a:	605a      	str	r2, [r3, #4]

      /* enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800e80c:	1dfb      	adds	r3, r7, #7
 800e80e:	781a      	ldrb	r2, [r3, #0]
 800e810:	491c      	ldr	r1, [pc, #112]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e812:	0013      	movs	r3, r2
 800e814:	00db      	lsls	r3, r3, #3
 800e816:	1a9b      	subs	r3, r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	18cb      	adds	r3, r1, r3
 800e81c:	3308      	adds	r3, #8
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6819      	ldr	r1, [r3, #0]
 800e822:	1dfb      	adds	r3, r7, #7
 800e824:	781a      	ldrb	r2, [r3, #0]
 800e826:	4817      	ldr	r0, [pc, #92]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e828:	0013      	movs	r3, r2
 800e82a:	00db      	lsls	r3, r3, #3
 800e82c:	1a9b      	subs	r3, r3, r2
 800e82e:	00db      	lsls	r3, r3, #3
 800e830:	18c3      	adds	r3, r0, r3
 800e832:	3308      	adds	r3, #8
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2201      	movs	r2, #1
 800e838:	430a      	orrs	r2, r1
 800e83a:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 800e83c:	68ba      	ldr	r2, [r7, #8]
 800e83e:	2380      	movs	r3, #128	; 0x80
 800e840:	019b      	lsls	r3, r3, #6
 800e842:	4013      	ands	r3, r2
 800e844:	d117      	bne.n	800e876 <PORTx_IRQHandler+0x34a>
 800e846:	1dfb      	adds	r3, r7, #7
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	4a0f      	ldr	r2, [pc, #60]	; (800e888 <PORTx_IRQHandler+0x35c>)
 800e84c:	5cd3      	ldrb	r3, [r2, r3]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d111      	bne.n	800e876 <PORTx_IRQHandler+0x34a>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800e852:	1dfb      	adds	r3, r7, #7
 800e854:	781a      	ldrb	r2, [r3, #0]
 800e856:	490b      	ldr	r1, [pc, #44]	; (800e884 <PORTx_IRQHandler+0x358>)
 800e858:	0013      	movs	r3, r2
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	1a9b      	subs	r3, r3, r2
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	18cb      	adds	r3, r1, r3
 800e862:	3320      	adds	r3, #32
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e86a:	2107      	movs	r1, #7
 800e86c:	4019      	ands	r1, r3
 800e86e:	1dfb      	adds	r3, r7, #7
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	0018      	movs	r0, r3
 800e874:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 800e876:	1dfb      	adds	r3, r7, #7
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	4a03      	ldr	r2, [pc, #12]	; (800e888 <PORTx_IRQHandler+0x35c>)
 800e87c:	2100      	movs	r1, #0
 800e87e:	54d1      	strb	r1, [r2, r3]
      return;
 800e880:	e022      	b.n	800e8c8 <PORTx_IRQHandler+0x39c>
 800e882:	46c0      	nop			; (mov r8, r8)
 800e884:	20000aec 	.word	0x20000aec
 800e888:	20000ae0 	.word	0x20000ae0
    }

    /* check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	2380      	movs	r3, #128	; 0x80
 800e890:	01db      	lsls	r3, r3, #7
 800e892:	4013      	ands	r3, r2
 800e894:	d104      	bne.n	800e8a0 <PORTx_IRQHandler+0x374>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	2380      	movs	r3, #128	; 0x80
 800e89a:	021b      	lsls	r3, r3, #8
 800e89c:	4013      	ands	r3, r2
 800e89e:	d013      	beq.n	800e8c8 <PORTx_IRQHandler+0x39c>
    {
      /* clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	0018      	movs	r0, r3
 800e8a4:	f7ff fd9b 	bl	800e3de <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	0018      	movs	r0, r3
 800e8ac:	f7ff fd88 	bl	800e3c0 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800e8b0:	1dfb      	adds	r3, r7, #7
 800e8b2:	781a      	ldrb	r2, [r3, #0]
 800e8b4:	4906      	ldr	r1, [pc, #24]	; (800e8d0 <PORTx_IRQHandler+0x3a4>)
 800e8b6:	0013      	movs	r3, r2
 800e8b8:	00db      	lsls	r3, r3, #3
 800e8ba:	1a9b      	subs	r3, r3, r2
 800e8bc:	00db      	lsls	r3, r3, #3
 800e8be:	18cb      	adds	r3, r1, r3
 800e8c0:	332c      	adds	r3, #44	; 0x2c
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800e8c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	b004      	add	sp, #16
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	46c0      	nop			; (mov r8, r8)
 800e8d0:	20000aec 	.word	0x20000aec

0800e8d4 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800e8d4:	b590      	push	{r4, r7, lr}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
 800e8de:	603b      	str	r3, [r7, #0]
 800e8e0:	240f      	movs	r4, #15
 800e8e2:	193b      	adds	r3, r7, r4
 800e8e4:	1c02      	adds	r2, r0, #0
 800e8e6:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800e8e8:	193b      	adds	r3, r7, r4
 800e8ea:	781a      	ldrb	r2, [r3, #0]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	6919      	ldr	r1, [r3, #16]
 800e8f0:	4830      	ldr	r0, [pc, #192]	; (800e9b4 <USBPD_PHY_Init+0xe0>)
 800e8f2:	0013      	movs	r3, r2
 800e8f4:	00db      	lsls	r3, r3, #3
 800e8f6:	1a9b      	subs	r3, r3, r2
 800e8f8:	00db      	lsls	r3, r3, #3
 800e8fa:	18c3      	adds	r3, r0, r3
 800e8fc:	3314      	adds	r3, #20
 800e8fe:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800e900:	193b      	adds	r3, r7, r4
 800e902:	781a      	ldrb	r2, [r3, #0]
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	68d9      	ldr	r1, [r3, #12]
 800e908:	482a      	ldr	r0, [pc, #168]	; (800e9b4 <USBPD_PHY_Init+0xe0>)
 800e90a:	0013      	movs	r3, r2
 800e90c:	00db      	lsls	r3, r3, #3
 800e90e:	1a9b      	subs	r3, r3, r2
 800e910:	00db      	lsls	r3, r3, #3
 800e912:	18c3      	adds	r3, r0, r3
 800e914:	3318      	adds	r3, #24
 800e916:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800e918:	193b      	adds	r3, r7, r4
 800e91a:	781a      	ldrb	r2, [r3, #0]
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	6859      	ldr	r1, [r3, #4]
 800e920:	4824      	ldr	r0, [pc, #144]	; (800e9b4 <USBPD_PHY_Init+0xe0>)
 800e922:	0013      	movs	r3, r2
 800e924:	00db      	lsls	r3, r3, #3
 800e926:	1a9b      	subs	r3, r3, r2
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	18c3      	adds	r3, r0, r3
 800e92c:	331c      	adds	r3, #28
 800e92e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800e930:	193b      	adds	r3, r7, r4
 800e932:	781a      	ldrb	r2, [r3, #0]
 800e934:	491f      	ldr	r1, [pc, #124]	; (800e9b4 <USBPD_PHY_Init+0xe0>)
 800e936:	0013      	movs	r3, r2
 800e938:	00db      	lsls	r3, r3, #3
 800e93a:	1a9b      	subs	r3, r3, r2
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	18cb      	adds	r3, r1, r3
 800e940:	3320      	adds	r3, #32
 800e942:	4a1d      	ldr	r2, [pc, #116]	; (800e9b8 <USBPD_PHY_Init+0xe4>)
 800e944:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800e946:	193b      	adds	r3, r7, r4
 800e948:	781a      	ldrb	r2, [r3, #0]
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	6899      	ldr	r1, [r3, #8]
 800e94e:	4819      	ldr	r0, [pc, #100]	; (800e9b4 <USBPD_PHY_Init+0xe0>)
 800e950:	0013      	movs	r3, r2
 800e952:	00db      	lsls	r3, r3, #3
 800e954:	1a9b      	subs	r3, r3, r2
 800e956:	00db      	lsls	r3, r3, #3
 800e958:	18c3      	adds	r3, r0, r3
 800e95a:	3324      	adds	r3, #36	; 0x24
 800e95c:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800e95e:	193b      	adds	r3, r7, r4
 800e960:	781a      	ldrb	r2, [r3, #0]
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	6959      	ldr	r1, [r3, #20]
 800e966:	4813      	ldr	r0, [pc, #76]	; (800e9b4 <USBPD_PHY_Init+0xe0>)
 800e968:	0013      	movs	r3, r2
 800e96a:	00db      	lsls	r3, r3, #3
 800e96c:	1a9b      	subs	r3, r3, r2
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	18c3      	adds	r3, r0, r3
 800e972:	3328      	adds	r3, #40	; 0x28
 800e974:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800e976:	193b      	adds	r3, r7, r4
 800e978:	781a      	ldrb	r2, [r3, #0]
 800e97a:	490e      	ldr	r1, [pc, #56]	; (800e9b4 <USBPD_PHY_Init+0xe0>)
 800e97c:	0013      	movs	r3, r2
 800e97e:	00db      	lsls	r3, r3, #3
 800e980:	1a9b      	subs	r3, r3, r2
 800e982:	00db      	lsls	r3, r3, #3
 800e984:	18cb      	adds	r3, r1, r3
 800e986:	3330      	adds	r3, #48	; 0x30
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800e98c:	193b      	adds	r3, r7, r4
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	4a0a      	ldr	r2, [pc, #40]	; (800e9bc <USBPD_PHY_Init+0xe8>)
 800e992:	00db      	lsls	r3, r3, #3
 800e994:	18d3      	adds	r3, r2, r3
 800e996:	3304      	adds	r3, #4
 800e998:	6a3a      	ldr	r2, [r7, #32]
 800e99a:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800e99c:	193b      	adds	r3, r7, r4
 800e99e:	781a      	ldrb	r2, [r3, #0]
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	6819      	ldr	r1, [r3, #0]
 800e9a4:	4b05      	ldr	r3, [pc, #20]	; (800e9bc <USBPD_PHY_Init+0xe8>)
 800e9a6:	00d2      	lsls	r2, r2, #3
 800e9a8:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	0018      	movs	r0, r3
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	b005      	add	sp, #20
 800e9b2:	bd90      	pop	{r4, r7, pc}
 800e9b4:	20000aec 	.word	0x20000aec
 800e9b8:	0800eba5 	.word	0x0800eba5
 800e9bc:	20000ae4 	.word	0x20000ae4

0800e9c0 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not aknowledge by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	0002      	movs	r2, r0
 800e9c8:	1dfb      	adds	r3, r7, #7
 800e9ca:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 800e9cc:	4b02      	ldr	r3, [pc, #8]	; (800e9d8 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 800e9ce:	0018      	movs	r0, r3
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	b002      	add	sp, #8
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	46c0      	nop			; (mov r8, r8)
 800e9d8:	00000389 	.word	0x00000389

0800e9dc <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	0002      	movs	r2, r0
 800e9e4:	1dfb      	adds	r3, r7, #7
 800e9e6:	701a      	strb	r2, [r3, #0]
  return 30u;
 800e9e8:	231e      	movs	r3, #30
}
 800e9ea:	0018      	movs	r0, r3
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	b002      	add	sp, #8
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b082      	sub	sp, #8
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	0002      	movs	r2, r0
 800e9fa:	1dfb      	adds	r3, r7, #7
 800e9fc:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 800e9fe:	46c0      	nop			; (mov r8, r8)
 800ea00:	46bd      	mov	sp, r7
 800ea02:	b002      	add	sp, #8
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b082      	sub	sp, #8
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	0002      	movs	r2, r0
 800ea0e:	1dfb      	adds	r3, r7, #7
 800ea10:	701a      	strb	r2, [r3, #0]
 800ea12:	1dbb      	adds	r3, r7, #6
 800ea14:	1c0a      	adds	r2, r1, #0
 800ea16:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800ea18:	1dbb      	adds	r3, r7, #6
 800ea1a:	7819      	ldrb	r1, [r3, #0]
 800ea1c:	1dfb      	adds	r3, r7, #7
 800ea1e:	7818      	ldrb	r0, [r3, #0]
 800ea20:	2300      	movs	r3, #0
 800ea22:	2200      	movs	r2, #0
 800ea24:	f000 f805 	bl	800ea32 <USBPD_PHY_SendMessage>
 800ea28:	0003      	movs	r3, r0
}
 800ea2a:	0018      	movs	r0, r3
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	b002      	add	sp, #8
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800ea32:	b590      	push	{r4, r7, lr}
 800ea34:	b083      	sub	sp, #12
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	0004      	movs	r4, r0
 800ea3a:	0008      	movs	r0, r1
 800ea3c:	603a      	str	r2, [r7, #0]
 800ea3e:	0019      	movs	r1, r3
 800ea40:	1dfb      	adds	r3, r7, #7
 800ea42:	1c22      	adds	r2, r4, #0
 800ea44:	701a      	strb	r2, [r3, #0]
 800ea46:	1dbb      	adds	r3, r7, #6
 800ea48:	1c02      	adds	r2, r0, #0
 800ea4a:	701a      	strb	r2, [r3, #0]
 800ea4c:	1d3b      	adds	r3, r7, #4
 800ea4e:	1c0a      	adds	r2, r1, #0
 800ea50:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800ea52:	1d3b      	adds	r3, r7, #4
 800ea54:	881c      	ldrh	r4, [r3, #0]
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	1dbb      	adds	r3, r7, #6
 800ea5a:	7819      	ldrb	r1, [r3, #0]
 800ea5c:	1dfb      	adds	r3, r7, #7
 800ea5e:	7818      	ldrb	r0, [r3, #0]
 800ea60:	0023      	movs	r3, r4
 800ea62:	f000 fb2f 	bl	800f0c4 <USBPD_HW_IF_SendBuffer>
 800ea66:	0003      	movs	r3, r0
}
 800ea68:	0018      	movs	r0, r3
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	b003      	add	sp, #12
 800ea6e:	bd90      	pop	{r4, r7, pc}

0800ea70 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	0002      	movs	r2, r0
 800ea78:	1dfb      	adds	r3, r7, #7
 800ea7a:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800ea7c:	1dfb      	adds	r3, r7, #7
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	0018      	movs	r0, r3
 800ea82:	f000 fc1b 	bl	800f2bc <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800ea86:	2300      	movs	r3, #0
}
 800ea88:	0018      	movs	r0, r3
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	b002      	add	sp, #8
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	0002      	movs	r2, r0
 800ea98:	1dfb      	adds	r3, r7, #7
 800ea9a:	701a      	strb	r2, [r3, #0]
 800ea9c:	1dbb      	adds	r3, r7, #6
 800ea9e:	1c0a      	adds	r2, r1, #0
 800eaa0:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800eaa2:	1dbb      	adds	r3, r7, #6
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	2b07      	cmp	r3, #7
 800eaa8:	d104      	bne.n	800eab4 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800eaaa:	1dfb      	adds	r3, r7, #7
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	0018      	movs	r0, r3
 800eab0:	f000 fad0 	bl	800f054 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	0018      	movs	r0, r3
 800eab8:	46bd      	mov	sp, r7
 800eaba:	b002      	add	sp, #8
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b082      	sub	sp, #8
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	0002      	movs	r2, r0
 800eac6:	1dfb      	adds	r3, r7, #7
 800eac8:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 800eaca:	1dfb      	adds	r3, r7, #7
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	0018      	movs	r0, r3
 800ead0:	f001 f828 	bl	800fb24 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 800ead4:	46c0      	nop			; (mov r8, r8)
 800ead6:	46bd      	mov	sp, r7
 800ead8:	b002      	add	sp, #8
 800eada:	bd80      	pop	{r7, pc}

0800eadc <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	0002      	movs	r2, r0
 800eae4:	1dfb      	adds	r3, r7, #7
 800eae6:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 800eae8:	1dfb      	adds	r3, r7, #7
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	0018      	movs	r0, r3
 800eaee:	f001 f833 	bl	800fb58 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 800eaf2:	46c0      	nop			; (mov r8, r8)
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	b002      	add	sp, #8
 800eaf8:	bd80      	pop	{r7, pc}
	...

0800eafc <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	0002      	movs	r2, r0
 800eb04:	6039      	str	r1, [r7, #0]
 800eb06:	1dfb      	adds	r3, r7, #7
 800eb08:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 800eb0a:	1dfb      	adds	r3, r7, #7
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	4a05      	ldr	r2, [pc, #20]	; (800eb24 <USBPD_PHY_SOPSupported+0x28>)
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	18d3      	adds	r3, r2, r3
 800eb14:	3304      	adds	r3, #4
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	601a      	str	r2, [r3, #0]
}
 800eb1a:	46c0      	nop			; (mov r8, r8)
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	b002      	add	sp, #8
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	46c0      	nop			; (mov r8, r8)
 800eb24:	20000ae4 	.word	0x20000ae4

0800eb28 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	0002      	movs	r2, r0
 800eb30:	1dfb      	adds	r3, r7, #7
 800eb32:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800eb34:	1dfb      	adds	r3, r7, #7
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	0018      	movs	r0, r3
 800eb3a:	f001 f827 	bl	800fb8c <USBPD_HW_IF_IsResistor_SinkTxOk>
 800eb3e:	0003      	movs	r3, r0
}
 800eb40:	0018      	movs	r0, r3
 800eb42:	46bd      	mov	sp, r7
 800eb44:	b002      	add	sp, #8
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	0002      	movs	r2, r0
 800eb50:	1dfb      	adds	r3, r7, #7
 800eb52:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 800eb54:	1dfb      	adds	r3, r7, #7
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	0018      	movs	r0, r3
 800eb5a:	f001 f85b 	bl	800fc14 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 800eb5e:	46c0      	nop			; (mov r8, r8)
 800eb60:	46bd      	mov	sp, r7
 800eb62:	b002      	add	sp, #8
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b082      	sub	sp, #8
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	0002      	movs	r2, r0
 800eb6e:	1dfb      	adds	r3, r7, #7
 800eb70:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 800eb72:	1dfb      	adds	r3, r7, #7
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	0018      	movs	r0, r3
 800eb78:	f000 fdb4 	bl	800f6e4 <USBPD_HW_IF_EnableRX>
}
 800eb7c:	46c0      	nop			; (mov r8, r8)
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	b002      	add	sp, #8
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	0002      	movs	r2, r0
 800eb8c:	1dfb      	adds	r3, r7, #7
 800eb8e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 800eb90:	1dfb      	adds	r3, r7, #7
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	0018      	movs	r0, r3
 800eb96:	f000 fdbd 	bl	800f714 <USBPD_HW_IF_DisableRX>
}
 800eb9a:	46c0      	nop			; (mov r8, r8)
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	b002      	add	sp, #8
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800eba4:	b590      	push	{r4, r7, lr}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	0002      	movs	r2, r0
 800ebac:	6039      	str	r1, [r7, #0]
 800ebae:	1dfb      	adds	r3, r7, #7
 800ebb0:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 800ebb2:	2008      	movs	r0, #8
 800ebb4:	183b      	adds	r3, r7, r0
 800ebb6:	4a2e      	ldr	r2, [pc, #184]	; (800ec70 <PHY_Rx_Completed+0xcc>)
 800ebb8:	6811      	ldr	r1, [r2, #0]
 800ebba:	6019      	str	r1, [r3, #0]
 800ebbc:	8892      	ldrh	r2, [r2, #4]
 800ebbe:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800ebc0:	240f      	movs	r4, #15
 800ebc2:	193b      	adds	r3, r7, r4
 800ebc4:	1839      	adds	r1, r7, r0
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	188a      	adds	r2, r1, r2
 800ebca:	7812      	ldrb	r2, [r2, #0]
 800ebcc:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800ebce:	193b      	adds	r3, r7, r4
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	2b04      	cmp	r3, #4
 800ebd4:	dc02      	bgt.n	800ebdc <PHY_Rx_Completed+0x38>
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	da1d      	bge.n	800ec16 <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 800ebda:	e040      	b.n	800ec5e <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 800ebdc:	2b06      	cmp	r3, #6
 800ebde:	d13e      	bne.n	800ec5e <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800ebe0:	1dfb      	adds	r3, r7, #7
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	4a23      	ldr	r2, [pc, #140]	; (800ec74 <PHY_Rx_Completed+0xd0>)
 800ebe6:	00db      	lsls	r3, r3, #3
 800ebe8:	18d3      	adds	r3, r2, r3
 800ebea:	3304      	adds	r3, #4
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	221e      	movs	r2, #30
 800ebf0:	4013      	ands	r3, r2
 800ebf2:	2b1e      	cmp	r3, #30
 800ebf4:	d135      	bne.n	800ec62 <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800ebf6:	1dfb      	adds	r3, r7, #7
 800ebf8:	781a      	ldrb	r2, [r3, #0]
 800ebfa:	491f      	ldr	r1, [pc, #124]	; (800ec78 <PHY_Rx_Completed+0xd4>)
 800ebfc:	0013      	movs	r3, r2
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	1a9b      	subs	r3, r3, r2
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	18cb      	adds	r3, r1, r3
 800ec06:	331c      	adds	r3, #28
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	1dfa      	adds	r2, r7, #7
 800ec0c:	7812      	ldrb	r2, [r2, #0]
 800ec0e:	2106      	movs	r1, #6
 800ec10:	0010      	movs	r0, r2
 800ec12:	4798      	blx	r3
      break;
 800ec14:	e025      	b.n	800ec62 <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800ec16:	240f      	movs	r4, #15
 800ec18:	193b      	adds	r3, r7, r4
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	409a      	lsls	r2, r3
 800ec20:	0013      	movs	r3, r2
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	0018      	movs	r0, r3
 800ec26:	1dfb      	adds	r3, r7, #7
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	4a12      	ldr	r2, [pc, #72]	; (800ec74 <PHY_Rx_Completed+0xd0>)
 800ec2c:	00db      	lsls	r3, r3, #3
 800ec2e:	18d3      	adds	r3, r2, r3
 800ec30:	3304      	adds	r3, #4
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	193a      	adds	r2, r7, r4
 800ec36:	7812      	ldrb	r2, [r2, #0]
 800ec38:	2101      	movs	r1, #1
 800ec3a:	4091      	lsls	r1, r2
 800ec3c:	000a      	movs	r2, r1
 800ec3e:	b2d2      	uxtb	r2, r2
 800ec40:	4013      	ands	r3, r2
 800ec42:	4298      	cmp	r0, r3
 800ec44:	d10f      	bne.n	800ec66 <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800ec46:	1dfb      	adds	r3, r7, #7
 800ec48:	781a      	ldrb	r2, [r3, #0]
 800ec4a:	4b0a      	ldr	r3, [pc, #40]	; (800ec74 <PHY_Rx_Completed+0xd0>)
 800ec4c:	00d2      	lsls	r2, r2, #3
 800ec4e:	58d3      	ldr	r3, [r2, r3]
 800ec50:	193a      	adds	r2, r7, r4
 800ec52:	7811      	ldrb	r1, [r2, #0]
 800ec54:	1dfa      	adds	r2, r7, #7
 800ec56:	7812      	ldrb	r2, [r2, #0]
 800ec58:	0010      	movs	r0, r2
 800ec5a:	4798      	blx	r3
      break;
 800ec5c:	e003      	b.n	800ec66 <PHY_Rx_Completed+0xc2>
      break;
 800ec5e:	46c0      	nop			; (mov r8, r8)
 800ec60:	e002      	b.n	800ec68 <PHY_Rx_Completed+0xc4>
      break;
 800ec62:	46c0      	nop			; (mov r8, r8)
 800ec64:	e000      	b.n	800ec68 <PHY_Rx_Completed+0xc4>
      break;
 800ec66:	46c0      	nop			; (mov r8, r8)
  }
}
 800ec68:	46c0      	nop			; (mov r8, r8)
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	b005      	add	sp, #20
 800ec6e:	bd90      	pop	{r4, r7, pc}
 800ec70:	08019f7c 	.word	0x08019f7c
 800ec74:	20000ae4 	.word	0x20000ae4
 800ec78:	20000aec 	.word	0x20000aec

0800ec7c <LL_AHB1_GRP1_EnableClock>:
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800ec84:	4b07      	ldr	r3, [pc, #28]	; (800eca4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ec86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ec88:	4b06      	ldr	r3, [pc, #24]	; (800eca4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	430a      	orrs	r2, r1
 800ec8e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800ec90:	4b04      	ldr	r3, [pc, #16]	; (800eca4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ec92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	4013      	ands	r3, r2
 800ec98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
}
 800ec9c:	46c0      	nop			; (mov r8, r8)
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	b004      	add	sp, #16
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	40021000 	.word	0x40021000

0800eca8 <LL_APB1_GRP1_EnableClock>:
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <LL_APB1_GRP1_EnableClock+0x28>)
 800ecb2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ecb4:	4b06      	ldr	r3, [pc, #24]	; (800ecd0 <LL_APB1_GRP1_EnableClock+0x28>)
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	430a      	orrs	r2, r1
 800ecba:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800ecbc:	4b04      	ldr	r3, [pc, #16]	; (800ecd0 <LL_APB1_GRP1_EnableClock+0x28>)
 800ecbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
}
 800ecc8:	46c0      	nop			; (mov r8, r8)
 800ecca:	46bd      	mov	sp, r7
 800eccc:	b004      	add	sp, #16
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	40021000 	.word	0x40021000

0800ecd4 <LL_APB2_GRP1_EnableClock>:
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800ecdc:	4b07      	ldr	r3, [pc, #28]	; (800ecfc <LL_APB2_GRP1_EnableClock+0x28>)
 800ecde:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ece0:	4b06      	ldr	r3, [pc, #24]	; (800ecfc <LL_APB2_GRP1_EnableClock+0x28>)
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	430a      	orrs	r2, r1
 800ece6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800ece8:	4b04      	ldr	r3, [pc, #16]	; (800ecfc <LL_APB2_GRP1_EnableClock+0x28>)
 800ecea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	4013      	ands	r3, r2
 800ecf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
}
 800ecf4:	46c0      	nop			; (mov r8, r8)
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	b004      	add	sp, #16
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	40021000 	.word	0x40021000

0800ed00 <LL_UCPD_Enable>:
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2280      	movs	r2, #128	; 0x80
 800ed0e:	0612      	lsls	r2, r2, #24
 800ed10:	431a      	orrs	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	601a      	str	r2, [r3, #0]
}
 800ed16:	46c0      	nop			; (mov r8, r8)
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	b002      	add	sp, #8
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <LL_UCPD_Disable>:
{
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b082      	sub	sp, #8
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	085a      	lsrs	r2, r3, #1
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	601a      	str	r2, [r3, #0]
}
 800ed32:	46c0      	nop			; (mov r8, r8)
 800ed34:	46bd      	mov	sp, r7
 800ed36:	b002      	add	sp, #8
 800ed38:	bd80      	pop	{r7, pc}
	...

0800ed3c <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	4a03      	ldr	r2, [pc, #12]	; (800ed58 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 800ed4a:	401a      	ands	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	60da      	str	r2, [r3, #12]
}
 800ed50:	46c0      	nop			; (mov r8, r8)
 800ed52:	46bd      	mov	sp, r7
 800ed54:	b002      	add	sp, #8
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	ffdfffff 	.word	0xffdfffff

0800ed5c <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	2280      	movs	r2, #128	; 0x80
 800ed6a:	0392      	lsls	r2, r2, #14
 800ed6c:	431a      	orrs	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	60da      	str	r2, [r3, #12]
}
 800ed72:	46c0      	nop			; (mov r8, r8)
 800ed74:	46bd      	mov	sp, r7
 800ed76:	b002      	add	sp, #8
 800ed78:	bd80      	pop	{r7, pc}
	...

0800ed7c <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	4a03      	ldr	r2, [pc, #12]	; (800ed98 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 800ed8a:	401a      	ands	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	60da      	str	r2, [r3, #12]
}
 800ed90:	46c0      	nop			; (mov r8, r8)
 800ed92:	46bd      	mov	sp, r7
 800ed94:	b002      	add	sp, #8
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	ffefffff 	.word	0xffefffff

0800ed9c <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	2280      	movs	r2, #128	; 0x80
 800edaa:	0352      	lsls	r2, r2, #13
 800edac:	431a      	orrs	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	60da      	str	r2, [r3, #12]
}
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	46bd      	mov	sp, r7
 800edb6:	b002      	add	sp, #8
 800edb8:	bd80      	pop	{r7, pc}

0800edba <LL_UCPD_SignalFRSTX>:
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b082      	sub	sp, #8
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	2280      	movs	r2, #128	; 0x80
 800edc8:	0292      	lsls	r2, r2, #10
 800edca:	431a      	orrs	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	60da      	str	r2, [r3, #12]
}
 800edd0:	46c0      	nop			; (mov r8, r8)
 800edd2:	46bd      	mov	sp, r7
 800edd4:	b002      	add	sp, #8
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <LL_UCPD_FRSDetectionEnable>:
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	2280      	movs	r2, #128	; 0x80
 800ede6:	0252      	lsls	r2, r2, #9
 800ede8:	431a      	orrs	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	60da      	str	r2, [r3, #12]
}
 800edee:	46c0      	nop			; (mov r8, r8)
 800edf0:	46bd      	mov	sp, r7
 800edf2:	b002      	add	sp, #8
 800edf4:	bd80      	pop	{r7, pc}
	...

0800edf8 <LL_UCPD_FRSDetectionDisable>:
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	4a03      	ldr	r2, [pc, #12]	; (800ee14 <LL_UCPD_FRSDetectionDisable+0x1c>)
 800ee06:	401a      	ands	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	60da      	str	r2, [r3, #12]
}
 800ee0c:	46c0      	nop			; (mov r8, r8)
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	b002      	add	sp, #8
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	fffeffff 	.word	0xfffeffff

0800ee18 <LL_UCPD_SetccEnable>:
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	4a05      	ldr	r2, [pc, #20]	; (800ee3c <LL_UCPD_SetccEnable+0x24>)
 800ee28:	401a      	ands	r2, r3
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	431a      	orrs	r2, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	60da      	str	r2, [r3, #12]
}
 800ee32:	46c0      	nop			; (mov r8, r8)
 800ee34:	46bd      	mov	sp, r7
 800ee36:	b002      	add	sp, #8
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	46c0      	nop			; (mov r8, r8)
 800ee3c:	fffff3ff 	.word	0xfffff3ff

0800ee40 <LL_UCPD_SetSNKRole>:
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	2280      	movs	r2, #128	; 0x80
 800ee4e:	0092      	lsls	r2, r2, #2
 800ee50:	431a      	orrs	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	60da      	str	r2, [r3, #12]
}
 800ee56:	46c0      	nop			; (mov r8, r8)
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	b002      	add	sp, #8
 800ee5c:	bd80      	pop	{r7, pc}
	...

0800ee60 <LL_UCPD_SetSRCRole>:
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	4a03      	ldr	r2, [pc, #12]	; (800ee7c <LL_UCPD_SetSRCRole+0x1c>)
 800ee6e:	401a      	ands	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	60da      	str	r2, [r3, #12]
}
 800ee74:	46c0      	nop			; (mov r8, r8)
 800ee76:	46bd      	mov	sp, r7
 800ee78:	b002      	add	sp, #8
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	fffffdff 	.word	0xfffffdff

0800ee80 <LL_UCPD_SetRpResistor>:
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	4a05      	ldr	r2, [pc, #20]	; (800eea4 <LL_UCPD_SetRpResistor+0x24>)
 800ee90:	401a      	ands	r2, r3
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	431a      	orrs	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	60da      	str	r2, [r3, #12]
}
 800ee9a:	46c0      	nop			; (mov r8, r8)
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	b002      	add	sp, #8
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	46c0      	nop			; (mov r8, r8)
 800eea4:	fffffe7f 	.word	0xfffffe7f

0800eea8 <LL_UCPD_SetCCPin>:
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	2240      	movs	r2, #64	; 0x40
 800eeb8:	4393      	bics	r3, r2
 800eeba:	001a      	movs	r2, r3
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	431a      	orrs	r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	60da      	str	r2, [r3, #12]
}
 800eec4:	46c0      	nop			; (mov r8, r8)
 800eec6:	46bd      	mov	sp, r7
 800eec8:	b002      	add	sp, #8
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <LL_UCPD_RxEnable>:
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	2220      	movs	r2, #32
 800eeda:	431a      	orrs	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	60da      	str	r2, [r3, #12]
}
 800eee0:	46c0      	nop			; (mov r8, r8)
 800eee2:	46bd      	mov	sp, r7
 800eee4:	b002      	add	sp, #8
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <LL_UCPD_RxDisable>:
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	2220      	movs	r2, #32
 800eef6:	4393      	bics	r3, r2
 800eef8:	001a      	movs	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	60da      	str	r2, [r3, #12]
}
 800eefe:	46c0      	nop			; (mov r8, r8)
 800ef00:	46bd      	mov	sp, r7
 800ef02:	b002      	add	sp, #8
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <LL_UCPD_SetRxMode>:
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b082      	sub	sp, #8
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
 800ef0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	2210      	movs	r2, #16
 800ef16:	4393      	bics	r3, r2
 800ef18:	001a      	movs	r2, r3
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	431a      	orrs	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	60da      	str	r2, [r3, #12]
}
 800ef22:	46c0      	nop			; (mov r8, r8)
 800ef24:	46bd      	mov	sp, r7
 800ef26:	b002      	add	sp, #8
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <LL_UCPD_SendHardReset>:
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b082      	sub	sp, #8
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	2208      	movs	r2, #8
 800ef38:	431a      	orrs	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	60da      	str	r2, [r3, #12]
}
 800ef3e:	46c0      	nop			; (mov r8, r8)
 800ef40:	46bd      	mov	sp, r7
 800ef42:	b002      	add	sp, #8
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <LL_UCPD_SendMessage>:
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b082      	sub	sp, #8
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	2204      	movs	r2, #4
 800ef54:	431a      	orrs	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	60da      	str	r2, [r3, #12]
}
 800ef5a:	46c0      	nop			; (mov r8, r8)
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	b002      	add	sp, #8
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <LL_UCPD_SetTxMode>:
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	2203      	movs	r2, #3
 800ef72:	4393      	bics	r3, r2
 800ef74:	001a      	movs	r2, r3
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	431a      	orrs	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	60da      	str	r2, [r3, #12]
}
 800ef7e:	46c0      	nop			; (mov r8, r8)
 800ef80:	46bd      	mov	sp, r7
 800ef82:	b002      	add	sp, #8
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b082      	sub	sp, #8
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2280      	movs	r2, #128	; 0x80
 800ef94:	05d2      	lsls	r2, r2, #23
 800ef96:	431a      	orrs	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	601a      	str	r2, [r3, #0]
}
 800ef9c:	46c0      	nop			; (mov r8, r8)
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	b002      	add	sp, #8
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4a03      	ldr	r2, [pc, #12]	; (800efc0 <LL_UCPD_RxDMADisable+0x1c>)
 800efb2:	401a      	ands	r2, r3
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	601a      	str	r2, [r3, #0]
}
 800efb8:	46c0      	nop			; (mov r8, r8)
 800efba:	46bd      	mov	sp, r7
 800efbc:	b002      	add	sp, #8
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	bfffffff 	.word	0xbfffffff

0800efc4 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2280      	movs	r2, #128	; 0x80
 800efd2:	0592      	lsls	r2, r2, #22
 800efd4:	431a      	orrs	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	601a      	str	r2, [r3, #0]
}
 800efda:	46c0      	nop			; (mov r8, r8)
 800efdc:	46bd      	mov	sp, r7
 800efde:	b002      	add	sp, #8
 800efe0:	bd80      	pop	{r7, pc}
	...

0800efe4 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a03      	ldr	r2, [pc, #12]	; (800f000 <LL_UCPD_TxDMADisable+0x1c>)
 800eff2:	401a      	ands	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	601a      	str	r2, [r3, #0]
}
 800eff8:	46c0      	nop			; (mov r8, r8)
 800effa:	46bd      	mov	sp, r7
 800effc:	b002      	add	sp, #8
 800effe:	bd80      	pop	{r7, pc}
 800f000:	dfffffff 	.word	0xdfffffff

0800f004 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	683a      	ldr	r2, [r7, #0]
 800f012:	61da      	str	r2, [r3, #28]
}
 800f014:	46c0      	nop			; (mov r8, r8)
 800f016:	46bd      	mov	sp, r7
 800f018:	b002      	add	sp, #8
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	683a      	ldr	r2, [r7, #0]
 800f02a:	621a      	str	r2, [r3, #32]
}
 800f02c:	46c0      	nop			; (mov r8, r8)
 800f02e:	46bd      	mov	sp, r7
 800f030:	b002      	add	sp, #8
 800f032:	bd80      	pop	{r7, pc}

0800f034 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800f038:	2380      	movs	r3, #128	; 0x80
 800f03a:	055b      	lsls	r3, r3, #21
 800f03c:	0018      	movs	r0, r3
 800f03e:	f7ff fe33 	bl	800eca8 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800f042:	2380      	movs	r3, #128	; 0x80
 800f044:	015b      	lsls	r3, r3, #5
 800f046:	0018      	movs	r0, r3
 800f048:	f7ff fe18 	bl	800ec7c <LL_AHB1_GRP1_EnableClock>
}
 800f04c:	46c0      	nop			; (mov r8, r8)
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
	...

0800f054 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	0002      	movs	r2, r0
 800f05c:	1dfb      	adds	r3, r7, #7
 800f05e:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 800f060:	1dfb      	adds	r3, r7, #7
 800f062:	781a      	ldrb	r2, [r3, #0]
 800f064:	4916      	ldr	r1, [pc, #88]	; (800f0c0 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800f066:	0013      	movs	r3, r2
 800f068:	00db      	lsls	r3, r3, #3
 800f06a:	1a9b      	subs	r3, r3, r2
 800f06c:	00db      	lsls	r3, r3, #3
 800f06e:	585b      	ldr	r3, [r3, r1]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	2207      	movs	r2, #7
 800f074:	4393      	bics	r3, r2
 800f076:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 800f078:	1dfb      	adds	r3, r7, #7
 800f07a:	781a      	ldrb	r2, [r3, #0]
 800f07c:	4910      	ldr	r1, [pc, #64]	; (800f0c0 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800f07e:	0013      	movs	r3, r2
 800f080:	00db      	lsls	r3, r3, #3
 800f082:	1a9b      	subs	r3, r3, r2
 800f084:	00db      	lsls	r3, r3, #3
 800f086:	585b      	ldr	r3, [r3, r1]
 800f088:	0018      	movs	r0, r3
 800f08a:	f7ff fe48 	bl	800ed1e <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800f08e:	1dfb      	adds	r3, r7, #7
 800f090:	781a      	ldrb	r2, [r3, #0]
 800f092:	490b      	ldr	r1, [pc, #44]	; (800f0c0 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800f094:	0013      	movs	r3, r2
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	1a9b      	subs	r3, r3, r2
 800f09a:	00db      	lsls	r3, r3, #3
 800f09c:	585b      	ldr	r3, [r3, r1]
 800f09e:	0018      	movs	r0, r3
 800f0a0:	f7ff fe2e 	bl	800ed00 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 800f0a4:	1dfb      	adds	r3, r7, #7
 800f0a6:	781a      	ldrb	r2, [r3, #0]
 800f0a8:	4905      	ldr	r1, [pc, #20]	; (800f0c0 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800f0aa:	0013      	movs	r3, r2
 800f0ac:	00db      	lsls	r3, r3, #3
 800f0ae:	1a9b      	subs	r3, r3, r2
 800f0b0:	00db      	lsls	r3, r3, #3
 800f0b2:	585b      	ldr	r3, [r3, r1]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	60da      	str	r2, [r3, #12]
}
 800f0b8:	46c0      	nop			; (mov r8, r8)
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	b004      	add	sp, #16
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20000aec 	.word	0x20000aec

0800f0c4 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 800f0c4:	b590      	push	{r4, r7, lr}
 800f0c6:	b087      	sub	sp, #28
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60ba      	str	r2, [r7, #8]
 800f0cc:	607b      	str	r3, [r7, #4]
 800f0ce:	240f      	movs	r4, #15
 800f0d0:	193b      	adds	r3, r7, r4
 800f0d2:	1c02      	adds	r2, r0, #0
 800f0d4:	701a      	strb	r2, [r3, #0]
 800f0d6:	200e      	movs	r0, #14
 800f0d8:	183b      	adds	r3, r7, r0
 800f0da:	1c0a      	adds	r2, r1, #0
 800f0dc:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800f0de:	2317      	movs	r3, #23
 800f0e0:	18fb      	adds	r3, r7, r3
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 800f0e6:	183b      	adds	r3, r7, r0
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	2b05      	cmp	r3, #5
 800f0ec:	d10b      	bne.n	800f106 <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 800f0ee:	193b      	adds	r3, r7, r4
 800f0f0:	781a      	ldrb	r2, [r3, #0]
 800f0f2:	496d      	ldr	r1, [pc, #436]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f0f4:	0013      	movs	r3, r2
 800f0f6:	00db      	lsls	r3, r3, #3
 800f0f8:	1a9b      	subs	r3, r3, r2
 800f0fa:	00db      	lsls	r3, r3, #3
 800f0fc:	585b      	ldr	r3, [r3, r1]
 800f0fe:	0018      	movs	r0, r3
 800f100:	f7ff ff13 	bl	800ef2a <LL_UCPD_SendHardReset>
 800f104:	e0c9      	b.n	800f29a <USBPD_HW_IF_SendBuffer+0x1d6>
  }
  else
  {
    switch (Type)
 800f106:	230e      	movs	r3, #14
 800f108:	18fb      	adds	r3, r7, r3
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	2b07      	cmp	r3, #7
 800f10e:	d871      	bhi.n	800f1f4 <USBPD_HW_IF_SendBuffer+0x130>
 800f110:	009a      	lsls	r2, r3, #2
 800f112:	4b66      	ldr	r3, [pc, #408]	; (800f2ac <USBPD_HW_IF_SendBuffer+0x1e8>)
 800f114:	18d3      	adds	r3, r2, r3
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	469f      	mov	pc, r3
    {
      case USBPD_SOPTYPE_SOP :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 800f11a:	240f      	movs	r4, #15
 800f11c:	193b      	adds	r3, r7, r4
 800f11e:	781a      	ldrb	r2, [r3, #0]
 800f120:	4961      	ldr	r1, [pc, #388]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f122:	0013      	movs	r3, r2
 800f124:	00db      	lsls	r3, r3, #3
 800f126:	1a9b      	subs	r3, r3, r2
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	585b      	ldr	r3, [r3, r1]
 800f12c:	4a60      	ldr	r2, [pc, #384]	; (800f2b0 <USBPD_HW_IF_SendBuffer+0x1ec>)
 800f12e:	0011      	movs	r1, r2
 800f130:	0018      	movs	r0, r3
 800f132:	f7ff ff67 	bl	800f004 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800f136:	193b      	adds	r3, r7, r4
 800f138:	781a      	ldrb	r2, [r3, #0]
 800f13a:	495b      	ldr	r1, [pc, #364]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f13c:	0013      	movs	r3, r2
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	1a9b      	subs	r3, r3, r2
 800f142:	00db      	lsls	r3, r3, #3
 800f144:	585b      	ldr	r3, [r3, r1]
 800f146:	2100      	movs	r1, #0
 800f148:	0018      	movs	r0, r3
 800f14a:	f7ff ff0a 	bl	800ef62 <LL_UCPD_SetTxMode>
        break;
 800f14e:	e056      	b.n	800f1fe <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP1 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 800f150:	240f      	movs	r4, #15
 800f152:	193b      	adds	r3, r7, r4
 800f154:	781a      	ldrb	r2, [r3, #0]
 800f156:	4954      	ldr	r1, [pc, #336]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f158:	0013      	movs	r3, r2
 800f15a:	00db      	lsls	r3, r3, #3
 800f15c:	1a9b      	subs	r3, r3, r2
 800f15e:	00db      	lsls	r3, r3, #3
 800f160:	585b      	ldr	r3, [r3, r1]
 800f162:	4a54      	ldr	r2, [pc, #336]	; (800f2b4 <USBPD_HW_IF_SendBuffer+0x1f0>)
 800f164:	0011      	movs	r1, r2
 800f166:	0018      	movs	r0, r3
 800f168:	f7ff ff4c 	bl	800f004 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800f16c:	193b      	adds	r3, r7, r4
 800f16e:	781a      	ldrb	r2, [r3, #0]
 800f170:	494d      	ldr	r1, [pc, #308]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f172:	0013      	movs	r3, r2
 800f174:	00db      	lsls	r3, r3, #3
 800f176:	1a9b      	subs	r3, r3, r2
 800f178:	00db      	lsls	r3, r3, #3
 800f17a:	585b      	ldr	r3, [r3, r1]
 800f17c:	2100      	movs	r1, #0
 800f17e:	0018      	movs	r0, r3
 800f180:	f7ff feef 	bl	800ef62 <LL_UCPD_SetTxMode>
        break;
 800f184:	e03b      	b.n	800f1fe <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP2 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 800f186:	240f      	movs	r4, #15
 800f188:	193b      	adds	r3, r7, r4
 800f18a:	781a      	ldrb	r2, [r3, #0]
 800f18c:	4946      	ldr	r1, [pc, #280]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f18e:	0013      	movs	r3, r2
 800f190:	00db      	lsls	r3, r3, #3
 800f192:	1a9b      	subs	r3, r3, r2
 800f194:	00db      	lsls	r3, r3, #3
 800f196:	585b      	ldr	r3, [r3, r1]
 800f198:	4a47      	ldr	r2, [pc, #284]	; (800f2b8 <USBPD_HW_IF_SendBuffer+0x1f4>)
 800f19a:	0011      	movs	r1, r2
 800f19c:	0018      	movs	r0, r3
 800f19e:	f7ff ff31 	bl	800f004 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800f1a2:	193b      	adds	r3, r7, r4
 800f1a4:	781a      	ldrb	r2, [r3, #0]
 800f1a6:	4940      	ldr	r1, [pc, #256]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f1a8:	0013      	movs	r3, r2
 800f1aa:	00db      	lsls	r3, r3, #3
 800f1ac:	1a9b      	subs	r3, r3, r2
 800f1ae:	00db      	lsls	r3, r3, #3
 800f1b0:	585b      	ldr	r3, [r3, r1]
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	0018      	movs	r0, r3
 800f1b6:	f7ff fed4 	bl	800ef62 <LL_UCPD_SetTxMode>
        break;
 800f1ba:	e020      	b.n	800f1fe <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_CABLE_RESET :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 800f1bc:	230f      	movs	r3, #15
 800f1be:	18fb      	adds	r3, r7, r3
 800f1c0:	781a      	ldrb	r2, [r3, #0]
 800f1c2:	4939      	ldr	r1, [pc, #228]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f1c4:	0013      	movs	r3, r2
 800f1c6:	00db      	lsls	r3, r3, #3
 800f1c8:	1a9b      	subs	r3, r3, r2
 800f1ca:	00db      	lsls	r3, r3, #3
 800f1cc:	585b      	ldr	r3, [r3, r1]
 800f1ce:	2101      	movs	r1, #1
 800f1d0:	0018      	movs	r0, r3
 800f1d2:	f7ff fec6 	bl	800ef62 <LL_UCPD_SetTxMode>
        break;
 800f1d6:	e012      	b.n	800f1fe <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_BIST_MODE_2 :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800f1d8:	230f      	movs	r3, #15
 800f1da:	18fb      	adds	r3, r7, r3
 800f1dc:	781a      	ldrb	r2, [r3, #0]
 800f1de:	4932      	ldr	r1, [pc, #200]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f1e0:	0013      	movs	r3, r2
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	1a9b      	subs	r3, r3, r2
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	585b      	ldr	r3, [r3, r1]
 800f1ea:	2102      	movs	r1, #2
 800f1ec:	0018      	movs	r0, r3
 800f1ee:	f7ff feb8 	bl	800ef62 <LL_UCPD_SetTxMode>
        break;
 800f1f2:	e004      	b.n	800f1fe <USBPD_HW_IF_SendBuffer+0x13a>
      }
      default :
        _status = USBPD_ERROR;
 800f1f4:	2317      	movs	r3, #23
 800f1f6:	18fb      	adds	r3, r7, r3
 800f1f8:	2202      	movs	r2, #2
 800f1fa:	701a      	strb	r2, [r3, #0]
        break;
 800f1fc:	46c0      	nop			; (mov r8, r8)
    }

    if (USBPD_OK == _status)
 800f1fe:	2317      	movs	r3, #23
 800f200:	18fb      	adds	r3, r7, r3
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d148      	bne.n	800f29a <USBPD_HW_IF_SendBuffer+0x1d6>
    {
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
      WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 800f208:	240f      	movs	r4, #15
 800f20a:	193b      	adds	r3, r7, r4
 800f20c:	781a      	ldrb	r2, [r3, #0]
 800f20e:	4926      	ldr	r1, [pc, #152]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f210:	0013      	movs	r3, r2
 800f212:	00db      	lsls	r3, r3, #3
 800f214:	1a9b      	subs	r3, r3, r2
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	18cb      	adds	r3, r1, r3
 800f21a:	3304      	adds	r3, #4
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 800f222:	193b      	adds	r3, r7, r4
 800f224:	781a      	ldrb	r2, [r3, #0]
 800f226:	4920      	ldr	r1, [pc, #128]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f228:	0013      	movs	r3, r2
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	1a9b      	subs	r3, r3, r2
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	18cb      	adds	r3, r1, r3
 800f232:	3304      	adds	r3, #4
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	605a      	str	r2, [r3, #4]
      Ports[PortNum].hdmatx->CCR |= DMA_CCR_EN;
 800f23a:	193b      	adds	r3, r7, r4
 800f23c:	781a      	ldrb	r2, [r3, #0]
 800f23e:	491a      	ldr	r1, [pc, #104]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f240:	0013      	movs	r3, r2
 800f242:	00db      	lsls	r3, r3, #3
 800f244:	1a9b      	subs	r3, r3, r2
 800f246:	00db      	lsls	r3, r3, #3
 800f248:	18cb      	adds	r3, r1, r3
 800f24a:	3304      	adds	r3, #4
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	6819      	ldr	r1, [r3, #0]
 800f250:	193b      	adds	r3, r7, r4
 800f252:	781a      	ldrb	r2, [r3, #0]
 800f254:	4814      	ldr	r0, [pc, #80]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f256:	0013      	movs	r3, r2
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	1a9b      	subs	r3, r3, r2
 800f25c:	00db      	lsls	r3, r3, #3
 800f25e:	18c3      	adds	r3, r0, r3
 800f260:	3304      	adds	r3, #4
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2201      	movs	r2, #1
 800f266:	430a      	orrs	r2, r1
 800f268:	601a      	str	r2, [r3, #0]

      LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 800f26a:	193b      	adds	r3, r7, r4
 800f26c:	781a      	ldrb	r2, [r3, #0]
 800f26e:	490e      	ldr	r1, [pc, #56]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f270:	0013      	movs	r3, r2
 800f272:	00db      	lsls	r3, r3, #3
 800f274:	1a9b      	subs	r3, r3, r2
 800f276:	00db      	lsls	r3, r3, #3
 800f278:	585b      	ldr	r3, [r3, r1]
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	0011      	movs	r1, r2
 800f27e:	0018      	movs	r0, r3
 800f280:	f7ff fecc 	bl	800f01c <LL_UCPD_WriteTxPaySize>
      LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800f284:	193b      	adds	r3, r7, r4
 800f286:	781a      	ldrb	r2, [r3, #0]
 800f288:	4907      	ldr	r1, [pc, #28]	; (800f2a8 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800f28a:	0013      	movs	r3, r2
 800f28c:	00db      	lsls	r3, r3, #3
 800f28e:	1a9b      	subs	r3, r3, r2
 800f290:	00db      	lsls	r3, r3, #3
 800f292:	585b      	ldr	r3, [r3, r1]
 800f294:	0018      	movs	r0, r3
 800f296:	f7ff fe56 	bl	800ef46 <LL_UCPD_SendMessage>
    }
  }
  return _status;
 800f29a:	2317      	movs	r3, #23
 800f29c:	18fb      	adds	r3, r7, r3
 800f29e:	781b      	ldrb	r3, [r3, #0]
}
 800f2a0:	0018      	movs	r0, r3
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	b007      	add	sp, #28
 800f2a6:	bd90      	pop	{r4, r7, pc}
 800f2a8:	20000aec 	.word	0x20000aec
 800f2ac:	0801a7d0 	.word	0x0801a7d0
 800f2b0:	0008e318 	.word	0x0008e318
 800f2b4:	00031b18 	.word	0x00031b18
 800f2b8:	000360d8 	.word	0x000360d8

0800f2bc <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	0002      	movs	r2, r0
 800f2c4:	1dfb      	adds	r3, r7, #7
 800f2c6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800f2c8:	1dfb      	adds	r3, r7, #7
 800f2ca:	781a      	ldrb	r2, [r3, #0]
 800f2cc:	490c      	ldr	r1, [pc, #48]	; (800f300 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800f2ce:	0013      	movs	r3, r2
 800f2d0:	00db      	lsls	r3, r3, #3
 800f2d2:	1a9b      	subs	r3, r3, r2
 800f2d4:	00db      	lsls	r3, r3, #3
 800f2d6:	585b      	ldr	r3, [r3, r1]
 800f2d8:	2102      	movs	r1, #2
 800f2da:	0018      	movs	r0, r3
 800f2dc:	f7ff fe41 	bl	800ef62 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800f2e0:	1dfb      	adds	r3, r7, #7
 800f2e2:	781a      	ldrb	r2, [r3, #0]
 800f2e4:	4906      	ldr	r1, [pc, #24]	; (800f300 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800f2e6:	0013      	movs	r3, r2
 800f2e8:	00db      	lsls	r3, r3, #3
 800f2ea:	1a9b      	subs	r3, r3, r2
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	585b      	ldr	r3, [r3, r1]
 800f2f0:	0018      	movs	r0, r3
 800f2f2:	f7ff fe28 	bl	800ef46 <LL_UCPD_SendMessage>
}
 800f2f6:	46c0      	nop			; (mov r8, r8)
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	b002      	add	sp, #8
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	46c0      	nop			; (mov r8, r8)
 800f300:	20000aec 	.word	0x20000aec

0800f304 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	0002      	movs	r2, r0
 800f30c:	1dfb      	adds	r3, r7, #7
 800f30e:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800f310:	2001      	movs	r0, #1
 800f312:	f7ff fcdf 	bl	800ecd4 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 800f316:	1dfb      	adds	r3, r7, #7
 800f318:	781a      	ldrb	r2, [r3, #0]
 800f31a:	4956      	ldr	r1, [pc, #344]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f31c:	0013      	movs	r3, r2
 800f31e:	00db      	lsls	r3, r3, #3
 800f320:	1a9b      	subs	r3, r3, r2
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	18cb      	adds	r3, r1, r3
 800f326:	3310      	adds	r3, #16
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	789b      	ldrb	r3, [r3, #2]
 800f32c:	079b      	lsls	r3, r3, #30
 800f32e:	0f9b      	lsrs	r3, r3, #30
 800f330:	b2db      	uxtb	r3, r3
 800f332:	2b02      	cmp	r3, #2
 800f334:	d021      	beq.n	800f37a <USBPDM1_AssertRp+0x76>
 800f336:	dc2f      	bgt.n	800f398 <USBPDM1_AssertRp+0x94>
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <USBPDM1_AssertRp+0x3e>
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d00d      	beq.n	800f35c <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 800f340:	e02a      	b.n	800f398 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 800f342:	1dfb      	adds	r3, r7, #7
 800f344:	781a      	ldrb	r2, [r3, #0]
 800f346:	494b      	ldr	r1, [pc, #300]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f348:	0013      	movs	r3, r2
 800f34a:	00db      	lsls	r3, r3, #3
 800f34c:	1a9b      	subs	r3, r3, r2
 800f34e:	00db      	lsls	r3, r3, #3
 800f350:	585b      	ldr	r3, [r3, r1]
 800f352:	2180      	movs	r1, #128	; 0x80
 800f354:	0018      	movs	r0, r3
 800f356:	f7ff fd93 	bl	800ee80 <LL_UCPD_SetRpResistor>
      break;
 800f35a:	e01e      	b.n	800f39a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800f35c:	1dfb      	adds	r3, r7, #7
 800f35e:	781a      	ldrb	r2, [r3, #0]
 800f360:	4944      	ldr	r1, [pc, #272]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f362:	0013      	movs	r3, r2
 800f364:	00db      	lsls	r3, r3, #3
 800f366:	1a9b      	subs	r3, r3, r2
 800f368:	00db      	lsls	r3, r3, #3
 800f36a:	585b      	ldr	r3, [r3, r1]
 800f36c:	2280      	movs	r2, #128	; 0x80
 800f36e:	0052      	lsls	r2, r2, #1
 800f370:	0011      	movs	r1, r2
 800f372:	0018      	movs	r0, r3
 800f374:	f7ff fd84 	bl	800ee80 <LL_UCPD_SetRpResistor>
      break;
 800f378:	e00f      	b.n	800f39a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800f37a:	1dfb      	adds	r3, r7, #7
 800f37c:	781a      	ldrb	r2, [r3, #0]
 800f37e:	493d      	ldr	r1, [pc, #244]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f380:	0013      	movs	r3, r2
 800f382:	00db      	lsls	r3, r3, #3
 800f384:	1a9b      	subs	r3, r3, r2
 800f386:	00db      	lsls	r3, r3, #3
 800f388:	585b      	ldr	r3, [r3, r1]
 800f38a:	22c0      	movs	r2, #192	; 0xc0
 800f38c:	0052      	lsls	r2, r2, #1
 800f38e:	0011      	movs	r1, r2
 800f390:	0018      	movs	r0, r3
 800f392:	f7ff fd75 	bl	800ee80 <LL_UCPD_SetRpResistor>
      break;
 800f396:	e000      	b.n	800f39a <USBPDM1_AssertRp+0x96>
      break;
 800f398:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f39a:	1dfb      	adds	r3, r7, #7
 800f39c:	781a      	ldrb	r2, [r3, #0]
 800f39e:	4935      	ldr	r1, [pc, #212]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f3a0:	0013      	movs	r3, r2
 800f3a2:	00db      	lsls	r3, r3, #3
 800f3a4:	1a9b      	subs	r3, r3, r2
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	585b      	ldr	r3, [r3, r1]
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	0018      	movs	r0, r3
 800f3ae:	f7ff fd33 	bl	800ee18 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800f3b2:	1dfb      	adds	r3, r7, #7
 800f3b4:	781a      	ldrb	r2, [r3, #0]
 800f3b6:	492f      	ldr	r1, [pc, #188]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f3b8:	0013      	movs	r3, r2
 800f3ba:	00db      	lsls	r3, r3, #3
 800f3bc:	1a9b      	subs	r3, r3, r2
 800f3be:	00db      	lsls	r3, r3, #3
 800f3c0:	585b      	ldr	r3, [r3, r1]
 800f3c2:	0018      	movs	r0, r3
 800f3c4:	f7ff fd4c 	bl	800ee60 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 800f3c8:	1dfb      	adds	r3, r7, #7
 800f3ca:	781a      	ldrb	r2, [r3, #0]
 800f3cc:	4929      	ldr	r1, [pc, #164]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f3ce:	0013      	movs	r3, r2
 800f3d0:	00db      	lsls	r3, r3, #3
 800f3d2:	1a9b      	subs	r3, r3, r2
 800f3d4:	00db      	lsls	r3, r3, #3
 800f3d6:	18cb      	adds	r3, r1, r3
 800f3d8:	3334      	adds	r3, #52	; 0x34
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d10e      	bne.n	800f3fe <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800f3e0:	1dfb      	adds	r3, r7, #7
 800f3e2:	781a      	ldrb	r2, [r3, #0]
 800f3e4:	4923      	ldr	r1, [pc, #140]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f3e6:	0013      	movs	r3, r2
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	1a9b      	subs	r3, r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	585b      	ldr	r3, [r3, r1]
 800f3f0:	22c0      	movs	r2, #192	; 0xc0
 800f3f2:	0112      	lsls	r2, r2, #4
 800f3f4:	0011      	movs	r1, r2
 800f3f6:	0018      	movs	r0, r3
 800f3f8:	f7ff fd0e 	bl	800ee18 <LL_UCPD_SetccEnable>
 800f3fc:	e01b      	b.n	800f436 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f3fe:	1dfb      	adds	r3, r7, #7
 800f400:	781a      	ldrb	r2, [r3, #0]
 800f402:	491c      	ldr	r1, [pc, #112]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f404:	0013      	movs	r3, r2
 800f406:	00db      	lsls	r3, r3, #3
 800f408:	1a9b      	subs	r3, r3, r2
 800f40a:	00db      	lsls	r3, r3, #3
 800f40c:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800f40e:	1dfb      	adds	r3, r7, #7
 800f410:	781a      	ldrb	r2, [r3, #0]
 800f412:	4918      	ldr	r1, [pc, #96]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f414:	0013      	movs	r3, r2
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	1a9b      	subs	r3, r3, r2
 800f41a:	00db      	lsls	r3, r3, #3
 800f41c:	18cb      	adds	r3, r1, r3
 800f41e:	3334      	adds	r3, #52	; 0x34
 800f420:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f422:	2b01      	cmp	r3, #1
 800f424:	d102      	bne.n	800f42c <USBPDM1_AssertRp+0x128>
 800f426:	2380      	movs	r3, #128	; 0x80
 800f428:	00db      	lsls	r3, r3, #3
 800f42a:	e001      	b.n	800f430 <USBPDM1_AssertRp+0x12c>
 800f42c:	2380      	movs	r3, #128	; 0x80
 800f42e:	011b      	lsls	r3, r3, #4
 800f430:	0019      	movs	r1, r3
 800f432:	f7ff fcf1 	bl	800ee18 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800f436:	4b10      	ldr	r3, [pc, #64]	; (800f478 <USBPDM1_AssertRp+0x174>)
 800f438:	6819      	ldr	r1, [r3, #0]
 800f43a:	1dfb      	adds	r3, r7, #7
 800f43c:	781a      	ldrb	r2, [r3, #0]
 800f43e:	480d      	ldr	r0, [pc, #52]	; (800f474 <USBPDM1_AssertRp+0x170>)
 800f440:	0013      	movs	r3, r2
 800f442:	00db      	lsls	r3, r3, #3
 800f444:	1a9b      	subs	r3, r3, r2
 800f446:	00db      	lsls	r3, r3, #3
 800f448:	581b      	ldr	r3, [r3, r0]
 800f44a:	4a0c      	ldr	r2, [pc, #48]	; (800f47c <USBPDM1_AssertRp+0x178>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d102      	bne.n	800f456 <USBPDM1_AssertRp+0x152>
 800f450:	2380      	movs	r3, #128	; 0x80
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	e001      	b.n	800f45a <USBPDM1_AssertRp+0x156>
 800f456:	2380      	movs	r3, #128	; 0x80
 800f458:	00db      	lsls	r3, r3, #3
 800f45a:	4a07      	ldr	r2, [pc, #28]	; (800f478 <USBPDM1_AssertRp+0x174>)
 800f45c:	430b      	orrs	r3, r1
 800f45e:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
 800f460:	1dfb      	adds	r3, r7, #7
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	2100      	movs	r1, #0
 800f466:	0018      	movs	r0, r3
 800f468:	f7f9 fc80 	bl	8008d6c <BSP_USBPD_PWR_SetRole>
#endif /* TCPP0203_SUPPORT */
}
 800f46c:	46c0      	nop			; (mov r8, r8)
 800f46e:	46bd      	mov	sp, r7
 800f470:	b002      	add	sp, #8
 800f472:	bd80      	pop	{r7, pc}
 800f474:	20000aec 	.word	0x20000aec
 800f478:	40010000 	.word	0x40010000
 800f47c:	4000a000 	.word	0x4000a000

0800f480 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	0002      	movs	r2, r0
 800f488:	1dfb      	adds	r3, r7, #7
 800f48a:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800f48c:	46c0      	nop			; (mov r8, r8)
 800f48e:	46bd      	mov	sp, r7
 800f490:	b002      	add	sp, #8
 800f492:	bd80      	pop	{r7, pc}

0800f494 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	0002      	movs	r2, r0
 800f49c:	1dfb      	adds	r3, r7, #7
 800f49e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 800f4a0:	1dfb      	adds	r3, r7, #7
 800f4a2:	781a      	ldrb	r2, [r3, #0]
 800f4a4:	494e      	ldr	r1, [pc, #312]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f4a6:	0013      	movs	r3, r2
 800f4a8:	00db      	lsls	r3, r3, #3
 800f4aa:	1a9b      	subs	r3, r3, r2
 800f4ac:	00db      	lsls	r3, r3, #3
 800f4ae:	585b      	ldr	r3, [r3, r1]
 800f4b0:	0018      	movs	r0, r3
 800f4b2:	f7ff fc53 	bl	800ed5c <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 800f4b6:	1dfb      	adds	r3, r7, #7
 800f4b8:	781a      	ldrb	r2, [r3, #0]
 800f4ba:	4949      	ldr	r1, [pc, #292]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f4bc:	0013      	movs	r3, r2
 800f4be:	00db      	lsls	r3, r3, #3
 800f4c0:	1a9b      	subs	r3, r3, r2
 800f4c2:	00db      	lsls	r3, r3, #3
 800f4c4:	585b      	ldr	r3, [r3, r1]
 800f4c6:	0018      	movs	r0, r3
 800f4c8:	f7ff fc68 	bl	800ed9c <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800f4cc:	2001      	movs	r0, #1
 800f4ce:	f7ff fc01 	bl	800ecd4 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f4d2:	1dfb      	adds	r3, r7, #7
 800f4d4:	781a      	ldrb	r2, [r3, #0]
 800f4d6:	4942      	ldr	r1, [pc, #264]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f4d8:	0013      	movs	r3, r2
 800f4da:	00db      	lsls	r3, r3, #3
 800f4dc:	1a9b      	subs	r3, r3, r2
 800f4de:	00db      	lsls	r3, r3, #3
 800f4e0:	585b      	ldr	r3, [r3, r1]
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	0018      	movs	r0, r3
 800f4e6:	f7ff fc97 	bl	800ee18 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800f4ea:	1dfb      	adds	r3, r7, #7
 800f4ec:	781a      	ldrb	r2, [r3, #0]
 800f4ee:	493c      	ldr	r1, [pc, #240]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f4f0:	0013      	movs	r3, r2
 800f4f2:	00db      	lsls	r3, r3, #3
 800f4f4:	1a9b      	subs	r3, r3, r2
 800f4f6:	00db      	lsls	r3, r3, #3
 800f4f8:	585b      	ldr	r3, [r3, r1]
 800f4fa:	0018      	movs	r0, r3
 800f4fc:	f7ff fca0 	bl	800ee40 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 800f500:	1dfb      	adds	r3, r7, #7
 800f502:	781a      	ldrb	r2, [r3, #0]
 800f504:	4936      	ldr	r1, [pc, #216]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f506:	0013      	movs	r3, r2
 800f508:	00db      	lsls	r3, r3, #3
 800f50a:	1a9b      	subs	r3, r3, r2
 800f50c:	00db      	lsls	r3, r3, #3
 800f50e:	18cb      	adds	r3, r1, r3
 800f510:	3334      	adds	r3, #52	; 0x34
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10e      	bne.n	800f536 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800f518:	1dfb      	adds	r3, r7, #7
 800f51a:	781a      	ldrb	r2, [r3, #0]
 800f51c:	4930      	ldr	r1, [pc, #192]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f51e:	0013      	movs	r3, r2
 800f520:	00db      	lsls	r3, r3, #3
 800f522:	1a9b      	subs	r3, r3, r2
 800f524:	00db      	lsls	r3, r3, #3
 800f526:	585b      	ldr	r3, [r3, r1]
 800f528:	22c0      	movs	r2, #192	; 0xc0
 800f52a:	0112      	lsls	r2, r2, #4
 800f52c:	0011      	movs	r1, r2
 800f52e:	0018      	movs	r0, r3
 800f530:	f7ff fc72 	bl	800ee18 <LL_UCPD_SetccEnable>
 800f534:	e01b      	b.n	800f56e <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f536:	1dfb      	adds	r3, r7, #7
 800f538:	781a      	ldrb	r2, [r3, #0]
 800f53a:	4929      	ldr	r1, [pc, #164]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f53c:	0013      	movs	r3, r2
 800f53e:	00db      	lsls	r3, r3, #3
 800f540:	1a9b      	subs	r3, r3, r2
 800f542:	00db      	lsls	r3, r3, #3
 800f544:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800f546:	1dfb      	adds	r3, r7, #7
 800f548:	781a      	ldrb	r2, [r3, #0]
 800f54a:	4925      	ldr	r1, [pc, #148]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f54c:	0013      	movs	r3, r2
 800f54e:	00db      	lsls	r3, r3, #3
 800f550:	1a9b      	subs	r3, r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	18cb      	adds	r3, r1, r3
 800f556:	3334      	adds	r3, #52	; 0x34
 800f558:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d102      	bne.n	800f564 <USBPDM1_AssertRd+0xd0>
 800f55e:	2380      	movs	r3, #128	; 0x80
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	e001      	b.n	800f568 <USBPDM1_AssertRd+0xd4>
 800f564:	2380      	movs	r3, #128	; 0x80
 800f566:	011b      	lsls	r3, r3, #4
 800f568:	0019      	movs	r1, r3
 800f56a:	f7ff fc55 	bl	800ee18 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800f56e:	4b1d      	ldr	r3, [pc, #116]	; (800f5e4 <USBPDM1_AssertRd+0x150>)
 800f570:	6819      	ldr	r1, [r3, #0]
 800f572:	1dfb      	adds	r3, r7, #7
 800f574:	781a      	ldrb	r2, [r3, #0]
 800f576:	481a      	ldr	r0, [pc, #104]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f578:	0013      	movs	r3, r2
 800f57a:	00db      	lsls	r3, r3, #3
 800f57c:	1a9b      	subs	r3, r3, r2
 800f57e:	00db      	lsls	r3, r3, #3
 800f580:	581b      	ldr	r3, [r3, r0]
 800f582:	4a19      	ldr	r2, [pc, #100]	; (800f5e8 <USBPDM1_AssertRd+0x154>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d102      	bne.n	800f58e <USBPDM1_AssertRd+0xfa>
 800f588:	2380      	movs	r3, #128	; 0x80
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	e001      	b.n	800f592 <USBPDM1_AssertRd+0xfe>
 800f58e:	2380      	movs	r3, #128	; 0x80
 800f590:	00db      	lsls	r3, r3, #3
 800f592:	4a14      	ldr	r2, [pc, #80]	; (800f5e4 <USBPDM1_AssertRd+0x150>)
 800f594:	430b      	orrs	r3, r1
 800f596:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 800f598:	2001      	movs	r0, #1
 800f59a:	f7fa fc8d 	bl	8009eb8 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 800f59e:	1dfb      	adds	r3, r7, #7
 800f5a0:	781a      	ldrb	r2, [r3, #0]
 800f5a2:	490f      	ldr	r1, [pc, #60]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f5a4:	0013      	movs	r3, r2
 800f5a6:	00db      	lsls	r3, r3, #3
 800f5a8:	1a9b      	subs	r3, r3, r2
 800f5aa:	00db      	lsls	r3, r3, #3
 800f5ac:	585b      	ldr	r3, [r3, r1]
 800f5ae:	0018      	movs	r0, r3
 800f5b0:	f7ff fbc4 	bl	800ed3c <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 800f5b4:	1dfb      	adds	r3, r7, #7
 800f5b6:	781a      	ldrb	r2, [r3, #0]
 800f5b8:	4909      	ldr	r1, [pc, #36]	; (800f5e0 <USBPDM1_AssertRd+0x14c>)
 800f5ba:	0013      	movs	r3, r2
 800f5bc:	00db      	lsls	r3, r3, #3
 800f5be:	1a9b      	subs	r3, r3, r2
 800f5c0:	00db      	lsls	r3, r3, #3
 800f5c2:	585b      	ldr	r3, [r3, r1]
 800f5c4:	0018      	movs	r0, r3
 800f5c6:	f7ff fbd9 	bl	800ed7c <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
 800f5ca:	1dfb      	adds	r3, r7, #7
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	2101      	movs	r1, #1
 800f5d0:	0018      	movs	r0, r3
 800f5d2:	f7f9 fbcb 	bl	8008d6c <BSP_USBPD_PWR_SetRole>
#endif /* TCPP0203_SUPPORT */
}
 800f5d6:	46c0      	nop			; (mov r8, r8)
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	b002      	add	sp, #8
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	46c0      	nop			; (mov r8, r8)
 800f5e0:	20000aec 	.word	0x20000aec
 800f5e4:	40010000 	.word	0x40010000
 800f5e8:	4000a000 	.word	0x4000a000

0800f5ec <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	0002      	movs	r2, r0
 800f5f4:	1dfb      	adds	r3, r7, #7
 800f5f6:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800f5f8:	46c0      	nop			; (mov r8, r8)
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	b002      	add	sp, #8
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	0002      	movs	r2, r0
 800f608:	1dfb      	adds	r3, r7, #7
 800f60a:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800f60c:	2001      	movs	r0, #1
 800f60e:	f7ff fb61 	bl	800ecd4 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800f612:	1dfb      	adds	r3, r7, #7
 800f614:	781a      	ldrb	r2, [r3, #0]
 800f616:	4930      	ldr	r1, [pc, #192]	; (800f6d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f618:	0013      	movs	r3, r2
 800f61a:	00db      	lsls	r3, r3, #3
 800f61c:	1a9b      	subs	r3, r3, r2
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	585b      	ldr	r3, [r3, r1]
 800f622:	0018      	movs	r0, r3
 800f624:	f7ff fc1c 	bl	800ee60 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 800f628:	1dfb      	adds	r3, r7, #7
 800f62a:	781a      	ldrb	r2, [r3, #0]
 800f62c:	492a      	ldr	r1, [pc, #168]	; (800f6d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f62e:	0013      	movs	r3, r2
 800f630:	00db      	lsls	r3, r3, #3
 800f632:	1a9b      	subs	r3, r3, r2
 800f634:	00db      	lsls	r3, r3, #3
 800f636:	585b      	ldr	r3, [r3, r1]
 800f638:	2100      	movs	r1, #0
 800f63a:	0018      	movs	r0, r3
 800f63c:	f7ff fc20 	bl	800ee80 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f640:	1dfb      	adds	r3, r7, #7
 800f642:	781a      	ldrb	r2, [r3, #0]
 800f644:	4924      	ldr	r1, [pc, #144]	; (800f6d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f646:	0013      	movs	r3, r2
 800f648:	00db      	lsls	r3, r3, #3
 800f64a:	1a9b      	subs	r3, r3, r2
 800f64c:	00db      	lsls	r3, r3, #3
 800f64e:	585b      	ldr	r3, [r3, r1]
 800f650:	2100      	movs	r1, #0
 800f652:	0018      	movs	r0, r3
 800f654:	f7ff fbe0 	bl	800ee18 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800f658:	4b20      	ldr	r3, [pc, #128]	; (800f6dc <USBPDM1_EnterErrorRecovery+0xdc>)
 800f65a:	6819      	ldr	r1, [r3, #0]
 800f65c:	1dfb      	adds	r3, r7, #7
 800f65e:	781a      	ldrb	r2, [r3, #0]
 800f660:	481d      	ldr	r0, [pc, #116]	; (800f6d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f662:	0013      	movs	r3, r2
 800f664:	00db      	lsls	r3, r3, #3
 800f666:	1a9b      	subs	r3, r3, r2
 800f668:	00db      	lsls	r3, r3, #3
 800f66a:	581b      	ldr	r3, [r3, r0]
 800f66c:	4a1c      	ldr	r2, [pc, #112]	; (800f6e0 <USBPDM1_EnterErrorRecovery+0xe0>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d102      	bne.n	800f678 <USBPDM1_EnterErrorRecovery+0x78>
 800f672:	2380      	movs	r3, #128	; 0x80
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	e001      	b.n	800f67c <USBPDM1_EnterErrorRecovery+0x7c>
 800f678:	2380      	movs	r3, #128	; 0x80
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	4a17      	ldr	r2, [pc, #92]	; (800f6dc <USBPDM1_EnterErrorRecovery+0xdc>)
 800f67e:	430b      	orrs	r3, r1
 800f680:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f682:	1dfb      	adds	r3, r7, #7
 800f684:	781a      	ldrb	r2, [r3, #0]
 800f686:	4914      	ldr	r1, [pc, #80]	; (800f6d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f688:	0013      	movs	r3, r2
 800f68a:	00db      	lsls	r3, r3, #3
 800f68c:	1a9b      	subs	r3, r3, r2
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	585b      	ldr	r3, [r3, r1]
 800f692:	0018      	movs	r0, r3
 800f694:	f7ff fc28 	bl	800eee8 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f698:	1dfb      	adds	r3, r7, #7
 800f69a:	781a      	ldrb	r2, [r3, #0]
 800f69c:	490e      	ldr	r1, [pc, #56]	; (800f6d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f69e:	0013      	movs	r3, r2
 800f6a0:	00db      	lsls	r3, r3, #3
 800f6a2:	1a9b      	subs	r3, r3, r2
 800f6a4:	00db      	lsls	r3, r3, #3
 800f6a6:	18cb      	adds	r3, r1, r3
 800f6a8:	330c      	adds	r3, #12
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	7a1b      	ldrb	r3, [r3, #8]
 800f6ae:	2202      	movs	r2, #2
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00a      	beq.n	800f6ce <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800f6b8:	1dfb      	adds	r3, r7, #7
 800f6ba:	781a      	ldrb	r2, [r3, #0]
 800f6bc:	4906      	ldr	r1, [pc, #24]	; (800f6d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f6be:	0013      	movs	r3, r2
 800f6c0:	00db      	lsls	r3, r3, #3
 800f6c2:	1a9b      	subs	r3, r3, r2
 800f6c4:	00db      	lsls	r3, r3, #3
 800f6c6:	585b      	ldr	r3, [r3, r1]
 800f6c8:	0018      	movs	r0, r3
 800f6ca:	f7ff fb95 	bl	800edf8 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 800f6ce:	46c0      	nop			; (mov r8, r8)
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	b002      	add	sp, #8
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	46c0      	nop			; (mov r8, r8)
 800f6d8:	20000aec 	.word	0x20000aec
 800f6dc:	40010000 	.word	0x40010000
 800f6e0:	4000a000 	.word	0x4000a000

0800f6e4 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	0002      	movs	r2, r0
 800f6ec:	1dfb      	adds	r3, r7, #7
 800f6ee:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 800f6f0:	1dfb      	adds	r3, r7, #7
 800f6f2:	781a      	ldrb	r2, [r3, #0]
 800f6f4:	4906      	ldr	r1, [pc, #24]	; (800f710 <USBPD_HW_IF_EnableRX+0x2c>)
 800f6f6:	0013      	movs	r3, r2
 800f6f8:	00db      	lsls	r3, r3, #3
 800f6fa:	1a9b      	subs	r3, r3, r2
 800f6fc:	00db      	lsls	r3, r3, #3
 800f6fe:	585b      	ldr	r3, [r3, r1]
 800f700:	0018      	movs	r0, r3
 800f702:	f7ff fbe3 	bl	800eecc <LL_UCPD_RxEnable>
}
 800f706:	46c0      	nop			; (mov r8, r8)
 800f708:	46bd      	mov	sp, r7
 800f70a:	b002      	add	sp, #8
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	46c0      	nop			; (mov r8, r8)
 800f710:	20000aec 	.word	0x20000aec

0800f714 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	0002      	movs	r2, r0
 800f71c:	1dfb      	adds	r3, r7, #7
 800f71e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f720:	1dfb      	adds	r3, r7, #7
 800f722:	781a      	ldrb	r2, [r3, #0]
 800f724:	4906      	ldr	r1, [pc, #24]	; (800f740 <USBPD_HW_IF_DisableRX+0x2c>)
 800f726:	0013      	movs	r3, r2
 800f728:	00db      	lsls	r3, r3, #3
 800f72a:	1a9b      	subs	r3, r3, r2
 800f72c:	00db      	lsls	r3, r3, #3
 800f72e:	585b      	ldr	r3, [r3, r1]
 800f730:	0018      	movs	r0, r3
 800f732:	f7ff fbd9 	bl	800eee8 <LL_UCPD_RxDisable>
}
 800f736:	46c0      	nop			; (mov r8, r8)
 800f738:	46bd      	mov	sp, r7
 800f73a:	b002      	add	sp, #8
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	46c0      	nop			; (mov r8, r8)
 800f740:	20000aec 	.word	0x20000aec

0800f744 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 800f744:	b590      	push	{r4, r7, lr}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	0002      	movs	r2, r0
 800f74c:	6039      	str	r1, [r7, #0]
 800f74e:	1dfb      	adds	r3, r7, #7
 800f750:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 800f752:	f000 fca9 	bl	80100a8 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 800f756:	1dfb      	adds	r3, r7, #7
 800f758:	781c      	ldrb	r4, [r3, #0]
 800f75a:	1dfb      	adds	r3, r7, #7
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	0018      	movs	r0, r3
 800f760:	f7fe fdd0 	bl	800e304 <USBPD_HW_Init_DMATxInstance>
 800f764:	0001      	movs	r1, r0
 800f766:	4aa6      	ldr	r2, [pc, #664]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f768:	0023      	movs	r3, r4
 800f76a:	00db      	lsls	r3, r3, #3
 800f76c:	1b1b      	subs	r3, r3, r4
 800f76e:	00db      	lsls	r3, r3, #3
 800f770:	18d3      	adds	r3, r2, r3
 800f772:	3304      	adds	r3, #4
 800f774:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 800f776:	1dfb      	adds	r3, r7, #7
 800f778:	781c      	ldrb	r4, [r3, #0]
 800f77a:	1dfb      	adds	r3, r7, #7
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	0018      	movs	r0, r3
 800f780:	f7fe fd70 	bl	800e264 <USBPD_HW_Init_DMARxInstance>
 800f784:	0001      	movs	r1, r0
 800f786:	4a9e      	ldr	r2, [pc, #632]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f788:	0023      	movs	r3, r4
 800f78a:	00db      	lsls	r3, r3, #3
 800f78c:	1b1b      	subs	r3, r3, r4
 800f78e:	00db      	lsls	r3, r3, #3
 800f790:	18d3      	adds	r3, r2, r3
 800f792:	3308      	adds	r3, #8
 800f794:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 800f796:	1dfb      	adds	r3, r7, #7
 800f798:	781a      	ldrb	r2, [r3, #0]
 800f79a:	4999      	ldr	r1, [pc, #612]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f79c:	0013      	movs	r3, r2
 800f79e:	00db      	lsls	r3, r3, #3
 800f7a0:	1a9b      	subs	r3, r3, r2
 800f7a2:	00db      	lsls	r3, r3, #3
 800f7a4:	585b      	ldr	r3, [r3, r1]
 800f7a6:	3330      	adds	r3, #48	; 0x30
 800f7a8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 800f7aa:	1dfb      	adds	r3, r7, #7
 800f7ac:	781a      	ldrb	r2, [r3, #0]
 800f7ae:	4994      	ldr	r1, [pc, #592]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f7b0:	0013      	movs	r3, r2
 800f7b2:	00db      	lsls	r3, r3, #3
 800f7b4:	1a9b      	subs	r3, r3, r2
 800f7b6:	00db      	lsls	r3, r3, #3
 800f7b8:	18cb      	adds	r3, r1, r3
 800f7ba:	3308      	adds	r3, #8
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800f7c2:	1dfb      	adds	r3, r7, #7
 800f7c4:	781a      	ldrb	r2, [r3, #0]
 800f7c6:	498e      	ldr	r1, [pc, #568]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f7c8:	0013      	movs	r3, r2
 800f7ca:	00db      	lsls	r3, r3, #3
 800f7cc:	1a9b      	subs	r3, r3, r2
 800f7ce:	00db      	lsls	r3, r3, #3
 800f7d0:	18cb      	adds	r3, r1, r3
 800f7d2:	3330      	adds	r3, #48	; 0x30
 800f7d4:	6818      	ldr	r0, [r3, #0]
 800f7d6:	1dfb      	adds	r3, r7, #7
 800f7d8:	781a      	ldrb	r2, [r3, #0]
 800f7da:	4989      	ldr	r1, [pc, #548]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f7dc:	0013      	movs	r3, r2
 800f7de:	00db      	lsls	r3, r3, #3
 800f7e0:	1a9b      	subs	r3, r3, r2
 800f7e2:	00db      	lsls	r3, r3, #3
 800f7e4:	18cb      	adds	r3, r1, r3
 800f7e6:	3308      	adds	r3, #8
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	0002      	movs	r2, r0
 800f7ec:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 800f7ee:	1dfb      	adds	r3, r7, #7
 800f7f0:	781a      	ldrb	r2, [r3, #0]
 800f7f2:	4983      	ldr	r1, [pc, #524]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f7f4:	0013      	movs	r3, r2
 800f7f6:	00db      	lsls	r3, r3, #3
 800f7f8:	1a9b      	subs	r3, r3, r2
 800f7fa:	00db      	lsls	r3, r3, #3
 800f7fc:	18cb      	adds	r3, r1, r3
 800f7fe:	3308      	adds	r3, #8
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2284      	movs	r2, #132	; 0x84
 800f804:	0052      	lsls	r2, r2, #1
 800f806:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 800f808:	1dfb      	adds	r3, r7, #7
 800f80a:	781a      	ldrb	r2, [r3, #0]
 800f80c:	497c      	ldr	r1, [pc, #496]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f80e:	0013      	movs	r3, r2
 800f810:	00db      	lsls	r3, r3, #3
 800f812:	1a9b      	subs	r3, r3, r2
 800f814:	00db      	lsls	r3, r3, #3
 800f816:	18cb      	adds	r3, r1, r3
 800f818:	3308      	adds	r3, #8
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	6819      	ldr	r1, [r3, #0]
 800f81e:	1dfb      	adds	r3, r7, #7
 800f820:	781a      	ldrb	r2, [r3, #0]
 800f822:	4877      	ldr	r0, [pc, #476]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f824:	0013      	movs	r3, r2
 800f826:	00db      	lsls	r3, r3, #3
 800f828:	1a9b      	subs	r3, r3, r2
 800f82a:	00db      	lsls	r3, r3, #3
 800f82c:	18c3      	adds	r3, r0, r3
 800f82e:	3308      	adds	r3, #8
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2201      	movs	r2, #1
 800f834:	430a      	orrs	r2, r1
 800f836:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 800f838:	1dfb      	adds	r3, r7, #7
 800f83a:	781a      	ldrb	r2, [r3, #0]
 800f83c:	4970      	ldr	r1, [pc, #448]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f83e:	0013      	movs	r3, r2
 800f840:	00db      	lsls	r3, r3, #3
 800f842:	1a9b      	subs	r3, r3, r2
 800f844:	00db      	lsls	r3, r3, #3
 800f846:	585b      	ldr	r3, [r3, r1]
 800f848:	3324      	adds	r3, #36	; 0x24
 800f84a:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 800f84c:	1dfb      	adds	r3, r7, #7
 800f84e:	781a      	ldrb	r2, [r3, #0]
 800f850:	496b      	ldr	r1, [pc, #428]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f852:	0013      	movs	r3, r2
 800f854:	00db      	lsls	r3, r3, #3
 800f856:	1a9b      	subs	r3, r3, r2
 800f858:	00db      	lsls	r3, r3, #3
 800f85a:	18cb      	adds	r3, r1, r3
 800f85c:	3304      	adds	r3, #4
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 800f864:	1dfb      	adds	r3, r7, #7
 800f866:	781a      	ldrb	r2, [r3, #0]
 800f868:	4965      	ldr	r1, [pc, #404]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f86a:	0013      	movs	r3, r2
 800f86c:	00db      	lsls	r3, r3, #3
 800f86e:	1a9b      	subs	r3, r3, r2
 800f870:	00db      	lsls	r3, r3, #3
 800f872:	585b      	ldr	r3, [r3, r1]
 800f874:	6919      	ldr	r1, [r3, #16]
 800f876:	1dfb      	adds	r3, r7, #7
 800f878:	781a      	ldrb	r2, [r3, #0]
 800f87a:	4861      	ldr	r0, [pc, #388]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f87c:	0013      	movs	r3, r2
 800f87e:	00db      	lsls	r3, r3, #3
 800f880:	1a9b      	subs	r3, r3, r2
 800f882:	00db      	lsls	r3, r3, #3
 800f884:	581b      	ldr	r3, [r3, r0]
 800f886:	4a5f      	ldr	r2, [pc, #380]	; (800fa04 <HW_SignalAttachement+0x2c0>)
 800f888:	430a      	orrs	r2, r1
 800f88a:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 800f88c:	1dfb      	adds	r3, r7, #7
 800f88e:	781a      	ldrb	r2, [r3, #0]
 800f890:	495b      	ldr	r1, [pc, #364]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f892:	0013      	movs	r3, r2
 800f894:	00db      	lsls	r3, r3, #3
 800f896:	1a9b      	subs	r3, r3, r2
 800f898:	00db      	lsls	r3, r3, #3
 800f89a:	18cb      	adds	r3, r1, r3
 800f89c:	3334      	adds	r3, #52	; 0x34
 800f89e:	683a      	ldr	r2, [r7, #0]
 800f8a0:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 800f8a2:	1dfb      	adds	r3, r7, #7
 800f8a4:	781a      	ldrb	r2, [r3, #0]
 800f8a6:	4956      	ldr	r1, [pc, #344]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f8a8:	0013      	movs	r3, r2
 800f8aa:	00db      	lsls	r3, r3, #3
 800f8ac:	1a9b      	subs	r3, r3, r2
 800f8ae:	00db      	lsls	r3, r3, #3
 800f8b0:	5858      	ldr	r0, [r3, r1]
 800f8b2:	1dfb      	adds	r3, r7, #7
 800f8b4:	781a      	ldrb	r2, [r3, #0]
 800f8b6:	4952      	ldr	r1, [pc, #328]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f8b8:	0013      	movs	r3, r2
 800f8ba:	00db      	lsls	r3, r3, #3
 800f8bc:	1a9b      	subs	r3, r3, r2
 800f8be:	00db      	lsls	r3, r3, #3
 800f8c0:	18cb      	adds	r3, r1, r3
 800f8c2:	3334      	adds	r3, #52	; 0x34
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d101      	bne.n	800f8ce <HW_SignalAttachement+0x18a>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	e000      	b.n	800f8d0 <HW_SignalAttachement+0x18c>
 800f8ce:	2340      	movs	r3, #64	; 0x40
 800f8d0:	0019      	movs	r1, r3
 800f8d2:	f7ff fae9 	bl	800eea8 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f8d6:	1dfb      	adds	r3, r7, #7
 800f8d8:	781a      	ldrb	r2, [r3, #0]
 800f8da:	4949      	ldr	r1, [pc, #292]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f8dc:	0013      	movs	r3, r2
 800f8de:	00db      	lsls	r3, r3, #3
 800f8e0:	1a9b      	subs	r3, r3, r2
 800f8e2:	00db      	lsls	r3, r3, #3
 800f8e4:	18cb      	adds	r3, r1, r3
 800f8e6:	330c      	adds	r3, #12
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	7a1b      	ldrb	r3, [r3, #8]
 800f8ec:	2202      	movs	r2, #2
 800f8ee:	4013      	ands	r3, r2
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d034      	beq.n	800f960 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 800f8f6:	1dfb      	adds	r3, r7, #7
 800f8f8:	781a      	ldrb	r2, [r3, #0]
 800f8fa:	4941      	ldr	r1, [pc, #260]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f8fc:	0013      	movs	r3, r2
 800f8fe:	00db      	lsls	r3, r3, #3
 800f900:	1a9b      	subs	r3, r3, r2
 800f902:	00db      	lsls	r3, r3, #3
 800f904:	18cb      	adds	r3, r1, r3
 800f906:	3334      	adds	r3, #52	; 0x34
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d101      	bne.n	800f912 <HW_SignalAttachement+0x1ce>
 800f90e:	2301      	movs	r3, #1
 800f910:	e000      	b.n	800f914 <HW_SignalAttachement+0x1d0>
 800f912:	2302      	movs	r3, #2
 800f914:	1dfa      	adds	r2, r7, #7
 800f916:	7812      	ldrb	r2, [r2, #0]
 800f918:	0019      	movs	r1, r3
 800f91a:	0010      	movs	r0, r2
 800f91c:	f7fe fd42 	bl	800e3a4 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 800f920:	1dfb      	adds	r3, r7, #7
 800f922:	781a      	ldrb	r2, [r3, #0]
 800f924:	4936      	ldr	r1, [pc, #216]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f926:	0013      	movs	r3, r2
 800f928:	00db      	lsls	r3, r3, #3
 800f92a:	1a9b      	subs	r3, r3, r2
 800f92c:	00db      	lsls	r3, r3, #3
 800f92e:	585b      	ldr	r3, [r3, r1]
 800f930:	0018      	movs	r0, r3
 800f932:	f7ff fa51 	bl	800edd8 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 800f936:	1dfb      	adds	r3, r7, #7
 800f938:	781a      	ldrb	r2, [r3, #0]
 800f93a:	4931      	ldr	r1, [pc, #196]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f93c:	0013      	movs	r3, r2
 800f93e:	00db      	lsls	r3, r3, #3
 800f940:	1a9b      	subs	r3, r3, r2
 800f942:	00db      	lsls	r3, r3, #3
 800f944:	585b      	ldr	r3, [r3, r1]
 800f946:	6919      	ldr	r1, [r3, #16]
 800f948:	1dfb      	adds	r3, r7, #7
 800f94a:	781a      	ldrb	r2, [r3, #0]
 800f94c:	482c      	ldr	r0, [pc, #176]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f94e:	0013      	movs	r3, r2
 800f950:	00db      	lsls	r3, r3, #3
 800f952:	1a9b      	subs	r3, r3, r2
 800f954:	00db      	lsls	r3, r3, #3
 800f956:	581b      	ldr	r3, [r3, r0]
 800f958:	2280      	movs	r2, #128	; 0x80
 800f95a:	0352      	lsls	r2, r2, #13
 800f95c:	430a      	orrs	r2, r1
 800f95e:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 800f960:	1dfb      	adds	r3, r7, #7
 800f962:	781a      	ldrb	r2, [r3, #0]
 800f964:	4926      	ldr	r1, [pc, #152]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f966:	0013      	movs	r3, r2
 800f968:	00db      	lsls	r3, r3, #3
 800f96a:	1a9b      	subs	r3, r3, r2
 800f96c:	00db      	lsls	r3, r3, #3
 800f96e:	18cb      	adds	r3, r1, r3
 800f970:	3334      	adds	r3, #52	; 0x34
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2b01      	cmp	r3, #1
 800f976:	d10e      	bne.n	800f996 <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 800f978:	1dfb      	adds	r3, r7, #7
 800f97a:	781a      	ldrb	r2, [r3, #0]
 800f97c:	4920      	ldr	r1, [pc, #128]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f97e:	0013      	movs	r3, r2
 800f980:	00db      	lsls	r3, r3, #3
 800f982:	1a9b      	subs	r3, r3, r2
 800f984:	00db      	lsls	r3, r3, #3
 800f986:	585b      	ldr	r3, [r3, r1]
 800f988:	2280      	movs	r2, #128	; 0x80
 800f98a:	00d2      	lsls	r2, r2, #3
 800f98c:	0011      	movs	r1, r2
 800f98e:	0018      	movs	r0, r3
 800f990:	f7ff fa42 	bl	800ee18 <LL_UCPD_SetccEnable>
 800f994:	e00d      	b.n	800f9b2 <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 800f996:	1dfb      	adds	r3, r7, #7
 800f998:	781a      	ldrb	r2, [r3, #0]
 800f99a:	4919      	ldr	r1, [pc, #100]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f99c:	0013      	movs	r3, r2
 800f99e:	00db      	lsls	r3, r3, #3
 800f9a0:	1a9b      	subs	r3, r3, r2
 800f9a2:	00db      	lsls	r3, r3, #3
 800f9a4:	585b      	ldr	r3, [r3, r1]
 800f9a6:	2280      	movs	r2, #128	; 0x80
 800f9a8:	0112      	lsls	r2, r2, #4
 800f9aa:	0011      	movs	r1, r2
 800f9ac:	0018      	movs	r0, r3
 800f9ae:	f7ff fa33 	bl	800ee18 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 800f9b2:	1dfb      	adds	r3, r7, #7
 800f9b4:	781a      	ldrb	r2, [r3, #0]
 800f9b6:	4912      	ldr	r1, [pc, #72]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f9b8:	0013      	movs	r3, r2
 800f9ba:	00db      	lsls	r3, r3, #3
 800f9bc:	1a9b      	subs	r3, r3, r2
 800f9be:	00db      	lsls	r3, r3, #3
 800f9c0:	585b      	ldr	r3, [r3, r1]
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	0018      	movs	r0, r3
 800f9c6:	f7ff fa9e 	bl	800ef06 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 800f9ca:	1dfb      	adds	r3, r7, #7
 800f9cc:	781a      	ldrb	r2, [r3, #0]
 800f9ce:	490c      	ldr	r1, [pc, #48]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f9d0:	0013      	movs	r3, r2
 800f9d2:	00db      	lsls	r3, r3, #3
 800f9d4:	1a9b      	subs	r3, r3, r2
 800f9d6:	00db      	lsls	r3, r3, #3
 800f9d8:	585b      	ldr	r3, [r3, r1]
 800f9da:	0018      	movs	r0, r3
 800f9dc:	f7ff fad3 	bl	800ef86 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 800f9e0:	1dfb      	adds	r3, r7, #7
 800f9e2:	781a      	ldrb	r2, [r3, #0]
 800f9e4:	4906      	ldr	r1, [pc, #24]	; (800fa00 <HW_SignalAttachement+0x2bc>)
 800f9e6:	0013      	movs	r3, r2
 800f9e8:	00db      	lsls	r3, r3, #3
 800f9ea:	1a9b      	subs	r3, r3, r2
 800f9ec:	00db      	lsls	r3, r3, #3
 800f9ee:	585b      	ldr	r3, [r3, r1]
 800f9f0:	0018      	movs	r0, r3
 800f9f2:	f7ff fae7 	bl	800efc4 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800f9f6:	46c0      	nop			; (mov r8, r8)
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	b005      	add	sp, #20
 800f9fc:	bd90      	pop	{r4, r7, pc}
 800f9fe:	46c0      	nop			; (mov r8, r8)
 800fa00:	20000aec 	.word	0x20000aec
 800fa04:	00001e7e 	.word	0x00001e7e

0800fa08 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	0002      	movs	r2, r0
 800fa10:	1dfb      	adds	r3, r7, #7
 800fa12:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 800fa14:	1dfb      	adds	r3, r7, #7
 800fa16:	781a      	ldrb	r2, [r3, #0]
 800fa18:	4941      	ldr	r1, [pc, #260]	; (800fb20 <HW_SignalDetachment+0x118>)
 800fa1a:	0013      	movs	r3, r2
 800fa1c:	00db      	lsls	r3, r3, #3
 800fa1e:	1a9b      	subs	r3, r3, r2
 800fa20:	00db      	lsls	r3, r3, #3
 800fa22:	585b      	ldr	r3, [r3, r1]
 800fa24:	0018      	movs	r0, r3
 800fa26:	f7ff fabd 	bl	800efa4 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 800fa2a:	1dfb      	adds	r3, r7, #7
 800fa2c:	781a      	ldrb	r2, [r3, #0]
 800fa2e:	493c      	ldr	r1, [pc, #240]	; (800fb20 <HW_SignalDetachment+0x118>)
 800fa30:	0013      	movs	r3, r2
 800fa32:	00db      	lsls	r3, r3, #3
 800fa34:	1a9b      	subs	r3, r3, r2
 800fa36:	00db      	lsls	r3, r3, #3
 800fa38:	585b      	ldr	r3, [r3, r1]
 800fa3a:	0018      	movs	r0, r3
 800fa3c:	f7ff fad2 	bl	800efe4 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800fa40:	1dfb      	adds	r3, r7, #7
 800fa42:	781a      	ldrb	r2, [r3, #0]
 800fa44:	4936      	ldr	r1, [pc, #216]	; (800fb20 <HW_SignalDetachment+0x118>)
 800fa46:	0013      	movs	r3, r2
 800fa48:	00db      	lsls	r3, r3, #3
 800fa4a:	1a9b      	subs	r3, r3, r2
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	585b      	ldr	r3, [r3, r1]
 800fa50:	0018      	movs	r0, r3
 800fa52:	f7ff fa49 	bl	800eee8 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 800fa56:	1dfb      	adds	r3, r7, #7
 800fa58:	781a      	ldrb	r2, [r3, #0]
 800fa5a:	4931      	ldr	r1, [pc, #196]	; (800fb20 <HW_SignalDetachment+0x118>)
 800fa5c:	0013      	movs	r3, r2
 800fa5e:	00db      	lsls	r3, r3, #3
 800fa60:	1a9b      	subs	r3, r3, r2
 800fa62:	00db      	lsls	r3, r3, #3
 800fa64:	585b      	ldr	r3, [r3, r1]
 800fa66:	22c0      	movs	r2, #192	; 0xc0
 800fa68:	0212      	lsls	r2, r2, #8
 800fa6a:	611a      	str	r2, [r3, #16]
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 800fa6c:	1dfb      	adds	r3, r7, #7
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	0018      	movs	r0, r3
 800fa72:	f7fe fc8d 	bl	800e390 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 800fa76:	1dfb      	adds	r3, r7, #7
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	0018      	movs	r0, r3
 800fa7c:	f7fe fc38 	bl	800e2f0 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800fa80:	1dfb      	adds	r3, r7, #7
 800fa82:	781a      	ldrb	r2, [r3, #0]
 800fa84:	4926      	ldr	r1, [pc, #152]	; (800fb20 <HW_SignalDetachment+0x118>)
 800fa86:	0013      	movs	r3, r2
 800fa88:	00db      	lsls	r3, r3, #3
 800fa8a:	1a9b      	subs	r3, r3, r2
 800fa8c:	00db      	lsls	r3, r3, #3
 800fa8e:	585b      	ldr	r3, [r3, r1]
 800fa90:	22c0      	movs	r2, #192	; 0xc0
 800fa92:	0112      	lsls	r2, r2, #4
 800fa94:	0011      	movs	r1, r2
 800fa96:	0018      	movs	r0, r3
 800fa98:	f7ff f9be 	bl	800ee18 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800fa9c:	1dfb      	adds	r3, r7, #7
 800fa9e:	781a      	ldrb	r2, [r3, #0]
 800faa0:	491f      	ldr	r1, [pc, #124]	; (800fb20 <HW_SignalDetachment+0x118>)
 800faa2:	0013      	movs	r3, r2
 800faa4:	00db      	lsls	r3, r3, #3
 800faa6:	1a9b      	subs	r3, r3, r2
 800faa8:	00db      	lsls	r3, r3, #3
 800faaa:	18cb      	adds	r3, r1, r3
 800faac:	3310      	adds	r3, #16
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	2204      	movs	r2, #4
 800fab4:	4013      	ands	r3, r2
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d104      	bne.n	800fac6 <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800fabc:	1dfb      	adds	r3, r7, #7
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	0018      	movs	r0, r3
 800fac2:	f7f9 fb05 	bl	80090d0 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800fac6:	1dfb      	adds	r3, r7, #7
 800fac8:	781a      	ldrb	r2, [r3, #0]
 800faca:	4915      	ldr	r1, [pc, #84]	; (800fb20 <HW_SignalDetachment+0x118>)
 800facc:	0013      	movs	r3, r2
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	1a9b      	subs	r3, r3, r2
 800fad2:	00db      	lsls	r3, r3, #3
 800fad4:	18cb      	adds	r3, r1, r3
 800fad6:	330c      	adds	r3, #12
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	7a1b      	ldrb	r3, [r3, #8]
 800fadc:	2202      	movs	r2, #2
 800fade:	4013      	ands	r3, r2
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00a      	beq.n	800fafc <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800fae6:	1dfb      	adds	r3, r7, #7
 800fae8:	781a      	ldrb	r2, [r3, #0]
 800faea:	490d      	ldr	r1, [pc, #52]	; (800fb20 <HW_SignalDetachment+0x118>)
 800faec:	0013      	movs	r3, r2
 800faee:	00db      	lsls	r3, r3, #3
 800faf0:	1a9b      	subs	r3, r3, r2
 800faf2:	00db      	lsls	r3, r3, #3
 800faf4:	585b      	ldr	r3, [r3, r1]
 800faf6:	0018      	movs	r0, r3
 800faf8:	f7ff f97e 	bl	800edf8 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 800fafc:	1dfb      	adds	r3, r7, #7
 800fafe:	781a      	ldrb	r2, [r3, #0]
 800fb00:	4907      	ldr	r1, [pc, #28]	; (800fb20 <HW_SignalDetachment+0x118>)
 800fb02:	0013      	movs	r3, r2
 800fb04:	00db      	lsls	r3, r3, #3
 800fb06:	1a9b      	subs	r3, r3, r2
 800fb08:	00db      	lsls	r3, r3, #3
 800fb0a:	18cb      	adds	r3, r1, r3
 800fb0c:	3334      	adds	r3, #52	; 0x34
 800fb0e:	2200      	movs	r2, #0
 800fb10:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 800fb12:	f000 fb69 	bl	80101e8 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800fb16:	46c0      	nop			; (mov r8, r8)
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	b002      	add	sp, #8
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	46c0      	nop			; (mov r8, r8)
 800fb20:	20000aec 	.word	0x20000aec

0800fb24 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	0002      	movs	r2, r0
 800fb2c:	1dfb      	adds	r3, r7, #7
 800fb2e:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800fb30:	1dfb      	adds	r3, r7, #7
 800fb32:	781a      	ldrb	r2, [r3, #0]
 800fb34:	4907      	ldr	r1, [pc, #28]	; (800fb54 <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 800fb36:	0013      	movs	r3, r2
 800fb38:	00db      	lsls	r3, r3, #3
 800fb3a:	1a9b      	subs	r3, r3, r2
 800fb3c:	00db      	lsls	r3, r3, #3
 800fb3e:	585b      	ldr	r3, [r3, r1]
 800fb40:	2280      	movs	r2, #128	; 0x80
 800fb42:	0052      	lsls	r2, r2, #1
 800fb44:	0011      	movs	r1, r2
 800fb46:	0018      	movs	r0, r3
 800fb48:	f7ff f99a 	bl	800ee80 <LL_UCPD_SetRpResistor>
}
 800fb4c:	46c0      	nop			; (mov r8, r8)
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	b002      	add	sp, #8
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	20000aec 	.word	0x20000aec

0800fb58 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	0002      	movs	r2, r0
 800fb60:	1dfb      	adds	r3, r7, #7
 800fb62:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800fb64:	1dfb      	adds	r3, r7, #7
 800fb66:	781a      	ldrb	r2, [r3, #0]
 800fb68:	4907      	ldr	r1, [pc, #28]	; (800fb88 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 800fb6a:	0013      	movs	r3, r2
 800fb6c:	00db      	lsls	r3, r3, #3
 800fb6e:	1a9b      	subs	r3, r3, r2
 800fb70:	00db      	lsls	r3, r3, #3
 800fb72:	585b      	ldr	r3, [r3, r1]
 800fb74:	22c0      	movs	r2, #192	; 0xc0
 800fb76:	0052      	lsls	r2, r2, #1
 800fb78:	0011      	movs	r1, r2
 800fb7a:	0018      	movs	r0, r3
 800fb7c:	f7ff f980 	bl	800ee80 <LL_UCPD_SetRpResistor>
}
 800fb80:	46c0      	nop			; (mov r8, r8)
 800fb82:	46bd      	mov	sp, r7
 800fb84:	b002      	add	sp, #8
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	20000aec 	.word	0x20000aec

0800fb8c <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	0002      	movs	r2, r0
 800fb94:	1dfb      	adds	r3, r7, #7
 800fb96:	701a      	strb	r2, [r3, #0]
  switch (Ports[PortNum].CCx)
 800fb98:	1dfb      	adds	r3, r7, #7
 800fb9a:	781a      	ldrb	r2, [r3, #0]
 800fb9c:	491c      	ldr	r1, [pc, #112]	; (800fc10 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800fb9e:	0013      	movs	r3, r2
 800fba0:	00db      	lsls	r3, r3, #3
 800fba2:	1a9b      	subs	r3, r3, r2
 800fba4:	00db      	lsls	r3, r3, #3
 800fba6:	18cb      	adds	r3, r1, r3
 800fba8:	3334      	adds	r3, #52	; 0x34
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d002      	beq.n	800fbb6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 800fbb0:	2b02      	cmp	r3, #2
 800fbb2:	d012      	beq.n	800fbda <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 800fbb4:	e026      	b.n	800fc04 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 800fbb6:	1dfb      	adds	r3, r7, #7
 800fbb8:	781a      	ldrb	r2, [r3, #0]
 800fbba:	4915      	ldr	r1, [pc, #84]	; (800fc10 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800fbbc:	0013      	movs	r3, r2
 800fbbe:	00db      	lsls	r3, r3, #3
 800fbc0:	1a9b      	subs	r3, r3, r2
 800fbc2:	00db      	lsls	r3, r3, #3
 800fbc4:	585b      	ldr	r3, [r3, r1]
 800fbc6:	695a      	ldr	r2, [r3, #20]
 800fbc8:	23c0      	movs	r3, #192	; 0xc0
 800fbca:	029b      	lsls	r3, r3, #10
 800fbcc:	401a      	ands	r2, r3
 800fbce:	23c0      	movs	r3, #192	; 0xc0
 800fbd0:	029b      	lsls	r3, r3, #10
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d113      	bne.n	800fbfe <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e015      	b.n	800fc06 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 800fbda:	1dfb      	adds	r3, r7, #7
 800fbdc:	781a      	ldrb	r2, [r3, #0]
 800fbde:	490c      	ldr	r1, [pc, #48]	; (800fc10 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800fbe0:	0013      	movs	r3, r2
 800fbe2:	00db      	lsls	r3, r3, #3
 800fbe4:	1a9b      	subs	r3, r3, r2
 800fbe6:	00db      	lsls	r3, r3, #3
 800fbe8:	585b      	ldr	r3, [r3, r1]
 800fbea:	695a      	ldr	r2, [r3, #20]
 800fbec:	23c0      	movs	r3, #192	; 0xc0
 800fbee:	031b      	lsls	r3, r3, #12
 800fbf0:	401a      	ands	r2, r3
 800fbf2:	23c0      	movs	r3, #192	; 0xc0
 800fbf4:	031b      	lsls	r3, r3, #12
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d103      	bne.n	800fc02 <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e003      	b.n	800fc06 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 800fbfe:	46c0      	nop			; (mov r8, r8)
 800fc00:	e000      	b.n	800fc04 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 800fc02:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	0018      	movs	r0, r3
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	b002      	add	sp, #8
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	46c0      	nop			; (mov r8, r8)
 800fc10:	20000aec 	.word	0x20000aec

0800fc14 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	0002      	movs	r2, r0
 800fc1c:	1dfb      	adds	r3, r7, #7
 800fc1e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 800fc20:	1dfb      	adds	r3, r7, #7
 800fc22:	781a      	ldrb	r2, [r3, #0]
 800fc24:	4906      	ldr	r1, [pc, #24]	; (800fc40 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 800fc26:	0013      	movs	r3, r2
 800fc28:	00db      	lsls	r3, r3, #3
 800fc2a:	1a9b      	subs	r3, r3, r2
 800fc2c:	00db      	lsls	r3, r3, #3
 800fc2e:	585b      	ldr	r3, [r3, r1]
 800fc30:	0018      	movs	r0, r3
 800fc32:	f7ff f8c2 	bl	800edba <LL_UCPD_SignalFRSTX>
}
 800fc36:	46c0      	nop			; (mov r8, r8)
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	b002      	add	sp, #8
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	46c0      	nop			; (mov r8, r8)
 800fc40:	20000aec 	.word	0x20000aec

0800fc44 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	0002      	movs	r2, r0
 800fc4c:	1dfb      	adds	r3, r7, #7
 800fc4e:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 800fc50:	1dfb      	adds	r3, r7, #7
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	220c      	movs	r2, #12
 800fc56:	18ba      	adds	r2, r7, r2
 800fc58:	0011      	movs	r1, r2
 800fc5a:	0018      	movs	r0, r3
 800fc5c:	f7f9 fb7a 	bl	8009354 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	b29b      	uxth	r3, r3
}
 800fc64:	0018      	movs	r0, r3
 800fc66:	46bd      	mov	sp, r7
 800fc68:	b004      	add	sp, #16
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	0002      	movs	r2, r0
 800fc74:	1dfb      	adds	r3, r7, #7
 800fc76:	701a      	strb	r2, [r3, #0]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 800fc78:	1dfb      	adds	r3, r7, #7
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	220c      	movs	r2, #12
 800fc7e:	18ba      	adds	r2, r7, r2
 800fc80:	0011      	movs	r1, r2
 800fc82:	0018      	movs	r0, r3
 800fc84:	f7f9 fb92 	bl	80093ac <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	b21b      	sxth	r3, r3
}
 800fc8c:	0018      	movs	r0, r3
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	b004      	add	sp, #16
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <HW_IF_PWR_Enable>:

#if defined(_SRC) || defined(_DRP)
USBPD_StatusTypeDef HW_IF_PWR_Enable(uint8_t PortNum, USBPD_FunctionalState state, CCxPin_TypeDef Cc,
                                     uint32_t VconnState, USBPD_PortPowerRole_TypeDef role)
{
 800fc94:	b590      	push	{r4, r7, lr}
 800fc96:	b089      	sub	sp, #36	; 0x24
 800fc98:	af02      	add	r7, sp, #8
 800fc9a:	60ba      	str	r2, [r7, #8]
 800fc9c:	607b      	str	r3, [r7, #4]
 800fc9e:	240f      	movs	r4, #15
 800fca0:	193b      	adds	r3, r7, r4
 800fca2:	1c02      	adds	r2, r0, #0
 800fca4:	701a      	strb	r2, [r3, #0]
 800fca6:	200e      	movs	r0, #14
 800fca8:	183b      	adds	r3, r7, r0
 800fcaa:	1c0a      	adds	r2, r1, #0
 800fcac:	701a      	strb	r2, [r3, #0]
  UNUSED(role);
  int32_t status;
  if (USBPD_ENABLE == state)
 800fcae:	183b      	adds	r3, r7, r0
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d111      	bne.n	800fcda <HW_IF_PWR_Enable+0x46>
    {
      POWER_DEBUG((uint8_t *)"VCONN ON", 8);
      (void)BSP_USBPD_PWR_VCONNOn(PortNum, Cc);
    }
#endif /* _VCONN_SUPPORT */
    POWER_DEBUG((uint8_t *)"VBUS ON", 7);
 800fcb6:	4a17      	ldr	r2, [pc, #92]	; (800fd14 <HW_IF_PWR_Enable+0x80>)
 800fcb8:	193b      	adds	r3, r7, r4
 800fcba:	7819      	ldrb	r1, [r3, #0]
 800fcbc:	2307      	movs	r3, #7
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	0013      	movs	r3, r2
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	2006      	movs	r0, #6
 800fcc6:	f7fd fa89 	bl	800d1dc <USBPD_TRACE_Add>
    status = BSP_USBPD_PWR_VBUSOn(PortNum);
 800fcca:	193b      	adds	r3, r7, r4
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	0018      	movs	r0, r3
 800fcd0:	f7f9 fa2e 	bl	8009130 <BSP_USBPD_PWR_VBUSOn>
 800fcd4:	0003      	movs	r3, r0
 800fcd6:	617b      	str	r3, [r7, #20]
 800fcd8:	e011      	b.n	800fcfe <HW_IF_PWR_Enable+0x6a>
    {
      POWER_DEBUG((uint8_t *)"VCONN OFF", 9);
      (void)BSP_USBPD_PWR_VCONNOff(PortNum, Cc);
    }
#endif /* _VCONN_SUPPORT */
    POWER_DEBUG((uint8_t *)"VBUS OFF", 8);
 800fcda:	4a0f      	ldr	r2, [pc, #60]	; (800fd18 <HW_IF_PWR_Enable+0x84>)
 800fcdc:	240f      	movs	r4, #15
 800fcde:	193b      	adds	r3, r7, r4
 800fce0:	7819      	ldrb	r1, [r3, #0]
 800fce2:	2308      	movs	r3, #8
 800fce4:	9300      	str	r3, [sp, #0]
 800fce6:	0013      	movs	r3, r2
 800fce8:	2200      	movs	r2, #0
 800fcea:	2006      	movs	r0, #6
 800fcec:	f7fd fa76 	bl	800d1dc <USBPD_TRACE_Add>
    status = BSP_USBPD_PWR_VBUSOff(PortNum);
 800fcf0:	193b      	adds	r3, r7, r4
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	0018      	movs	r0, r3
 800fcf6:	f7f9 fa6d 	bl	80091d4 <BSP_USBPD_PWR_VBUSOff>
 800fcfa:	0003      	movs	r3, r0
 800fcfc:	617b      	str	r3, [r7, #20]
  }
  return (status == BSP_ERROR_NONE) ? USBPD_OK : USBPD_FAIL;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d101      	bne.n	800fd08 <HW_IF_PWR_Enable+0x74>
 800fd04:	2300      	movs	r3, #0
 800fd06:	e000      	b.n	800fd0a <HW_IF_PWR_Enable+0x76>
 800fd08:	2310      	movs	r3, #16
}
 800fd0a:	0018      	movs	r0, r3
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	b007      	add	sp, #28
 800fd10:	bd90      	pop	{r4, r7, pc}
 800fd12:	46c0      	nop			; (mov r8, r8)
 800fd14:	08019f84 	.word	0x08019f84
 800fd18:	08019f8c 	.word	0x08019f8c

0800fd1c <LL_APB2_GRP1_EnableClock>:
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800fd24:	4b07      	ldr	r3, [pc, #28]	; (800fd44 <LL_APB2_GRP1_EnableClock+0x28>)
 800fd26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800fd28:	4b06      	ldr	r3, [pc, #24]	; (800fd44 <LL_APB2_GRP1_EnableClock+0x28>)
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	430a      	orrs	r2, r1
 800fd2e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800fd30:	4b04      	ldr	r3, [pc, #16]	; (800fd44 <LL_APB2_GRP1_EnableClock+0x28>)
 800fd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	4013      	ands	r3, r2
 800fd38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
}
 800fd3c:	46c0      	nop			; (mov r8, r8)
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	b004      	add	sp, #16
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	40021000 	.word	0x40021000

0800fd48 <LL_APB2_GRP1_DisableClock>:
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 800fd50:	4b05      	ldr	r3, [pc, #20]	; (800fd68 <LL_APB2_GRP1_DisableClock+0x20>)
 800fd52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	43d9      	mvns	r1, r3
 800fd58:	4b03      	ldr	r3, [pc, #12]	; (800fd68 <LL_APB2_GRP1_DisableClock+0x20>)
 800fd5a:	400a      	ands	r2, r1
 800fd5c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800fd5e:	46c0      	nop			; (mov r8, r8)
 800fd60:	46bd      	mov	sp, r7
 800fd62:	b002      	add	sp, #8
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	46c0      	nop			; (mov r8, r8)
 800fd68:	40021000 	.word	0x40021000

0800fd6c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	431a      	orrs	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	601a      	str	r2, [r3, #0]
}
 800fd80:	46c0      	nop			; (mov r8, r8)
 800fd82:	46bd      	mov	sp, r7
 800fd84:	b002      	add	sp, #8
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2270      	movs	r2, #112	; 0x70
 800fd98:	4393      	bics	r3, r2
 800fd9a:	001a      	movs	r2, r3
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	431a      	orrs	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	601a      	str	r2, [r3, #0]
}
 800fda4:	46c0      	nop			; (mov r8, r8)
 800fda6:	46bd      	mov	sp, r7
 800fda8:	b002      	add	sp, #8
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	683a      	ldr	r2, [r7, #0]
 800fdba:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fdbc:	46c0      	nop			; (mov r8, r8)
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	b002      	add	sp, #8
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800fdd0:	0018      	movs	r0, r3
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	b002      	add	sp, #8
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	683a      	ldr	r2, [r7, #0]
 800fde6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800fde8:	46c0      	nop			; (mov r8, r8)
 800fdea:	46bd      	mov	sp, r7
 800fdec:	b002      	add	sp, #8
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b086      	sub	sp, #24
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d02c      	beq.n	800fe5c <LL_TIM_OC_SetMode+0x6c>
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	2b04      	cmp	r3, #4
 800fe06:	d027      	beq.n	800fe58 <LL_TIM_OC_SetMode+0x68>
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	2b10      	cmp	r3, #16
 800fe0c:	d022      	beq.n	800fe54 <LL_TIM_OC_SetMode+0x64>
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	2b40      	cmp	r3, #64	; 0x40
 800fe12:	d01d      	beq.n	800fe50 <LL_TIM_OC_SetMode+0x60>
 800fe14:	68ba      	ldr	r2, [r7, #8]
 800fe16:	2380      	movs	r3, #128	; 0x80
 800fe18:	005b      	lsls	r3, r3, #1
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d016      	beq.n	800fe4c <LL_TIM_OC_SetMode+0x5c>
 800fe1e:	68ba      	ldr	r2, [r7, #8]
 800fe20:	2380      	movs	r3, #128	; 0x80
 800fe22:	00db      	lsls	r3, r3, #3
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d00f      	beq.n	800fe48 <LL_TIM_OC_SetMode+0x58>
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	2380      	movs	r3, #128	; 0x80
 800fe2c:	015b      	lsls	r3, r3, #5
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d008      	beq.n	800fe44 <LL_TIM_OC_SetMode+0x54>
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	2380      	movs	r3, #128	; 0x80
 800fe36:	025b      	lsls	r3, r3, #9
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d101      	bne.n	800fe40 <LL_TIM_OC_SetMode+0x50>
 800fe3c:	2307      	movs	r3, #7
 800fe3e:	e00e      	b.n	800fe5e <LL_TIM_OC_SetMode+0x6e>
 800fe40:	2308      	movs	r3, #8
 800fe42:	e00c      	b.n	800fe5e <LL_TIM_OC_SetMode+0x6e>
 800fe44:	2306      	movs	r3, #6
 800fe46:	e00a      	b.n	800fe5e <LL_TIM_OC_SetMode+0x6e>
 800fe48:	2305      	movs	r3, #5
 800fe4a:	e008      	b.n	800fe5e <LL_TIM_OC_SetMode+0x6e>
 800fe4c:	2304      	movs	r3, #4
 800fe4e:	e006      	b.n	800fe5e <LL_TIM_OC_SetMode+0x6e>
 800fe50:	2303      	movs	r3, #3
 800fe52:	e004      	b.n	800fe5e <LL_TIM_OC_SetMode+0x6e>
 800fe54:	2302      	movs	r3, #2
 800fe56:	e002      	b.n	800fe5e <LL_TIM_OC_SetMode+0x6e>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e000      	b.n	800fe5e <LL_TIM_OC_SetMode+0x6e>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	2017      	movs	r0, #23
 800fe60:	183a      	adds	r2, r7, r0
 800fe62:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	3318      	adds	r3, #24
 800fe68:	0019      	movs	r1, r3
 800fe6a:	183b      	adds	r3, r7, r0
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	4a0e      	ldr	r2, [pc, #56]	; (800fea8 <LL_TIM_OC_SetMode+0xb8>)
 800fe70:	5cd3      	ldrb	r3, [r2, r3]
 800fe72:	18cb      	adds	r3, r1, r3
 800fe74:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	183a      	adds	r2, r7, r0
 800fe7c:	7812      	ldrb	r2, [r2, #0]
 800fe7e:	490b      	ldr	r1, [pc, #44]	; (800feac <LL_TIM_OC_SetMode+0xbc>)
 800fe80:	5c8a      	ldrb	r2, [r1, r2]
 800fe82:	0011      	movs	r1, r2
 800fe84:	4a0a      	ldr	r2, [pc, #40]	; (800feb0 <LL_TIM_OC_SetMode+0xc0>)
 800fe86:	408a      	lsls	r2, r1
 800fe88:	43d2      	mvns	r2, r2
 800fe8a:	401a      	ands	r2, r3
 800fe8c:	183b      	adds	r3, r7, r0
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	4906      	ldr	r1, [pc, #24]	; (800feac <LL_TIM_OC_SetMode+0xbc>)
 800fe92:	5ccb      	ldrb	r3, [r1, r3]
 800fe94:	0019      	movs	r1, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	408b      	lsls	r3, r1
 800fe9a:	431a      	orrs	r2, r3
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	601a      	str	r2, [r3, #0]
}
 800fea0:	46c0      	nop			; (mov r8, r8)
 800fea2:	46bd      	mov	sp, r7
 800fea4:	b006      	add	sp, #24
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	0801a7f0 	.word	0x0801a7f0
 800feac:	0801a7fc 	.word	0x0801a7fc
 800feb0:	00010073 	.word	0x00010073

0800feb4 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b086      	sub	sp, #24
 800feb8:	af00      	add	r7, sp, #0
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d02c      	beq.n	800ff20 <LL_TIM_OC_SetPolarity+0x6c>
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b04      	cmp	r3, #4
 800feca:	d027      	beq.n	800ff1c <LL_TIM_OC_SetPolarity+0x68>
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2b10      	cmp	r3, #16
 800fed0:	d022      	beq.n	800ff18 <LL_TIM_OC_SetPolarity+0x64>
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	2b40      	cmp	r3, #64	; 0x40
 800fed6:	d01d      	beq.n	800ff14 <LL_TIM_OC_SetPolarity+0x60>
 800fed8:	68ba      	ldr	r2, [r7, #8]
 800feda:	2380      	movs	r3, #128	; 0x80
 800fedc:	005b      	lsls	r3, r3, #1
 800fede:	429a      	cmp	r2, r3
 800fee0:	d016      	beq.n	800ff10 <LL_TIM_OC_SetPolarity+0x5c>
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	2380      	movs	r3, #128	; 0x80
 800fee6:	00db      	lsls	r3, r3, #3
 800fee8:	429a      	cmp	r2, r3
 800feea:	d00f      	beq.n	800ff0c <LL_TIM_OC_SetPolarity+0x58>
 800feec:	68ba      	ldr	r2, [r7, #8]
 800feee:	2380      	movs	r3, #128	; 0x80
 800fef0:	015b      	lsls	r3, r3, #5
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d008      	beq.n	800ff08 <LL_TIM_OC_SetPolarity+0x54>
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	2380      	movs	r3, #128	; 0x80
 800fefa:	025b      	lsls	r3, r3, #9
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d101      	bne.n	800ff04 <LL_TIM_OC_SetPolarity+0x50>
 800ff00:	2307      	movs	r3, #7
 800ff02:	e00e      	b.n	800ff22 <LL_TIM_OC_SetPolarity+0x6e>
 800ff04:	2308      	movs	r3, #8
 800ff06:	e00c      	b.n	800ff22 <LL_TIM_OC_SetPolarity+0x6e>
 800ff08:	2306      	movs	r3, #6
 800ff0a:	e00a      	b.n	800ff22 <LL_TIM_OC_SetPolarity+0x6e>
 800ff0c:	2305      	movs	r3, #5
 800ff0e:	e008      	b.n	800ff22 <LL_TIM_OC_SetPolarity+0x6e>
 800ff10:	2304      	movs	r3, #4
 800ff12:	e006      	b.n	800ff22 <LL_TIM_OC_SetPolarity+0x6e>
 800ff14:	2303      	movs	r3, #3
 800ff16:	e004      	b.n	800ff22 <LL_TIM_OC_SetPolarity+0x6e>
 800ff18:	2302      	movs	r3, #2
 800ff1a:	e002      	b.n	800ff22 <LL_TIM_OC_SetPolarity+0x6e>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e000      	b.n	800ff22 <LL_TIM_OC_SetPolarity+0x6e>
 800ff20:	2300      	movs	r3, #0
 800ff22:	2017      	movs	r0, #23
 800ff24:	183a      	adds	r2, r7, r0
 800ff26:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6a1b      	ldr	r3, [r3, #32]
 800ff2c:	183a      	adds	r2, r7, r0
 800ff2e:	7812      	ldrb	r2, [r2, #0]
 800ff30:	490a      	ldr	r1, [pc, #40]	; (800ff5c <LL_TIM_OC_SetPolarity+0xa8>)
 800ff32:	5c8a      	ldrb	r2, [r1, r2]
 800ff34:	0011      	movs	r1, r2
 800ff36:	2202      	movs	r2, #2
 800ff38:	408a      	lsls	r2, r1
 800ff3a:	43d2      	mvns	r2, r2
 800ff3c:	401a      	ands	r2, r3
 800ff3e:	183b      	adds	r3, r7, r0
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	4906      	ldr	r1, [pc, #24]	; (800ff5c <LL_TIM_OC_SetPolarity+0xa8>)
 800ff44:	5ccb      	ldrb	r3, [r1, r3]
 800ff46:	0019      	movs	r1, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	408b      	lsls	r3, r1
 800ff4c:	431a      	orrs	r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	621a      	str	r2, [r3, #32]
}
 800ff52:	46c0      	nop			; (mov r8, r8)
 800ff54:	46bd      	mov	sp, r7
 800ff56:	b006      	add	sp, #24
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	46c0      	nop			; (mov r8, r8)
 800ff5c:	0801a808 	.word	0x0801a808

0800ff60 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	683a      	ldr	r2, [r7, #0]
 800ff6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 800ff70:	46c0      	nop			; (mov r8, r8)
 800ff72:	46bd      	mov	sp, r7
 800ff74:	b002      	add	sp, #8
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	683a      	ldr	r2, [r7, #0]
 800ff86:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ff88:	46c0      	nop			; (mov r8, r8)
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	b002      	add	sp, #8
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	683a      	ldr	r2, [r7, #0]
 800ff9e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ffa0:	46c0      	nop			; (mov r8, r8)
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	b002      	add	sp, #8
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ffb8:	46c0      	nop			; (mov r8, r8)
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	b002      	add	sp, #8
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2203      	movs	r2, #3
 800ffcc:	4252      	negs	r2, r2
 800ffce:	611a      	str	r2, [r3, #16]
}
 800ffd0:	46c0      	nop			; (mov r8, r8)
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	b002      	add	sp, #8
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	2202      	movs	r2, #2
 800ffe6:	4013      	ands	r3, r2
 800ffe8:	2b02      	cmp	r3, #2
 800ffea:	d101      	bne.n	800fff0 <LL_TIM_IsActiveFlag_CC1+0x18>
 800ffec:	2301      	movs	r3, #1
 800ffee:	e000      	b.n	800fff2 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800fff0:	2300      	movs	r3, #0
}
 800fff2:	0018      	movs	r0, r3
 800fff4:	46bd      	mov	sp, r7
 800fff6:	b002      	add	sp, #8
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b082      	sub	sp, #8
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2205      	movs	r2, #5
 8010006:	4252      	negs	r2, r2
 8010008:	611a      	str	r2, [r3, #16]
}
 801000a:	46c0      	nop			; (mov r8, r8)
 801000c:	46bd      	mov	sp, r7
 801000e:	b002      	add	sp, #8
 8010010:	bd80      	pop	{r7, pc}

08010012 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8010012:	b580      	push	{r7, lr}
 8010014:	b082      	sub	sp, #8
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	2204      	movs	r2, #4
 8010020:	4013      	ands	r3, r2
 8010022:	2b04      	cmp	r3, #4
 8010024:	d101      	bne.n	801002a <LL_TIM_IsActiveFlag_CC2+0x18>
 8010026:	2301      	movs	r3, #1
 8010028:	e000      	b.n	801002c <LL_TIM_IsActiveFlag_CC2+0x1a>
 801002a:	2300      	movs	r3, #0
}
 801002c:	0018      	movs	r0, r3
 801002e:	46bd      	mov	sp, r7
 8010030:	b002      	add	sp, #8
 8010032:	bd80      	pop	{r7, pc}

08010034 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2209      	movs	r2, #9
 8010040:	4252      	negs	r2, r2
 8010042:	611a      	str	r2, [r3, #16]
}
 8010044:	46c0      	nop			; (mov r8, r8)
 8010046:	46bd      	mov	sp, r7
 8010048:	b002      	add	sp, #8
 801004a:	bd80      	pop	{r7, pc}

0801004c <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	2208      	movs	r2, #8
 801005a:	4013      	ands	r3, r2
 801005c:	2b08      	cmp	r3, #8
 801005e:	d101      	bne.n	8010064 <LL_TIM_IsActiveFlag_CC3+0x18>
 8010060:	2301      	movs	r3, #1
 8010062:	e000      	b.n	8010066 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8010064:	2300      	movs	r3, #0
}
 8010066:	0018      	movs	r0, r3
 8010068:	46bd      	mov	sp, r7
 801006a:	b002      	add	sp, #8
 801006c:	bd80      	pop	{r7, pc}

0801006e <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2211      	movs	r2, #17
 801007a:	4252      	negs	r2, r2
 801007c:	611a      	str	r2, [r3, #16]
}
 801007e:	46c0      	nop			; (mov r8, r8)
 8010080:	46bd      	mov	sp, r7
 8010082:	b002      	add	sp, #8
 8010084:	bd80      	pop	{r7, pc}

08010086 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b082      	sub	sp, #8
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	691b      	ldr	r3, [r3, #16]
 8010092:	2210      	movs	r2, #16
 8010094:	4013      	ands	r3, r2
 8010096:	2b10      	cmp	r3, #16
 8010098:	d101      	bne.n	801009e <LL_TIM_IsActiveFlag_CC4+0x18>
 801009a:	2301      	movs	r3, #1
 801009c:	e000      	b.n	80100a0 <LL_TIM_IsActiveFlag_CC4+0x1a>
 801009e:	2300      	movs	r3, #0
}
 80100a0:	0018      	movs	r0, r3
 80100a2:	46bd      	mov	sp, r7
 80100a4:	b002      	add	sp, #8
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 80100a8:	b5b0      	push	{r4, r5, r7, lr}
 80100aa:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 80100ac:	4b48      	ldr	r3, [pc, #288]	; (80101d0 <USBPD_TIM_Init+0x128>)
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	b25b      	sxtb	r3, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d000      	beq.n	80100b8 <USBPD_TIM_Init+0x10>
 80100b6:	e07e      	b.n	80101b6 <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 80100b8:	2380      	movs	r3, #128	; 0x80
 80100ba:	011b      	lsls	r3, r3, #4
 80100bc:	0018      	movs	r0, r3
 80100be:	f7ff fe2d 	bl	800fd1c <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 80100c2:	4b44      	ldr	r3, [pc, #272]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 80100c4:	2100      	movs	r1, #0
 80100c6:	0018      	movs	r0, r3
 80100c8:	f7ff fe5e 	bl	800fd88 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 80100cc:	4b42      	ldr	r3, [pc, #264]	; (80101d8 <USBPD_TIM_Init+0x130>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4a42      	ldr	r2, [pc, #264]	; (80101dc <USBPD_TIM_Init+0x134>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d90b      	bls.n	80100ee <USBPD_TIM_Init+0x46>
 80100d6:	4b40      	ldr	r3, [pc, #256]	; (80101d8 <USBPD_TIM_Init+0x130>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a41      	ldr	r2, [pc, #260]	; (80101e0 <USBPD_TIM_Init+0x138>)
 80100dc:	4694      	mov	ip, r2
 80100de:	4463      	add	r3, ip
 80100e0:	4940      	ldr	r1, [pc, #256]	; (80101e4 <USBPD_TIM_Init+0x13c>)
 80100e2:	0018      	movs	r0, r3
 80100e4:	f7f6 f93e 	bl	8006364 <__udivsi3>
 80100e8:	0003      	movs	r3, r0
 80100ea:	3b01      	subs	r3, #1
 80100ec:	e000      	b.n	80100f0 <USBPD_TIM_Init+0x48>
 80100ee:	2300      	movs	r3, #0
 80100f0:	4a38      	ldr	r2, [pc, #224]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 80100f2:	0019      	movs	r1, r3
 80100f4:	0010      	movs	r0, r2
 80100f6:	f7ff fe59 	bl	800fdac <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 80100fa:	4b37      	ldr	r3, [pc, #220]	; (80101d8 <USBPD_TIM_Init+0x130>)
 80100fc:	681c      	ldr	r4, [r3, #0]
 80100fe:	4b35      	ldr	r3, [pc, #212]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 8010100:	0018      	movs	r0, r3
 8010102:	f7ff fe5f 	bl	800fdc4 <LL_TIM_GetPrescaler>
 8010106:	0003      	movs	r3, r0
 8010108:	3301      	adds	r3, #1
 801010a:	0019      	movs	r1, r3
 801010c:	0020      	movs	r0, r4
 801010e:	f7f6 f929 	bl	8006364 <__udivsi3>
 8010112:	0003      	movs	r3, r0
 8010114:	2b63      	cmp	r3, #99	; 0x63
 8010116:	d910      	bls.n	801013a <USBPD_TIM_Init+0x92>
 8010118:	4b2f      	ldr	r3, [pc, #188]	; (80101d8 <USBPD_TIM_Init+0x130>)
 801011a:	681c      	ldr	r4, [r3, #0]
 801011c:	4b2d      	ldr	r3, [pc, #180]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 801011e:	0018      	movs	r0, r3
 8010120:	f7ff fe50 	bl	800fdc4 <LL_TIM_GetPrescaler>
 8010124:	0003      	movs	r3, r0
 8010126:	3301      	adds	r3, #1
 8010128:	2264      	movs	r2, #100	; 0x64
 801012a:	4353      	muls	r3, r2
 801012c:	0019      	movs	r1, r3
 801012e:	0020      	movs	r0, r4
 8010130:	f7f6 f918 	bl	8006364 <__udivsi3>
 8010134:	0003      	movs	r3, r0
 8010136:	3b01      	subs	r3, #1
 8010138:	e000      	b.n	801013c <USBPD_TIM_Init+0x94>
 801013a:	2300      	movs	r3, #0
 801013c:	4a25      	ldr	r2, [pc, #148]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 801013e:	0019      	movs	r1, r3
 8010140:	0010      	movs	r0, r2
 8010142:	f7ff fe49 	bl	800fdd8 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8010146:	4b23      	ldr	r3, [pc, #140]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 8010148:	2230      	movs	r2, #48	; 0x30
 801014a:	2101      	movs	r1, #1
 801014c:	0018      	movs	r0, r3
 801014e:	f7ff fe4f 	bl	800fdf0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8010152:	4b20      	ldr	r3, [pc, #128]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 8010154:	2230      	movs	r2, #48	; 0x30
 8010156:	2110      	movs	r1, #16
 8010158:	0018      	movs	r0, r3
 801015a:	f7ff fe49 	bl	800fdf0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 801015e:	2380      	movs	r3, #128	; 0x80
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	481c      	ldr	r0, [pc, #112]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 8010164:	2230      	movs	r2, #48	; 0x30
 8010166:	0019      	movs	r1, r3
 8010168:	f7ff fe42 	bl	800fdf0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 801016c:	2380      	movs	r3, #128	; 0x80
 801016e:	015b      	lsls	r3, r3, #5
 8010170:	4818      	ldr	r0, [pc, #96]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 8010172:	2230      	movs	r2, #48	; 0x30
 8010174:	0019      	movs	r1, r3
 8010176:	f7ff fe3b 	bl	800fdf0 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 801017a:	4b16      	ldr	r3, [pc, #88]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 801017c:	2200      	movs	r2, #0
 801017e:	2101      	movs	r1, #1
 8010180:	0018      	movs	r0, r3
 8010182:	f7ff fe97 	bl	800feb4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8010186:	4b13      	ldr	r3, [pc, #76]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 8010188:	2200      	movs	r2, #0
 801018a:	2110      	movs	r1, #16
 801018c:	0018      	movs	r0, r3
 801018e:	f7ff fe91 	bl	800feb4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8010192:	2380      	movs	r3, #128	; 0x80
 8010194:	005b      	lsls	r3, r3, #1
 8010196:	480f      	ldr	r0, [pc, #60]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 8010198:	2200      	movs	r2, #0
 801019a:	0019      	movs	r1, r3
 801019c:	f7ff fe8a 	bl	800feb4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 80101a0:	2380      	movs	r3, #128	; 0x80
 80101a2:	015b      	lsls	r3, r3, #5
 80101a4:	480b      	ldr	r0, [pc, #44]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 80101a6:	2200      	movs	r2, #0
 80101a8:	0019      	movs	r1, r3
 80101aa:	f7ff fe83 	bl	800feb4 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 80101ae:	4b09      	ldr	r3, [pc, #36]	; (80101d4 <USBPD_TIM_Init+0x12c>)
 80101b0:	0018      	movs	r0, r3
 80101b2:	f7ff fddb 	bl	800fd6c <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 80101b6:	4b06      	ldr	r3, [pc, #24]	; (80101d0 <USBPD_TIM_Init+0x128>)
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	b25b      	sxtb	r3, r3
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	3301      	adds	r3, #1
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	b25a      	sxtb	r2, r3
 80101c4:	4b02      	ldr	r3, [pc, #8]	; (80101d0 <USBPD_TIM_Init+0x128>)
 80101c6:	701a      	strb	r2, [r3, #0]
}
 80101c8:	46c0      	nop			; (mov r8, r8)
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bdb0      	pop	{r4, r5, r7, pc}
 80101ce:	46c0      	nop			; (mov r8, r8)
 80101d0:	20000b24 	.word	0x20000b24
 80101d4:	40012c00 	.word	0x40012c00
 80101d8:	20000004 	.word	0x20000004
 80101dc:	000f423f 	.word	0x000f423f
 80101e0:	0007a120 	.word	0x0007a120
 80101e4:	000f4240 	.word	0x000f4240

080101e8 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	af00      	add	r7, sp, #0
  timer_initcounter--;
 80101ec:	4b0a      	ldr	r3, [pc, #40]	; (8010218 <USBPD_TIM_DeInit+0x30>)
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	b25b      	sxtb	r3, r3
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	3b01      	subs	r3, #1
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	b25a      	sxtb	r2, r3
 80101fa:	4b07      	ldr	r3, [pc, #28]	; (8010218 <USBPD_TIM_DeInit+0x30>)
 80101fc:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 80101fe:	4b06      	ldr	r3, [pc, #24]	; (8010218 <USBPD_TIM_DeInit+0x30>)
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	b25b      	sxtb	r3, r3
 8010204:	2b00      	cmp	r3, #0
 8010206:	d104      	bne.n	8010212 <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 8010208:	2380      	movs	r3, #128	; 0x80
 801020a:	011b      	lsls	r3, r3, #4
 801020c:	0018      	movs	r0, r3
 801020e:	f7ff fd9b 	bl	800fd48 <LL_APB2_GRP1_DisableClock>
  }
}
 8010212:	46c0      	nop			; (mov r8, r8)
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	20000b24 	.word	0x20000b24

0801021c <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	0002      	movs	r2, r0
 8010224:	6039      	str	r1, [r7, #0]
 8010226:	1dfb      	adds	r3, r7, #7
 8010228:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 801022a:	1dfb      	adds	r3, r7, #7
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	2b03      	cmp	r3, #3
 8010230:	d044      	beq.n	80102bc <USBPD_TIM_Start+0xa0>
 8010232:	dc57      	bgt.n	80102e4 <USBPD_TIM_Start+0xc8>
 8010234:	2b02      	cmp	r3, #2
 8010236:	d02d      	beq.n	8010294 <USBPD_TIM_Start+0x78>
 8010238:	dc54      	bgt.n	80102e4 <USBPD_TIM_Start+0xc8>
 801023a:	2b00      	cmp	r3, #0
 801023c:	d002      	beq.n	8010244 <USBPD_TIM_Start+0x28>
 801023e:	2b01      	cmp	r3, #1
 8010240:	d014      	beq.n	801026c <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 8010242:	e04f      	b.n	80102e4 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 8010244:	4b2a      	ldr	r3, [pc, #168]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 8010246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	18d3      	adds	r3, r2, r3
 801024c:	4929      	ldr	r1, [pc, #164]	; (80102f4 <USBPD_TIM_Start+0xd8>)
 801024e:	0018      	movs	r0, r3
 8010250:	f7f6 f90e 	bl	8006470 <__aeabi_uidivmod>
 8010254:	000b      	movs	r3, r1
 8010256:	001a      	movs	r2, r3
 8010258:	4b25      	ldr	r3, [pc, #148]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 801025a:	0011      	movs	r1, r2
 801025c:	0018      	movs	r0, r3
 801025e:	f7ff fe7f 	bl	800ff60 <LL_TIM_OC_SetCompareCH1>
 8010262:	4b23      	ldr	r3, [pc, #140]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 8010264:	0018      	movs	r0, r3
 8010266:	f7ff feab 	bl	800ffc0 <LL_TIM_ClearFlag_CC1>
      break;
 801026a:	e03c      	b.n	80102e6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 801026c:	4b20      	ldr	r3, [pc, #128]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 801026e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	18d3      	adds	r3, r2, r3
 8010274:	491f      	ldr	r1, [pc, #124]	; (80102f4 <USBPD_TIM_Start+0xd8>)
 8010276:	0018      	movs	r0, r3
 8010278:	f7f6 f8fa 	bl	8006470 <__aeabi_uidivmod>
 801027c:	000b      	movs	r3, r1
 801027e:	001a      	movs	r2, r3
 8010280:	4b1b      	ldr	r3, [pc, #108]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 8010282:	0011      	movs	r1, r2
 8010284:	0018      	movs	r0, r3
 8010286:	f7ff fe77 	bl	800ff78 <LL_TIM_OC_SetCompareCH2>
 801028a:	4b19      	ldr	r3, [pc, #100]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 801028c:	0018      	movs	r0, r3
 801028e:	f7ff feb4 	bl	800fffa <LL_TIM_ClearFlag_CC2>
      break;
 8010292:	e028      	b.n	80102e6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 8010294:	4b16      	ldr	r3, [pc, #88]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 8010296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	18d3      	adds	r3, r2, r3
 801029c:	4915      	ldr	r1, [pc, #84]	; (80102f4 <USBPD_TIM_Start+0xd8>)
 801029e:	0018      	movs	r0, r3
 80102a0:	f7f6 f8e6 	bl	8006470 <__aeabi_uidivmod>
 80102a4:	000b      	movs	r3, r1
 80102a6:	001a      	movs	r2, r3
 80102a8:	4b11      	ldr	r3, [pc, #68]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 80102aa:	0011      	movs	r1, r2
 80102ac:	0018      	movs	r0, r3
 80102ae:	f7ff fe6f 	bl	800ff90 <LL_TIM_OC_SetCompareCH3>
 80102b2:	4b0f      	ldr	r3, [pc, #60]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 80102b4:	0018      	movs	r0, r3
 80102b6:	f7ff febd 	bl	8010034 <LL_TIM_ClearFlag_CC3>
      break;
 80102ba:	e014      	b.n	80102e6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 80102bc:	4b0c      	ldr	r3, [pc, #48]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 80102be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	18d3      	adds	r3, r2, r3
 80102c4:	490b      	ldr	r1, [pc, #44]	; (80102f4 <USBPD_TIM_Start+0xd8>)
 80102c6:	0018      	movs	r0, r3
 80102c8:	f7f6 f8d2 	bl	8006470 <__aeabi_uidivmod>
 80102cc:	000b      	movs	r3, r1
 80102ce:	001a      	movs	r2, r3
 80102d0:	4b07      	ldr	r3, [pc, #28]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 80102d2:	0011      	movs	r1, r2
 80102d4:	0018      	movs	r0, r3
 80102d6:	f7ff fe67 	bl	800ffa8 <LL_TIM_OC_SetCompareCH4>
 80102da:	4b05      	ldr	r3, [pc, #20]	; (80102f0 <USBPD_TIM_Start+0xd4>)
 80102dc:	0018      	movs	r0, r3
 80102de:	f7ff fec6 	bl	801006e <LL_TIM_ClearFlag_CC4>
      break;
 80102e2:	e000      	b.n	80102e6 <USBPD_TIM_Start+0xca>
      break;
 80102e4:	46c0      	nop			; (mov r8, r8)
  }
}
 80102e6:	46c0      	nop			; (mov r8, r8)
 80102e8:	46bd      	mov	sp, r7
 80102ea:	b002      	add	sp, #8
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	46c0      	nop			; (mov r8, r8)
 80102f0:	40012c00 	.word	0x40012c00
 80102f4:	00002710 	.word	0x00002710

080102f8 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	0002      	movs	r2, r0
 8010300:	1dfb      	adds	r3, r7, #7
 8010302:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 8010304:	2301      	movs	r3, #1
 8010306:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8010308:	1dfb      	adds	r3, r7, #7
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	2b03      	cmp	r3, #3
 801030e:	d01d      	beq.n	801034c <USBPD_TIM_IsExpired+0x54>
 8010310:	dc23      	bgt.n	801035a <USBPD_TIM_IsExpired+0x62>
 8010312:	2b02      	cmp	r3, #2
 8010314:	d013      	beq.n	801033e <USBPD_TIM_IsExpired+0x46>
 8010316:	dc20      	bgt.n	801035a <USBPD_TIM_IsExpired+0x62>
 8010318:	2b00      	cmp	r3, #0
 801031a:	d002      	beq.n	8010322 <USBPD_TIM_IsExpired+0x2a>
 801031c:	2b01      	cmp	r3, #1
 801031e:	d007      	beq.n	8010330 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 8010320:	e01b      	b.n	801035a <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8010322:	4b11      	ldr	r3, [pc, #68]	; (8010368 <USBPD_TIM_IsExpired+0x70>)
 8010324:	0018      	movs	r0, r3
 8010326:	f7ff fe57 	bl	800ffd8 <LL_TIM_IsActiveFlag_CC1>
 801032a:	0003      	movs	r3, r0
 801032c:	60fb      	str	r3, [r7, #12]
      break;
 801032e:	e015      	b.n	801035c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8010330:	4b0d      	ldr	r3, [pc, #52]	; (8010368 <USBPD_TIM_IsExpired+0x70>)
 8010332:	0018      	movs	r0, r3
 8010334:	f7ff fe6d 	bl	8010012 <LL_TIM_IsActiveFlag_CC2>
 8010338:	0003      	movs	r3, r0
 801033a:	60fb      	str	r3, [r7, #12]
      break;
 801033c:	e00e      	b.n	801035c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 801033e:	4b0a      	ldr	r3, [pc, #40]	; (8010368 <USBPD_TIM_IsExpired+0x70>)
 8010340:	0018      	movs	r0, r3
 8010342:	f7ff fe83 	bl	801004c <LL_TIM_IsActiveFlag_CC3>
 8010346:	0003      	movs	r3, r0
 8010348:	60fb      	str	r3, [r7, #12]
      break;
 801034a:	e007      	b.n	801035c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 801034c:	4b06      	ldr	r3, [pc, #24]	; (8010368 <USBPD_TIM_IsExpired+0x70>)
 801034e:	0018      	movs	r0, r3
 8010350:	f7ff fe99 	bl	8010086 <LL_TIM_IsActiveFlag_CC4>
 8010354:	0003      	movs	r3, r0
 8010356:	60fb      	str	r3, [r7, #12]
      break;
 8010358:	e000      	b.n	801035c <USBPD_TIM_IsExpired+0x64>
      break;
 801035a:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 801035c:	68fb      	ldr	r3, [r7, #12]
}
 801035e:	0018      	movs	r0, r3
 8010360:	46bd      	mov	sp, r7
 8010362:	b004      	add	sp, #16
 8010364:	bd80      	pop	{r7, pc}
 8010366:	46c0      	nop			; (mov r8, r8)
 8010368:	40012c00 	.word	0x40012c00

0801036c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	0002      	movs	r2, r0
 8010374:	1dbb      	adds	r3, r7, #6
 8010376:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010378:	2300      	movs	r3, #0
 801037a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801037c:	1dbb      	adds	r3, r7, #6
 801037e:	2200      	movs	r2, #0
 8010380:	5e9b      	ldrsh	r3, [r3, r2]
 8010382:	2b84      	cmp	r3, #132	; 0x84
 8010384:	d006      	beq.n	8010394 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8010386:	1dbb      	adds	r3, r7, #6
 8010388:	2200      	movs	r2, #0
 801038a:	5e9a      	ldrsh	r2, [r3, r2]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	18d3      	adds	r3, r2, r3
 8010390:	3303      	adds	r3, #3
 8010392:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010394:	68fb      	ldr	r3, [r7, #12]
}
 8010396:	0018      	movs	r0, r3
 8010398:	46bd      	mov	sp, r7
 801039a:	b004      	add	sp, #16
 801039c:	bd80      	pop	{r7, pc}

0801039e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b082      	sub	sp, #8
 80103a2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103a4:	f3ef 8305 	mrs	r3, IPSR
 80103a8:	607b      	str	r3, [r7, #4]
  return(result);
 80103aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80103ac:	1e5a      	subs	r2, r3, #1
 80103ae:	4193      	sbcs	r3, r2
 80103b0:	b2db      	uxtb	r3, r3
}
 80103b2:	0018      	movs	r0, r3
 80103b4:	46bd      	mov	sp, r7
 80103b6:	b002      	add	sp, #8
 80103b8:	bd80      	pop	{r7, pc}

080103ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80103be:	f001 f8e9 	bl	8011594 <vTaskStartScheduler>
  
  return osOK;
 80103c2:	2300      	movs	r3, #0
}
 80103c4:	0018      	movs	r0, r3
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}

080103ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80103ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103cc:	b087      	sub	sp, #28
 80103ce:	af02      	add	r7, sp, #8
 80103d0:	6078      	str	r0, [r7, #4]
 80103d2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685c      	ldr	r4, [r3, #4]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103e0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2208      	movs	r2, #8
 80103e6:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103e8:	0018      	movs	r0, r3
 80103ea:	f7ff ffbf 	bl	801036c <makeFreeRtosPriority>
 80103ee:	0001      	movs	r1, r0
 80103f0:	683a      	ldr	r2, [r7, #0]
 80103f2:	230c      	movs	r3, #12
 80103f4:	18fb      	adds	r3, r7, r3
 80103f6:	9301      	str	r3, [sp, #4]
 80103f8:	9100      	str	r1, [sp, #0]
 80103fa:	0013      	movs	r3, r2
 80103fc:	0032      	movs	r2, r6
 80103fe:	0029      	movs	r1, r5
 8010400:	0020      	movs	r0, r4
 8010402:	f000 fdcd 	bl	8010fa0 <xTaskCreate>
 8010406:	0003      	movs	r3, r0
 8010408:	2b01      	cmp	r3, #1
 801040a:	d001      	beq.n	8010410 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 801040c:	2300      	movs	r3, #0
 801040e:	e000      	b.n	8010412 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8010410:	68fb      	ldr	r3, [r7, #12]
}
 8010412:	0018      	movs	r0, r3
 8010414:	46bd      	mov	sp, r7
 8010416:	b005      	add	sp, #20
 8010418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801041a <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 801041a:	b580      	push	{r7, lr}
 801041c:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 801041e:	f001 fc23 	bl	8011c68 <xTaskGetCurrentTaskHandle>
 8010422:	0003      	movs	r3, r0
#else
	return NULL;
#endif
}
 8010424:	0018      	movs	r0, r3
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b084      	sub	sp, #16
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <osDelay+0x16>
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	e000      	b.n	8010442 <osDelay+0x18>
 8010440:	2301      	movs	r3, #1
 8010442:	0018      	movs	r0, r3
 8010444:	f000 feda 	bl	80111fc <vTaskDelay>
  
  return osOK;
 8010448:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801044a:	0018      	movs	r0, r3
 801044c:	46bd      	mov	sp, r7
 801044e:	b004      	add	sp, #16
 8010450:	bd80      	pop	{r7, pc}

08010452 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b082      	sub	sp, #8
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
 801045a:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6818      	ldr	r0, [r3, #0]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	0019      	movs	r1, r3
 8010468:	f000 f9dd 	bl	8010826 <xQueueGenericCreate>
 801046c:	0003      	movs	r3, r0
#endif
}
 801046e:	0018      	movs	r0, r3
 8010470:	46bd      	mov	sp, r7
 8010472:	b002      	add	sp, #8
 8010474:	bd80      	pop	{r7, pc}
	...

08010478 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b086      	sub	sp, #24
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010484:	2300      	movs	r3, #0
 8010486:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <osMessagePut+0x1e>
    ticks = 1;
 8010492:	2301      	movs	r3, #1
 8010494:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010496:	f7ff ff82 	bl	801039e <inHandlerMode>
 801049a:	1e03      	subs	r3, r0, #0
 801049c:	d014      	beq.n	80104c8 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801049e:	2310      	movs	r3, #16
 80104a0:	18fa      	adds	r2, r7, r3
 80104a2:	2308      	movs	r3, #8
 80104a4:	18f9      	adds	r1, r7, r3
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	2300      	movs	r3, #0
 80104aa:	f000 fad0 	bl	8010a4e <xQueueGenericSendFromISR>
 80104ae:	0003      	movs	r3, r0
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d001      	beq.n	80104b8 <osMessagePut+0x40>
      return osErrorOS;
 80104b4:	23ff      	movs	r3, #255	; 0xff
 80104b6:	e014      	b.n	80104e2 <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d010      	beq.n	80104e0 <osMessagePut+0x68>
 80104be:	4b0b      	ldr	r3, [pc, #44]	; (80104ec <osMessagePut+0x74>)
 80104c0:	2280      	movs	r2, #128	; 0x80
 80104c2:	0552      	lsls	r2, r2, #21
 80104c4:	601a      	str	r2, [r3, #0]
 80104c6:	e00b      	b.n	80104e0 <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80104c8:	697a      	ldr	r2, [r7, #20]
 80104ca:	2308      	movs	r3, #8
 80104cc:	18f9      	adds	r1, r7, r3
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	2300      	movs	r3, #0
 80104d2:	f000 f9f8 	bl	80108c6 <xQueueGenericSend>
 80104d6:	0003      	movs	r3, r0
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d001      	beq.n	80104e0 <osMessagePut+0x68>
      return osErrorOS;
 80104dc:	23ff      	movs	r3, #255	; 0xff
 80104de:	e000      	b.n	80104e2 <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	0018      	movs	r0, r3
 80104e4:	46bd      	mov	sp, r7
 80104e6:	b006      	add	sp, #24
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	46c0      	nop			; (mov r8, r8)
 80104ec:	e000ed04 	.word	0xe000ed04

080104f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80104f0:	b590      	push	{r4, r7, lr}
 80104f2:	b08b      	sub	sp, #44	; 0x2c
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80104fc:	2114      	movs	r1, #20
 80104fe:	187b      	adds	r3, r7, r1
 8010500:	68ba      	ldr	r2, [r7, #8]
 8010502:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 8010504:	187b      	adds	r3, r7, r1
 8010506:	2200      	movs	r2, #0
 8010508:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d107      	bne.n	8010520 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010510:	187b      	adds	r3, r7, r1
 8010512:	2280      	movs	r2, #128	; 0x80
 8010514:	601a      	str	r2, [r3, #0]
    return event;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	187a      	adds	r2, r7, r1
 801051a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801051c:	c313      	stmia	r3!, {r0, r1, r4}
 801051e:	e051      	b.n	80105c4 <osMessageGet+0xd4>
  }
  
  taskWoken = pdFALSE;
 8010520:	2300      	movs	r3, #0
 8010522:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010524:	2300      	movs	r3, #0
 8010526:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	3301      	adds	r3, #1
 801052c:	d103      	bne.n	8010536 <osMessageGet+0x46>
    ticks = portMAX_DELAY;
 801052e:	2301      	movs	r3, #1
 8010530:	425b      	negs	r3, r3
 8010532:	627b      	str	r3, [r7, #36]	; 0x24
 8010534:	e009      	b.n	801054a <osMessageGet+0x5a>
  }
  else if (millisec != 0) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d006      	beq.n	801054a <osMessageGet+0x5a>
    ticks = millisec / portTICK_PERIOD_MS;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010542:	2b00      	cmp	r3, #0
 8010544:	d101      	bne.n	801054a <osMessageGet+0x5a>
      ticks = 1;
 8010546:	2301      	movs	r3, #1
 8010548:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801054a:	f7ff ff28 	bl	801039e <inHandlerMode>
 801054e:	1e03      	subs	r3, r0, #0
 8010550:	d01b      	beq.n	801058a <osMessageGet+0x9a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010552:	2320      	movs	r3, #32
 8010554:	18fa      	adds	r2, r7, r3
 8010556:	2414      	movs	r4, #20
 8010558:	193b      	adds	r3, r7, r4
 801055a:	1d19      	adds	r1, r3, #4
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	0018      	movs	r0, r3
 8010560:	f000 fb9e 	bl	8010ca0 <xQueueReceiveFromISR>
 8010564:	0003      	movs	r3, r0
 8010566:	2b01      	cmp	r3, #1
 8010568:	d103      	bne.n	8010572 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
 801056a:	193b      	adds	r3, r7, r4
 801056c:	2210      	movs	r2, #16
 801056e:	601a      	str	r2, [r3, #0]
 8010570:	e003      	b.n	801057a <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 8010572:	2314      	movs	r3, #20
 8010574:	18fb      	adds	r3, r7, r3
 8010576:	2200      	movs	r2, #0
 8010578:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801057a:	6a3b      	ldr	r3, [r7, #32]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d01c      	beq.n	80105ba <osMessageGet+0xca>
 8010580:	4b12      	ldr	r3, [pc, #72]	; (80105cc <osMessageGet+0xdc>)
 8010582:	2280      	movs	r2, #128	; 0x80
 8010584:	0552      	lsls	r2, r2, #21
 8010586:	601a      	str	r2, [r3, #0]
 8010588:	e017      	b.n	80105ba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801058a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801058c:	2414      	movs	r4, #20
 801058e:	193b      	adds	r3, r7, r4
 8010590:	1d19      	adds	r1, r3, #4
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	0018      	movs	r0, r3
 8010596:	f000 face 	bl	8010b36 <xQueueReceive>
 801059a:	0003      	movs	r3, r0
 801059c:	2b01      	cmp	r3, #1
 801059e:	d103      	bne.n	80105a8 <osMessageGet+0xb8>
      /* We have mail */
      event.status = osEventMessage;
 80105a0:	193b      	adds	r3, r7, r4
 80105a2:	2210      	movs	r2, #16
 80105a4:	601a      	str	r2, [r3, #0]
 80105a6:	e008      	b.n	80105ba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80105a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d101      	bne.n	80105b2 <osMessageGet+0xc2>
 80105ae:	2200      	movs	r2, #0
 80105b0:	e000      	b.n	80105b4 <osMessageGet+0xc4>
 80105b2:	2240      	movs	r2, #64	; 0x40
 80105b4:	2314      	movs	r3, #20
 80105b6:	18fb      	adds	r3, r7, r3
 80105b8:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2214      	movs	r2, #20
 80105be:	18ba      	adds	r2, r7, r2
 80105c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80105c2:	c313      	stmia	r3!, {r0, r1, r4}
}
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	46bd      	mov	sp, r7
 80105c8:	b00b      	add	sp, #44	; 0x2c
 80105ca:	bd90      	pop	{r4, r7, pc}
 80105cc:	e000ed04 	.word	0xe000ed04

080105d0 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	0018      	movs	r0, r3
 80105dc:	f000 fea2 	bl	8011324 <vTaskSuspend>
  
  return osOK;
 80105e0:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80105e2:	0018      	movs	r0, r3
 80105e4:	46bd      	mov	sp, r7
 80105e6:	b002      	add	sp, #8
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80105f4:	f7ff fed3 	bl	801039e <inHandlerMode>
 80105f8:	1e03      	subs	r3, r0, #0
 80105fa:	d00b      	beq.n	8010614 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	0018      	movs	r0, r3
 8010600:	f000 ff6a 	bl	80114d8 <xTaskResumeFromISR>
 8010604:	0003      	movs	r3, r0
 8010606:	2b01      	cmp	r3, #1
 8010608:	d108      	bne.n	801061c <osThreadResume+0x30>
    {
      portYIELD_FROM_ISR(pdTRUE);
 801060a:	4b07      	ldr	r3, [pc, #28]	; (8010628 <osThreadResume+0x3c>)
 801060c:	2280      	movs	r2, #128	; 0x80
 801060e:	0552      	lsls	r2, r2, #21
 8010610:	601a      	str	r2, [r3, #0]
 8010612:	e003      	b.n	801061c <osThreadResume+0x30>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	0018      	movs	r0, r3
 8010618:	f000 ff10 	bl	801143c <vTaskResume>
  }
  return osOK;
 801061c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 801061e:	0018      	movs	r0, r3
 8010620:	46bd      	mov	sp, r7
 8010622:	b002      	add	sp, #8
 8010624:	bd80      	pop	{r7, pc}
 8010626:	46c0      	nop			; (mov r8, r8)
 8010628:	e000ed04 	.word	0xe000ed04

0801062c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	3308      	adds	r3, #8
 8010638:	001a      	movs	r2, r3
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2201      	movs	r2, #1
 8010642:	4252      	negs	r2, r2
 8010644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	3308      	adds	r3, #8
 801064a:	001a      	movs	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	3308      	adds	r3, #8
 8010654:	001a      	movs	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010660:	46c0      	nop			; (mov r8, r8)
 8010662:	46bd      	mov	sp, r7
 8010664:	b002      	add	sp, #8
 8010666:	bd80      	pop	{r7, pc}

08010668 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010676:	46c0      	nop			; (mov r8, r8)
 8010678:	46bd      	mov	sp, r7
 801067a:	b002      	add	sp, #8
 801067c:	bd80      	pop	{r7, pc}

0801067e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b084      	sub	sp, #16
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	689a      	ldr	r2, [r3, #8]
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	689b      	ldr	r3, [r3, #8]
 80106a0:	683a      	ldr	r2, [r7, #0]
 80106a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	683a      	ldr	r2, [r7, #0]
 80106a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	687a      	ldr	r2, [r7, #4]
 80106ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	1c5a      	adds	r2, r3, #1
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	601a      	str	r2, [r3, #0]
}
 80106ba:	46c0      	nop			; (mov r8, r8)
 80106bc:	46bd      	mov	sp, r7
 80106be:	b004      	add	sp, #16
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b084      	sub	sp, #16
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
 80106ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	3301      	adds	r3, #1
 80106d6:	d103      	bne.n	80106e0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	60fb      	str	r3, [r7, #12]
 80106de:	e00c      	b.n	80106fa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	3308      	adds	r3, #8
 80106e4:	60fb      	str	r3, [r7, #12]
 80106e6:	e002      	b.n	80106ee <vListInsert+0x2c>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	60fb      	str	r3, [r7, #12]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d2f6      	bcs.n	80106e8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	685a      	ldr	r2, [r3, #4]
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	68fa      	ldr	r2, [r7, #12]
 801070e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	683a      	ldr	r2, [r7, #0]
 8010714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	1c5a      	adds	r2, r3, #1
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	601a      	str	r2, [r3, #0]
}
 8010726:	46c0      	nop			; (mov r8, r8)
 8010728:	46bd      	mov	sp, r7
 801072a:	b004      	add	sp, #16
 801072c:	bd80      	pop	{r7, pc}

0801072e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801072e:	b580      	push	{r7, lr}
 8010730:	b084      	sub	sp, #16
 8010732:	af00      	add	r7, sp, #0
 8010734:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	6892      	ldr	r2, [r2, #8]
 8010744:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	6852      	ldr	r2, [r2, #4]
 801074e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	429a      	cmp	r2, r3
 8010758:	d103      	bne.n	8010762 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	689a      	ldr	r2, [r3, #8]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	1e5a      	subs	r2, r3, #1
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
}
 8010776:	0018      	movs	r0, r3
 8010778:	46bd      	mov	sp, r7
 801077a:	b004      	add	sp, #16
 801077c:	bd80      	pop	{r7, pc}

0801077e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b084      	sub	sp, #16
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d101      	bne.n	8010796 <xQueueGenericReset+0x18>
 8010792:	b672      	cpsid	i
 8010794:	e7fe      	b.n	8010794 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8010796:	f001 fbdb 	bl	8011f50 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a6:	434b      	muls	r3, r1
 80107a8:	18d2      	adds	r2, r2, r3
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2200      	movs	r2, #0
 80107b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107c4:	1e59      	subs	r1, r3, #1
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ca:	434b      	muls	r3, r1
 80107cc:	18d2      	adds	r2, r2, r3
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2244      	movs	r2, #68	; 0x44
 80107d6:	21ff      	movs	r1, #255	; 0xff
 80107d8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2245      	movs	r2, #69	; 0x45
 80107de:	21ff      	movs	r1, #255	; 0xff
 80107e0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10d      	bne.n	8010804 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d013      	beq.n	8010818 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	3310      	adds	r3, #16
 80107f4:	0018      	movs	r0, r3
 80107f6:	f001 f8bb 	bl	8011970 <xTaskRemoveFromEventList>
 80107fa:	1e03      	subs	r3, r0, #0
 80107fc:	d00c      	beq.n	8010818 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80107fe:	f001 fb97 	bl	8011f30 <vPortYield>
 8010802:	e009      	b.n	8010818 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	3310      	adds	r3, #16
 8010808:	0018      	movs	r0, r3
 801080a:	f7ff ff0f 	bl	801062c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	3324      	adds	r3, #36	; 0x24
 8010812:	0018      	movs	r0, r3
 8010814:	f7ff ff0a 	bl	801062c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010818:	f001 fbac 	bl	8011f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801081c:	2301      	movs	r3, #1
}
 801081e:	0018      	movs	r0, r3
 8010820:	46bd      	mov	sp, r7
 8010822:	b004      	add	sp, #16
 8010824:	bd80      	pop	{r7, pc}

08010826 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010826:	b590      	push	{r4, r7, lr}
 8010828:	b08b      	sub	sp, #44	; 0x2c
 801082a:	af02      	add	r7, sp, #8
 801082c:	60f8      	str	r0, [r7, #12]
 801082e:	60b9      	str	r1, [r7, #8]
 8010830:	1dfb      	adds	r3, r7, #7
 8010832:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d101      	bne.n	801083e <xQueueGenericCreate+0x18>
 801083a:	b672      	cpsid	i
 801083c:	e7fe      	b.n	801083c <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	4353      	muls	r3, r2
 8010844:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	3348      	adds	r3, #72	; 0x48
 801084a:	0018      	movs	r0, r3
 801084c:	f001 fc18 	bl	8012080 <pvPortMalloc>
 8010850:	0003      	movs	r3, r0
 8010852:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00e      	beq.n	8010878 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	3348      	adds	r3, #72	; 0x48
 8010862:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010864:	1dfb      	adds	r3, r7, #7
 8010866:	781c      	ldrb	r4, [r3, #0]
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	68b9      	ldr	r1, [r7, #8]
 801086c:	68f8      	ldr	r0, [r7, #12]
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	0023      	movs	r3, r4
 8010874:	f000 f805 	bl	8010882 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010878:	69bb      	ldr	r3, [r7, #24]
	}
 801087a:	0018      	movs	r0, r3
 801087c:	46bd      	mov	sp, r7
 801087e:	b009      	add	sp, #36	; 0x24
 8010880:	bd90      	pop	{r4, r7, pc}

08010882 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010882:	b580      	push	{r7, lr}
 8010884:	b084      	sub	sp, #16
 8010886:	af00      	add	r7, sp, #0
 8010888:	60f8      	str	r0, [r7, #12]
 801088a:	60b9      	str	r1, [r7, #8]
 801088c:	607a      	str	r2, [r7, #4]
 801088e:	001a      	movs	r2, r3
 8010890:	1cfb      	adds	r3, r7, #3
 8010892:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d103      	bne.n	80108a2 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	69ba      	ldr	r2, [r7, #24]
 801089e:	601a      	str	r2, [r3, #0]
 80108a0:	e002      	b.n	80108a8 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80108a2:	69bb      	ldr	r3, [r7, #24]
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	68fa      	ldr	r2, [r7, #12]
 80108ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	68ba      	ldr	r2, [r7, #8]
 80108b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	2101      	movs	r1, #1
 80108b8:	0018      	movs	r0, r3
 80108ba:	f7ff ff60 	bl	801077e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80108be:	46c0      	nop			; (mov r8, r8)
 80108c0:	46bd      	mov	sp, r7
 80108c2:	b004      	add	sp, #16
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b08a      	sub	sp, #40	; 0x28
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	60f8      	str	r0, [r7, #12]
 80108ce:	60b9      	str	r1, [r7, #8]
 80108d0:	607a      	str	r2, [r7, #4]
 80108d2:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80108d4:	2300      	movs	r3, #0
 80108d6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d101      	bne.n	80108e6 <xQueueGenericSend+0x20>
 80108e2:	b672      	cpsid	i
 80108e4:	e7fe      	b.n	80108e4 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d103      	bne.n	80108f4 <xQueueGenericSend+0x2e>
 80108ec:	6a3b      	ldr	r3, [r7, #32]
 80108ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <xQueueGenericSend+0x32>
 80108f4:	2301      	movs	r3, #1
 80108f6:	e000      	b.n	80108fa <xQueueGenericSend+0x34>
 80108f8:	2300      	movs	r3, #0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d101      	bne.n	8010902 <xQueueGenericSend+0x3c>
 80108fe:	b672      	cpsid	i
 8010900:	e7fe      	b.n	8010900 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	2b02      	cmp	r3, #2
 8010906:	d103      	bne.n	8010910 <xQueueGenericSend+0x4a>
 8010908:	6a3b      	ldr	r3, [r7, #32]
 801090a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801090c:	2b01      	cmp	r3, #1
 801090e:	d101      	bne.n	8010914 <xQueueGenericSend+0x4e>
 8010910:	2301      	movs	r3, #1
 8010912:	e000      	b.n	8010916 <xQueueGenericSend+0x50>
 8010914:	2300      	movs	r3, #0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d101      	bne.n	801091e <xQueueGenericSend+0x58>
 801091a:	b672      	cpsid	i
 801091c:	e7fe      	b.n	801091c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801091e:	f001 f9b1 	bl	8011c84 <xTaskGetSchedulerState>
 8010922:	1e03      	subs	r3, r0, #0
 8010924:	d102      	bne.n	801092c <xQueueGenericSend+0x66>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d101      	bne.n	8010930 <xQueueGenericSend+0x6a>
 801092c:	2301      	movs	r3, #1
 801092e:	e000      	b.n	8010932 <xQueueGenericSend+0x6c>
 8010930:	2300      	movs	r3, #0
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <xQueueGenericSend+0x74>
 8010936:	b672      	cpsid	i
 8010938:	e7fe      	b.n	8010938 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801093a:	f001 fb09 	bl	8011f50 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801093e:	6a3b      	ldr	r3, [r7, #32]
 8010940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010942:	6a3b      	ldr	r3, [r7, #32]
 8010944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010946:	429a      	cmp	r2, r3
 8010948:	d302      	bcc.n	8010950 <xQueueGenericSend+0x8a>
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	2b02      	cmp	r3, #2
 801094e:	d11e      	bne.n	801098e <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010950:	683a      	ldr	r2, [r7, #0]
 8010952:	68b9      	ldr	r1, [r7, #8]
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	0018      	movs	r0, r3
 8010958:	f000 fa05 	bl	8010d66 <prvCopyDataToQueue>
 801095c:	0003      	movs	r3, r0
 801095e:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010960:	6a3b      	ldr	r3, [r7, #32]
 8010962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010964:	2b00      	cmp	r3, #0
 8010966:	d009      	beq.n	801097c <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	3324      	adds	r3, #36	; 0x24
 801096c:	0018      	movs	r0, r3
 801096e:	f000 ffff 	bl	8011970 <xTaskRemoveFromEventList>
 8010972:	1e03      	subs	r3, r0, #0
 8010974:	d007      	beq.n	8010986 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010976:	f001 fadb 	bl	8011f30 <vPortYield>
 801097a:	e004      	b.n	8010986 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d001      	beq.n	8010986 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010982:	f001 fad5 	bl	8011f30 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010986:	f001 faf5 	bl	8011f74 <vPortExitCritical>
				return pdPASS;
 801098a:	2301      	movs	r3, #1
 801098c:	e05b      	b.n	8010a46 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d103      	bne.n	801099c <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010994:	f001 faee 	bl	8011f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010998:	2300      	movs	r3, #0
 801099a:	e054      	b.n	8010a46 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d106      	bne.n	80109b0 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109a2:	2314      	movs	r3, #20
 80109a4:	18fb      	adds	r3, r7, r3
 80109a6:	0018      	movs	r0, r3
 80109a8:	f001 f83e 	bl	8011a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109ac:	2301      	movs	r3, #1
 80109ae:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80109b0:	f001 fae0 	bl	8011f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80109b4:	f000 fe24 	bl	8011600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80109b8:	f001 faca 	bl	8011f50 <vPortEnterCritical>
 80109bc:	6a3b      	ldr	r3, [r7, #32]
 80109be:	2244      	movs	r2, #68	; 0x44
 80109c0:	5c9b      	ldrb	r3, [r3, r2]
 80109c2:	b25b      	sxtb	r3, r3
 80109c4:	3301      	adds	r3, #1
 80109c6:	d103      	bne.n	80109d0 <xQueueGenericSend+0x10a>
 80109c8:	6a3b      	ldr	r3, [r7, #32]
 80109ca:	2244      	movs	r2, #68	; 0x44
 80109cc:	2100      	movs	r1, #0
 80109ce:	5499      	strb	r1, [r3, r2]
 80109d0:	6a3b      	ldr	r3, [r7, #32]
 80109d2:	2245      	movs	r2, #69	; 0x45
 80109d4:	5c9b      	ldrb	r3, [r3, r2]
 80109d6:	b25b      	sxtb	r3, r3
 80109d8:	3301      	adds	r3, #1
 80109da:	d103      	bne.n	80109e4 <xQueueGenericSend+0x11e>
 80109dc:	6a3b      	ldr	r3, [r7, #32]
 80109de:	2245      	movs	r2, #69	; 0x45
 80109e0:	2100      	movs	r1, #0
 80109e2:	5499      	strb	r1, [r3, r2]
 80109e4:	f001 fac6 	bl	8011f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80109e8:	1d3a      	adds	r2, r7, #4
 80109ea:	2314      	movs	r3, #20
 80109ec:	18fb      	adds	r3, r7, r3
 80109ee:	0011      	movs	r1, r2
 80109f0:	0018      	movs	r0, r3
 80109f2:	f001 f82d 	bl	8011a50 <xTaskCheckForTimeOut>
 80109f6:	1e03      	subs	r3, r0, #0
 80109f8:	d11e      	bne.n	8010a38 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	0018      	movs	r0, r3
 80109fe:	f000 fab7 	bl	8010f70 <prvIsQueueFull>
 8010a02:	1e03      	subs	r3, r0, #0
 8010a04:	d011      	beq.n	8010a2a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010a06:	6a3b      	ldr	r3, [r7, #32]
 8010a08:	3310      	adds	r3, #16
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	0011      	movs	r1, r2
 8010a0e:	0018      	movs	r0, r3
 8010a10:	f000 ff90 	bl	8011934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010a14:	6a3b      	ldr	r3, [r7, #32]
 8010a16:	0018      	movs	r0, r3
 8010a18:	f000 fa36 	bl	8010e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010a1c:	f000 fdfc 	bl	8011618 <xTaskResumeAll>
 8010a20:	1e03      	subs	r3, r0, #0
 8010a22:	d18a      	bne.n	801093a <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8010a24:	f001 fa84 	bl	8011f30 <vPortYield>
 8010a28:	e787      	b.n	801093a <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010a2a:	6a3b      	ldr	r3, [r7, #32]
 8010a2c:	0018      	movs	r0, r3
 8010a2e:	f000 fa2b 	bl	8010e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a32:	f000 fdf1 	bl	8011618 <xTaskResumeAll>
 8010a36:	e780      	b.n	801093a <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010a38:	6a3b      	ldr	r3, [r7, #32]
 8010a3a:	0018      	movs	r0, r3
 8010a3c:	f000 fa24 	bl	8010e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a40:	f000 fdea 	bl	8011618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010a44:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010a46:	0018      	movs	r0, r3
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	b00a      	add	sp, #40	; 0x28
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010a4e:	b590      	push	{r4, r7, lr}
 8010a50:	b08b      	sub	sp, #44	; 0x2c
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	60f8      	str	r0, [r7, #12]
 8010a56:	60b9      	str	r1, [r7, #8]
 8010a58:	607a      	str	r2, [r7, #4]
 8010a5a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8010a60:	6a3b      	ldr	r3, [r7, #32]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d101      	bne.n	8010a6a <xQueueGenericSendFromISR+0x1c>
 8010a66:	b672      	cpsid	i
 8010a68:	e7fe      	b.n	8010a68 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d103      	bne.n	8010a78 <xQueueGenericSendFromISR+0x2a>
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d101      	bne.n	8010a7c <xQueueGenericSendFromISR+0x2e>
 8010a78:	2301      	movs	r3, #1
 8010a7a:	e000      	b.n	8010a7e <xQueueGenericSendFromISR+0x30>
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d101      	bne.n	8010a86 <xQueueGenericSendFromISR+0x38>
 8010a82:	b672      	cpsid	i
 8010a84:	e7fe      	b.n	8010a84 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	2b02      	cmp	r3, #2
 8010a8a:	d103      	bne.n	8010a94 <xQueueGenericSendFromISR+0x46>
 8010a8c:	6a3b      	ldr	r3, [r7, #32]
 8010a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d101      	bne.n	8010a98 <xQueueGenericSendFromISR+0x4a>
 8010a94:	2301      	movs	r3, #1
 8010a96:	e000      	b.n	8010a9a <xQueueGenericSendFromISR+0x4c>
 8010a98:	2300      	movs	r3, #0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d101      	bne.n	8010aa2 <xQueueGenericSendFromISR+0x54>
 8010a9e:	b672      	cpsid	i
 8010aa0:	e7fe      	b.n	8010aa0 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010aa2:	f001 fa7f 	bl	8011fa4 <ulSetInterruptMaskFromISR>
 8010aa6:	0003      	movs	r3, r0
 8010aa8:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010aaa:	6a3b      	ldr	r3, [r7, #32]
 8010aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010aae:	6a3b      	ldr	r3, [r7, #32]
 8010ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d302      	bcc.n	8010abc <xQueueGenericSendFromISR+0x6e>
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	2b02      	cmp	r3, #2
 8010aba:	d131      	bne.n	8010b20 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010abc:	241b      	movs	r4, #27
 8010abe:	193b      	adds	r3, r7, r4
 8010ac0:	6a3a      	ldr	r2, [r7, #32]
 8010ac2:	2145      	movs	r1, #69	; 0x45
 8010ac4:	5c52      	ldrb	r2, [r2, r1]
 8010ac6:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ac8:	6a3b      	ldr	r3, [r7, #32]
 8010aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010acc:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010ace:	683a      	ldr	r2, [r7, #0]
 8010ad0:	68b9      	ldr	r1, [r7, #8]
 8010ad2:	6a3b      	ldr	r3, [r7, #32]
 8010ad4:	0018      	movs	r0, r3
 8010ad6:	f000 f946 	bl	8010d66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ada:	193b      	adds	r3, r7, r4
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	b25b      	sxtb	r3, r3
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	d111      	bne.n	8010b08 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d016      	beq.n	8010b1a <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010aec:	6a3b      	ldr	r3, [r7, #32]
 8010aee:	3324      	adds	r3, #36	; 0x24
 8010af0:	0018      	movs	r0, r3
 8010af2:	f000 ff3d 	bl	8011970 <xTaskRemoveFromEventList>
 8010af6:	1e03      	subs	r3, r0, #0
 8010af8:	d00f      	beq.n	8010b1a <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d00c      	beq.n	8010b1a <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	601a      	str	r2, [r3, #0]
 8010b06:	e008      	b.n	8010b1a <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010b08:	231b      	movs	r3, #27
 8010b0a:	18fb      	adds	r3, r7, r3
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	3301      	adds	r3, #1
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	b259      	sxtb	r1, r3
 8010b14:	6a3b      	ldr	r3, [r7, #32]
 8010b16:	2245      	movs	r2, #69	; 0x45
 8010b18:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8010b1e:	e001      	b.n	8010b24 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010b20:	2300      	movs	r3, #0
 8010b22:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	0018      	movs	r0, r3
 8010b28:	f001 fa42 	bl	8011fb0 <vClearInterruptMaskFromISR>

	return xReturn;
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b2e:	0018      	movs	r0, r3
 8010b30:	46bd      	mov	sp, r7
 8010b32:	b00b      	add	sp, #44	; 0x2c
 8010b34:	bd90      	pop	{r4, r7, pc}

08010b36 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b08a      	sub	sp, #40	; 0x28
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	60f8      	str	r0, [r7, #12]
 8010b3e:	60b9      	str	r1, [r7, #8]
 8010b40:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b42:	2300      	movs	r3, #0
 8010b44:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b4a:	6a3b      	ldr	r3, [r7, #32]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d101      	bne.n	8010b54 <xQueueReceive+0x1e>
 8010b50:	b672      	cpsid	i
 8010b52:	e7fe      	b.n	8010b52 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d103      	bne.n	8010b62 <xQueueReceive+0x2c>
 8010b5a:	6a3b      	ldr	r3, [r7, #32]
 8010b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d101      	bne.n	8010b66 <xQueueReceive+0x30>
 8010b62:	2301      	movs	r3, #1
 8010b64:	e000      	b.n	8010b68 <xQueueReceive+0x32>
 8010b66:	2300      	movs	r3, #0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d101      	bne.n	8010b70 <xQueueReceive+0x3a>
 8010b6c:	b672      	cpsid	i
 8010b6e:	e7fe      	b.n	8010b6e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b70:	f001 f888 	bl	8011c84 <xTaskGetSchedulerState>
 8010b74:	1e03      	subs	r3, r0, #0
 8010b76:	d102      	bne.n	8010b7e <xQueueReceive+0x48>
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d101      	bne.n	8010b82 <xQueueReceive+0x4c>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e000      	b.n	8010b84 <xQueueReceive+0x4e>
 8010b82:	2300      	movs	r3, #0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d101      	bne.n	8010b8c <xQueueReceive+0x56>
 8010b88:	b672      	cpsid	i
 8010b8a:	e7fe      	b.n	8010b8a <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b8c:	f001 f9e0 	bl	8011f50 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b90:	6a3b      	ldr	r3, [r7, #32]
 8010b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b94:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b96:	69fb      	ldr	r3, [r7, #28]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d01a      	beq.n	8010bd2 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	6a3b      	ldr	r3, [r7, #32]
 8010ba0:	0011      	movs	r1, r2
 8010ba2:	0018      	movs	r0, r3
 8010ba4:	f000 f94a 	bl	8010e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ba8:	69fb      	ldr	r3, [r7, #28]
 8010baa:	1e5a      	subs	r2, r3, #1
 8010bac:	6a3b      	ldr	r3, [r7, #32]
 8010bae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bb0:	6a3b      	ldr	r3, [r7, #32]
 8010bb2:	691b      	ldr	r3, [r3, #16]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d008      	beq.n	8010bca <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bb8:	6a3b      	ldr	r3, [r7, #32]
 8010bba:	3310      	adds	r3, #16
 8010bbc:	0018      	movs	r0, r3
 8010bbe:	f000 fed7 	bl	8011970 <xTaskRemoveFromEventList>
 8010bc2:	1e03      	subs	r3, r0, #0
 8010bc4:	d001      	beq.n	8010bca <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010bc6:	f001 f9b3 	bl	8011f30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010bca:	f001 f9d3 	bl	8011f74 <vPortExitCritical>
				return pdPASS;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e062      	b.n	8010c98 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d103      	bne.n	8010be0 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010bd8:	f001 f9cc 	bl	8011f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	e05b      	b.n	8010c98 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d106      	bne.n	8010bf4 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010be6:	2314      	movs	r3, #20
 8010be8:	18fb      	adds	r3, r7, r3
 8010bea:	0018      	movs	r0, r3
 8010bec:	f000 ff1c 	bl	8011a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010bf4:	f001 f9be 	bl	8011f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010bf8:	f000 fd02 	bl	8011600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bfc:	f001 f9a8 	bl	8011f50 <vPortEnterCritical>
 8010c00:	6a3b      	ldr	r3, [r7, #32]
 8010c02:	2244      	movs	r2, #68	; 0x44
 8010c04:	5c9b      	ldrb	r3, [r3, r2]
 8010c06:	b25b      	sxtb	r3, r3
 8010c08:	3301      	adds	r3, #1
 8010c0a:	d103      	bne.n	8010c14 <xQueueReceive+0xde>
 8010c0c:	6a3b      	ldr	r3, [r7, #32]
 8010c0e:	2244      	movs	r2, #68	; 0x44
 8010c10:	2100      	movs	r1, #0
 8010c12:	5499      	strb	r1, [r3, r2]
 8010c14:	6a3b      	ldr	r3, [r7, #32]
 8010c16:	2245      	movs	r2, #69	; 0x45
 8010c18:	5c9b      	ldrb	r3, [r3, r2]
 8010c1a:	b25b      	sxtb	r3, r3
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	d103      	bne.n	8010c28 <xQueueReceive+0xf2>
 8010c20:	6a3b      	ldr	r3, [r7, #32]
 8010c22:	2245      	movs	r2, #69	; 0x45
 8010c24:	2100      	movs	r1, #0
 8010c26:	5499      	strb	r1, [r3, r2]
 8010c28:	f001 f9a4 	bl	8011f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c2c:	1d3a      	adds	r2, r7, #4
 8010c2e:	2314      	movs	r3, #20
 8010c30:	18fb      	adds	r3, r7, r3
 8010c32:	0011      	movs	r1, r2
 8010c34:	0018      	movs	r0, r3
 8010c36:	f000 ff0b 	bl	8011a50 <xTaskCheckForTimeOut>
 8010c3a:	1e03      	subs	r3, r0, #0
 8010c3c:	d11e      	bne.n	8010c7c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c3e:	6a3b      	ldr	r3, [r7, #32]
 8010c40:	0018      	movs	r0, r3
 8010c42:	f000 f97f 	bl	8010f44 <prvIsQueueEmpty>
 8010c46:	1e03      	subs	r3, r0, #0
 8010c48:	d011      	beq.n	8010c6e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	3324      	adds	r3, #36	; 0x24
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	0011      	movs	r1, r2
 8010c52:	0018      	movs	r0, r3
 8010c54:	f000 fe6e 	bl	8011934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	0018      	movs	r0, r3
 8010c5c:	f000 f914 	bl	8010e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c60:	f000 fcda 	bl	8011618 <xTaskResumeAll>
 8010c64:	1e03      	subs	r3, r0, #0
 8010c66:	d191      	bne.n	8010b8c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8010c68:	f001 f962 	bl	8011f30 <vPortYield>
 8010c6c:	e78e      	b.n	8010b8c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c6e:	6a3b      	ldr	r3, [r7, #32]
 8010c70:	0018      	movs	r0, r3
 8010c72:	f000 f909 	bl	8010e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c76:	f000 fccf 	bl	8011618 <xTaskResumeAll>
 8010c7a:	e787      	b.n	8010b8c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
 8010c7e:	0018      	movs	r0, r3
 8010c80:	f000 f902 	bl	8010e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c84:	f000 fcc8 	bl	8011618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c88:	6a3b      	ldr	r3, [r7, #32]
 8010c8a:	0018      	movs	r0, r3
 8010c8c:	f000 f95a 	bl	8010f44 <prvIsQueueEmpty>
 8010c90:	1e03      	subs	r3, r0, #0
 8010c92:	d100      	bne.n	8010c96 <xQueueReceive+0x160>
 8010c94:	e77a      	b.n	8010b8c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c98:	0018      	movs	r0, r3
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	b00a      	add	sp, #40	; 0x28
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ca0:	b590      	push	{r4, r7, lr}
 8010ca2:	b08b      	sub	sp, #44	; 0x2c
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8010cb0:	6a3b      	ldr	r3, [r7, #32]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d101      	bne.n	8010cba <xQueueReceiveFromISR+0x1a>
 8010cb6:	b672      	cpsid	i
 8010cb8:	e7fe      	b.n	8010cb8 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d103      	bne.n	8010cc8 <xQueueReceiveFromISR+0x28>
 8010cc0:	6a3b      	ldr	r3, [r7, #32]
 8010cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d101      	bne.n	8010ccc <xQueueReceiveFromISR+0x2c>
 8010cc8:	2301      	movs	r3, #1
 8010cca:	e000      	b.n	8010cce <xQueueReceiveFromISR+0x2e>
 8010ccc:	2300      	movs	r3, #0
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d101      	bne.n	8010cd6 <xQueueReceiveFromISR+0x36>
 8010cd2:	b672      	cpsid	i
 8010cd4:	e7fe      	b.n	8010cd4 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cd6:	f001 f965 	bl	8011fa4 <ulSetInterruptMaskFromISR>
 8010cda:	0003      	movs	r3, r0
 8010cdc:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cde:	6a3b      	ldr	r3, [r7, #32]
 8010ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce2:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d032      	beq.n	8010d50 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010cea:	2417      	movs	r4, #23
 8010cec:	193b      	adds	r3, r7, r4
 8010cee:	6a3a      	ldr	r2, [r7, #32]
 8010cf0:	2144      	movs	r1, #68	; 0x44
 8010cf2:	5c52      	ldrb	r2, [r2, r1]
 8010cf4:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010cf6:	68ba      	ldr	r2, [r7, #8]
 8010cf8:	6a3b      	ldr	r3, [r7, #32]
 8010cfa:	0011      	movs	r1, r2
 8010cfc:	0018      	movs	r0, r3
 8010cfe:	f000 f89d 	bl	8010e3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d02:	69bb      	ldr	r3, [r7, #24]
 8010d04:	1e5a      	subs	r2, r3, #1
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010d0a:	193b      	adds	r3, r7, r4
 8010d0c:	781b      	ldrb	r3, [r3, #0]
 8010d0e:	b25b      	sxtb	r3, r3
 8010d10:	3301      	adds	r3, #1
 8010d12:	d111      	bne.n	8010d38 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d016      	beq.n	8010d4a <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d1c:	6a3b      	ldr	r3, [r7, #32]
 8010d1e:	3310      	adds	r3, #16
 8010d20:	0018      	movs	r0, r3
 8010d22:	f000 fe25 	bl	8011970 <xTaskRemoveFromEventList>
 8010d26:	1e03      	subs	r3, r0, #0
 8010d28:	d00f      	beq.n	8010d4a <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00c      	beq.n	8010d4a <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2201      	movs	r2, #1
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	e008      	b.n	8010d4a <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010d38:	2317      	movs	r3, #23
 8010d3a:	18fb      	adds	r3, r7, r3
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	3301      	adds	r3, #1
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	b259      	sxtb	r1, r3
 8010d44:	6a3b      	ldr	r3, [r7, #32]
 8010d46:	2244      	movs	r2, #68	; 0x44
 8010d48:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8010d4e:	e001      	b.n	8010d54 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8010d50:	2300      	movs	r3, #0
 8010d52:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	0018      	movs	r0, r3
 8010d58:	f001 f92a 	bl	8011fb0 <vClearInterruptMaskFromISR>

	return xReturn;
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d5e:	0018      	movs	r0, r3
 8010d60:	46bd      	mov	sp, r7
 8010d62:	b00b      	add	sp, #44	; 0x2c
 8010d64:	bd90      	pop	{r4, r7, pc}

08010d66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b086      	sub	sp, #24
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	60f8      	str	r0, [r7, #12]
 8010d6e:	60b9      	str	r1, [r7, #8]
 8010d70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010d72:	2300      	movs	r3, #0
 8010d74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d10e      	bne.n	8010da2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d14e      	bne.n	8010e2a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	689b      	ldr	r3, [r3, #8]
 8010d90:	0018      	movs	r0, r3
 8010d92:	f000 ff93 	bl	8011cbc <xTaskPriorityDisinherit>
 8010d96:	0003      	movs	r3, r0
 8010d98:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	609a      	str	r2, [r3, #8]
 8010da0:	e043      	b.n	8010e2a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d119      	bne.n	8010ddc <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6858      	ldr	r0, [r3, #4]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	0019      	movs	r1, r3
 8010db4:	f008 fb26 	bl	8019404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	685a      	ldr	r2, [r3, #4]
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc0:	18d2      	adds	r2, r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	685a      	ldr	r2, [r3, #4]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d32b      	bcc.n	8010e2a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	605a      	str	r2, [r3, #4]
 8010dda:	e026      	b.n	8010e2a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	68d8      	ldr	r0, [r3, #12]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	0019      	movs	r1, r3
 8010de8:	f008 fb0c 	bl	8019404 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	68da      	ldr	r2, [r3, #12]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010df4:	425b      	negs	r3, r3
 8010df6:	18d2      	adds	r2, r2, r3
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	68da      	ldr	r2, [r3, #12]
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d207      	bcs.n	8010e18 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	689a      	ldr	r2, [r3, #8]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e10:	425b      	negs	r3, r3
 8010e12:	18d2      	adds	r2, r2, r3
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2b02      	cmp	r3, #2
 8010e1c:	d105      	bne.n	8010e2a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d002      	beq.n	8010e2a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	3b01      	subs	r3, #1
 8010e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	1c5a      	adds	r2, r3, #1
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010e32:	697b      	ldr	r3, [r7, #20]
}
 8010e34:	0018      	movs	r0, r3
 8010e36:	46bd      	mov	sp, r7
 8010e38:	b006      	add	sp, #24
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d018      	beq.n	8010e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	68da      	ldr	r2, [r3, #12]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e56:	18d2      	adds	r2, r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	68da      	ldr	r2, [r3, #12]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d303      	bcc.n	8010e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681a      	ldr	r2, [r3, #0]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	68d9      	ldr	r1, [r3, #12]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	0018      	movs	r0, r3
 8010e7c:	f008 fac2 	bl	8019404 <memcpy>
	}
}
 8010e80:	46c0      	nop			; (mov r8, r8)
 8010e82:	46bd      	mov	sp, r7
 8010e84:	b002      	add	sp, #8
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010e90:	f001 f85e 	bl	8011f50 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010e94:	230f      	movs	r3, #15
 8010e96:	18fb      	adds	r3, r7, r3
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	2145      	movs	r1, #69	; 0x45
 8010e9c:	5c52      	ldrb	r2, [r2, r1]
 8010e9e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ea0:	e013      	b.n	8010eca <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d016      	beq.n	8010ed8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	3324      	adds	r3, #36	; 0x24
 8010eae:	0018      	movs	r0, r3
 8010eb0:	f000 fd5e 	bl	8011970 <xTaskRemoveFromEventList>
 8010eb4:	1e03      	subs	r3, r0, #0
 8010eb6:	d001      	beq.n	8010ebc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010eb8:	f000 fe1a 	bl	8011af0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010ebc:	210f      	movs	r1, #15
 8010ebe:	187b      	adds	r3, r7, r1
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	3b01      	subs	r3, #1
 8010ec4:	b2da      	uxtb	r2, r3
 8010ec6:	187b      	adds	r3, r7, r1
 8010ec8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010eca:	230f      	movs	r3, #15
 8010ecc:	18fb      	adds	r3, r7, r3
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	b25b      	sxtb	r3, r3
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	dce5      	bgt.n	8010ea2 <prvUnlockQueue+0x1a>
 8010ed6:	e000      	b.n	8010eda <prvUnlockQueue+0x52>
					break;
 8010ed8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2245      	movs	r2, #69	; 0x45
 8010ede:	21ff      	movs	r1, #255	; 0xff
 8010ee0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8010ee2:	f001 f847 	bl	8011f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010ee6:	f001 f833 	bl	8011f50 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010eea:	230e      	movs	r3, #14
 8010eec:	18fb      	adds	r3, r7, r3
 8010eee:	687a      	ldr	r2, [r7, #4]
 8010ef0:	2144      	movs	r1, #68	; 0x44
 8010ef2:	5c52      	ldrb	r2, [r2, r1]
 8010ef4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ef6:	e013      	b.n	8010f20 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	691b      	ldr	r3, [r3, #16]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d016      	beq.n	8010f2e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	3310      	adds	r3, #16
 8010f04:	0018      	movs	r0, r3
 8010f06:	f000 fd33 	bl	8011970 <xTaskRemoveFromEventList>
 8010f0a:	1e03      	subs	r3, r0, #0
 8010f0c:	d001      	beq.n	8010f12 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8010f0e:	f000 fdef 	bl	8011af0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010f12:	210e      	movs	r1, #14
 8010f14:	187b      	adds	r3, r7, r1
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	b2da      	uxtb	r2, r3
 8010f1c:	187b      	adds	r3, r7, r1
 8010f1e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f20:	230e      	movs	r3, #14
 8010f22:	18fb      	adds	r3, r7, r3
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	b25b      	sxtb	r3, r3
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	dce5      	bgt.n	8010ef8 <prvUnlockQueue+0x70>
 8010f2c:	e000      	b.n	8010f30 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8010f2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2244      	movs	r2, #68	; 0x44
 8010f34:	21ff      	movs	r1, #255	; 0xff
 8010f36:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8010f38:	f001 f81c 	bl	8011f74 <vPortExitCritical>
}
 8010f3c:	46c0      	nop			; (mov r8, r8)
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	b004      	add	sp, #16
 8010f42:	bd80      	pop	{r7, pc}

08010f44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f4c:	f001 f800 	bl	8011f50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d102      	bne.n	8010f5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	60fb      	str	r3, [r7, #12]
 8010f5c:	e001      	b.n	8010f62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f62:	f001 f807 	bl	8011f74 <vPortExitCritical>

	return xReturn;
 8010f66:	68fb      	ldr	r3, [r7, #12]
}
 8010f68:	0018      	movs	r0, r3
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	b004      	add	sp, #16
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f78:	f000 ffea 	bl	8011f50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d102      	bne.n	8010f8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	60fb      	str	r3, [r7, #12]
 8010f8c:	e001      	b.n	8010f92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f92:	f000 ffef 	bl	8011f74 <vPortExitCritical>

	return xReturn;
 8010f96:	68fb      	ldr	r3, [r7, #12]
}
 8010f98:	0018      	movs	r0, r3
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	b004      	add	sp, #16
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010fa0:	b590      	push	{r4, r7, lr}
 8010fa2:	b08d      	sub	sp, #52	; 0x34
 8010fa4:	af04      	add	r7, sp, #16
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	603b      	str	r3, [r7, #0]
 8010fac:	1dbb      	adds	r3, r7, #6
 8010fae:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010fb0:	1dbb      	adds	r3, r7, #6
 8010fb2:	881b      	ldrh	r3, [r3, #0]
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	0018      	movs	r0, r3
 8010fb8:	f001 f862 	bl	8012080 <pvPortMalloc>
 8010fbc:	0003      	movs	r3, r0
 8010fbe:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d010      	beq.n	8010fe8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010fc6:	2054      	movs	r0, #84	; 0x54
 8010fc8:	f001 f85a 	bl	8012080 <pvPortMalloc>
 8010fcc:	0003      	movs	r3, r0
 8010fce:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d003      	beq.n	8010fde <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	697a      	ldr	r2, [r7, #20]
 8010fda:	631a      	str	r2, [r3, #48]	; 0x30
 8010fdc:	e006      	b.n	8010fec <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	0018      	movs	r0, r3
 8010fe2:	f001 f8f9 	bl	80121d8 <vPortFree>
 8010fe6:	e001      	b.n	8010fec <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d016      	beq.n	8011020 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010ff2:	1dbb      	adds	r3, r7, #6
 8010ff4:	881a      	ldrh	r2, [r3, #0]
 8010ff6:	683c      	ldr	r4, [r7, #0]
 8010ff8:	68b9      	ldr	r1, [r7, #8]
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	9303      	str	r3, [sp, #12]
 8011000:	69fb      	ldr	r3, [r7, #28]
 8011002:	9302      	str	r3, [sp, #8]
 8011004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	0023      	movs	r3, r4
 801100e:	f000 f80f 	bl	8011030 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	0018      	movs	r0, r3
 8011016:	f000 f88d 	bl	8011134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801101a:	2301      	movs	r3, #1
 801101c:	61bb      	str	r3, [r7, #24]
 801101e:	e002      	b.n	8011026 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011020:	2301      	movs	r3, #1
 8011022:	425b      	negs	r3, r3
 8011024:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011026:	69bb      	ldr	r3, [r7, #24]
	}
 8011028:	0018      	movs	r0, r3
 801102a:	46bd      	mov	sp, r7
 801102c:	b009      	add	sp, #36	; 0x24
 801102e:	bd90      	pop	{r4, r7, pc}

08011030 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b086      	sub	sp, #24
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
 801103c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	493a      	ldr	r1, [pc, #232]	; (8011130 <prvInitialiseNewTask+0x100>)
 8011046:	468c      	mov	ip, r1
 8011048:	4463      	add	r3, ip
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	18d3      	adds	r3, r2, r3
 801104e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	2207      	movs	r2, #7
 8011054:	4393      	bics	r3, r2
 8011056:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	2207      	movs	r2, #7
 801105c:	4013      	ands	r3, r2
 801105e:	d001      	beq.n	8011064 <prvInitialiseNewTask+0x34>
 8011060:	b672      	cpsid	i
 8011062:	e7fe      	b.n	8011062 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d020      	beq.n	80110ac <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801106a:	2300      	movs	r3, #0
 801106c:	617b      	str	r3, [r7, #20]
 801106e:	e013      	b.n	8011098 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	18d3      	adds	r3, r2, r3
 8011076:	7818      	ldrb	r0, [r3, #0]
 8011078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801107a:	2134      	movs	r1, #52	; 0x34
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	18d3      	adds	r3, r2, r3
 8011080:	185b      	adds	r3, r3, r1
 8011082:	1c02      	adds	r2, r0, #0
 8011084:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011086:	68ba      	ldr	r2, [r7, #8]
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	18d3      	adds	r3, r2, r3
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d006      	beq.n	80110a0 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	3301      	adds	r3, #1
 8011096:	617b      	str	r3, [r7, #20]
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	2b0f      	cmp	r3, #15
 801109c:	d9e8      	bls.n	8011070 <prvInitialiseNewTask+0x40>
 801109e:	e000      	b.n	80110a2 <prvInitialiseNewTask+0x72>
			{
				break;
 80110a0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80110a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a4:	2243      	movs	r2, #67	; 0x43
 80110a6:	2100      	movs	r1, #0
 80110a8:	5499      	strb	r1, [r3, r2]
 80110aa:	e003      	b.n	80110b4 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80110ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ae:	2234      	movs	r2, #52	; 0x34
 80110b0:	2100      	movs	r1, #0
 80110b2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	2b06      	cmp	r3, #6
 80110b8:	d901      	bls.n	80110be <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80110ba:	2306      	movs	r3, #6
 80110bc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80110be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c0:	6a3a      	ldr	r2, [r7, #32]
 80110c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80110c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c6:	6a3a      	ldr	r2, [r7, #32]
 80110c8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80110ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110cc:	2200      	movs	r2, #0
 80110ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80110d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d2:	3304      	adds	r3, #4
 80110d4:	0018      	movs	r0, r3
 80110d6:	f7ff fac7 	bl	8010668 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80110da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110dc:	3318      	adds	r3, #24
 80110de:	0018      	movs	r0, r3
 80110e0:	f7ff fac2 	bl	8010668 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80110e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	2207      	movs	r2, #7
 80110ee:	1ad2      	subs	r2, r2, r3
 80110f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80110f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80110fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fc:	2200      	movs	r2, #0
 80110fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011102:	2250      	movs	r2, #80	; 0x50
 8011104:	2100      	movs	r1, #0
 8011106:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011108:	683a      	ldr	r2, [r7, #0]
 801110a:	68f9      	ldr	r1, [r7, #12]
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	0018      	movs	r0, r3
 8011110:	f000 fe84 	bl	8011e1c <pxPortInitialiseStack>
 8011114:	0002      	movs	r2, r0
 8011116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011118:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111c:	2b00      	cmp	r3, #0
 801111e:	d002      	beq.n	8011126 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011126:	46c0      	nop			; (mov r8, r8)
 8011128:	46bd      	mov	sp, r7
 801112a:	b006      	add	sp, #24
 801112c:	bd80      	pop	{r7, pc}
 801112e:	46c0      	nop			; (mov r8, r8)
 8011130:	3fffffff 	.word	0x3fffffff

08011134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801113c:	f000 ff08 	bl	8011f50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011140:	4b28      	ldr	r3, [pc, #160]	; (80111e4 <prvAddNewTaskToReadyList+0xb0>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	1c5a      	adds	r2, r3, #1
 8011146:	4b27      	ldr	r3, [pc, #156]	; (80111e4 <prvAddNewTaskToReadyList+0xb0>)
 8011148:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801114a:	4b27      	ldr	r3, [pc, #156]	; (80111e8 <prvAddNewTaskToReadyList+0xb4>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d109      	bne.n	8011166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011152:	4b25      	ldr	r3, [pc, #148]	; (80111e8 <prvAddNewTaskToReadyList+0xb4>)
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011158:	4b22      	ldr	r3, [pc, #136]	; (80111e4 <prvAddNewTaskToReadyList+0xb0>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b01      	cmp	r3, #1
 801115e:	d110      	bne.n	8011182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011160:	f000 fce0 	bl	8011b24 <prvInitialiseTaskLists>
 8011164:	e00d      	b.n	8011182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011166:	4b21      	ldr	r3, [pc, #132]	; (80111ec <prvAddNewTaskToReadyList+0xb8>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d109      	bne.n	8011182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801116e:	4b1e      	ldr	r3, [pc, #120]	; (80111e8 <prvAddNewTaskToReadyList+0xb4>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011178:	429a      	cmp	r2, r3
 801117a:	d802      	bhi.n	8011182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801117c:	4b1a      	ldr	r3, [pc, #104]	; (80111e8 <prvAddNewTaskToReadyList+0xb4>)
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011182:	4b1b      	ldr	r3, [pc, #108]	; (80111f0 <prvAddNewTaskToReadyList+0xbc>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	1c5a      	adds	r2, r3, #1
 8011188:	4b19      	ldr	r3, [pc, #100]	; (80111f0 <prvAddNewTaskToReadyList+0xbc>)
 801118a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011190:	4b18      	ldr	r3, [pc, #96]	; (80111f4 <prvAddNewTaskToReadyList+0xc0>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	429a      	cmp	r2, r3
 8011196:	d903      	bls.n	80111a0 <prvAddNewTaskToReadyList+0x6c>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801119c:	4b15      	ldr	r3, [pc, #84]	; (80111f4 <prvAddNewTaskToReadyList+0xc0>)
 801119e:	601a      	str	r2, [r3, #0]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a4:	0013      	movs	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	189b      	adds	r3, r3, r2
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	4a12      	ldr	r2, [pc, #72]	; (80111f8 <prvAddNewTaskToReadyList+0xc4>)
 80111ae:	189a      	adds	r2, r3, r2
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	3304      	adds	r3, #4
 80111b4:	0019      	movs	r1, r3
 80111b6:	0010      	movs	r0, r2
 80111b8:	f7ff fa61 	bl	801067e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80111bc:	f000 feda 	bl	8011f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80111c0:	4b0a      	ldr	r3, [pc, #40]	; (80111ec <prvAddNewTaskToReadyList+0xb8>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d008      	beq.n	80111da <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80111c8:	4b07      	ldr	r3, [pc, #28]	; (80111e8 <prvAddNewTaskToReadyList+0xb4>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d201      	bcs.n	80111da <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80111d6:	f000 feab 	bl	8011f30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111da:	46c0      	nop			; (mov r8, r8)
 80111dc:	46bd      	mov	sp, r7
 80111de:	b002      	add	sp, #8
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	46c0      	nop			; (mov r8, r8)
 80111e4:	20000c28 	.word	0x20000c28
 80111e8:	20000b28 	.word	0x20000b28
 80111ec:	20000c34 	.word	0x20000c34
 80111f0:	20000c44 	.word	0x20000c44
 80111f4:	20000c30 	.word	0x20000c30
 80111f8:	20000b2c 	.word	0x20000b2c

080111fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011204:	2300      	movs	r3, #0
 8011206:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d010      	beq.n	8011230 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801120e:	4b0d      	ldr	r3, [pc, #52]	; (8011244 <vTaskDelay+0x48>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <vTaskDelay+0x1e>
 8011216:	b672      	cpsid	i
 8011218:	e7fe      	b.n	8011218 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801121a:	f000 f9f1 	bl	8011600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2100      	movs	r1, #0
 8011222:	0018      	movs	r0, r3
 8011224:	f000 fda6 	bl	8011d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011228:	f000 f9f6 	bl	8011618 <xTaskResumeAll>
 801122c:	0003      	movs	r3, r0
 801122e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d101      	bne.n	801123a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8011236:	f000 fe7b 	bl	8011f30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801123a:	46c0      	nop			; (mov r8, r8)
 801123c:	46bd      	mov	sp, r7
 801123e:	b004      	add	sp, #16
 8011240:	bd80      	pop	{r7, pc}
 8011242:	46c0      	nop			; (mov r8, r8)
 8011244:	20000c50 	.word	0x20000c50

08011248 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8011248:	b580      	push	{r7, lr}
 801124a:	b088      	sub	sp, #32
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8011254:	69bb      	ldr	r3, [r7, #24]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d101      	bne.n	801125e <eTaskGetState+0x16>
 801125a:	b672      	cpsid	i
 801125c:	e7fe      	b.n	801125c <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 801125e:	4b2c      	ldr	r3, [pc, #176]	; (8011310 <eTaskGetState+0xc8>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	69ba      	ldr	r2, [r7, #24]
 8011264:	429a      	cmp	r2, r3
 8011266:	d104      	bne.n	8011272 <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8011268:	231f      	movs	r3, #31
 801126a:	18fb      	adds	r3, r7, r3
 801126c:	2200      	movs	r2, #0
 801126e:	701a      	strb	r2, [r3, #0]
 8011270:	e046      	b.n	8011300 <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 8011272:	f000 fe6d 	bl	8011f50 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	695b      	ldr	r3, [r3, #20]
 801127a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801127c:	4b25      	ldr	r3, [pc, #148]	; (8011314 <eTaskGetState+0xcc>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8011282:	4b25      	ldr	r3, [pc, #148]	; (8011318 <eTaskGetState+0xd0>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8011288:	f000 fe74 	bl	8011f74 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801128c:	697a      	ldr	r2, [r7, #20]
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	429a      	cmp	r2, r3
 8011292:	d003      	beq.n	801129c <eTaskGetState+0x54>
 8011294:	697a      	ldr	r2, [r7, #20]
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	429a      	cmp	r2, r3
 801129a:	d104      	bne.n	80112a6 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801129c:	231f      	movs	r3, #31
 801129e:	18fb      	adds	r3, r7, r3
 80112a0:	2202      	movs	r2, #2
 80112a2:	701a      	strb	r2, [r3, #0]
 80112a4:	e02c      	b.n	8011300 <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80112a6:	697a      	ldr	r2, [r7, #20]
 80112a8:	4b1c      	ldr	r3, [pc, #112]	; (801131c <eTaskGetState+0xd4>)
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d118      	bne.n	80112e0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d10f      	bne.n	80112d6 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	2250      	movs	r2, #80	; 0x50
 80112ba:	5c9b      	ldrb	r3, [r3, r2]
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d104      	bne.n	80112cc <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 80112c2:	231f      	movs	r3, #31
 80112c4:	18fb      	adds	r3, r7, r3
 80112c6:	2202      	movs	r2, #2
 80112c8:	701a      	strb	r2, [r3, #0]
 80112ca:	e019      	b.n	8011300 <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 80112cc:	231f      	movs	r3, #31
 80112ce:	18fb      	adds	r3, r7, r3
 80112d0:	2203      	movs	r2, #3
 80112d2:	701a      	strb	r2, [r3, #0]
 80112d4:	e014      	b.n	8011300 <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80112d6:	231f      	movs	r3, #31
 80112d8:	18fb      	adds	r3, r7, r3
 80112da:	2202      	movs	r2, #2
 80112dc:	701a      	strb	r2, [r3, #0]
 80112de:	e00f      	b.n	8011300 <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80112e0:	697a      	ldr	r2, [r7, #20]
 80112e2:	4b0f      	ldr	r3, [pc, #60]	; (8011320 <eTaskGetState+0xd8>)
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d002      	beq.n	80112ee <eTaskGetState+0xa6>
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d104      	bne.n	80112f8 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80112ee:	231f      	movs	r3, #31
 80112f0:	18fb      	adds	r3, r7, r3
 80112f2:	2204      	movs	r2, #4
 80112f4:	701a      	strb	r2, [r3, #0]
 80112f6:	e003      	b.n	8011300 <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80112f8:	231f      	movs	r3, #31
 80112fa:	18fb      	adds	r3, r7, r3
 80112fc:	2201      	movs	r2, #1
 80112fe:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 8011300:	231f      	movs	r3, #31
 8011302:	18fb      	adds	r3, r7, r3
 8011304:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8011306:	0018      	movs	r0, r3
 8011308:	46bd      	mov	sp, r7
 801130a:	b008      	add	sp, #32
 801130c:	bd80      	pop	{r7, pc}
 801130e:	46c0      	nop			; (mov r8, r8)
 8011310:	20000b28 	.word	0x20000b28
 8011314:	20000be0 	.word	0x20000be0
 8011318:	20000be4 	.word	0x20000be4
 801131c:	20000c14 	.word	0x20000c14
 8011320:	20000bfc 	.word	0x20000bfc

08011324 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801132c:	f000 fe10 	bl	8011f50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d102      	bne.n	801133c <vTaskSuspend+0x18>
 8011336:	4b29      	ldr	r3, [pc, #164]	; (80113dc <vTaskSuspend+0xb8>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	e000      	b.n	801133e <vTaskSuspend+0x1a>
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	3304      	adds	r3, #4
 8011344:	0018      	movs	r0, r3
 8011346:	f7ff f9f2 	bl	801072e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801134e:	2b00      	cmp	r3, #0
 8011350:	d004      	beq.n	801135c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	3318      	adds	r3, #24
 8011356:	0018      	movs	r0, r3
 8011358:	f7ff f9e9 	bl	801072e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	1d1a      	adds	r2, r3, #4
 8011360:	4b1f      	ldr	r3, [pc, #124]	; (80113e0 <vTaskSuspend+0xbc>)
 8011362:	0011      	movs	r1, r2
 8011364:	0018      	movs	r0, r3
 8011366:	f7ff f98a 	bl	801067e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2250      	movs	r2, #80	; 0x50
 801136e:	5c9b      	ldrb	r3, [r3, r2]
 8011370:	b2db      	uxtb	r3, r3
 8011372:	2b01      	cmp	r3, #1
 8011374:	d103      	bne.n	801137e <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2250      	movs	r2, #80	; 0x50
 801137a:	2100      	movs	r1, #0
 801137c:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801137e:	f000 fdf9 	bl	8011f74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8011382:	4b18      	ldr	r3, [pc, #96]	; (80113e4 <vTaskSuspend+0xc0>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d005      	beq.n	8011396 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801138a:	f000 fde1 	bl	8011f50 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801138e:	f000 fc4d 	bl	8011c2c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8011392:	f000 fdef 	bl	8011f74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8011396:	4b11      	ldr	r3, [pc, #68]	; (80113dc <vTaskSuspend+0xb8>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	68fa      	ldr	r2, [r7, #12]
 801139c:	429a      	cmp	r2, r3
 801139e:	d118      	bne.n	80113d2 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 80113a0:	4b10      	ldr	r3, [pc, #64]	; (80113e4 <vTaskSuspend+0xc0>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d008      	beq.n	80113ba <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80113a8:	4b0f      	ldr	r3, [pc, #60]	; (80113e8 <vTaskSuspend+0xc4>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d001      	beq.n	80113b4 <vTaskSuspend+0x90>
 80113b0:	b672      	cpsid	i
 80113b2:	e7fe      	b.n	80113b2 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 80113b4:	f000 fdbc 	bl	8011f30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80113b8:	e00b      	b.n	80113d2 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80113ba:	4b09      	ldr	r3, [pc, #36]	; (80113e0 <vTaskSuspend+0xbc>)
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	4b0b      	ldr	r3, [pc, #44]	; (80113ec <vTaskSuspend+0xc8>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d103      	bne.n	80113ce <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 80113c6:	4b05      	ldr	r3, [pc, #20]	; (80113dc <vTaskSuspend+0xb8>)
 80113c8:	2200      	movs	r2, #0
 80113ca:	601a      	str	r2, [r3, #0]
	}
 80113cc:	e001      	b.n	80113d2 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 80113ce:	f000 fa5f 	bl	8011890 <vTaskSwitchContext>
	}
 80113d2:	46c0      	nop			; (mov r8, r8)
 80113d4:	46bd      	mov	sp, r7
 80113d6:	b004      	add	sp, #16
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	46c0      	nop			; (mov r8, r8)
 80113dc:	20000b28 	.word	0x20000b28
 80113e0:	20000c14 	.word	0x20000c14
 80113e4:	20000c34 	.word	0x20000c34
 80113e8:	20000c50 	.word	0x20000c50
 80113ec:	20000c28 	.word	0x20000c28

080113f0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80113f8:	2300      	movs	r3, #0
 80113fa:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d101      	bne.n	801140a <prvTaskIsTaskSuspended+0x1a>
 8011406:	b672      	cpsid	i
 8011408:	e7fe      	b.n	8011408 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	695a      	ldr	r2, [r3, #20]
 801140e:	4b09      	ldr	r3, [pc, #36]	; (8011434 <prvTaskIsTaskSuspended+0x44>)
 8011410:	429a      	cmp	r2, r3
 8011412:	d10a      	bne.n	801142a <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011418:	4b07      	ldr	r3, [pc, #28]	; (8011438 <prvTaskIsTaskSuspended+0x48>)
 801141a:	429a      	cmp	r2, r3
 801141c:	d005      	beq.n	801142a <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011422:	2b00      	cmp	r3, #0
 8011424:	d101      	bne.n	801142a <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 8011426:	2301      	movs	r3, #1
 8011428:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801142a:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801142c:	0018      	movs	r0, r3
 801142e:	46bd      	mov	sp, r7
 8011430:	b004      	add	sp, #16
 8011432:	bd80      	pop	{r7, pc}
 8011434:	20000c14 	.word	0x20000c14
 8011438:	20000be8 	.word	0x20000be8

0801143c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d101      	bne.n	8011452 <vTaskResume+0x16>
 801144e:	b672      	cpsid	i
 8011450:	e7fe      	b.n	8011450 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8011452:	4b1e      	ldr	r3, [pc, #120]	; (80114cc <vTaskResume+0x90>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	68fa      	ldr	r2, [r7, #12]
 8011458:	429a      	cmp	r2, r3
 801145a:	d032      	beq.n	80114c2 <vTaskResume+0x86>
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d02f      	beq.n	80114c2 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8011462:	f000 fd75 	bl	8011f50 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	0018      	movs	r0, r3
 801146a:	f7ff ffc1 	bl	80113f0 <prvTaskIsTaskSuspended>
 801146e:	1e03      	subs	r3, r0, #0
 8011470:	d025      	beq.n	80114be <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	3304      	adds	r3, #4
 8011476:	0018      	movs	r0, r3
 8011478:	f7ff f959 	bl	801072e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011480:	4b13      	ldr	r3, [pc, #76]	; (80114d0 <vTaskResume+0x94>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d903      	bls.n	8011490 <vTaskResume+0x54>
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801148c:	4b10      	ldr	r3, [pc, #64]	; (80114d0 <vTaskResume+0x94>)
 801148e:	601a      	str	r2, [r3, #0]
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011494:	0013      	movs	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	189b      	adds	r3, r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	4a0d      	ldr	r2, [pc, #52]	; (80114d4 <vTaskResume+0x98>)
 801149e:	189a      	adds	r2, r3, r2
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	3304      	adds	r3, #4
 80114a4:	0019      	movs	r1, r3
 80114a6:	0010      	movs	r0, r2
 80114a8:	f7ff f8e9 	bl	801067e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114b0:	4b06      	ldr	r3, [pc, #24]	; (80114cc <vTaskResume+0x90>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d301      	bcc.n	80114be <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80114ba:	f000 fd39 	bl	8011f30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80114be:	f000 fd59 	bl	8011f74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80114c2:	46c0      	nop			; (mov r8, r8)
 80114c4:	46bd      	mov	sp, r7
 80114c6:	b004      	add	sp, #16
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	46c0      	nop			; (mov r8, r8)
 80114cc:	20000b28 	.word	0x20000b28
 80114d0:	20000c30 	.word	0x20000c30
 80114d4:	20000b2c 	.word	0x20000b2c

080114d8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80114e0:	2300      	movs	r3, #0
 80114e2:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = xTaskToResume;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d101      	bne.n	80114f2 <xTaskResumeFromISR+0x1a>
 80114ee:	b672      	cpsid	i
 80114f0:	e7fe      	b.n	80114f0 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80114f2:	f000 fd57 	bl	8011fa4 <ulSetInterruptMaskFromISR>
 80114f6:	0003      	movs	r3, r0
 80114f8:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	0018      	movs	r0, r3
 80114fe:	f7ff ff77 	bl	80113f0 <prvTaskIsTaskSuspended>
 8011502:	1e03      	subs	r3, r0, #0
 8011504:	d032      	beq.n	801156c <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011506:	4b1e      	ldr	r3, [pc, #120]	; (8011580 <xTaskResumeFromISR+0xa8>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d126      	bne.n	801155c <xTaskResumeFromISR+0x84>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011512:	4b1c      	ldr	r3, [pc, #112]	; (8011584 <xTaskResumeFromISR+0xac>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011518:	429a      	cmp	r2, r3
 801151a:	d301      	bcc.n	8011520 <xTaskResumeFromISR+0x48>
					{
						xYieldRequired = pdTRUE;
 801151c:	2301      	movs	r3, #1
 801151e:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	3304      	adds	r3, #4
 8011524:	0018      	movs	r0, r3
 8011526:	f7ff f902 	bl	801072e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801152e:	4b16      	ldr	r3, [pc, #88]	; (8011588 <xTaskResumeFromISR+0xb0>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	429a      	cmp	r2, r3
 8011534:	d903      	bls.n	801153e <xTaskResumeFromISR+0x66>
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801153a:	4b13      	ldr	r3, [pc, #76]	; (8011588 <xTaskResumeFromISR+0xb0>)
 801153c:	601a      	str	r2, [r3, #0]
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011542:	0013      	movs	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	189b      	adds	r3, r3, r2
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	4a10      	ldr	r2, [pc, #64]	; (801158c <xTaskResumeFromISR+0xb4>)
 801154c:	189a      	adds	r2, r3, r2
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	3304      	adds	r3, #4
 8011552:	0019      	movs	r1, r3
 8011554:	0010      	movs	r0, r2
 8011556:	f7ff f892 	bl	801067e <vListInsertEnd>
 801155a:	e007      	b.n	801156c <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	3318      	adds	r3, #24
 8011560:	001a      	movs	r2, r3
 8011562:	4b0b      	ldr	r3, [pc, #44]	; (8011590 <xTaskResumeFromISR+0xb8>)
 8011564:	0011      	movs	r1, r2
 8011566:	0018      	movs	r0, r3
 8011568:	f7ff f889 	bl	801067e <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	0018      	movs	r0, r3
 8011570:	f000 fd1e 	bl	8011fb0 <vClearInterruptMaskFromISR>

		return xYieldRequired;
 8011574:	697b      	ldr	r3, [r7, #20]
	}
 8011576:	0018      	movs	r0, r3
 8011578:	46bd      	mov	sp, r7
 801157a:	b006      	add	sp, #24
 801157c:	bd80      	pop	{r7, pc}
 801157e:	46c0      	nop			; (mov r8, r8)
 8011580:	20000c50 	.word	0x20000c50
 8011584:	20000b28 	.word	0x20000b28
 8011588:	20000c30 	.word	0x20000c30
 801158c:	20000b2c 	.word	0x20000b2c
 8011590:	20000be8 	.word	0x20000be8

08011594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801159a:	4913      	ldr	r1, [pc, #76]	; (80115e8 <vTaskStartScheduler+0x54>)
 801159c:	4813      	ldr	r0, [pc, #76]	; (80115ec <vTaskStartScheduler+0x58>)
 801159e:	4b14      	ldr	r3, [pc, #80]	; (80115f0 <vTaskStartScheduler+0x5c>)
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	2300      	movs	r3, #0
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	2300      	movs	r3, #0
 80115a8:	2280      	movs	r2, #128	; 0x80
 80115aa:	f7ff fcf9 	bl	8010fa0 <xTaskCreate>
 80115ae:	0003      	movs	r3, r0
 80115b0:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d10d      	bne.n	80115d4 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80115b8:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80115ba:	4b0e      	ldr	r3, [pc, #56]	; (80115f4 <vTaskStartScheduler+0x60>)
 80115bc:	2201      	movs	r2, #1
 80115be:	4252      	negs	r2, r2
 80115c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80115c2:	4b0d      	ldr	r3, [pc, #52]	; (80115f8 <vTaskStartScheduler+0x64>)
 80115c4:	2201      	movs	r2, #1
 80115c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80115c8:	4b0c      	ldr	r3, [pc, #48]	; (80115fc <vTaskStartScheduler+0x68>)
 80115ca:	2200      	movs	r2, #0
 80115cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80115ce:	f000 fc8b 	bl	8011ee8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80115d2:	e004      	b.n	80115de <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	3301      	adds	r3, #1
 80115d8:	d101      	bne.n	80115de <vTaskStartScheduler+0x4a>
 80115da:	b672      	cpsid	i
 80115dc:	e7fe      	b.n	80115dc <vTaskStartScheduler+0x48>
}
 80115de:	46c0      	nop			; (mov r8, r8)
 80115e0:	46bd      	mov	sp, r7
 80115e2:	b002      	add	sp, #8
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	46c0      	nop			; (mov r8, r8)
 80115e8:	08019f98 	.word	0x08019f98
 80115ec:	08011b05 	.word	0x08011b05
 80115f0:	20000c4c 	.word	0x20000c4c
 80115f4:	20000c48 	.word	0x20000c48
 80115f8:	20000c34 	.word	0x20000c34
 80115fc:	20000c2c 	.word	0x20000c2c

08011600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011604:	4b03      	ldr	r3, [pc, #12]	; (8011614 <vTaskSuspendAll+0x14>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	1c5a      	adds	r2, r3, #1
 801160a:	4b02      	ldr	r3, [pc, #8]	; (8011614 <vTaskSuspendAll+0x14>)
 801160c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801160e:	46c0      	nop			; (mov r8, r8)
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	20000c50 	.word	0x20000c50

08011618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801161e:	2300      	movs	r3, #0
 8011620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011622:	2300      	movs	r3, #0
 8011624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011626:	4b3a      	ldr	r3, [pc, #232]	; (8011710 <xTaskResumeAll+0xf8>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d101      	bne.n	8011632 <xTaskResumeAll+0x1a>
 801162e:	b672      	cpsid	i
 8011630:	e7fe      	b.n	8011630 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011632:	f000 fc8d 	bl	8011f50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011636:	4b36      	ldr	r3, [pc, #216]	; (8011710 <xTaskResumeAll+0xf8>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	1e5a      	subs	r2, r3, #1
 801163c:	4b34      	ldr	r3, [pc, #208]	; (8011710 <xTaskResumeAll+0xf8>)
 801163e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011640:	4b33      	ldr	r3, [pc, #204]	; (8011710 <xTaskResumeAll+0xf8>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d15b      	bne.n	8011700 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011648:	4b32      	ldr	r3, [pc, #200]	; (8011714 <xTaskResumeAll+0xfc>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d057      	beq.n	8011700 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011650:	e02f      	b.n	80116b2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011652:	4b31      	ldr	r3, [pc, #196]	; (8011718 <xTaskResumeAll+0x100>)
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	3318      	adds	r3, #24
 801165e:	0018      	movs	r0, r3
 8011660:	f7ff f865 	bl	801072e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	3304      	adds	r3, #4
 8011668:	0018      	movs	r0, r3
 801166a:	f7ff f860 	bl	801072e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011672:	4b2a      	ldr	r3, [pc, #168]	; (801171c <xTaskResumeAll+0x104>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	429a      	cmp	r2, r3
 8011678:	d903      	bls.n	8011682 <xTaskResumeAll+0x6a>
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801167e:	4b27      	ldr	r3, [pc, #156]	; (801171c <xTaskResumeAll+0x104>)
 8011680:	601a      	str	r2, [r3, #0]
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011686:	0013      	movs	r3, r2
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	189b      	adds	r3, r3, r2
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	4a24      	ldr	r2, [pc, #144]	; (8011720 <xTaskResumeAll+0x108>)
 8011690:	189a      	adds	r2, r3, r2
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	3304      	adds	r3, #4
 8011696:	0019      	movs	r1, r3
 8011698:	0010      	movs	r0, r2
 801169a:	f7fe fff0 	bl	801067e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116a2:	4b20      	ldr	r3, [pc, #128]	; (8011724 <xTaskResumeAll+0x10c>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d302      	bcc.n	80116b2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80116ac:	4b1e      	ldr	r3, [pc, #120]	; (8011728 <xTaskResumeAll+0x110>)
 80116ae:	2201      	movs	r2, #1
 80116b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116b2:	4b19      	ldr	r3, [pc, #100]	; (8011718 <xTaskResumeAll+0x100>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d1cb      	bne.n	8011652 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80116c0:	f000 fab4 	bl	8011c2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80116c4:	4b19      	ldr	r3, [pc, #100]	; (801172c <xTaskResumeAll+0x114>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d00f      	beq.n	80116f0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80116d0:	f000 f82e 	bl	8011730 <xTaskIncrementTick>
 80116d4:	1e03      	subs	r3, r0, #0
 80116d6:	d002      	beq.n	80116de <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80116d8:	4b13      	ldr	r3, [pc, #76]	; (8011728 <xTaskResumeAll+0x110>)
 80116da:	2201      	movs	r2, #1
 80116dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	3b01      	subs	r3, #1
 80116e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1f2      	bne.n	80116d0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80116ea:	4b10      	ldr	r3, [pc, #64]	; (801172c <xTaskResumeAll+0x114>)
 80116ec:	2200      	movs	r2, #0
 80116ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80116f0:	4b0d      	ldr	r3, [pc, #52]	; (8011728 <xTaskResumeAll+0x110>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d003      	beq.n	8011700 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80116f8:	2301      	movs	r3, #1
 80116fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80116fc:	f000 fc18 	bl	8011f30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011700:	f000 fc38 	bl	8011f74 <vPortExitCritical>

	return xAlreadyYielded;
 8011704:	68bb      	ldr	r3, [r7, #8]
}
 8011706:	0018      	movs	r0, r3
 8011708:	46bd      	mov	sp, r7
 801170a:	b004      	add	sp, #16
 801170c:	bd80      	pop	{r7, pc}
 801170e:	46c0      	nop			; (mov r8, r8)
 8011710:	20000c50 	.word	0x20000c50
 8011714:	20000c28 	.word	0x20000c28
 8011718:	20000be8 	.word	0x20000be8
 801171c:	20000c30 	.word	0x20000c30
 8011720:	20000b2c 	.word	0x20000b2c
 8011724:	20000b28 	.word	0x20000b28
 8011728:	20000c3c 	.word	0x20000c3c
 801172c:	20000c38 	.word	0x20000c38

08011730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011736:	2300      	movs	r3, #0
 8011738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801173a:	4b4a      	ldr	r3, [pc, #296]	; (8011864 <xTaskIncrementTick+0x134>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d000      	beq.n	8011744 <xTaskIncrementTick+0x14>
 8011742:	e084      	b.n	801184e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011744:	4b48      	ldr	r3, [pc, #288]	; (8011868 <xTaskIncrementTick+0x138>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	3301      	adds	r3, #1
 801174a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801174c:	4b46      	ldr	r3, [pc, #280]	; (8011868 <xTaskIncrementTick+0x138>)
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d117      	bne.n	8011788 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8011758:	4b44      	ldr	r3, [pc, #272]	; (801186c <xTaskIncrementTick+0x13c>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d001      	beq.n	8011766 <xTaskIncrementTick+0x36>
 8011762:	b672      	cpsid	i
 8011764:	e7fe      	b.n	8011764 <xTaskIncrementTick+0x34>
 8011766:	4b41      	ldr	r3, [pc, #260]	; (801186c <xTaskIncrementTick+0x13c>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	60fb      	str	r3, [r7, #12]
 801176c:	4b40      	ldr	r3, [pc, #256]	; (8011870 <xTaskIncrementTick+0x140>)
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	4b3e      	ldr	r3, [pc, #248]	; (801186c <xTaskIncrementTick+0x13c>)
 8011772:	601a      	str	r2, [r3, #0]
 8011774:	4b3e      	ldr	r3, [pc, #248]	; (8011870 <xTaskIncrementTick+0x140>)
 8011776:	68fa      	ldr	r2, [r7, #12]
 8011778:	601a      	str	r2, [r3, #0]
 801177a:	4b3e      	ldr	r3, [pc, #248]	; (8011874 <xTaskIncrementTick+0x144>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	4b3c      	ldr	r3, [pc, #240]	; (8011874 <xTaskIncrementTick+0x144>)
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	f000 fa52 	bl	8011c2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011788:	4b3b      	ldr	r3, [pc, #236]	; (8011878 <xTaskIncrementTick+0x148>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	693a      	ldr	r2, [r7, #16]
 801178e:	429a      	cmp	r2, r3
 8011790:	d349      	bcc.n	8011826 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011792:	4b36      	ldr	r3, [pc, #216]	; (801186c <xTaskIncrementTick+0x13c>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d104      	bne.n	80117a6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801179c:	4b36      	ldr	r3, [pc, #216]	; (8011878 <xTaskIncrementTick+0x148>)
 801179e:	2201      	movs	r2, #1
 80117a0:	4252      	negs	r2, r2
 80117a2:	601a      	str	r2, [r3, #0]
					break;
 80117a4:	e03f      	b.n	8011826 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117a6:	4b31      	ldr	r3, [pc, #196]	; (801186c <xTaskIncrementTick+0x13c>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	68db      	ldr	r3, [r3, #12]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80117b6:	693a      	ldr	r2, [r7, #16]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d203      	bcs.n	80117c6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80117be:	4b2e      	ldr	r3, [pc, #184]	; (8011878 <xTaskIncrementTick+0x148>)
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80117c4:	e02f      	b.n	8011826 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	3304      	adds	r3, #4
 80117ca:	0018      	movs	r0, r3
 80117cc:	f7fe ffaf 	bl	801072e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d004      	beq.n	80117e2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	3318      	adds	r3, #24
 80117dc:	0018      	movs	r0, r3
 80117de:	f7fe ffa6 	bl	801072e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e6:	4b25      	ldr	r3, [pc, #148]	; (801187c <xTaskIncrementTick+0x14c>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d903      	bls.n	80117f6 <xTaskIncrementTick+0xc6>
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117f2:	4b22      	ldr	r3, [pc, #136]	; (801187c <xTaskIncrementTick+0x14c>)
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117fa:	0013      	movs	r3, r2
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	189b      	adds	r3, r3, r2
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	4a1f      	ldr	r2, [pc, #124]	; (8011880 <xTaskIncrementTick+0x150>)
 8011804:	189a      	adds	r2, r3, r2
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	3304      	adds	r3, #4
 801180a:	0019      	movs	r1, r3
 801180c:	0010      	movs	r0, r2
 801180e:	f7fe ff36 	bl	801067e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011816:	4b1b      	ldr	r3, [pc, #108]	; (8011884 <xTaskIncrementTick+0x154>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801181c:	429a      	cmp	r2, r3
 801181e:	d3b8      	bcc.n	8011792 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8011820:	2301      	movs	r3, #1
 8011822:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011824:	e7b5      	b.n	8011792 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011826:	4b17      	ldr	r3, [pc, #92]	; (8011884 <xTaskIncrementTick+0x154>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801182c:	4914      	ldr	r1, [pc, #80]	; (8011880 <xTaskIncrementTick+0x150>)
 801182e:	0013      	movs	r3, r2
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	189b      	adds	r3, r3, r2
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	585b      	ldr	r3, [r3, r1]
 8011838:	2b01      	cmp	r3, #1
 801183a:	d901      	bls.n	8011840 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 801183c:	2301      	movs	r3, #1
 801183e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011840:	4b11      	ldr	r3, [pc, #68]	; (8011888 <xTaskIncrementTick+0x158>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d007      	beq.n	8011858 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8011848:	2301      	movs	r3, #1
 801184a:	617b      	str	r3, [r7, #20]
 801184c:	e004      	b.n	8011858 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801184e:	4b0f      	ldr	r3, [pc, #60]	; (801188c <xTaskIncrementTick+0x15c>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	1c5a      	adds	r2, r3, #1
 8011854:	4b0d      	ldr	r3, [pc, #52]	; (801188c <xTaskIncrementTick+0x15c>)
 8011856:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011858:	697b      	ldr	r3, [r7, #20]
}
 801185a:	0018      	movs	r0, r3
 801185c:	46bd      	mov	sp, r7
 801185e:	b006      	add	sp, #24
 8011860:	bd80      	pop	{r7, pc}
 8011862:	46c0      	nop			; (mov r8, r8)
 8011864:	20000c50 	.word	0x20000c50
 8011868:	20000c2c 	.word	0x20000c2c
 801186c:	20000be0 	.word	0x20000be0
 8011870:	20000be4 	.word	0x20000be4
 8011874:	20000c40 	.word	0x20000c40
 8011878:	20000c48 	.word	0x20000c48
 801187c:	20000c30 	.word	0x20000c30
 8011880:	20000b2c 	.word	0x20000b2c
 8011884:	20000b28 	.word	0x20000b28
 8011888:	20000c3c 	.word	0x20000c3c
 801188c:	20000c38 	.word	0x20000c38

08011890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011896:	4b22      	ldr	r3, [pc, #136]	; (8011920 <vTaskSwitchContext+0x90>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d003      	beq.n	80118a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801189e:	4b21      	ldr	r3, [pc, #132]	; (8011924 <vTaskSwitchContext+0x94>)
 80118a0:	2201      	movs	r2, #1
 80118a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80118a4:	e037      	b.n	8011916 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80118a6:	4b1f      	ldr	r3, [pc, #124]	; (8011924 <vTaskSwitchContext+0x94>)
 80118a8:	2200      	movs	r2, #0
 80118aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118ac:	4b1e      	ldr	r3, [pc, #120]	; (8011928 <vTaskSwitchContext+0x98>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	607b      	str	r3, [r7, #4]
 80118b2:	e007      	b.n	80118c4 <vTaskSwitchContext+0x34>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d101      	bne.n	80118be <vTaskSwitchContext+0x2e>
 80118ba:	b672      	cpsid	i
 80118bc:	e7fe      	b.n	80118bc <vTaskSwitchContext+0x2c>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	3b01      	subs	r3, #1
 80118c2:	607b      	str	r3, [r7, #4]
 80118c4:	4919      	ldr	r1, [pc, #100]	; (801192c <vTaskSwitchContext+0x9c>)
 80118c6:	687a      	ldr	r2, [r7, #4]
 80118c8:	0013      	movs	r3, r2
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	189b      	adds	r3, r3, r2
 80118ce:	009b      	lsls	r3, r3, #2
 80118d0:	585b      	ldr	r3, [r3, r1]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d0ee      	beq.n	80118b4 <vTaskSwitchContext+0x24>
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	0013      	movs	r3, r2
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	189b      	adds	r3, r3, r2
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	4a12      	ldr	r2, [pc, #72]	; (801192c <vTaskSwitchContext+0x9c>)
 80118e2:	189b      	adds	r3, r3, r2
 80118e4:	603b      	str	r3, [r7, #0]
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	685a      	ldr	r2, [r3, #4]
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	605a      	str	r2, [r3, #4]
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	685a      	ldr	r2, [r3, #4]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	3308      	adds	r3, #8
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d104      	bne.n	8011906 <vTaskSwitchContext+0x76>
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	685a      	ldr	r2, [r3, #4]
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	605a      	str	r2, [r3, #4]
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	68da      	ldr	r2, [r3, #12]
 801190c:	4b08      	ldr	r3, [pc, #32]	; (8011930 <vTaskSwitchContext+0xa0>)
 801190e:	601a      	str	r2, [r3, #0]
 8011910:	4b05      	ldr	r3, [pc, #20]	; (8011928 <vTaskSwitchContext+0x98>)
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	601a      	str	r2, [r3, #0]
}
 8011916:	46c0      	nop			; (mov r8, r8)
 8011918:	46bd      	mov	sp, r7
 801191a:	b002      	add	sp, #8
 801191c:	bd80      	pop	{r7, pc}
 801191e:	46c0      	nop			; (mov r8, r8)
 8011920:	20000c50 	.word	0x20000c50
 8011924:	20000c3c 	.word	0x20000c3c
 8011928:	20000c30 	.word	0x20000c30
 801192c:	20000b2c 	.word	0x20000b2c
 8011930:	20000b28 	.word	0x20000b28

08011934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d101      	bne.n	8011948 <vTaskPlaceOnEventList+0x14>
 8011944:	b672      	cpsid	i
 8011946:	e7fe      	b.n	8011946 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011948:	4b08      	ldr	r3, [pc, #32]	; (801196c <vTaskPlaceOnEventList+0x38>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	3318      	adds	r3, #24
 801194e:	001a      	movs	r2, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	0011      	movs	r1, r2
 8011954:	0018      	movs	r0, r3
 8011956:	f7fe feb4 	bl	80106c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	2101      	movs	r1, #1
 801195e:	0018      	movs	r0, r3
 8011960:	f000 fa08 	bl	8011d74 <prvAddCurrentTaskToDelayedList>
}
 8011964:	46c0      	nop			; (mov r8, r8)
 8011966:	46bd      	mov	sp, r7
 8011968:	b002      	add	sp, #8
 801196a:	bd80      	pop	{r7, pc}
 801196c:	20000b28 	.word	0x20000b28

08011970 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d101      	bne.n	801198a <xTaskRemoveFromEventList+0x1a>
 8011986:	b672      	cpsid	i
 8011988:	e7fe      	b.n	8011988 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	3318      	adds	r3, #24
 801198e:	0018      	movs	r0, r3
 8011990:	f7fe fecd 	bl	801072e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011994:	4b1e      	ldr	r3, [pc, #120]	; (8011a10 <xTaskRemoveFromEventList+0xa0>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d11d      	bne.n	80119d8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	3304      	adds	r3, #4
 80119a0:	0018      	movs	r0, r3
 80119a2:	f7fe fec4 	bl	801072e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119aa:	4b1a      	ldr	r3, [pc, #104]	; (8011a14 <xTaskRemoveFromEventList+0xa4>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d903      	bls.n	80119ba <xTaskRemoveFromEventList+0x4a>
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b6:	4b17      	ldr	r3, [pc, #92]	; (8011a14 <xTaskRemoveFromEventList+0xa4>)
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119be:	0013      	movs	r3, r2
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	189b      	adds	r3, r3, r2
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	4a14      	ldr	r2, [pc, #80]	; (8011a18 <xTaskRemoveFromEventList+0xa8>)
 80119c8:	189a      	adds	r2, r3, r2
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	3304      	adds	r3, #4
 80119ce:	0019      	movs	r1, r3
 80119d0:	0010      	movs	r0, r2
 80119d2:	f7fe fe54 	bl	801067e <vListInsertEnd>
 80119d6:	e007      	b.n	80119e8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	3318      	adds	r3, #24
 80119dc:	001a      	movs	r2, r3
 80119de:	4b0f      	ldr	r3, [pc, #60]	; (8011a1c <xTaskRemoveFromEventList+0xac>)
 80119e0:	0011      	movs	r1, r2
 80119e2:	0018      	movs	r0, r3
 80119e4:	f7fe fe4b 	bl	801067e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ec:	4b0c      	ldr	r3, [pc, #48]	; (8011a20 <xTaskRemoveFromEventList+0xb0>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d905      	bls.n	8011a02 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80119f6:	2301      	movs	r3, #1
 80119f8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80119fa:	4b0a      	ldr	r3, [pc, #40]	; (8011a24 <xTaskRemoveFromEventList+0xb4>)
 80119fc:	2201      	movs	r2, #1
 80119fe:	601a      	str	r2, [r3, #0]
 8011a00:	e001      	b.n	8011a06 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8011a02:	2300      	movs	r3, #0
 8011a04:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8011a06:	68fb      	ldr	r3, [r7, #12]
}
 8011a08:	0018      	movs	r0, r3
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	b004      	add	sp, #16
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	20000c50 	.word	0x20000c50
 8011a14:	20000c30 	.word	0x20000c30
 8011a18:	20000b2c 	.word	0x20000b2c
 8011a1c:	20000be8 	.word	0x20000be8
 8011a20:	20000b28 	.word	0x20000b28
 8011a24:	20000c3c 	.word	0x20000c3c

08011a28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a30:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <vTaskInternalSetTimeOutState+0x20>)
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a38:	4b04      	ldr	r3, [pc, #16]	; (8011a4c <vTaskInternalSetTimeOutState+0x24>)
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	605a      	str	r2, [r3, #4]
}
 8011a40:	46c0      	nop			; (mov r8, r8)
 8011a42:	46bd      	mov	sp, r7
 8011a44:	b002      	add	sp, #8
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	20000c40 	.word	0x20000c40
 8011a4c:	20000c2c 	.word	0x20000c2c

08011a50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b086      	sub	sp, #24
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d101      	bne.n	8011a64 <xTaskCheckForTimeOut+0x14>
 8011a60:	b672      	cpsid	i
 8011a62:	e7fe      	b.n	8011a62 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d101      	bne.n	8011a6e <xTaskCheckForTimeOut+0x1e>
 8011a6a:	b672      	cpsid	i
 8011a6c:	e7fe      	b.n	8011a6c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8011a6e:	f000 fa6f 	bl	8011f50 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011a72:	4b1d      	ldr	r3, [pc, #116]	; (8011ae8 <xTaskCheckForTimeOut+0x98>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	693a      	ldr	r2, [r7, #16]
 8011a7e:	1ad3      	subs	r3, r2, r3
 8011a80:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	3301      	adds	r3, #1
 8011a88:	d102      	bne.n	8011a90 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	617b      	str	r3, [r7, #20]
 8011a8e:	e024      	b.n	8011ada <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	4b15      	ldr	r3, [pc, #84]	; (8011aec <xTaskCheckForTimeOut+0x9c>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d007      	beq.n	8011aac <xTaskCheckForTimeOut+0x5c>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	693a      	ldr	r2, [r7, #16]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d302      	bcc.n	8011aac <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	617b      	str	r3, [r7, #20]
 8011aaa:	e016      	b.n	8011ada <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	68fa      	ldr	r2, [r7, #12]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d20c      	bcs.n	8011ad0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	1ad2      	subs	r2, r2, r3
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	0018      	movs	r0, r3
 8011ac6:	f7ff ffaf 	bl	8011a28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011aca:	2300      	movs	r3, #0
 8011acc:	617b      	str	r3, [r7, #20]
 8011ace:	e004      	b.n	8011ada <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8011ada:	f000 fa4b 	bl	8011f74 <vPortExitCritical>

	return xReturn;
 8011ade:	697b      	ldr	r3, [r7, #20]
}
 8011ae0:	0018      	movs	r0, r3
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	b006      	add	sp, #24
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	20000c2c 	.word	0x20000c2c
 8011aec:	20000c40 	.word	0x20000c40

08011af0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011af4:	4b02      	ldr	r3, [pc, #8]	; (8011b00 <vTaskMissedYield+0x10>)
 8011af6:	2201      	movs	r2, #1
 8011af8:	601a      	str	r2, [r3, #0]
}
 8011afa:	46c0      	nop			; (mov r8, r8)
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	20000c3c 	.word	0x20000c3c

08011b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011b0c:	f000 f84e 	bl	8011bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011b10:	4b03      	ldr	r3, [pc, #12]	; (8011b20 <prvIdleTask+0x1c>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d9f9      	bls.n	8011b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011b18:	f000 fa0a 	bl	8011f30 <vPortYield>
		prvCheckTasksWaitingTermination();
 8011b1c:	e7f6      	b.n	8011b0c <prvIdleTask+0x8>
 8011b1e:	46c0      	nop			; (mov r8, r8)
 8011b20:	20000b2c 	.word	0x20000b2c

08011b24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	607b      	str	r3, [r7, #4]
 8011b2e:	e00c      	b.n	8011b4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	0013      	movs	r3, r2
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	189b      	adds	r3, r3, r2
 8011b38:	009b      	lsls	r3, r3, #2
 8011b3a:	4a14      	ldr	r2, [pc, #80]	; (8011b8c <prvInitialiseTaskLists+0x68>)
 8011b3c:	189b      	adds	r3, r3, r2
 8011b3e:	0018      	movs	r0, r3
 8011b40:	f7fe fd74 	bl	801062c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	3301      	adds	r3, #1
 8011b48:	607b      	str	r3, [r7, #4]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b06      	cmp	r3, #6
 8011b4e:	d9ef      	bls.n	8011b30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011b50:	4b0f      	ldr	r3, [pc, #60]	; (8011b90 <prvInitialiseTaskLists+0x6c>)
 8011b52:	0018      	movs	r0, r3
 8011b54:	f7fe fd6a 	bl	801062c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011b58:	4b0e      	ldr	r3, [pc, #56]	; (8011b94 <prvInitialiseTaskLists+0x70>)
 8011b5a:	0018      	movs	r0, r3
 8011b5c:	f7fe fd66 	bl	801062c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011b60:	4b0d      	ldr	r3, [pc, #52]	; (8011b98 <prvInitialiseTaskLists+0x74>)
 8011b62:	0018      	movs	r0, r3
 8011b64:	f7fe fd62 	bl	801062c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011b68:	4b0c      	ldr	r3, [pc, #48]	; (8011b9c <prvInitialiseTaskLists+0x78>)
 8011b6a:	0018      	movs	r0, r3
 8011b6c:	f7fe fd5e 	bl	801062c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011b70:	4b0b      	ldr	r3, [pc, #44]	; (8011ba0 <prvInitialiseTaskLists+0x7c>)
 8011b72:	0018      	movs	r0, r3
 8011b74:	f7fe fd5a 	bl	801062c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011b78:	4b0a      	ldr	r3, [pc, #40]	; (8011ba4 <prvInitialiseTaskLists+0x80>)
 8011b7a:	4a05      	ldr	r2, [pc, #20]	; (8011b90 <prvInitialiseTaskLists+0x6c>)
 8011b7c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011b7e:	4b0a      	ldr	r3, [pc, #40]	; (8011ba8 <prvInitialiseTaskLists+0x84>)
 8011b80:	4a04      	ldr	r2, [pc, #16]	; (8011b94 <prvInitialiseTaskLists+0x70>)
 8011b82:	601a      	str	r2, [r3, #0]
}
 8011b84:	46c0      	nop			; (mov r8, r8)
 8011b86:	46bd      	mov	sp, r7
 8011b88:	b002      	add	sp, #8
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	20000b2c 	.word	0x20000b2c
 8011b90:	20000bb8 	.word	0x20000bb8
 8011b94:	20000bcc 	.word	0x20000bcc
 8011b98:	20000be8 	.word	0x20000be8
 8011b9c:	20000bfc 	.word	0x20000bfc
 8011ba0:	20000c14 	.word	0x20000c14
 8011ba4:	20000be0 	.word	0x20000be0
 8011ba8:	20000be4 	.word	0x20000be4

08011bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011bb2:	e01a      	b.n	8011bea <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8011bb4:	f000 f9cc 	bl	8011f50 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bb8:	4b10      	ldr	r3, [pc, #64]	; (8011bfc <prvCheckTasksWaitingTermination+0x50>)
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	0018      	movs	r0, r3
 8011bc6:	f7fe fdb2 	bl	801072e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011bca:	4b0d      	ldr	r3, [pc, #52]	; (8011c00 <prvCheckTasksWaitingTermination+0x54>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	1e5a      	subs	r2, r3, #1
 8011bd0:	4b0b      	ldr	r3, [pc, #44]	; (8011c00 <prvCheckTasksWaitingTermination+0x54>)
 8011bd2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011bd4:	4b0b      	ldr	r3, [pc, #44]	; (8011c04 <prvCheckTasksWaitingTermination+0x58>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	1e5a      	subs	r2, r3, #1
 8011bda:	4b0a      	ldr	r3, [pc, #40]	; (8011c04 <prvCheckTasksWaitingTermination+0x58>)
 8011bdc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8011bde:	f000 f9c9 	bl	8011f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	0018      	movs	r0, r3
 8011be6:	f000 f80f 	bl	8011c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011bea:	4b06      	ldr	r3, [pc, #24]	; (8011c04 <prvCheckTasksWaitingTermination+0x58>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d1e0      	bne.n	8011bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011bf2:	46c0      	nop			; (mov r8, r8)
 8011bf4:	46c0      	nop			; (mov r8, r8)
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	b002      	add	sp, #8
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	20000bfc 	.word	0x20000bfc
 8011c00:	20000c28 	.word	0x20000c28
 8011c04:	20000c10 	.word	0x20000c10

08011c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c14:	0018      	movs	r0, r3
 8011c16:	f000 fadf 	bl	80121d8 <vPortFree>
			vPortFree( pxTCB );
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	0018      	movs	r0, r3
 8011c1e:	f000 fadb 	bl	80121d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011c22:	46c0      	nop			; (mov r8, r8)
 8011c24:	46bd      	mov	sp, r7
 8011c26:	b002      	add	sp, #8
 8011c28:	bd80      	pop	{r7, pc}
	...

08011c2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c32:	4b0b      	ldr	r3, [pc, #44]	; (8011c60 <prvResetNextTaskUnblockTime+0x34>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d104      	bne.n	8011c46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011c3c:	4b09      	ldr	r3, [pc, #36]	; (8011c64 <prvResetNextTaskUnblockTime+0x38>)
 8011c3e:	2201      	movs	r2, #1
 8011c40:	4252      	negs	r2, r2
 8011c42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011c44:	e008      	b.n	8011c58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c46:	4b06      	ldr	r3, [pc, #24]	; (8011c60 <prvResetNextTaskUnblockTime+0x34>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	685a      	ldr	r2, [r3, #4]
 8011c54:	4b03      	ldr	r3, [pc, #12]	; (8011c64 <prvResetNextTaskUnblockTime+0x38>)
 8011c56:	601a      	str	r2, [r3, #0]
}
 8011c58:	46c0      	nop			; (mov r8, r8)
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	b002      	add	sp, #8
 8011c5e:	bd80      	pop	{r7, pc}
 8011c60:	20000be0 	.word	0x20000be0
 8011c64:	20000c48 	.word	0x20000c48

08011c68 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011c6e:	4b04      	ldr	r3, [pc, #16]	; (8011c80 <xTaskGetCurrentTaskHandle+0x18>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011c74:	687b      	ldr	r3, [r7, #4]
	}
 8011c76:	0018      	movs	r0, r3
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	b002      	add	sp, #8
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	46c0      	nop			; (mov r8, r8)
 8011c80:	20000b28 	.word	0x20000b28

08011c84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011c8a:	4b0a      	ldr	r3, [pc, #40]	; (8011cb4 <xTaskGetSchedulerState+0x30>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d102      	bne.n	8011c98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011c92:	2301      	movs	r3, #1
 8011c94:	607b      	str	r3, [r7, #4]
 8011c96:	e008      	b.n	8011caa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c98:	4b07      	ldr	r3, [pc, #28]	; (8011cb8 <xTaskGetSchedulerState+0x34>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d102      	bne.n	8011ca6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	607b      	str	r3, [r7, #4]
 8011ca4:	e001      	b.n	8011caa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011caa:	687b      	ldr	r3, [r7, #4]
	}
 8011cac:	0018      	movs	r0, r3
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	b002      	add	sp, #8
 8011cb2:	bd80      	pop	{r7, pc}
 8011cb4:	20000c34 	.word	0x20000c34
 8011cb8:	20000c50 	.word	0x20000c50

08011cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d044      	beq.n	8011d5c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011cd2:	4b25      	ldr	r3, [pc, #148]	; (8011d68 <xTaskPriorityDisinherit+0xac>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	68ba      	ldr	r2, [r7, #8]
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d001      	beq.n	8011ce0 <xTaskPriorityDisinherit+0x24>
 8011cdc:	b672      	cpsid	i
 8011cde:	e7fe      	b.n	8011cde <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d101      	bne.n	8011cec <xTaskPriorityDisinherit+0x30>
 8011ce8:	b672      	cpsid	i
 8011cea:	e7fe      	b.n	8011cea <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cf0:	1e5a      	subs	r2, r3, #1
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d02c      	beq.n	8011d5c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d128      	bne.n	8011d5c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	3304      	adds	r3, #4
 8011d0e:	0018      	movs	r0, r3
 8011d10:	f7fe fd0d 	bl	801072e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d20:	2207      	movs	r2, #7
 8011d22:	1ad2      	subs	r2, r2, r3
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d2c:	4b0f      	ldr	r3, [pc, #60]	; (8011d6c <xTaskPriorityDisinherit+0xb0>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d903      	bls.n	8011d3c <xTaskPriorityDisinherit+0x80>
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d38:	4b0c      	ldr	r3, [pc, #48]	; (8011d6c <xTaskPriorityDisinherit+0xb0>)
 8011d3a:	601a      	str	r2, [r3, #0]
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d40:	0013      	movs	r3, r2
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	189b      	adds	r3, r3, r2
 8011d46:	009b      	lsls	r3, r3, #2
 8011d48:	4a09      	ldr	r2, [pc, #36]	; (8011d70 <xTaskPriorityDisinherit+0xb4>)
 8011d4a:	189a      	adds	r2, r3, r2
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	3304      	adds	r3, #4
 8011d50:	0019      	movs	r1, r3
 8011d52:	0010      	movs	r0, r2
 8011d54:	f7fe fc93 	bl	801067e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8011d5e:	0018      	movs	r0, r3
 8011d60:	46bd      	mov	sp, r7
 8011d62:	b004      	add	sp, #16
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	46c0      	nop			; (mov r8, r8)
 8011d68:	20000b28 	.word	0x20000b28
 8011d6c:	20000c30 	.word	0x20000c30
 8011d70:	20000b2c 	.word	0x20000b2c

08011d74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011d7e:	4b21      	ldr	r3, [pc, #132]	; (8011e04 <prvAddCurrentTaskToDelayedList+0x90>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d84:	4b20      	ldr	r3, [pc, #128]	; (8011e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	3304      	adds	r3, #4
 8011d8a:	0018      	movs	r0, r3
 8011d8c:	f7fe fccf 	bl	801072e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	3301      	adds	r3, #1
 8011d94:	d10b      	bne.n	8011dae <prvAddCurrentTaskToDelayedList+0x3a>
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d008      	beq.n	8011dae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d9c:	4b1a      	ldr	r3, [pc, #104]	; (8011e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	1d1a      	adds	r2, r3, #4
 8011da2:	4b1a      	ldr	r3, [pc, #104]	; (8011e0c <prvAddCurrentTaskToDelayedList+0x98>)
 8011da4:	0011      	movs	r1, r2
 8011da6:	0018      	movs	r0, r3
 8011da8:	f7fe fc69 	bl	801067e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011dac:	e026      	b.n	8011dfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011dae:	68fa      	ldr	r2, [r7, #12]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	18d3      	adds	r3, r2, r3
 8011db4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011db6:	4b14      	ldr	r3, [pc, #80]	; (8011e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d209      	bcs.n	8011dda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011dc6:	4b12      	ldr	r3, [pc, #72]	; (8011e10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011dc8:	681a      	ldr	r2, [r3, #0]
 8011dca:	4b0f      	ldr	r3, [pc, #60]	; (8011e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	3304      	adds	r3, #4
 8011dd0:	0019      	movs	r1, r3
 8011dd2:	0010      	movs	r0, r2
 8011dd4:	f7fe fc75 	bl	80106c2 <vListInsert>
}
 8011dd8:	e010      	b.n	8011dfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011dda:	4b0e      	ldr	r3, [pc, #56]	; (8011e14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	4b0a      	ldr	r3, [pc, #40]	; (8011e08 <prvAddCurrentTaskToDelayedList+0x94>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	3304      	adds	r3, #4
 8011de4:	0019      	movs	r1, r3
 8011de6:	0010      	movs	r0, r2
 8011de8:	f7fe fc6b 	bl	80106c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011dec:	4b0a      	ldr	r3, [pc, #40]	; (8011e18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	68ba      	ldr	r2, [r7, #8]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d202      	bcs.n	8011dfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011df6:	4b08      	ldr	r3, [pc, #32]	; (8011e18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	601a      	str	r2, [r3, #0]
}
 8011dfc:	46c0      	nop			; (mov r8, r8)
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	b004      	add	sp, #16
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	20000c2c 	.word	0x20000c2c
 8011e08:	20000b28 	.word	0x20000b28
 8011e0c:	20000c14 	.word	0x20000c14
 8011e10:	20000be4 	.word	0x20000be4
 8011e14:	20000be0 	.word	0x20000be0
 8011e18:	20000c48 	.word	0x20000c48

08011e1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	3b04      	subs	r3, #4
 8011e2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2280      	movs	r2, #128	; 0x80
 8011e32:	0452      	lsls	r2, r2, #17
 8011e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	3b04      	subs	r3, #4
 8011e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8011e3c:	68ba      	ldr	r2, [r7, #8]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	3b04      	subs	r3, #4
 8011e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011e48:	4a08      	ldr	r2, [pc, #32]	; (8011e6c <pxPortInitialiseStack+0x50>)
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	3b14      	subs	r3, #20
 8011e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	3b20      	subs	r3, #32
 8011e5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e60:	68fb      	ldr	r3, [r7, #12]
}
 8011e62:	0018      	movs	r0, r3
 8011e64:	46bd      	mov	sp, r7
 8011e66:	b004      	add	sp, #16
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	46c0      	nop			; (mov r8, r8)
 8011e6c:	08011e71 	.word	0x08011e71

08011e70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8011e76:	2300      	movs	r3, #0
 8011e78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011e7a:	4b08      	ldr	r3, [pc, #32]	; (8011e9c <prvTaskExitError+0x2c>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	3301      	adds	r3, #1
 8011e80:	d001      	beq.n	8011e86 <prvTaskExitError+0x16>
 8011e82:	b672      	cpsid	i
 8011e84:	e7fe      	b.n	8011e84 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8011e86:	b672      	cpsid	i
	while( ulDummy == 0 )
 8011e88:	46c0      	nop			; (mov r8, r8)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d0fc      	beq.n	8011e8a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011e90:	46c0      	nop			; (mov r8, r8)
 8011e92:	46c0      	nop			; (mov r8, r8)
 8011e94:	46bd      	mov	sp, r7
 8011e96:	b002      	add	sp, #8
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	46c0      	nop			; (mov r8, r8)
 8011e9c:	2000007c 	.word	0x2000007c

08011ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8011ea4:	46c0      	nop			; (mov r8, r8)
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	0000      	movs	r0, r0
 8011eac:	0000      	movs	r0, r0
	...

08011eb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011eb0:	4a0b      	ldr	r2, [pc, #44]	; (8011ee0 <pxCurrentTCBConst2>)
 8011eb2:	6813      	ldr	r3, [r2, #0]
 8011eb4:	6818      	ldr	r0, [r3, #0]
 8011eb6:	3020      	adds	r0, #32
 8011eb8:	f380 8809 	msr	PSP, r0
 8011ebc:	2002      	movs	r0, #2
 8011ebe:	f380 8814 	msr	CONTROL, r0
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011ec8:	46ae      	mov	lr, r5
 8011eca:	bc08      	pop	{r3}
 8011ecc:	bc04      	pop	{r2}
 8011ece:	b662      	cpsie	i
 8011ed0:	4718      	bx	r3
 8011ed2:	46c0      	nop			; (mov r8, r8)
 8011ed4:	46c0      	nop			; (mov r8, r8)
 8011ed6:	46c0      	nop			; (mov r8, r8)
 8011ed8:	46c0      	nop			; (mov r8, r8)
 8011eda:	46c0      	nop			; (mov r8, r8)
 8011edc:	46c0      	nop			; (mov r8, r8)
 8011ede:	46c0      	nop			; (mov r8, r8)

08011ee0 <pxCurrentTCBConst2>:
 8011ee0:	20000b28 	.word	0x20000b28
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8011ee4:	46c0      	nop			; (mov r8, r8)
 8011ee6:	46c0      	nop			; (mov r8, r8)

08011ee8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011eec:	4b0e      	ldr	r3, [pc, #56]	; (8011f28 <xPortStartScheduler+0x40>)
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	4b0d      	ldr	r3, [pc, #52]	; (8011f28 <xPortStartScheduler+0x40>)
 8011ef2:	21ff      	movs	r1, #255	; 0xff
 8011ef4:	0409      	lsls	r1, r1, #16
 8011ef6:	430a      	orrs	r2, r1
 8011ef8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011efa:	4b0b      	ldr	r3, [pc, #44]	; (8011f28 <xPortStartScheduler+0x40>)
 8011efc:	681a      	ldr	r2, [r3, #0]
 8011efe:	4b0a      	ldr	r3, [pc, #40]	; (8011f28 <xPortStartScheduler+0x40>)
 8011f00:	21ff      	movs	r1, #255	; 0xff
 8011f02:	0609      	lsls	r1, r1, #24
 8011f04:	430a      	orrs	r2, r1
 8011f06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011f08:	f000 f898 	bl	801203c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011f0c:	4b07      	ldr	r3, [pc, #28]	; (8011f2c <xPortStartScheduler+0x44>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8011f12:	f7ff ffcd 	bl	8011eb0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011f16:	f7ff fcbb 	bl	8011890 <vTaskSwitchContext>
	prvTaskExitError();
 8011f1a:	f7ff ffa9 	bl	8011e70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011f1e:	2300      	movs	r3, #0
}
 8011f20:	0018      	movs	r0, r3
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	46c0      	nop			; (mov r8, r8)
 8011f28:	e000ed20 	.word	0xe000ed20
 8011f2c:	2000007c 	.word	0x2000007c

08011f30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011f34:	4b05      	ldr	r3, [pc, #20]	; (8011f4c <vPortYield+0x1c>)
 8011f36:	2280      	movs	r2, #128	; 0x80
 8011f38:	0552      	lsls	r2, r2, #21
 8011f3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8011f3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011f40:	f3bf 8f6f 	isb	sy
}
 8011f44:	46c0      	nop			; (mov r8, r8)
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	46c0      	nop			; (mov r8, r8)
 8011f4c:	e000ed04 	.word	0xe000ed04

08011f50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8011f54:	b672      	cpsid	i
	uxCriticalNesting++;
 8011f56:	4b06      	ldr	r3, [pc, #24]	; (8011f70 <vPortEnterCritical+0x20>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	1c5a      	adds	r2, r3, #1
 8011f5c:	4b04      	ldr	r3, [pc, #16]	; (8011f70 <vPortEnterCritical+0x20>)
 8011f5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8011f60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011f64:	f3bf 8f6f 	isb	sy
}
 8011f68:	46c0      	nop			; (mov r8, r8)
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	46c0      	nop			; (mov r8, r8)
 8011f70:	2000007c 	.word	0x2000007c

08011f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011f78:	4b09      	ldr	r3, [pc, #36]	; (8011fa0 <vPortExitCritical+0x2c>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d101      	bne.n	8011f84 <vPortExitCritical+0x10>
 8011f80:	b672      	cpsid	i
 8011f82:	e7fe      	b.n	8011f82 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8011f84:	4b06      	ldr	r3, [pc, #24]	; (8011fa0 <vPortExitCritical+0x2c>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	1e5a      	subs	r2, r3, #1
 8011f8a:	4b05      	ldr	r3, [pc, #20]	; (8011fa0 <vPortExitCritical+0x2c>)
 8011f8c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8011f8e:	4b04      	ldr	r3, [pc, #16]	; (8011fa0 <vPortExitCritical+0x2c>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d100      	bne.n	8011f98 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8011f96:	b662      	cpsie	i
	}
}
 8011f98:	46c0      	nop			; (mov r8, r8)
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	46c0      	nop			; (mov r8, r8)
 8011fa0:	2000007c 	.word	0x2000007c

08011fa4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8011fa4:	f3ef 8010 	mrs	r0, PRIMASK
 8011fa8:	b672      	cpsid	i
 8011faa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8011fac:	46c0      	nop			; (mov r8, r8)
 8011fae:	0018      	movs	r0, r3

08011fb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8011fb0:	f380 8810 	msr	PRIMASK, r0
 8011fb4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8011fb6:	46c0      	nop			; (mov r8, r8)
	...

08011fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011fc0:	f3ef 8009 	mrs	r0, PSP
 8011fc4:	4b0e      	ldr	r3, [pc, #56]	; (8012000 <pxCurrentTCBConst>)
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	3820      	subs	r0, #32
 8011fca:	6010      	str	r0, [r2, #0]
 8011fcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011fce:	4644      	mov	r4, r8
 8011fd0:	464d      	mov	r5, r9
 8011fd2:	4656      	mov	r6, sl
 8011fd4:	465f      	mov	r7, fp
 8011fd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011fd8:	b508      	push	{r3, lr}
 8011fda:	b672      	cpsid	i
 8011fdc:	f7ff fc58 	bl	8011890 <vTaskSwitchContext>
 8011fe0:	b662      	cpsie	i
 8011fe2:	bc0c      	pop	{r2, r3}
 8011fe4:	6811      	ldr	r1, [r2, #0]
 8011fe6:	6808      	ldr	r0, [r1, #0]
 8011fe8:	3010      	adds	r0, #16
 8011fea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011fec:	46a0      	mov	r8, r4
 8011fee:	46a9      	mov	r9, r5
 8011ff0:	46b2      	mov	sl, r6
 8011ff2:	46bb      	mov	fp, r7
 8011ff4:	f380 8809 	msr	PSP, r0
 8011ff8:	3820      	subs	r0, #32
 8011ffa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011ffc:	4718      	bx	r3
 8011ffe:	46c0      	nop			; (mov r8, r8)

08012000 <pxCurrentTCBConst>:
 8012000:	20000b28 	.word	0x20000b28
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8012004:	46c0      	nop			; (mov r8, r8)
 8012006:	46c0      	nop			; (mov r8, r8)

08012008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801200e:	f7ff ffc9 	bl	8011fa4 <ulSetInterruptMaskFromISR>
 8012012:	0003      	movs	r3, r0
 8012014:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012016:	f7ff fb8b 	bl	8011730 <xTaskIncrementTick>
 801201a:	1e03      	subs	r3, r0, #0
 801201c:	d003      	beq.n	8012026 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801201e:	4b06      	ldr	r3, [pc, #24]	; (8012038 <xPortSysTickHandler+0x30>)
 8012020:	2280      	movs	r2, #128	; 0x80
 8012022:	0552      	lsls	r2, r2, #21
 8012024:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	0018      	movs	r0, r3
 801202a:	f7ff ffc1 	bl	8011fb0 <vClearInterruptMaskFromISR>
}
 801202e:	46c0      	nop			; (mov r8, r8)
 8012030:	46bd      	mov	sp, r7
 8012032:	b002      	add	sp, #8
 8012034:	bd80      	pop	{r7, pc}
 8012036:	46c0      	nop			; (mov r8, r8)
 8012038:	e000ed04 	.word	0xe000ed04

0801203c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801203c:	b580      	push	{r7, lr}
 801203e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012040:	4b0b      	ldr	r3, [pc, #44]	; (8012070 <vPortSetupTimerInterrupt+0x34>)
 8012042:	2200      	movs	r2, #0
 8012044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012046:	4b0b      	ldr	r3, [pc, #44]	; (8012074 <vPortSetupTimerInterrupt+0x38>)
 8012048:	2200      	movs	r2, #0
 801204a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801204c:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <vPortSetupTimerInterrupt+0x3c>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	22fa      	movs	r2, #250	; 0xfa
 8012052:	0091      	lsls	r1, r2, #2
 8012054:	0018      	movs	r0, r3
 8012056:	f7f4 f985 	bl	8006364 <__udivsi3>
 801205a:	0003      	movs	r3, r0
 801205c:	001a      	movs	r2, r3
 801205e:	4b07      	ldr	r3, [pc, #28]	; (801207c <vPortSetupTimerInterrupt+0x40>)
 8012060:	3a01      	subs	r2, #1
 8012062:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8012064:	4b02      	ldr	r3, [pc, #8]	; (8012070 <vPortSetupTimerInterrupt+0x34>)
 8012066:	2207      	movs	r2, #7
 8012068:	601a      	str	r2, [r3, #0]
}
 801206a:	46c0      	nop			; (mov r8, r8)
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	e000e010 	.word	0xe000e010
 8012074:	e000e018 	.word	0xe000e018
 8012078:	20000004 	.word	0x20000004
 801207c:	e000e014 	.word	0xe000e014

08012080 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012088:	2300      	movs	r3, #0
 801208a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801208c:	f7ff fab8 	bl	8011600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012090:	4b4b      	ldr	r3, [pc, #300]	; (80121c0 <pvPortMalloc+0x140>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d101      	bne.n	801209c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012098:	f000 f8ec 	bl	8012274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801209c:	4b49      	ldr	r3, [pc, #292]	; (80121c4 <pvPortMalloc+0x144>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	4013      	ands	r3, r2
 80120a4:	d000      	beq.n	80120a8 <pvPortMalloc+0x28>
 80120a6:	e07e      	b.n	80121a6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d012      	beq.n	80120d4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80120ae:	2208      	movs	r2, #8
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	189b      	adds	r3, r3, r2
 80120b4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2207      	movs	r2, #7
 80120ba:	4013      	ands	r3, r2
 80120bc:	d00a      	beq.n	80120d4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2207      	movs	r2, #7
 80120c2:	4393      	bics	r3, r2
 80120c4:	3308      	adds	r3, #8
 80120c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2207      	movs	r2, #7
 80120cc:	4013      	ands	r3, r2
 80120ce:	d001      	beq.n	80120d4 <pvPortMalloc+0x54>
 80120d0:	b672      	cpsid	i
 80120d2:	e7fe      	b.n	80120d2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d065      	beq.n	80121a6 <pvPortMalloc+0x126>
 80120da:	4b3b      	ldr	r3, [pc, #236]	; (80121c8 <pvPortMalloc+0x148>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d860      	bhi.n	80121a6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80120e4:	4b39      	ldr	r3, [pc, #228]	; (80121cc <pvPortMalloc+0x14c>)
 80120e6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80120e8:	4b38      	ldr	r3, [pc, #224]	; (80121cc <pvPortMalloc+0x14c>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80120ee:	e004      	b.n	80120fa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	687a      	ldr	r2, [r7, #4]
 8012100:	429a      	cmp	r2, r3
 8012102:	d903      	bls.n	801210c <pvPortMalloc+0x8c>
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d1f1      	bne.n	80120f0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801210c:	4b2c      	ldr	r3, [pc, #176]	; (80121c0 <pvPortMalloc+0x140>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	697a      	ldr	r2, [r7, #20]
 8012112:	429a      	cmp	r2, r3
 8012114:	d047      	beq.n	80121a6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2208      	movs	r2, #8
 801211c:	189b      	adds	r3, r3, r2
 801211e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	685a      	ldr	r2, [r3, #4]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	1ad2      	subs	r2, r2, r3
 8012130:	2308      	movs	r3, #8
 8012132:	005b      	lsls	r3, r3, #1
 8012134:	429a      	cmp	r2, r3
 8012136:	d916      	bls.n	8012166 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012138:	697a      	ldr	r2, [r7, #20]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	18d3      	adds	r3, r2, r3
 801213e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	2207      	movs	r2, #7
 8012144:	4013      	ands	r3, r2
 8012146:	d001      	beq.n	801214c <pvPortMalloc+0xcc>
 8012148:	b672      	cpsid	i
 801214a:	e7fe      	b.n	801214a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	685a      	ldr	r2, [r3, #4]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	1ad2      	subs	r2, r2, r3
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	687a      	ldr	r2, [r7, #4]
 801215c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	0018      	movs	r0, r3
 8012162:	f000 f8e7 	bl	8012334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012166:	4b18      	ldr	r3, [pc, #96]	; (80121c8 <pvPortMalloc+0x148>)
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	1ad2      	subs	r2, r2, r3
 8012170:	4b15      	ldr	r3, [pc, #84]	; (80121c8 <pvPortMalloc+0x148>)
 8012172:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012174:	4b14      	ldr	r3, [pc, #80]	; (80121c8 <pvPortMalloc+0x148>)
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	4b15      	ldr	r3, [pc, #84]	; (80121d0 <pvPortMalloc+0x150>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	429a      	cmp	r2, r3
 801217e:	d203      	bcs.n	8012188 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012180:	4b11      	ldr	r3, [pc, #68]	; (80121c8 <pvPortMalloc+0x148>)
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	4b12      	ldr	r3, [pc, #72]	; (80121d0 <pvPortMalloc+0x150>)
 8012186:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	685a      	ldr	r2, [r3, #4]
 801218c:	4b0d      	ldr	r3, [pc, #52]	; (80121c4 <pvPortMalloc+0x144>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	431a      	orrs	r2, r3
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	2200      	movs	r2, #0
 801219a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801219c:	4b0d      	ldr	r3, [pc, #52]	; (80121d4 <pvPortMalloc+0x154>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	1c5a      	adds	r2, r3, #1
 80121a2:	4b0c      	ldr	r3, [pc, #48]	; (80121d4 <pvPortMalloc+0x154>)
 80121a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80121a6:	f7ff fa37 	bl	8011618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2207      	movs	r2, #7
 80121ae:	4013      	ands	r3, r2
 80121b0:	d001      	beq.n	80121b6 <pvPortMalloc+0x136>
 80121b2:	b672      	cpsid	i
 80121b4:	e7fe      	b.n	80121b4 <pvPortMalloc+0x134>
	return pvReturn;
 80121b6:	68fb      	ldr	r3, [r7, #12]
}
 80121b8:	0018      	movs	r0, r3
 80121ba:	46bd      	mov	sp, r7
 80121bc:	b006      	add	sp, #24
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	200027b4 	.word	0x200027b4
 80121c4:	200027c8 	.word	0x200027c8
 80121c8:	200027b8 	.word	0x200027b8
 80121cc:	200027ac 	.word	0x200027ac
 80121d0:	200027bc 	.word	0x200027bc
 80121d4:	200027c0 	.word	0x200027c0

080121d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d03a      	beq.n	8012260 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80121ea:	2308      	movs	r3, #8
 80121ec:	425b      	negs	r3, r3
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	18d3      	adds	r3, r2, r3
 80121f2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	685a      	ldr	r2, [r3, #4]
 80121fc:	4b1a      	ldr	r3, [pc, #104]	; (8012268 <vPortFree+0x90>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4013      	ands	r3, r2
 8012202:	d101      	bne.n	8012208 <vPortFree+0x30>
 8012204:	b672      	cpsid	i
 8012206:	e7fe      	b.n	8012206 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d001      	beq.n	8012214 <vPortFree+0x3c>
 8012210:	b672      	cpsid	i
 8012212:	e7fe      	b.n	8012212 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	685a      	ldr	r2, [r3, #4]
 8012218:	4b13      	ldr	r3, [pc, #76]	; (8012268 <vPortFree+0x90>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	4013      	ands	r3, r2
 801221e:	d01f      	beq.n	8012260 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d11b      	bne.n	8012260 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	685a      	ldr	r2, [r3, #4]
 801222c:	4b0e      	ldr	r3, [pc, #56]	; (8012268 <vPortFree+0x90>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	43db      	mvns	r3, r3
 8012232:	401a      	ands	r2, r3
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012238:	f7ff f9e2 	bl	8011600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	685a      	ldr	r2, [r3, #4]
 8012240:	4b0a      	ldr	r3, [pc, #40]	; (801226c <vPortFree+0x94>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	18d2      	adds	r2, r2, r3
 8012246:	4b09      	ldr	r3, [pc, #36]	; (801226c <vPortFree+0x94>)
 8012248:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	0018      	movs	r0, r3
 801224e:	f000 f871 	bl	8012334 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012252:	4b07      	ldr	r3, [pc, #28]	; (8012270 <vPortFree+0x98>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	1c5a      	adds	r2, r3, #1
 8012258:	4b05      	ldr	r3, [pc, #20]	; (8012270 <vPortFree+0x98>)
 801225a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 801225c:	f7ff f9dc 	bl	8011618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012260:	46c0      	nop			; (mov r8, r8)
 8012262:	46bd      	mov	sp, r7
 8012264:	b004      	add	sp, #16
 8012266:	bd80      	pop	{r7, pc}
 8012268:	200027c8 	.word	0x200027c8
 801226c:	200027b8 	.word	0x200027b8
 8012270:	200027c4 	.word	0x200027c4

08012274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801227a:	4b27      	ldr	r3, [pc, #156]	; (8012318 <prvHeapInit+0xa4>)
 801227c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801227e:	4b27      	ldr	r3, [pc, #156]	; (801231c <prvHeapInit+0xa8>)
 8012280:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2207      	movs	r2, #7
 8012286:	4013      	ands	r3, r2
 8012288:	d00c      	beq.n	80122a4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	3307      	adds	r3, #7
 801228e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2207      	movs	r2, #7
 8012294:	4393      	bics	r3, r2
 8012296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012298:	68ba      	ldr	r2, [r7, #8]
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	1ad2      	subs	r2, r2, r3
 801229e:	4b1f      	ldr	r3, [pc, #124]	; (801231c <prvHeapInit+0xa8>)
 80122a0:	18d3      	adds	r3, r2, r3
 80122a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80122a8:	4b1d      	ldr	r3, [pc, #116]	; (8012320 <prvHeapInit+0xac>)
 80122aa:	687a      	ldr	r2, [r7, #4]
 80122ac:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80122ae:	4b1c      	ldr	r3, [pc, #112]	; (8012320 <prvHeapInit+0xac>)
 80122b0:	2200      	movs	r2, #0
 80122b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	68ba      	ldr	r2, [r7, #8]
 80122b8:	18d3      	adds	r3, r2, r3
 80122ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80122bc:	2208      	movs	r2, #8
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	1a9b      	subs	r3, r3, r2
 80122c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2207      	movs	r2, #7
 80122c8:	4393      	bics	r3, r2
 80122ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80122cc:	68fa      	ldr	r2, [r7, #12]
 80122ce:	4b15      	ldr	r3, [pc, #84]	; (8012324 <prvHeapInit+0xb0>)
 80122d0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80122d2:	4b14      	ldr	r3, [pc, #80]	; (8012324 <prvHeapInit+0xb0>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2200      	movs	r2, #0
 80122d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80122da:	4b12      	ldr	r3, [pc, #72]	; (8012324 <prvHeapInit+0xb0>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2200      	movs	r2, #0
 80122e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	1ad2      	subs	r2, r2, r3
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80122f0:	4b0c      	ldr	r3, [pc, #48]	; (8012324 <prvHeapInit+0xb0>)
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	685a      	ldr	r2, [r3, #4]
 80122fc:	4b0a      	ldr	r3, [pc, #40]	; (8012328 <prvHeapInit+0xb4>)
 80122fe:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	685a      	ldr	r2, [r3, #4]
 8012304:	4b09      	ldr	r3, [pc, #36]	; (801232c <prvHeapInit+0xb8>)
 8012306:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012308:	4b09      	ldr	r3, [pc, #36]	; (8012330 <prvHeapInit+0xbc>)
 801230a:	2280      	movs	r2, #128	; 0x80
 801230c:	0612      	lsls	r2, r2, #24
 801230e:	601a      	str	r2, [r3, #0]
}
 8012310:	46c0      	nop			; (mov r8, r8)
 8012312:	46bd      	mov	sp, r7
 8012314:	b004      	add	sp, #16
 8012316:	bd80      	pop	{r7, pc}
 8012318:	00001b58 	.word	0x00001b58
 801231c:	20000c54 	.word	0x20000c54
 8012320:	200027ac 	.word	0x200027ac
 8012324:	200027b4 	.word	0x200027b4
 8012328:	200027bc 	.word	0x200027bc
 801232c:	200027b8 	.word	0x200027b8
 8012330:	200027c8 	.word	0x200027c8

08012334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801233c:	4b27      	ldr	r3, [pc, #156]	; (80123dc <prvInsertBlockIntoFreeList+0xa8>)
 801233e:	60fb      	str	r3, [r7, #12]
 8012340:	e002      	b.n	8012348 <prvInsertBlockIntoFreeList+0x14>
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	60fb      	str	r3, [r7, #12]
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	429a      	cmp	r2, r3
 8012350:	d8f7      	bhi.n	8012342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	68ba      	ldr	r2, [r7, #8]
 801235c:	18d3      	adds	r3, r2, r3
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	429a      	cmp	r2, r3
 8012362:	d108      	bne.n	8012376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	685a      	ldr	r2, [r3, #4]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	18d2      	adds	r2, r2, r3
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	68ba      	ldr	r2, [r7, #8]
 8012380:	18d2      	adds	r2, r2, r3
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	429a      	cmp	r2, r3
 8012388:	d118      	bne.n	80123bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	4b14      	ldr	r3, [pc, #80]	; (80123e0 <prvInsertBlockIntoFreeList+0xac>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	429a      	cmp	r2, r3
 8012394:	d00d      	beq.n	80123b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	685a      	ldr	r2, [r3, #4]
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	18d2      	adds	r2, r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	601a      	str	r2, [r3, #0]
 80123b0:	e008      	b.n	80123c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80123b2:	4b0b      	ldr	r3, [pc, #44]	; (80123e0 <prvInsertBlockIntoFreeList+0xac>)
 80123b4:	681a      	ldr	r2, [r3, #0]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	e003      	b.n	80123c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d002      	beq.n	80123d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123d2:	46c0      	nop			; (mov r8, r8)
 80123d4:	46bd      	mov	sp, r7
 80123d6:	b004      	add	sp, #16
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	46c0      	nop			; (mov r8, r8)
 80123dc:	200027ac 	.word	0x200027ac
 80123e0:	200027b4 	.word	0x200027b4

080123e4 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 80123e8:	f7fc fe24 	bl	800f034 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 80123ec:	f000 f830 	bl	8012450 <USBPD_DPM_InitCore>
 80123f0:	1e03      	subs	r3, r0, #0
 80123f2:	d000      	beq.n	80123f6 <MX_USBPD_Init+0x12>
  {
    while(1);
 80123f4:	e7fe      	b.n	80123f4 <MX_USBPD_Init+0x10>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 80123f6:	4b0a      	ldr	r3, [pc, #40]	; (8012420 <MX_USBPD_Init+0x3c>)
 80123f8:	4a0a      	ldr	r2, [pc, #40]	; (8012424 <MX_USBPD_Init+0x40>)
 80123fa:	490b      	ldr	r1, [pc, #44]	; (8012428 <MX_USBPD_Init+0x44>)
 80123fc:	480b      	ldr	r0, [pc, #44]	; (801242c <MX_USBPD_Init+0x48>)
 80123fe:	f002 ff73 	bl	80152e8 <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8012402:	f000 fcc1 	bl	8012d88 <USBPD_DPM_UserInit>
 8012406:	1e03      	subs	r3, r0, #0
 8012408:	d000      	beq.n	801240c <MX_USBPD_Init+0x28>
  {
    while(1);
 801240a:	e7fe      	b.n	801240a <MX_USBPD_Init+0x26>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801240c:	f000 f8f8 	bl	8012600 <USBPD_DPM_InitOS>
 8012410:	1e03      	subs	r3, r0, #0
 8012412:	d000      	beq.n	8012416 <MX_USBPD_Init+0x32>
  {
    while(1);
 8012414:	e7fe      	b.n	8012414 <MX_USBPD_Init+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 8012416:	b662      	cpsie	i
}
 8012418:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801241a:	46c0      	nop			; (mov r8, r8)
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}
 8012420:	0800fc6d 	.word	0x0800fc6d
 8012424:	0800fc45 	.word	0x0800fc45
 8012428:	08012441 	.word	0x08012441
 801242c:	08012431 	.word	0x08012431

08012430 <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 8012434:	4b01      	ldr	r3, [pc, #4]	; (801243c <BSP_GetBoardName+0xc>)
}
 8012436:	0018      	movs	r0, r3
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	08019fa0 	.word	0x08019fa0

08012440 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 8012444:	4b01      	ldr	r3, [pc, #4]	; (801244c <BSP_GetBoardID+0xc>)
}
 8012446:	0018      	movs	r0, r3
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	08019fac 	.word	0x08019fac

08012450 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8012450:	b5b0      	push	{r4, r5, r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8012456:	1dfb      	adds	r3, r7, #7
 8012458:	2200      	movs	r2, #0
 801245a:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 801245c:	4b63      	ldr	r3, [pc, #396]	; (80125ec <USBPD_DPM_InitCore+0x19c>)
 801245e:	0018      	movs	r0, r3
 8012460:	f7ef f890 	bl	8001584 <USBPD_PE_CheckLIB>
 8012464:	0003      	movs	r3, r0
 8012466:	2b01      	cmp	r3, #1
 8012468:	d003      	beq.n	8012472 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 801246a:	1dfb      	adds	r3, r7, #7
 801246c:	2202      	movs	r2, #2
 801246e:	701a      	strb	r2, [r3, #0]
    goto error;
 8012470:	e0b6      	b.n	80125e0 <USBPD_DPM_InitCore+0x190>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8012472:	f7ef f895 	bl	80015a0 <USBPD_PE_GetMemoryConsumption>
 8012476:	0003      	movs	r3, r0
 8012478:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 801247a:	f7fa fe99 	bl	800d1b0 <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801247e:	1dbb      	adds	r3, r7, #6
 8012480:	2200      	movs	r2, #0
 8012482:	701a      	strb	r2, [r3, #0]
 8012484:	e0a6      	b.n	80125d4 <USBPD_DPM_InitCore+0x184>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8012486:	1dbb      	adds	r3, r7, #6
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	4a59      	ldr	r2, [pc, #356]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	18d3      	adds	r3, r2, r3
 8012490:	785a      	ldrb	r2, [r3, #1]
 8012492:	2108      	movs	r1, #8
 8012494:	438a      	bics	r2, r1
 8012496:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8012498:	1dbb      	adds	r3, r7, #6
 801249a:	781a      	ldrb	r2, [r3, #0]
 801249c:	1dbb      	adds	r3, r7, #6
 801249e:	7818      	ldrb	r0, [r3, #0]
 80124a0:	4954      	ldr	r1, [pc, #336]	; (80125f4 <USBPD_DPM_InitCore+0x1a4>)
 80124a2:	0013      	movs	r3, r2
 80124a4:	005b      	lsls	r3, r3, #1
 80124a6:	189b      	adds	r3, r3, r2
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	18cb      	adds	r3, r1, r3
 80124ac:	791b      	ldrb	r3, [r3, #4]
 80124ae:	079b      	lsls	r3, r3, #30
 80124b0:	0f9b      	lsrs	r3, r3, #30
 80124b2:	b2d9      	uxtb	r1, r3
 80124b4:	4b4e      	ldr	r3, [pc, #312]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 80124b6:	0082      	lsls	r2, r0, #2
 80124b8:	2003      	movs	r0, #3
 80124ba:	4001      	ands	r1, r0
 80124bc:	000c      	movs	r4, r1
 80124be:	5cd1      	ldrb	r1, [r2, r3]
 80124c0:	2003      	movs	r0, #3
 80124c2:	4381      	bics	r1, r0
 80124c4:	1c08      	adds	r0, r1, #0
 80124c6:	1c21      	adds	r1, r4, #0
 80124c8:	4301      	orrs	r1, r0
 80124ca:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 80124cc:	1dbb      	adds	r3, r7, #6
 80124ce:	781a      	ldrb	r2, [r3, #0]
 80124d0:	1dbb      	adds	r3, r7, #6
 80124d2:	7818      	ldrb	r0, [r3, #0]
 80124d4:	4947      	ldr	r1, [pc, #284]	; (80125f4 <USBPD_DPM_InitCore+0x1a4>)
 80124d6:	0013      	movs	r3, r2
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	189b      	adds	r3, r3, r2
 80124dc:	009b      	lsls	r3, r3, #2
 80124de:	18cb      	adds	r3, r1, r3
 80124e0:	791b      	ldrb	r3, [r3, #4]
 80124e2:	075b      	lsls	r3, r3, #29
 80124e4:	0fdb      	lsrs	r3, r3, #31
 80124e6:	b2d9      	uxtb	r1, r3
 80124e8:	4b41      	ldr	r3, [pc, #260]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 80124ea:	0082      	lsls	r2, r0, #2
 80124ec:	2001      	movs	r0, #1
 80124ee:	4001      	ands	r1, r0
 80124f0:	008c      	lsls	r4, r1, #2
 80124f2:	5cd1      	ldrb	r1, [r2, r3]
 80124f4:	2004      	movs	r0, #4
 80124f6:	4381      	bics	r1, r0
 80124f8:	1c08      	adds	r0, r1, #0
 80124fa:	1c21      	adds	r1, r4, #0
 80124fc:	4301      	orrs	r1, r0
 80124fe:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8012500:	1dbb      	adds	r3, r7, #6
 8012502:	781a      	ldrb	r2, [r3, #0]
 8012504:	4b3a      	ldr	r3, [pc, #232]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 8012506:	0092      	lsls	r2, r2, #2
 8012508:	5cd1      	ldrb	r1, [r2, r3]
 801250a:	2010      	movs	r0, #16
 801250c:	4381      	bics	r1, r0
 801250e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8012510:	1dbb      	adds	r3, r7, #6
 8012512:	781a      	ldrb	r2, [r3, #0]
 8012514:	4b36      	ldr	r3, [pc, #216]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 8012516:	0092      	lsls	r2, r2, #2
 8012518:	5cd1      	ldrb	r1, [r2, r3]
 801251a:	203f      	movs	r0, #63	; 0x3f
 801251c:	4001      	ands	r1, r0
 801251e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8012520:	1dbb      	adds	r3, r7, #6
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	4a32      	ldr	r2, [pc, #200]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	18d3      	adds	r3, r2, r3
 801252a:	785a      	ldrb	r2, [r3, #1]
 801252c:	2160      	movs	r1, #96	; 0x60
 801252e:	438a      	bics	r2, r1
 8012530:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8012532:	1dbb      	adds	r3, r7, #6
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	4a2e      	ldr	r2, [pc, #184]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	18d3      	adds	r3, r2, r3
 801253c:	785a      	ldrb	r2, [r3, #1]
 801253e:	217f      	movs	r1, #127	; 0x7f
 8012540:	400a      	ands	r2, r1
 8012542:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 8012544:	1dbb      	adds	r3, r7, #6
 8012546:	781a      	ldrb	r2, [r3, #0]
 8012548:	0013      	movs	r3, r2
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	189b      	adds	r3, r3, r2
 801254e:	009b      	lsls	r3, r3, #2
 8012550:	4a28      	ldr	r2, [pc, #160]	; (80125f4 <USBPD_DPM_InitCore+0x1a4>)
 8012552:	189c      	adds	r4, r3, r2
 8012554:	1dbb      	adds	r3, r7, #6
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	009a      	lsls	r2, r3, #2
 801255a:	4b25      	ldr	r3, [pc, #148]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 801255c:	18d2      	adds	r2, r2, r3
 801255e:	4926      	ldr	r1, [pc, #152]	; (80125f8 <USBPD_DPM_InitCore+0x1a8>)
 8012560:	1dbb      	adds	r3, r7, #6
 8012562:	7818      	ldrb	r0, [r3, #0]
 8012564:	0013      	movs	r3, r2
 8012566:	0022      	movs	r2, r4
 8012568:	f7ed fdce 	bl	8000108 <USBPD_CAD_Init>
 801256c:	1e03      	subs	r3, r0, #0
 801256e:	d003      	beq.n	8012578 <USBPD_DPM_InitCore+0x128>
 8012570:	1dfb      	adds	r3, r7, #7
 8012572:	2202      	movs	r2, #2
 8012574:	701a      	strb	r2, [r3, #0]
 8012576:	e033      	b.n	80125e0 <USBPD_DPM_InitCore+0x190>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8012578:	1dbb      	adds	r3, r7, #6
 801257a:	781a      	ldrb	r2, [r3, #0]
 801257c:	0013      	movs	r3, r2
 801257e:	005b      	lsls	r3, r3, #1
 8012580:	189b      	adds	r3, r3, r2
 8012582:	009b      	lsls	r3, r3, #2
 8012584:	4a1b      	ldr	r2, [pc, #108]	; (80125f4 <USBPD_DPM_InitCore+0x1a4>)
 8012586:	1899      	adds	r1, r3, r2
 8012588:	1dbb      	adds	r3, r7, #6
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	009a      	lsls	r2, r3, #2
 801258e:	4b18      	ldr	r3, [pc, #96]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 8012590:	18d2      	adds	r2, r2, r3
 8012592:	1dfc      	adds	r4, r7, #7
 8012594:	4d19      	ldr	r5, [pc, #100]	; (80125fc <USBPD_DPM_InitCore+0x1ac>)
 8012596:	1dbb      	adds	r3, r7, #6
 8012598:	7818      	ldrb	r0, [r3, #0]
 801259a:	002b      	movs	r3, r5
 801259c:	f7ed fee6 	bl	800036c <USBPD_PE_Init>
 80125a0:	0003      	movs	r3, r0
 80125a2:	7023      	strb	r3, [r4, #0]
 80125a4:	1dfb      	adds	r3, r7, #7
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d119      	bne.n	80125e0 <USBPD_DPM_InitCore+0x190>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 80125ac:	1dbb      	adds	r3, r7, #6
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	4a0f      	ldr	r2, [pc, #60]	; (80125f0 <USBPD_DPM_InitCore+0x1a0>)
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	18d3      	adds	r3, r2, r3
 80125b6:	785a      	ldrb	r2, [r3, #1]
 80125b8:	2108      	movs	r1, #8
 80125ba:	430a      	orrs	r2, r1
 80125bc:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 80125be:	1dbb      	adds	r3, r7, #6
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	2101      	movs	r1, #1
 80125c4:	0018      	movs	r0, r3
 80125c6:	f7ed fe07 	bl	80001d8 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 80125ca:	1dbb      	adds	r3, r7, #6
 80125cc:	1dba      	adds	r2, r7, #6
 80125ce:	7812      	ldrb	r2, [r2, #0]
 80125d0:	3201      	adds	r2, #1
 80125d2:	701a      	strb	r2, [r3, #0]
 80125d4:	1dbb      	adds	r3, r7, #6
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d100      	bne.n	80125de <USBPD_DPM_InitCore+0x18e>
 80125dc:	e753      	b.n	8012486 <USBPD_DPM_InitCore+0x36>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 80125de:	46c0      	nop			; (mov r8, r8)
  return _retr;
 80125e0:	1dfb      	adds	r3, r7, #7
 80125e2:	781b      	ldrb	r3, [r3, #0]
}
 80125e4:	0018      	movs	r0, r3
 80125e6:	46bd      	mov	sp, r7
 80125e8:	b002      	add	sp, #8
 80125ea:	bdb0      	pop	{r4, r5, r7, pc}
 80125ec:	30410000 	.word	0x30410000
 80125f0:	200027dc 	.word	0x200027dc
 80125f4:	20000080 	.word	0x20000080
 80125f8:	0801a814 	.word	0x0801a814
 80125fc:	0801a81c 	.word	0x0801a81c

08012600 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8012600:	b5b0      	push	{r4, r5, r7, lr}
 8012602:	b090      	sub	sp, #64	; 0x40
 8012604:	af00      	add	r7, sp, #0
  OS_INIT();
 8012606:	243f      	movs	r4, #63	; 0x3f
 8012608:	193b      	adds	r3, r7, r4
 801260a:	2200      	movs	r2, #0
 801260c:	701a      	strb	r2, [r3, #0]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 801260e:	2530      	movs	r5, #48	; 0x30
 8012610:	197b      	adds	r3, r7, r5
 8012612:	4a38      	ldr	r2, [pc, #224]	; (80126f4 <USBPD_DPM_InitOS+0xf4>)
 8012614:	ca03      	ldmia	r2!, {r0, r1}
 8012616:	c303      	stmia	r3!, {r0, r1}
 8012618:	197b      	adds	r3, r7, r5
 801261a:	2100      	movs	r1, #0
 801261c:	0018      	movs	r0, r3
 801261e:	f7fd ff18 	bl	8010452 <osMessageCreate>
 8012622:	0002      	movs	r2, r0
 8012624:	4b34      	ldr	r3, [pc, #208]	; (80126f8 <USBPD_DPM_InitOS+0xf8>)
 8012626:	601a      	str	r2, [r3, #0]
 8012628:	4b33      	ldr	r3, [pc, #204]	; (80126f8 <USBPD_DPM_InitOS+0xf8>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d103      	bne.n	8012638 <USBPD_DPM_InitOS+0x38>
 8012630:	193b      	adds	r3, r7, r4
 8012632:	2202      	movs	r2, #2
 8012634:	701a      	strb	r2, [r3, #0]
 8012636:	e056      	b.n	80126e6 <USBPD_DPM_InitOS+0xe6>
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 8012638:	251c      	movs	r5, #28
 801263a:	197b      	adds	r3, r7, r5
 801263c:	4a2f      	ldr	r2, [pc, #188]	; (80126fc <USBPD_DPM_InitOS+0xfc>)
 801263e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012640:	c313      	stmia	r3!, {r0, r1, r4}
 8012642:	ca03      	ldmia	r2!, {r0, r1}
 8012644:	c303      	stmia	r3!, {r0, r1}
 8012646:	197b      	adds	r3, r7, r5
 8012648:	2100      	movs	r1, #0
 801264a:	0018      	movs	r0, r3
 801264c:	f7fd febd 	bl	80103ca <osThreadCreate>
 8012650:	0002      	movs	r2, r0
 8012652:	4b2b      	ldr	r3, [pc, #172]	; (8012700 <USBPD_DPM_InitOS+0x100>)
 8012654:	601a      	str	r2, [r3, #0]
 8012656:	4b2a      	ldr	r3, [pc, #168]	; (8012700 <USBPD_DPM_InitOS+0x100>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d104      	bne.n	8012668 <USBPD_DPM_InitOS+0x68>
 801265e:	233f      	movs	r3, #63	; 0x3f
 8012660:	18fb      	adds	r3, r7, r3
 8012662:	2202      	movs	r2, #2
 8012664:	701a      	strb	r2, [r3, #0]
 8012666:	e03e      	b.n	80126e6 <USBPD_DPM_InitOS+0xe6>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8012668:	2300      	movs	r3, #0
 801266a:	63bb      	str	r3, [r7, #56]	; 0x38
 801266c:	e037      	b.n	80126de <USBPD_DPM_InitOS+0xde>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 801266e:	2414      	movs	r4, #20
 8012670:	193b      	adds	r3, r7, r4
 8012672:	4a20      	ldr	r2, [pc, #128]	; (80126f4 <USBPD_DPM_InitOS+0xf4>)
 8012674:	ca03      	ldmia	r2!, {r0, r1}
 8012676:	c303      	stmia	r3!, {r0, r1}
 8012678:	193b      	adds	r3, r7, r4
 801267a:	2100      	movs	r1, #0
 801267c:	0018      	movs	r0, r3
 801267e:	f7fd fee8 	bl	8010452 <osMessageCreate>
 8012682:	0001      	movs	r1, r0
 8012684:	4b1f      	ldr	r3, [pc, #124]	; (8012704 <USBPD_DPM_InitOS+0x104>)
 8012686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012688:	0092      	lsls	r2, r2, #2
 801268a:	50d1      	str	r1, [r2, r3]
 801268c:	4b1d      	ldr	r3, [pc, #116]	; (8012704 <USBPD_DPM_InitOS+0x104>)
 801268e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012690:	0092      	lsls	r2, r2, #2
 8012692:	58d3      	ldr	r3, [r2, r3]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d104      	bne.n	80126a2 <USBPD_DPM_InitOS+0xa2>
 8012698:	233f      	movs	r3, #63	; 0x3f
 801269a:	18fb      	adds	r3, r7, r3
 801269c:	2202      	movs	r2, #2
 801269e:	701a      	strb	r2, [r3, #0]
 80126a0:	e021      	b.n	80126e6 <USBPD_DPM_InitOS+0xe6>

    if (index == USBPD_PORT_0)
 80126a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d117      	bne.n	80126d8 <USBPD_DPM_InitOS+0xd8>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 80126a8:	003b      	movs	r3, r7
 80126aa:	4a17      	ldr	r2, [pc, #92]	; (8012708 <USBPD_DPM_InitOS+0x108>)
 80126ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80126ae:	c313      	stmia	r3!, {r0, r1, r4}
 80126b0:	ca03      	ldmia	r2!, {r0, r1}
 80126b2:	c303      	stmia	r3!, {r0, r1}
 80126b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126b6:	003b      	movs	r3, r7
 80126b8:	0011      	movs	r1, r2
 80126ba:	0018      	movs	r0, r3
 80126bc:	f7fd fe85 	bl	80103ca <osThreadCreate>
 80126c0:	0002      	movs	r2, r0
 80126c2:	4b12      	ldr	r3, [pc, #72]	; (801270c <USBPD_DPM_InitOS+0x10c>)
 80126c4:	601a      	str	r2, [r3, #0]
 80126c6:	4b11      	ldr	r3, [pc, #68]	; (801270c <USBPD_DPM_InitOS+0x10c>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d104      	bne.n	80126d8 <USBPD_DPM_InitOS+0xd8>
 80126ce:	233f      	movs	r3, #63	; 0x3f
 80126d0:	18fb      	adds	r3, r7, r3
 80126d2:	2202      	movs	r2, #2
 80126d4:	701a      	strb	r2, [r3, #0]
 80126d6:	e006      	b.n	80126e6 <USBPD_DPM_InitOS+0xe6>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 80126d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126da:	3301      	adds	r3, #1
 80126dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80126de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d0c4      	beq.n	801266e <USBPD_DPM_InitOS+0x6e>
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 80126e4:	46c0      	nop			; (mov r8, r8)

  return _retr;
 80126e6:	233f      	movs	r3, #63	; 0x3f
 80126e8:	18fb      	adds	r3, r7, r3
 80126ea:	781b      	ldrb	r3, [r3, #0]
}
 80126ec:	0018      	movs	r0, r3
 80126ee:	46bd      	mov	sp, r7
 80126f0:	b010      	add	sp, #64	; 0x40
 80126f2:	bdb0      	pop	{r4, r5, r7, pc}
 80126f4:	08019fb4 	.word	0x08019fb4
 80126f8:	200027d0 	.word	0x200027d0
 80126fc:	08019fc0 	.word	0x08019fc0
 8012700:	200027d4 	.word	0x200027d4
 8012704:	200027d8 	.word	0x200027d8
 8012708:	08019fdc 	.word	0x08019fdc
 801270c:	200027cc 	.word	0x200027cc

08012710 <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 8012714:	4b09      	ldr	r3, [pc, #36]	; (801273c <USBPD_DPM_TimerCounter+0x2c>)
 8012716:	785b      	ldrb	r3, [r3, #1]
 8012718:	2208      	movs	r2, #8
 801271a:	4013      	ands	r3, r2
 801271c:	b2db      	uxtb	r3, r3
 801271e:	2b00      	cmp	r3, #0
 8012720:	d008      	beq.n	8012734 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 8012722:	2000      	movs	r0, #0
 8012724:	f000 fbbc 	bl	8012ea0 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 8012728:	2000      	movs	r0, #0
 801272a:	f7ed fe7c 	bl	8000426 <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 801272e:	2000      	movs	r0, #0
 8012730:	f7f3 f834 	bl	800579c <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 8012734:	46c0      	nop			; (mov r8, r8)
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}
 801273a:	46c0      	nop			; (mov r8, r8)
 801273c:	200027dc 	.word	0x200027dc

08012740 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	af00      	add	r7, sp, #0
 8012746:	0002      	movs	r2, r0
 8012748:	1dfb      	adds	r3, r7, #7
 801274a:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 801274c:	1dfb      	adds	r3, r7, #7
 801274e:	781a      	ldrb	r2, [r3, #0]
 8012750:	4b05      	ldr	r3, [pc, #20]	; (8012768 <USBPD_PE_TaskWakeUp+0x28>)
 8012752:	0092      	lsls	r2, r2, #2
 8012754:	58d3      	ldr	r3, [r2, r3]
 8012756:	4905      	ldr	r1, [pc, #20]	; (801276c <USBPD_PE_TaskWakeUp+0x2c>)
 8012758:	2200      	movs	r2, #0
 801275a:	0018      	movs	r0, r3
 801275c:	f7fd fe8c 	bl	8010478 <osMessagePut>
}
 8012760:	46c0      	nop			; (mov r8, r8)
 8012762:	46bd      	mov	sp, r7
 8012764:	b002      	add	sp, #8
 8012766:	bd80      	pop	{r7, pc}
 8012768:	200027d8 	.word	0x200027d8
 801276c:	0000ffff 	.word	0x0000ffff

08012770 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 8012774:	4b04      	ldr	r3, [pc, #16]	; (8012788 <USBPD_DPM_CADTaskWakeUp+0x18>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	4904      	ldr	r1, [pc, #16]	; (801278c <USBPD_DPM_CADTaskWakeUp+0x1c>)
 801277a:	2200      	movs	r2, #0
 801277c:	0018      	movs	r0, r3
 801277e:	f7fd fe7b 	bl	8010478 <osMessagePut>
}
 8012782:	46c0      	nop			; (mov r8, r8)
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	200027d0 	.word	0x200027d0
 801278c:	0000ffff 	.word	0x0000ffff

08012790 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 8012790:	b590      	push	{r4, r7, lr}
 8012792:	b089      	sub	sp, #36	; 0x24
 8012794:	af00      	add	r7, sp, #0
 8012796:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 8012798:	697a      	ldr	r2, [r7, #20]
 801279a:	231f      	movs	r3, #31
 801279c:	18fb      	adds	r3, r7, r3
 801279e:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 80127a0:	231f      	movs	r3, #31
 80127a2:	18fb      	adds	r3, r7, r3
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	4a11      	ldr	r2, [pc, #68]	; (80127ec <USBPD_PE_Task+0x5c>)
 80127a8:	009b      	lsls	r3, r3, #2
 80127aa:	18d3      	adds	r3, r2, r3
 80127ac:	785b      	ldrb	r3, [r3, #1]
 80127ae:	06db      	lsls	r3, r3, #27
 80127b0:	0fdb      	lsrs	r3, r3, #31
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d105      	bne.n	80127c4 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 80127b8:	f7fd fe2f 	bl	801041a <osThreadGetId>
 80127bc:	0003      	movs	r3, r0
 80127be:	0018      	movs	r0, r3
 80127c0:	f7fd ff06 	bl	80105d0 <osThreadSuspend>
    }

    _timing = USBPD_PE_StateMachine_SRC(_port);
 80127c4:	241f      	movs	r4, #31
 80127c6:	193b      	adds	r3, r7, r4
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	0018      	movs	r0, r3
 80127cc:	f7f0 fa62 	bl	8002c94 <USBPD_PE_StateMachine_SRC>
 80127d0:	0003      	movs	r3, r0
 80127d2:	61bb      	str	r3, [r7, #24]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 80127d4:	193b      	adds	r3, r7, r4
 80127d6:	781a      	ldrb	r2, [r3, #0]
 80127d8:	4b05      	ldr	r3, [pc, #20]	; (80127f0 <USBPD_PE_Task+0x60>)
 80127da:	0092      	lsls	r2, r2, #2
 80127dc:	58d1      	ldr	r1, [r2, r3]
 80127de:	003b      	movs	r3, r7
 80127e0:	69ba      	ldr	r2, [r7, #24]
 80127e2:	0018      	movs	r0, r3
 80127e4:	f7fd fe84 	bl	80104f0 <osMessageGet>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 80127e8:	e7da      	b.n	80127a0 <USBPD_PE_Task+0x10>
 80127ea:	46c0      	nop			; (mov r8, r8)
 80127ec:	200027dc 	.word	0x200027dc
 80127f0:	200027d8 	.word	0x200027d8

080127f4 <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b088      	sub	sp, #32
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6178      	str	r0, [r7, #20]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 80127fc:	f7ed fcf3 	bl	80001e6 <USBPD_CAD_Process>
 8012800:	0003      	movs	r3, r0
 8012802:	61fb      	str	r3, [r7, #28]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 8012804:	4b03      	ldr	r3, [pc, #12]	; (8012814 <USBPD_CAD_Task+0x20>)
 8012806:	6819      	ldr	r1, [r3, #0]
 8012808:	003b      	movs	r3, r7
 801280a:	69fa      	ldr	r2, [r7, #28]
 801280c:	0018      	movs	r0, r3
 801280e:	f7fd fe6f 	bl	80104f0 <osMessageGet>
    _timing = USBPD_CAD_Process();
 8012812:	e7f3      	b.n	80127fc <USBPD_CAD_Task+0x8>
 8012814:	200027d0 	.word	0x200027d0

08012818 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b086      	sub	sp, #24
 801281c:	af02      	add	r7, sp, #8
 801281e:	603a      	str	r2, [r7, #0]
 8012820:	1dfb      	adds	r3, r7, #7
 8012822:	1c02      	adds	r2, r0, #0
 8012824:	701a      	strb	r2, [r3, #0]
 8012826:	1dbb      	adds	r3, r7, #6
 8012828:	1c0a      	adds	r2, r1, #0
 801282a:	701a      	strb	r2, [r3, #0]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 801282c:	1dbb      	adds	r3, r7, #6
 801282e:	781a      	ldrb	r2, [r3, #0]
 8012830:	1dfb      	adds	r3, r7, #7
 8012832:	7819      	ldrb	r1, [r3, #0]
 8012834:	2300      	movs	r3, #0
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	2300      	movs	r3, #0
 801283a:	2003      	movs	r0, #3
 801283c:	f7fa fcce 	bl	800d1dc <USBPD_TRACE_Add>
 /* _TRACE */
  (void)(Cc);
  switch (State)
 8012840:	1dbb      	adds	r3, r7, #6
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	2b04      	cmp	r3, #4
 8012846:	d009      	beq.n	801285c <USBPD_DPM_CADCallback+0x44>
 8012848:	dd00      	ble.n	801284c <USBPD_DPM_CADCallback+0x34>
 801284a:	e06f      	b.n	801292c <USBPD_DPM_CADCallback+0x114>
 801284c:	2b03      	cmp	r3, #3
 801284e:	d01d      	beq.n	801288c <USBPD_DPM_CADCallback+0x74>
 8012850:	dc6c      	bgt.n	801292c <USBPD_DPM_CADCallback+0x114>
 8012852:	2b01      	cmp	r3, #1
 8012854:	d01a      	beq.n	801288c <USBPD_DPM_CADCallback+0x74>
 8012856:	2b02      	cmp	r3, #2
 8012858:	d00c      	beq.n	8012874 <USBPD_DPM_CADCallback+0x5c>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 801285a:	e067      	b.n	801292c <USBPD_DPM_CADCallback+0x114>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 801285c:	1dfb      	adds	r3, r7, #7
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	2104      	movs	r1, #4
 8012862:	0018      	movs	r0, r3
 8012864:	f000 fab6 	bl	8012dd4 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8012868:	1dfb      	adds	r3, r7, #7
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	0018      	movs	r0, r3
 801286e:	f000 f867 	bl	8012940 <DPM_StartPETask>
      break;
 8012872:	e05c      	b.n	801292e <USBPD_DPM_CADCallback+0x116>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 8012874:	1dfb      	adds	r3, r7, #7
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	2102      	movs	r1, #2
 801287a:	0018      	movs	r0, r3
 801287c:	f000 faaa 	bl	8012dd4 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8012880:	1dfb      	adds	r3, r7, #7
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	0018      	movs	r0, r3
 8012886:	f000 f85b 	bl	8012940 <DPM_StartPETask>
      break;
 801288a:	e050      	b.n	801292e <USBPD_DPM_CADCallback+0x116>
      uint8_t _timeout = 0;
 801288c:	230f      	movs	r3, #15
 801288e:	18fb      	adds	r3, r7, r3
 8012890:	2200      	movs	r2, #0
 8012892:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 8012894:	1dfb      	adds	r3, r7, #7
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	0018      	movs	r0, r3
 801289a:	f7ff ff51 	bl	8012740 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801289e:	e015      	b.n	80128cc <USBPD_DPM_CADCallback+0xb4>
        (void)OS_DELAY(1);
 80128a0:	2001      	movs	r0, #1
 80128a2:	f7fd fdc2 	bl	801042a <osDelay>
        _timeout++;
 80128a6:	210f      	movs	r1, #15
 80128a8:	187b      	adds	r3, r7, r1
 80128aa:	781a      	ldrb	r2, [r3, #0]
 80128ac:	187b      	adds	r3, r7, r1
 80128ae:	3201      	adds	r2, #1
 80128b0:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 80128b2:	187b      	adds	r3, r7, r1
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	2b1e      	cmp	r3, #30
 80128b8:	d908      	bls.n	80128cc <USBPD_DPM_CADCallback+0xb4>
          (void)OS_TASK_SUSPEND(DPM_PEThreadId_Table[PortNum]);
 80128ba:	1dfb      	adds	r3, r7, #7
 80128bc:	781a      	ldrb	r2, [r3, #0]
 80128be:	4b1e      	ldr	r3, [pc, #120]	; (8012938 <USBPD_DPM_CADCallback+0x120>)
 80128c0:	0092      	lsls	r2, r2, #2
 80128c2:	58d3      	ldr	r3, [r2, r3]
 80128c4:	0018      	movs	r0, r3
 80128c6:	f7fd fe83 	bl	80105d0 <osThreadSuspend>
          break;
 80128ca:	e00a      	b.n	80128e2 <USBPD_DPM_CADCallback+0xca>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 80128cc:	1dfb      	adds	r3, r7, #7
 80128ce:	781a      	ldrb	r2, [r3, #0]
 80128d0:	4b19      	ldr	r3, [pc, #100]	; (8012938 <USBPD_DPM_CADCallback+0x120>)
 80128d2:	0092      	lsls	r2, r2, #2
 80128d4:	58d3      	ldr	r3, [r2, r3]
 80128d6:	0018      	movs	r0, r3
 80128d8:	f7fe fcb6 	bl	8011248 <eTaskGetState>
 80128dc:	0003      	movs	r3, r0
 80128de:	2b03      	cmp	r3, #3
 80128e0:	d1de      	bne.n	80128a0 <USBPD_DPM_CADCallback+0x88>
      USBPD_PE_StateMachine_Stop(PortNum);
 80128e2:	1dfb      	adds	r3, r7, #7
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	0018      	movs	r0, r3
 80128e8:	f7ed fe0b 	bl	8000502 <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 80128ec:	1dfb      	adds	r3, r7, #7
 80128ee:	781a      	ldrb	r2, [r3, #0]
 80128f0:	4b12      	ldr	r3, [pc, #72]	; (801293c <USBPD_DPM_CADCallback+0x124>)
 80128f2:	0092      	lsls	r2, r2, #2
 80128f4:	5cd1      	ldrb	r1, [r2, r3]
 80128f6:	2010      	movs	r0, #16
 80128f8:	4381      	bics	r1, r0
 80128fa:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 80128fc:	1dfb      	adds	r3, r7, #7
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	4a0e      	ldr	r2, [pc, #56]	; (801293c <USBPD_DPM_CADCallback+0x124>)
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	18d3      	adds	r3, r2, r3
 8012906:	785a      	ldrb	r2, [r3, #1]
 8012908:	2107      	movs	r1, #7
 801290a:	438a      	bics	r2, r1
 801290c:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801290e:	1dbb      	adds	r3, r7, #6
 8012910:	781a      	ldrb	r2, [r3, #0]
 8012912:	1dfb      	adds	r3, r7, #7
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	0011      	movs	r1, r2
 8012918:	0018      	movs	r0, r3
 801291a:	f000 fa5b 	bl	8012dd4 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 801291e:	1dfb      	adds	r3, r7, #7
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	2169      	movs	r1, #105	; 0x69
 8012924:	0018      	movs	r0, r3
 8012926:	f000 fac5 	bl	8012eb4 <USBPD_DPM_Notification>
      break;
 801292a:	e000      	b.n	801292e <USBPD_DPM_CADCallback+0x116>
      break;
 801292c:	46c0      	nop			; (mov r8, r8)
  }
}
 801292e:	46c0      	nop			; (mov r8, r8)
 8012930:	46bd      	mov	sp, r7
 8012932:	b004      	add	sp, #16
 8012934:	bd80      	pop	{r7, pc}
 8012936:	46c0      	nop			; (mov r8, r8)
 8012938:	200027cc 	.word	0x200027cc
 801293c:	200027dc 	.word	0x200027dc

08012940 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	0002      	movs	r2, r0
 8012948:	1dfb      	adds	r3, r7, #7
 801294a:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 801294c:	1dfb      	adds	r3, r7, #7
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	0018      	movs	r0, r3
 8012952:	f7ed fdd0 	bl	80004f6 <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 8012956:	1dfb      	adds	r3, r7, #7
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	2b01      	cmp	r3, #1
 801295c:	d808      	bhi.n	8012970 <DPM_StartPETask+0x30>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 801295e:	1dfb      	adds	r3, r7, #7
 8012960:	781a      	ldrb	r2, [r3, #0]
 8012962:	4b0a      	ldr	r3, [pc, #40]	; (801298c <DPM_StartPETask+0x4c>)
 8012964:	0092      	lsls	r2, r2, #2
 8012966:	58d3      	ldr	r3, [r2, r3]
 8012968:	0018      	movs	r0, r3
 801296a:	f7fd fe3f 	bl	80105ec <osThreadResume>
      break;
 801296e:	e002      	b.n	8012976 <DPM_StartPETask+0x36>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 8012970:	f000 f80e 	bl	8012990 <USBPD_DPM_ErrorHandler>
      break;
 8012974:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 8012976:	1dfb      	adds	r3, r7, #7
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	2168      	movs	r1, #104	; 0x68
 801297c:	0018      	movs	r0, r3
 801297e:	f000 fa99 	bl	8012eb4 <USBPD_DPM_Notification>
}
 8012982:	46c0      	nop			; (mov r8, r8)
 8012984:	46bd      	mov	sp, r7
 8012986:	b002      	add	sp, #8
 8012988:	bd80      	pop	{r7, pc}
 801298a:	46c0      	nop			; (mov r8, r8)
 801298c:	200027cc 	.word	0x200027cc

08012990 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 8012994:	e7fe      	b.n	8012994 <USBPD_DPM_ErrorHandler+0x4>
	...

08012998 <USBPD_PWR_IF_Init>:
  * @brief  Initialize structures and variables related to power board profiles
  *         used by Sink and Source, for all available ports.
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_Init(void)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_PWR_IF_Init */
	USBPD_StatusTypeDef _status = USBPD_OK;
 801299e:	1dfb      	adds	r3, r7, #7
 80129a0:	2200      	movs	r2, #0
 80129a2:	701a      	strb	r2, [r3, #0]

	/* Set links to PDO values and Port 0 number (defined in PDO arrays in H file). */
	PWR_Port_PDO_Storage[USBPD_PORT_0].SourcePDO.ListOfPDO = (uint32_t *) PORT0_PDO_ListSRC;
 80129a4:	4b05      	ldr	r3, [pc, #20]	; (80129bc <USBPD_PWR_IF_Init+0x24>)
 80129a6:	4a06      	ldr	r2, [pc, #24]	; (80129c0 <USBPD_PWR_IF_Init+0x28>)
 80129a8:	601a      	str	r2, [r3, #0]
	PWR_Port_PDO_Storage[USBPD_PORT_0].SourcePDO.NumberOfPDO = &USBPD_NbPDO[1];
 80129aa:	4b04      	ldr	r3, [pc, #16]	; (80129bc <USBPD_PWR_IF_Init+0x24>)
 80129ac:	4a05      	ldr	r2, [pc, #20]	; (80129c4 <USBPD_PWR_IF_Init+0x2c>)
 80129ae:	605a      	str	r2, [r3, #4]

	return _status;
 80129b0:	1dfb      	adds	r3, r7, #7
 80129b2:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_Init */
}
 80129b4:	0018      	movs	r0, r3
 80129b6:	46bd      	mov	sp, r7
 80129b8:	b002      	add	sp, #8
 80129ba:	bd80      	pop	{r7, pc}
 80129bc:	200027e0 	.word	0x200027e0
 80129c0:	20000108 	.word	0x20000108
 80129c4:	20000105 	.word	0x20000105

080129c8 <USBPD_PWR_IF_SetProfile>:
  * @brief  Sets the required power profile, now it works only with Fixed ones
  * @param  PortNum Port number
  * @retval USBPD status
*/
USBPD_StatusTypeDef USBPD_PWR_IF_SetProfile(uint8_t PortNum)
{
 80129c8:	b590      	push	{r4, r7, lr}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	0002      	movs	r2, r0
 80129d0:	1dfb      	adds	r3, r7, #7
 80129d2:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SetProfile */
	USBPD_PDO_TypeDef        _pdo;
	USBPD_SNKRDO_TypeDef     _rdo;

	_rdo.d32 = DPM_Ports[PortNum].DPM_RcvRequestDOMsg;
 80129d4:	1dfb      	adds	r3, r7, #7
 80129d6:	781a      	ldrb	r2, [r3, #0]
 80129d8:	491b      	ldr	r1, [pc, #108]	; (8012a48 <USBPD_PWR_IF_SetProfile+0x80>)
 80129da:	0013      	movs	r3, r2
 80129dc:	011b      	lsls	r3, r3, #4
 80129de:	1a9b      	subs	r3, r3, r2
 80129e0:	009b      	lsls	r3, r3, #2
 80129e2:	18cb      	adds	r3, r1, r3
 80129e4:	3330      	adds	r3, #48	; 0x30
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	60bb      	str	r3, [r7, #8]
	_pdo.d32 = PORT0_PDO_ListSRC[0];
 80129ea:	4b18      	ldr	r3, [pc, #96]	; (8012a4c <USBPD_PWR_IF_SetProfile+0x84>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	60fb      	str	r3, [r7, #12]

	return (BSP_ERROR_NONE ==BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum,
 80129f0:	1dfb      	adds	r3, r7, #7
 80129f2:	7818      	ldrb	r0, [r3, #0]
																										_pdo.SRCFixedPDO.VoltageIn50mVunits * 50,
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	031b      	lsls	r3, r3, #12
 80129f8:	0d9b      	lsrs	r3, r3, #22
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	001a      	movs	r2, r3
 80129fe:	2332      	movs	r3, #50	; 0x32
 8012a00:	4353      	muls	r3, r2
	return (BSP_ERROR_NONE ==BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum,
 8012a02:	0019      	movs	r1, r3
																										(_rdo.FixedVariableRDO.OperatingCurrentIn10mAunits * 10),
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	031b      	lsls	r3, r3, #12
 8012a08:	0d9b      	lsrs	r3, r3, #22
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	001a      	movs	r2, r3
 8012a0e:	0013      	movs	r3, r2
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	189b      	adds	r3, r3, r2
 8012a14:	005b      	lsls	r3, r3, #1
	return (BSP_ERROR_NONE ==BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum,
 8012a16:	001c      	movs	r4, r3
																										(_rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits * 10)
 8012a18:	2308      	movs	r3, #8
 8012a1a:	18fb      	adds	r3, r7, r3
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	059b      	lsls	r3, r3, #22
 8012a20:	0d9b      	lsrs	r3, r3, #22
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	001a      	movs	r2, r3
 8012a26:	0013      	movs	r3, r2
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	189b      	adds	r3, r3, r2
 8012a2c:	005b      	lsls	r3, r3, #1
	return (BSP_ERROR_NONE ==BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum,
 8012a2e:	0022      	movs	r2, r4
 8012a30:	f7f6 fc5a 	bl	80092e8 <BSP_USBPD_PWR_VBUSSetVoltage_Fixed>
 8012a34:	1e03      	subs	r3, r0, #0
																										)? USBPD_OK : USBPD_ERROR);
 8012a36:	d101      	bne.n	8012a3c <USBPD_PWR_IF_SetProfile+0x74>
 8012a38:	2300      	movs	r3, #0
 8012a3a:	e000      	b.n	8012a3e <USBPD_PWR_IF_SetProfile+0x76>
 8012a3c:	2302      	movs	r3, #2
/* USER CODE END USBPD_PWR_IF_SetProfile */
}
 8012a3e:	0018      	movs	r0, r3
 8012a40:	46bd      	mov	sp, r7
 8012a42:	b005      	add	sp, #20
 8012a44:	bd90      	pop	{r4, r7, pc}
 8012a46:	46c0      	nop			; (mov r8, r8)
 8012a48:	200027f4 	.word	0x200027f4
 8012a4c:	20000108 	.word	0x20000108

08012a50 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	0002      	movs	r2, r0
 8012a58:	1dfb      	adds	r3, r7, #7
 8012a5a:	701a      	strb	r2, [r3, #0]
 8012a5c:	1dbb      	adds	r3, r7, #6
 8012a5e:	1c0a      	adds	r2, r1, #0
 8012a60:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8012a62:	230f      	movs	r3, #15
 8012a64:	18fb      	adds	r3, r7, r3
 8012a66:	2202      	movs	r2, #2
 8012a68:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8012a6a:	1dfb      	adds	r3, r7, #7
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d001      	beq.n	8012a76 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 8012a72:	2302      	movs	r3, #2
 8012a74:	e024      	b.n	8012ac0 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8012a76:	1dfb      	adds	r3, r7, #7
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	2208      	movs	r2, #8
 8012a7c:	18ba      	adds	r2, r7, r2
 8012a7e:	0011      	movs	r1, r2
 8012a80:	0018      	movs	r0, r3
 8012a82:	f7f6 fc67 	bl	8009354 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8012a86:	1dbb      	adds	r3, r7, #6
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d10a      	bne.n	8012aa4 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	4a0d      	ldr	r2, [pc, #52]	; (8012ac8 <USBPD_PWR_IF_SupplyReady+0x78>)
 8012a92:	4293      	cmp	r3, r2
 8012a94:	d801      	bhi.n	8012a9a <USBPD_PWR_IF_SupplyReady+0x4a>
 8012a96:	2200      	movs	r2, #0
 8012a98:	e000      	b.n	8012a9c <USBPD_PWR_IF_SupplyReady+0x4c>
 8012a9a:	2202      	movs	r2, #2
 8012a9c:	230f      	movs	r3, #15
 8012a9e:	18fb      	adds	r3, r7, r3
 8012aa0:	701a      	strb	r2, [r3, #0]
 8012aa2:	e00a      	b.n	8012aba <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8012aa4:	68ba      	ldr	r2, [r7, #8]
 8012aa6:	23af      	movs	r3, #175	; 0xaf
 8012aa8:	011b      	lsls	r3, r3, #4
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d901      	bls.n	8012ab2 <USBPD_PWR_IF_SupplyReady+0x62>
 8012aae:	2200      	movs	r2, #0
 8012ab0:	e000      	b.n	8012ab4 <USBPD_PWR_IF_SupplyReady+0x64>
 8012ab2:	2202      	movs	r2, #2
 8012ab4:	230f      	movs	r3, #15
 8012ab6:	18fb      	adds	r3, r7, r3
 8012ab8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012aba:	230f      	movs	r3, #15
 8012abc:	18fb      	adds	r3, r7, r3
 8012abe:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8012ac0:	0018      	movs	r0, r3
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	b004      	add	sp, #16
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	000002ed 	.word	0x000002ed

08012acc <USBPD_PWR_IF_VBUSEnable>:
  * @brief  Enables VBUS power on a specified port
  * @param  PortNum Port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_VBUSEnable(uint8_t PortNum)
{
 8012acc:	b5b0      	push	{r4, r5, r7, lr}
 8012ace:	b086      	sub	sp, #24
 8012ad0:	af02      	add	r7, sp, #8
 8012ad2:	0002      	movs	r2, r0
 8012ad4:	1dfb      	adds	r3, r7, #7
 8012ad6:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_VBUSEnable */
  USBPD_StatusTypeDef _status = (USBPD_StatusTypeDef)HW_IF_PWR_Enable(PortNum, USBPD_ENABLE, CCNONE, USBPD_FALSE, USBPD_PORTPOWERROLE_SRC);
 8012ad8:	250f      	movs	r5, #15
 8012ada:	197c      	adds	r4, r7, r5
 8012adc:	1dfb      	adds	r3, r7, #7
 8012ade:	7818      	ldrb	r0, [r3, #0]
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	9300      	str	r3, [sp, #0]
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	2101      	movs	r1, #1
 8012aea:	f7fd f8d3 	bl	800fc94 <HW_IF_PWR_Enable>
 8012aee:	0003      	movs	r3, r0
 8012af0:	7023      	strb	r3, [r4, #0]
  return _status;
 8012af2:	197b      	adds	r3, r7, r5
 8012af4:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_VBUSEnable */
}
 8012af6:	0018      	movs	r0, r3
 8012af8:	46bd      	mov	sp, r7
 8012afa:	b004      	add	sp, #16
 8012afc:	bdb0      	pop	{r4, r5, r7, pc}

08012afe <USBPD_PWR_IF_VBUSDisable>:
  * @brief  Disable VBUS/VCONN the power on a specified port
  * @param  PortNum Port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_VBUSDisable(uint8_t PortNum)
{
 8012afe:	b5b0      	push	{r4, r5, r7, lr}
 8012b00:	b086      	sub	sp, #24
 8012b02:	af02      	add	r7, sp, #8
 8012b04:	0002      	movs	r2, r0
 8012b06:	1dfb      	adds	r3, r7, #7
 8012b08:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_VBUSDisable */
  USBPD_StatusTypeDef _status = (USBPD_StatusTypeDef)HW_IF_PWR_Enable(PortNum, USBPD_DISABLE, CCNONE, USBPD_FALSE, USBPD_PORTPOWERROLE_SRC);
 8012b0a:	250f      	movs	r5, #15
 8012b0c:	197c      	adds	r4, r7, r5
 8012b0e:	1dfb      	adds	r3, r7, #7
 8012b10:	7818      	ldrb	r0, [r3, #0]
 8012b12:	2301      	movs	r3, #1
 8012b14:	9300      	str	r3, [sp, #0]
 8012b16:	2300      	movs	r3, #0
 8012b18:	2200      	movs	r2, #0
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	f7fd f8ba 	bl	800fc94 <HW_IF_PWR_Enable>
 8012b20:	0003      	movs	r3, r0
 8012b22:	7023      	strb	r3, [r4, #0]
  return _status;
 8012b24:	197b      	adds	r3, r7, r5
 8012b26:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_VBUSDisable */
}
 8012b28:	0018      	movs	r0, r3
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	b004      	add	sp, #16
 8012b2e:	bdb0      	pop	{r4, r5, r7, pc}

08012b30 <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b08a      	sub	sp, #40	; 0x28
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60ba      	str	r2, [r7, #8]
 8012b38:	607b      	str	r3, [r7, #4]
 8012b3a:	230f      	movs	r3, #15
 8012b3c:	18fb      	adds	r3, r7, r3
 8012b3e:	1c02      	adds	r2, r0, #0
 8012b40:	701a      	strb	r2, [r3, #0]
 8012b42:	200e      	movs	r0, #14
 8012b44:	183b      	adds	r3, r7, r0
 8012b46:	1c0a      	adds	r2, r1, #0
 8012b48:	701a      	strb	r2, [r3, #0]
    if (DataId == USBPD_CORE_DATATYPE_SRC_PDO)
 8012b4a:	183b      	adds	r3, r7, r0
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d10c      	bne.n	8012b6c <USBPD_PWR_IF_GetPortPDOs+0x3c>
    {
      *Size = USBPD_NbPDO[1];
 8012b52:	4b41      	ldr	r3, [pc, #260]	; (8012c58 <USBPD_PWR_IF_GetPortPDOs+0x128>)
 8012b54:	785b      	ldrb	r3, [r3, #1]
 8012b56:	001a      	movs	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSRC, sizeof(uint32_t) * USBPD_NbPDO[1]);
 8012b5c:	4b3e      	ldr	r3, [pc, #248]	; (8012c58 <USBPD_PWR_IF_GetPortPDOs+0x128>)
 8012b5e:	785b      	ldrb	r3, [r3, #1]
 8012b60:	009a      	lsls	r2, r3, #2
 8012b62:	493e      	ldr	r1, [pc, #248]	; (8012c5c <USBPD_PWR_IF_GetPortPDOs+0x12c>)
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	0018      	movs	r0, r3
 8012b68:	f006 fc4c 	bl	8019404 <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */
	uint32_t   nbpdo, index, nb_valid_pdo = 0;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	61fb      	str	r3, [r7, #28]
	uint32_t   *ptpdoarray = NULL;
 8012b70:	2300      	movs	r3, #0
 8012b72:	61bb      	str	r3, [r7, #24]
	USBPD_PDO_TypeDef pdo_first;
	USBPD_PDO_TypeDef pdo;

	/* Check if valid port */
	if (USBPD_PORT_IsValid(PortNum))
 8012b74:	210f      	movs	r1, #15
 8012b76:	187b      	adds	r3, r7, r1
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d168      	bne.n	8012c50 <USBPD_PWR_IF_GetPortPDOs+0x120>
	{
		/* According to the type of PDO to be read, set the pointer on values and number of elements */
		switch(DataId)
 8012b7e:	230e      	movs	r3, #14
 8012b80:	18fb      	adds	r3, r7, r3
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d122      	bne.n	8012bce <USBPD_PWR_IF_GetPortPDOs+0x9e>
		{
		case USBPD_CORE_DATATYPE_SRC_PDO :
			nbpdo = *PWR_Port_PDO_Storage[PortNum].SourcePDO.NumberOfPDO;
 8012b88:	187b      	adds	r3, r7, r1
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	4a34      	ldr	r2, [pc, #208]	; (8012c60 <USBPD_PWR_IF_GetPortPDOs+0x130>)
 8012b8e:	00db      	lsls	r3, r3, #3
 8012b90:	18d3      	adds	r3, r2, r3
 8012b92:	3304      	adds	r3, #4
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	627b      	str	r3, [r7, #36]	; 0x24
			ptpdoarray = PWR_Port_PDO_Storage[PortNum].SourcePDO.ListOfPDO;
 8012b9a:	187b      	adds	r3, r7, r1
 8012b9c:	781a      	ldrb	r2, [r3, #0]
 8012b9e:	4b30      	ldr	r3, [pc, #192]	; (8012c60 <USBPD_PWR_IF_GetPortPDOs+0x130>)
 8012ba0:	00d2      	lsls	r2, r2, #3
 8012ba2:	58d3      	ldr	r3, [r2, r3]
 8012ba4:	61bb      	str	r3, [r7, #24]
			/* Save the 1st PDO */
			pdo_first.d32 = *ptpdoarray;
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	617b      	str	r3, [r7, #20]
			/* Reset un-chunked bit if current revision is PD2.0*/
			if (USBPD_SPECIFICATION_REV2 == DPM_Params[PortNum].PE_SpecRevision)
 8012bac:	187b      	adds	r3, r7, r1
 8012bae:	781a      	ldrb	r2, [r3, #0]
 8012bb0:	4b2c      	ldr	r3, [pc, #176]	; (8012c64 <USBPD_PWR_IF_GetPortPDOs+0x134>)
 8012bb2:	0092      	lsls	r2, r2, #2
 8012bb4:	5cd3      	ldrb	r3, [r2, r3]
 8012bb6:	079b      	lsls	r3, r3, #30
 8012bb8:	0f9b      	lsrs	r3, r3, #30
 8012bba:	b2db      	uxtb	r3, r3
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d109      	bne.n	8012bd4 <USBPD_PWR_IF_GetPortPDOs+0xa4>
			{
				pdo_first.SRCFixedPDO.UnchunkedExtendedMessage  = USBPD_PDO_SRC_FIXED_UNCHUNK_NOT_SUPPORTED;
 8012bc0:	2317      	movs	r3, #23
 8012bc2:	18fb      	adds	r3, r7, r3
 8012bc4:	781a      	ldrb	r2, [r3, #0]
 8012bc6:	2101      	movs	r1, #1
 8012bc8:	438a      	bics	r2, r1
 8012bca:	701a      	strb	r2, [r3, #0]
			}
			break;
 8012bcc:	e002      	b.n	8012bd4 <USBPD_PWR_IF_GetPortPDOs+0xa4>
		default :
			nbpdo = 0;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8012bd2:	e000      	b.n	8012bd6 <USBPD_PWR_IF_GetPortPDOs+0xa6>
			break;
 8012bd4:	46c0      	nop			; (mov r8, r8)
		}

		/* Copy PDO data in output buffer */
		for (index = 0; index < nbpdo; index++)
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	623b      	str	r3, [r7, #32]
 8012bda:	e032      	b.n	8012c42 <USBPD_PWR_IF_GetPortPDOs+0x112>
		{
			pdo.d32 = *ptpdoarray;
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	613b      	str	r3, [r7, #16]
			/* Copy only PDO (and not APDO in case of current revision is PD2.0) */
			if ((USBPD_SPECIFICATION_REV2 == DPM_Params[PortNum].PE_SpecRevision)
 8012be2:	230f      	movs	r3, #15
 8012be4:	18fb      	adds	r3, r7, r3
 8012be6:	781a      	ldrb	r2, [r3, #0]
 8012be8:	4b1e      	ldr	r3, [pc, #120]	; (8012c64 <USBPD_PWR_IF_GetPortPDOs+0x134>)
 8012bea:	0092      	lsls	r2, r2, #2
 8012bec:	5cd3      	ldrb	r3, [r2, r3]
 8012bee:	079b      	lsls	r3, r3, #30
 8012bf0:	0f9b      	lsrs	r3, r3, #30
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	d107      	bne.n	8012c08 <USBPD_PWR_IF_GetPortPDOs+0xd8>
					&& (pdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_APDO))
 8012bf8:	2313      	movs	r3, #19
 8012bfa:	18fb      	adds	r3, r7, r3
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	223f      	movs	r2, #63	; 0x3f
 8012c00:	4393      	bics	r3, r2
 8012c02:	b2db      	uxtb	r3, r3
 8012c04:	2bc0      	cmp	r3, #192	; 0xc0
 8012c06:	d016      	beq.n	8012c36 <USBPD_PWR_IF_GetPortPDOs+0x106>
			{
			}
			else
			{
				/* Copy 1st PDO as potentially FRS or UNCHUNKED bits have been reset */
				if (0 == index)
 8012c08:	6a3b      	ldr	r3, [r7, #32]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d107      	bne.n	8012c1e <USBPD_PWR_IF_GetPortPDOs+0xee>
				{
					(void)memcpy(Ptr, (uint8_t*)&pdo_first.d32, 4u);
 8012c0e:	2314      	movs	r3, #20
 8012c10:	18f9      	adds	r1, r7, r3
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	2204      	movs	r2, #4
 8012c16:	0018      	movs	r0, r3
 8012c18:	f006 fbf4 	bl	8019404 <memcpy>
 8012c1c:	e008      	b.n	8012c30 <USBPD_PWR_IF_GetPortPDOs+0x100>
				}
				else
				{
					(void)memcpy((Ptr + (nb_valid_pdo * 4u)), (uint8_t*)ptpdoarray, 4u);
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	68ba      	ldr	r2, [r7, #8]
 8012c24:	18d3      	adds	r3, r2, r3
 8012c26:	69b9      	ldr	r1, [r7, #24]
 8012c28:	2204      	movs	r2, #4
 8012c2a:	0018      	movs	r0, r3
 8012c2c:	f006 fbea 	bl	8019404 <memcpy>
				}
				nb_valid_pdo++;
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	3301      	adds	r3, #1
 8012c34:	61fb      	str	r3, [r7, #28]
			}
			ptpdoarray++;
 8012c36:	69bb      	ldr	r3, [r7, #24]
 8012c38:	3304      	adds	r3, #4
 8012c3a:	61bb      	str	r3, [r7, #24]
		for (index = 0; index < nbpdo; index++)
 8012c3c:	6a3b      	ldr	r3, [r7, #32]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	623b      	str	r3, [r7, #32]
 8012c42:	6a3a      	ldr	r2, [r7, #32]
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d3c8      	bcc.n	8012bdc <USBPD_PWR_IF_GetPortPDOs+0xac>
		}
		/* Set the number of read PDO (number of u32 elements); */
		*Size = nb_valid_pdo;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	69fa      	ldr	r2, [r7, #28]
 8012c4e:	601a      	str	r2, [r3, #0]
	}
/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 8012c50:	46c0      	nop			; (mov r8, r8)
 8012c52:	46bd      	mov	sp, r7
 8012c54:	b00a      	add	sp, #40	; 0x28
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	20000104 	.word	0x20000104
 8012c5c:	20000108 	.word	0x20000108
 8012c60:	200027e0 	.word	0x200027e0
 8012c64:	200027dc 	.word	0x200027dc

08012c68 <USBPD_PWR_IF_SearchRequestedPDO>:
  * @retval Status of search
  *         USBPD_OK : Src PDO found for requested DO position (output Pdo parameter is set)
  *         USBPD_FAIL : Position is not compliant with current Src PDO for this port (no corresponding PDO value)
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SearchRequestedPDO(uint8_t PortNum, uint32_t RdoPosition, uint32_t *Pdo)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	60b9      	str	r1, [r7, #8]
 8012c70:	607a      	str	r2, [r7, #4]
 8012c72:	210f      	movs	r1, #15
 8012c74:	187b      	adds	r3, r7, r1
 8012c76:	1c02      	adds	r2, r0, #0
 8012c78:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SearchRequestedPDO */
	if((RdoPosition == 0) || (RdoPosition > *PWR_Port_PDO_Storage[PortNum].SourcePDO.NumberOfPDO))
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d00b      	beq.n	8012c98 <USBPD_PWR_IF_SearchRequestedPDO+0x30>
 8012c80:	187b      	adds	r3, r7, r1
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	4a0f      	ldr	r2, [pc, #60]	; (8012cc4 <USBPD_PWR_IF_SearchRequestedPDO+0x5c>)
 8012c86:	00db      	lsls	r3, r3, #3
 8012c88:	18d3      	adds	r3, r2, r3
 8012c8a:	3304      	adds	r3, #4
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	001a      	movs	r2, r3
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d901      	bls.n	8012c9c <USBPD_PWR_IF_SearchRequestedPDO+0x34>
	{
		/* Invalid PDO index */
	return USBPD_FAIL;
 8012c98:	2310      	movs	r3, #16
 8012c9a:	e00f      	b.n	8012cbc <USBPD_PWR_IF_SearchRequestedPDO+0x54>
	}

	*Pdo = PWR_Port_PDO_Storage[PortNum].SourcePDO.ListOfPDO[RdoPosition - 1];
 8012c9c:	230f      	movs	r3, #15
 8012c9e:	18fb      	adds	r3, r7, r3
 8012ca0:	781a      	ldrb	r2, [r3, #0]
 8012ca2:	4b08      	ldr	r3, [pc, #32]	; (8012cc4 <USBPD_PWR_IF_SearchRequestedPDO+0x5c>)
 8012ca4:	00d2      	lsls	r2, r2, #3
 8012ca6:	58d2      	ldr	r2, [r2, r3]
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	4907      	ldr	r1, [pc, #28]	; (8012cc8 <USBPD_PWR_IF_SearchRequestedPDO+0x60>)
 8012cac:	468c      	mov	ip, r1
 8012cae:	4463      	add	r3, ip
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	18d3      	adds	r3, r2, r3
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	601a      	str	r2, [r3, #0]
	return USBPD_OK;
 8012cba:	2300      	movs	r3, #0
/* USER CODE END USBPD_PWR_IF_SearchRequestedPDO */
}
 8012cbc:	0018      	movs	r0, r3
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	b004      	add	sp, #16
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	200027e0 	.word	0x200027e0
 8012cc8:	3fffffff 	.word	0x3fffffff

08012ccc <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	0002      	movs	r2, r0
 8012cd4:	1dfb      	adds	r3, r7, #7
 8012cd6:	701a      	strb	r2, [r3, #0]
 8012cd8:	1dbb      	adds	r3, r7, #6
 8012cda:	1c0a      	adds	r2, r1, #0
 8012cdc:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8012cde:	230f      	movs	r3, #15
 8012ce0:	18fb      	adds	r3, r7, r3
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8012ce6:	1dfb      	adds	r3, r7, #7
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	0018      	movs	r0, r3
 8012cec:	f7fc ffaa 	bl	800fc44 <HW_IF_PWR_GetVoltage>
 8012cf0:	0003      	movs	r3, r0
 8012cf2:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8012cf4:	1dbb      	adds	r3, r7, #6
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	2b02      	cmp	r3, #2
 8012cfa:	d018      	beq.n	8012d2e <USBPD_PWR_IF_GetVBUSStatus+0x62>
 8012cfc:	dc21      	bgt.n	8012d42 <USBPD_PWR_IF_GetVBUSStatus+0x76>
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d002      	beq.n	8012d08 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 8012d02:	2b01      	cmp	r3, #1
 8012d04:	d009      	beq.n	8012d1a <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8012d06:	e01c      	b.n	8012d42 <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	4a15      	ldr	r2, [pc, #84]	; (8012d60 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	d81a      	bhi.n	8012d46 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 8012d10:	230f      	movs	r3, #15
 8012d12:	18fb      	adds	r3, r7, r3
 8012d14:	2201      	movs	r2, #1
 8012d16:	701a      	strb	r2, [r3, #0]
    break;
 8012d18:	e015      	b.n	8012d46 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8012d1a:	68ba      	ldr	r2, [r7, #8]
 8012d1c:	23af      	movs	r3, #175	; 0xaf
 8012d1e:	011b      	lsls	r3, r3, #4
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d312      	bcc.n	8012d4a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 8012d24:	230f      	movs	r3, #15
 8012d26:	18fb      	adds	r3, r7, r3
 8012d28:	2201      	movs	r2, #1
 8012d2a:	701a      	strb	r2, [r3, #0]
    break;
 8012d2c:	e00d      	b.n	8012d4a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8012d2e:	68ba      	ldr	r2, [r7, #8]
 8012d30:	23af      	movs	r3, #175	; 0xaf
 8012d32:	011b      	lsls	r3, r3, #4
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d20a      	bcs.n	8012d4e <USBPD_PWR_IF_GetVBUSStatus+0x82>
 8012d38:	230f      	movs	r3, #15
 8012d3a:	18fb      	adds	r3, r7, r3
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	701a      	strb	r2, [r3, #0]
    break;
 8012d40:	e005      	b.n	8012d4e <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 8012d42:	46c0      	nop			; (mov r8, r8)
 8012d44:	e004      	b.n	8012d50 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8012d46:	46c0      	nop			; (mov r8, r8)
 8012d48:	e002      	b.n	8012d50 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8012d4a:	46c0      	nop			; (mov r8, r8)
 8012d4c:	e000      	b.n	8012d50 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8012d4e:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 8012d50:	230f      	movs	r3, #15
 8012d52:	18fb      	adds	r3, r7, r3
 8012d54:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8012d56:	0018      	movs	r0, r3
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	b004      	add	sp, #16
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	46c0      	nop			; (mov r8, r8)
 8012d60:	000002ed 	.word	0x000002ed

08012d64 <__NVIC_SystemReset>:
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8012d68:	f3bf 8f4f 	dsb	sy
}
 8012d6c:	46c0      	nop			; (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012d6e:	4b04      	ldr	r3, [pc, #16]	; (8012d80 <__NVIC_SystemReset+0x1c>)
 8012d70:	4a04      	ldr	r2, [pc, #16]	; (8012d84 <__NVIC_SystemReset+0x20>)
 8012d72:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8012d74:	f3bf 8f4f 	dsb	sy
}
 8012d78:	46c0      	nop			; (mov r8, r8)
    __NOP();
 8012d7a:	46c0      	nop			; (mov r8, r8)
 8012d7c:	e7fd      	b.n	8012d7a <__NVIC_SystemReset+0x16>
 8012d7e:	46c0      	nop			; (mov r8, r8)
 8012d80:	e000ed00 	.word	0xe000ed00
 8012d84:	05fa0004 	.word	0x05fa0004

08012d88 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
	/* PWR SET UP */
	if(USBPD_OK !=  USBPD_PWR_IF_Init())
 8012d8c:	f7ff fe04 	bl	8012998 <USBPD_PWR_IF_Init>
 8012d90:	1e03      	subs	r3, r0, #0
 8012d92:	d001      	beq.n	8012d98 <USBPD_DPM_UserInit+0x10>
	{
		return USBPD_ERROR;
 8012d94:	2302      	movs	r3, #2
 8012d96:	e000      	b.n	8012d9a <USBPD_DPM_UserInit+0x12>
	}
	return USBPD_OK;
 8012d98:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 8012d9a:	0018      	movs	r0, r3
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b084      	sub	sp, #16
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 8012dac:	4b06      	ldr	r3, [pc, #24]	; (8012dc8 <USBPD_DPM_SetNotification_GUI+0x28>)
 8012dae:	68ba      	ldr	r2, [r7, #8]
 8012db0:	601a      	str	r2, [r3, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 8012db2:	4b06      	ldr	r3, [pc, #24]	; (8012dcc <USBPD_DPM_SetNotification_GUI+0x2c>)
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	601a      	str	r2, [r3, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 8012db8:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <USBPD_DPM_SetNotification_GUI+0x30>)
 8012dba:	687a      	ldr	r2, [r7, #4]
 8012dbc:	601a      	str	r2, [r3, #0]
}
 8012dbe:	46c0      	nop			; (mov r8, r8)
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	b004      	add	sp, #16
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	46c0      	nop			; (mov r8, r8)
 8012dc8:	200027e8 	.word	0x200027e8
 8012dcc:	200027ec 	.word	0x200027ec
 8012dd0:	200027f0 	.word	0x200027f0

08012dd4 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b082      	sub	sp, #8
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	0002      	movs	r2, r0
 8012ddc:	1dfb      	adds	r3, r7, #7
 8012dde:	701a      	strb	r2, [r3, #0]
 8012de0:	1dbb      	adds	r3, r7, #6
 8012de2:	1c0a      	adds	r2, r1, #0
 8012de4:	701a      	strb	r2, [r3, #0]
  switch(State)
 8012de6:	1dbb      	adds	r3, r7, #6
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	2b02      	cmp	r3, #2
 8012dec:	d001      	beq.n	8012df2 <USBPD_DPM_UserCableDetection+0x1e>
 8012dee:	2b04      	cmp	r3, #4
 8012df0:	d10b      	bne.n	8012e0a <USBPD_DPM_UserCableDetection+0x36>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8012df2:	4b27      	ldr	r3, [pc, #156]	; (8012e90 <USBPD_DPM_UserCableDetection+0xbc>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d013      	beq.n	8012e22 <USBPD_DPM_UserCableDetection+0x4e>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 8012dfa:	4b25      	ldr	r3, [pc, #148]	; (8012e90 <USBPD_DPM_UserCableDetection+0xbc>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	1dfa      	adds	r2, r7, #7
 8012e00:	7810      	ldrb	r0, [r2, #0]
 8012e02:	2200      	movs	r2, #0
 8012e04:	2120      	movs	r1, #32
 8012e06:	4798      	blx	r3
    }
    break;
 8012e08:	e00b      	b.n	8012e22 <USBPD_DPM_UserCableDetection+0x4e>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8012e0a:	4b21      	ldr	r3, [pc, #132]	; (8012e90 <USBPD_DPM_UserCableDetection+0xbc>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d008      	beq.n	8012e24 <USBPD_DPM_UserCableDetection+0x50>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 8012e12:	4b1f      	ldr	r3, [pc, #124]	; (8012e90 <USBPD_DPM_UserCableDetection+0xbc>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	1dfa      	adds	r2, r7, #7
 8012e18:	7810      	ldrb	r0, [r2, #0]
 8012e1a:	491e      	ldr	r1, [pc, #120]	; (8012e94 <USBPD_DPM_UserCableDetection+0xc0>)
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	4798      	blx	r3
 8012e20:	e000      	b.n	8012e24 <USBPD_DPM_UserCableDetection+0x50>
    break;
 8012e22:	46c0      	nop			; (mov r8, r8)
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
	switch(State)
 8012e24:	1dbb      	adds	r3, r7, #6
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	2b02      	cmp	r3, #2
 8012e2a:	d001      	beq.n	8012e30 <USBPD_DPM_UserCableDetection+0x5c>
 8012e2c:	2b04      	cmp	r3, #4
 8012e2e:	d116      	bne.n	8012e5e <USBPD_DPM_UserCableDetection+0x8a>
	{
	case USBPD_CAD_EVENT_ATTACHED:
	case USBPD_CAD_EVENT_ATTEMC:
		{
			if (DPM_Params[PortNum].PE_PowerRole == USBPD_PORTPOWERROLE_SRC)
 8012e30:	1dfb      	adds	r3, r7, #7
 8012e32:	781a      	ldrb	r2, [r3, #0]
 8012e34:	4b18      	ldr	r3, [pc, #96]	; (8012e98 <USBPD_DPM_UserCableDetection+0xc4>)
 8012e36:	0092      	lsls	r2, r2, #2
 8012e38:	5cd3      	ldrb	r3, [r2, r3]
 8012e3a:	075b      	lsls	r3, r3, #29
 8012e3c:	0fdb      	lsrs	r3, r3, #31
 8012e3e:	b2db      	uxtb	r3, r3
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d11e      	bne.n	8012e82 <USBPD_DPM_UserCableDetection+0xae>
			{
				if (USBPD_OK != USBPD_PWR_IF_VBUSEnable(PortNum))
 8012e44:	1dfb      	adds	r3, r7, #7
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	0018      	movs	r0, r3
 8012e4a:	f7ff fe3f 	bl	8012acc <USBPD_PWR_IF_VBUSEnable>
 8012e4e:	1e03      	subs	r3, r0, #0
 8012e50:	d017      	beq.n	8012e82 <USBPD_DPM_UserCableDetection+0xae>
				{
					/* Should not occur */
					osDelay(6000);
 8012e52:	4b12      	ldr	r3, [pc, #72]	; (8012e9c <USBPD_DPM_UserCableDetection+0xc8>)
 8012e54:	0018      	movs	r0, r3
 8012e56:	f7fd fae8 	bl	801042a <osDelay>
					NVIC_SystemReset();
 8012e5a:	f7ff ff83 	bl	8012d64 <__NVIC_SystemReset>
		}
	case USBPD_CAD_EVENT_DETACHED :
	case USBPD_CAD_EVENT_EMC :
	default :
		{
			if (DPM_Params[PortNum].PE_PowerRole == USBPD_PORTPOWERROLE_SRC)
 8012e5e:	1dfb      	adds	r3, r7, #7
 8012e60:	781a      	ldrb	r2, [r3, #0]
 8012e62:	4b0d      	ldr	r3, [pc, #52]	; (8012e98 <USBPD_DPM_UserCableDetection+0xc4>)
 8012e64:	0092      	lsls	r2, r2, #2
 8012e66:	5cd3      	ldrb	r3, [r2, r3]
 8012e68:	075b      	lsls	r3, r3, #29
 8012e6a:	0fdb      	lsrs	r3, r3, #31
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	2b01      	cmp	r3, #1
 8012e70:	d109      	bne.n	8012e86 <USBPD_DPM_UserCableDetection+0xb2>
			{
				if (USBPD_OK != USBPD_PWR_IF_VBUSDisable(PortNum))
 8012e72:	1dfb      	adds	r3, r7, #7
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	0018      	movs	r0, r3
 8012e78:	f7ff fe41 	bl	8012afe <USBPD_PWR_IF_VBUSDisable>
 8012e7c:	1e03      	subs	r3, r0, #0
 8012e7e:	d002      	beq.n	8012e86 <USBPD_DPM_UserCableDetection+0xb2>
				{
					/* Should not occur */
					while(1);
 8012e80:	e7fe      	b.n	8012e80 <USBPD_DPM_UserCableDetection+0xac>
			break;
 8012e82:	46c0      	nop			; (mov r8, r8)
 8012e84:	e000      	b.n	8012e88 <USBPD_DPM_UserCableDetection+0xb4>
				}
			}
			break;
 8012e86:	46c0      	nop			; (mov r8, r8)
		}
	}
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8012e88:	46c0      	nop			; (mov r8, r8)
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	b002      	add	sp, #8
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	200027ec 	.word	0x200027ec
 8012e94:	00008020 	.word	0x00008020
 8012e98:	200027dc 	.word	0x200027dc
 8012e9c:	00001770 	.word	0x00001770

08012ea0 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	0002      	movs	r2, r0
 8012ea8:	1dfb      	adds	r3, r7, #7
 8012eaa:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 8012eac:	46c0      	nop			; (mov r8, r8)
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	b002      	add	sp, #8
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8012eb4:	b590      	push	{r4, r7, lr}
 8012eb6:	b093      	sub	sp, #76	; 0x4c
 8012eb8:	af02      	add	r7, sp, #8
 8012eba:	0002      	movs	r2, r0
 8012ebc:	1dfb      	adds	r3, r7, #7
 8012ebe:	701a      	strb	r2, [r3, #0]
 8012ec0:	1dbb      	adds	r3, r7, #6
 8012ec2:	1c0a      	adds	r2, r1, #0
 8012ec4:	701a      	strb	r2, [r3, #0]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 8012ec6:	4b1d      	ldr	r3, [pc, #116]	; (8012f3c <USBPD_DPM_Notification+0x88>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d008      	beq.n	8012ee0 <USBPD_DPM_Notification+0x2c>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 8012ece:	4b1b      	ldr	r3, [pc, #108]	; (8012f3c <USBPD_DPM_Notification+0x88>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	1dba      	adds	r2, r7, #6
 8012ed4:	7812      	ldrb	r2, [r2, #0]
 8012ed6:	b291      	uxth	r1, r2
 8012ed8:	1dfa      	adds	r2, r7, #7
 8012eda:	7812      	ldrb	r2, [r2, #0]
 8012edc:	0010      	movs	r0, r2
 8012ede:	4798      	blx	r3
//    case USBPD_NOTIFY_DATAROLESWAP_DFP :
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 8012ee0:	1dbb      	adds	r3, r7, #6
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	4a16      	ldr	r2, [pc, #88]	; (8012f40 <USBPD_DPM_Notification+0x8c>)
 8012ee6:	240c      	movs	r4, #12
 8012ee8:	1938      	adds	r0, r7, r4
 8012eea:	2132      	movs	r1, #50	; 0x32
 8012eec:	f006 f9e0 	bl	80192b0 <sniprintf>
 8012ef0:	0002      	movs	r2, r0
 8012ef2:	213f      	movs	r1, #63	; 0x3f
 8012ef4:	187b      	adds	r3, r7, r1
 8012ef6:	701a      	strb	r2, [r3, #0]
 8012ef8:	187b      	adds	r3, r7, r1
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	2b31      	cmp	r3, #49	; 0x31
 8012efe:	d80d      	bhi.n	8012f1c <USBPD_DPM_Notification+0x68>
 8012f00:	193b      	adds	r3, r7, r4
 8012f02:	0018      	movs	r0, r3
 8012f04:	f7f3 fa1c 	bl	8006340 <strlen>
 8012f08:	193a      	adds	r2, r7, r4
 8012f0a:	1dfb      	adds	r3, r7, #7
 8012f0c:	7819      	ldrb	r1, [r3, #0]
 8012f0e:	9000      	str	r0, [sp, #0]
 8012f10:	0013      	movs	r3, r2
 8012f12:	2200      	movs	r2, #0
 8012f14:	2006      	movs	r0, #6
 8012f16:	f7fa f961 	bl	800d1dc <USBPD_TRACE_Add>
      break;
 8012f1a:	e00a      	b.n	8012f32 <USBPD_DPM_Notification+0x7e>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 8012f1c:	230c      	movs	r3, #12
 8012f1e:	18fa      	adds	r2, r7, r3
 8012f20:	1dfb      	adds	r3, r7, #7
 8012f22:	7819      	ldrb	r1, [r3, #0]
 8012f24:	2332      	movs	r3, #50	; 0x32
 8012f26:	9300      	str	r3, [sp, #0]
 8012f28:	0013      	movs	r3, r2
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	2006      	movs	r0, #6
 8012f2e:	f7fa f955 	bl	800d1dc <USBPD_TRACE_Add>
      break;
 8012f32:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8012f34:	46c0      	nop			; (mov r8, r8)
 8012f36:	46bd      	mov	sp, r7
 8012f38:	b011      	add	sp, #68	; 0x44
 8012f3a:	bd90      	pop	{r4, r7, pc}
 8012f3c:	200027e8 	.word	0x200027e8
 8012f40:	08019ff0 	.word	0x08019ff0

08012f44 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6039      	str	r1, [r7, #0]
 8012f4c:	0011      	movs	r1, r2
 8012f4e:	1dfb      	adds	r3, r7, #7
 8012f50:	1c02      	adds	r2, r0, #0
 8012f52:	701a      	strb	r2, [r3, #0]
 8012f54:	1dbb      	adds	r3, r7, #6
 8012f56:	1c0a      	adds	r2, r1, #0
 8012f58:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
	switch (Status)
 8012f5a:	1dbb      	adds	r3, r7, #6
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	2b03      	cmp	r3, #3
 8012f60:	d002      	beq.n	8012f68 <USBPD_DPM_HardReset+0x24>
 8012f62:	2b04      	cmp	r3, #4
 8012f64:	d00a      	beq.n	8012f7c <USBPD_DPM_HardReset+0x38>
			DPM_TurnOnPower(PortNum, CurrentRole);
		}
		break;

	default:
		break;
 8012f66:	e017      	b.n	8012f98 <USBPD_DPM_HardReset+0x54>
		if (USBPD_PORTPOWERROLE_SRC == CurrentRole)
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d111      	bne.n	8012f92 <USBPD_DPM_HardReset+0x4e>
			DPM_TurnOffPower(PortNum, USBPD_PORTPOWERROLE_SRC);
 8012f6e:	1dfb      	adds	r3, r7, #7
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	2101      	movs	r1, #1
 8012f74:	0018      	movs	r0, r3
 8012f76:	f001 f93b 	bl	80141f0 <DPM_TurnOffPower>
		break;
 8012f7a:	e00a      	b.n	8012f92 <USBPD_DPM_HardReset+0x4e>
		if (CurrentRole == USBPD_PORTPOWERROLE_SRC)
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d109      	bne.n	8012f96 <USBPD_DPM_HardReset+0x52>
			DPM_TurnOnPower(PortNum, CurrentRole);
 8012f82:	683a      	ldr	r2, [r7, #0]
 8012f84:	1dfb      	adds	r3, r7, #7
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	0011      	movs	r1, r2
 8012f8a:	0018      	movs	r0, r3
 8012f8c:	f001 f946 	bl	801421c <DPM_TurnOnPower>
		break;
 8012f90:	e001      	b.n	8012f96 <USBPD_DPM_HardReset+0x52>
		break;
 8012f92:	46c0      	nop			; (mov r8, r8)
 8012f94:	e000      	b.n	8012f98 <USBPD_DPM_HardReset+0x54>
		break;
 8012f96:	46c0      	nop			; (mov r8, r8)
	}
/* USER CODE END USBPD_DPM_HardReset */
}
 8012f98:	46c0      	nop			; (mov r8, r8)
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	b002      	add	sp, #8
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <USBPD_DPM_SetupNewPower>:
  * @brief  Request the DPM to setup the new power level.
  * @param  PortNum The current port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_SetupNewPower(uint8_t PortNum)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	0002      	movs	r2, r0
 8012fa8:	1dfb      	adds	r3, r7, #7
 8012faa:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetupNewPower */
  return USBPD_PWR_IF_SetProfile(PortNum);
 8012fac:	1dfb      	adds	r3, r7, #7
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	0018      	movs	r0, r3
 8012fb2:	f7ff fd09 	bl	80129c8 <USBPD_PWR_IF_SetProfile>
 8012fb6:	0003      	movs	r3, r0
/* USER CODE END USBPD_DPM_SetupNewPower */
}
 8012fb8:	0018      	movs	r0, r3
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	b002      	add	sp, #8
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8012fc0:	b590      	push	{r4, r7, lr}
 8012fc2:	b095      	sub	sp, #84	; 0x54
 8012fc4:	af02      	add	r7, sp, #8
 8012fc6:	60ba      	str	r2, [r7, #8]
 8012fc8:	607b      	str	r3, [r7, #4]
 8012fca:	240f      	movs	r4, #15
 8012fcc:	193b      	adds	r3, r7, r4
 8012fce:	1c02      	adds	r2, r0, #0
 8012fd0:	701a      	strb	r2, [r3, #0]
 8012fd2:	200e      	movs	r0, #14
 8012fd4:	183b      	adds	r3, r7, r0
 8012fd6:	1c0a      	adds	r2, r1, #0
 8012fd8:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
	/* Check type of information targeted by request */
	switch(DataId)
 8012fda:	183b      	adds	r3, r7, r0
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d015      	beq.n	801300e <USBPD_DPM_GetDataInfo+0x4e>
 8012fe2:	2b03      	cmp	r3, #3
 8012fe4:	d124      	bne.n	8013030 <USBPD_DPM_GetDataInfo+0x70>
	{
		case USBPD_CORE_DATATYPE_REQ_VOLTAGE:       /*!< Get voltage value requested for BIST tests, expect 5V */
			*Size = 4;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2204      	movs	r2, #4
 8012fea:	601a      	str	r2, [r3, #0]
			(void)memcpy((uint8_t*)Ptr, (uint8_t *)&DPM_Ports[PortNum].DPM_RequestedVoltage, *Size);
 8012fec:	193b      	adds	r3, r7, r4
 8012fee:	781a      	ldrb	r2, [r3, #0]
 8012ff0:	0013      	movs	r3, r2
 8012ff2:	011b      	lsls	r3, r3, #4
 8012ff4:	1a9b      	subs	r3, r3, r2
 8012ff6:	009b      	lsls	r3, r3, #2
 8012ff8:	3328      	adds	r3, #40	; 0x28
 8012ffa:	001a      	movs	r2, r3
 8012ffc:	4b25      	ldr	r3, [pc, #148]	; (8013094 <USBPD_DPM_GetDataInfo+0xd4>)
 8012ffe:	18d1      	adds	r1, r2, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	0018      	movs	r0, r3
 8013008:	f006 f9fc 	bl	8019404 <memcpy>
			break;
 801300c:	e03d      	b.n	801308a <USBPD_DPM_GetDataInfo+0xca>
		case USBPD_CORE_DATATYPE_SRC_PDO:           /*!< Handling of port Source PDO                           */
			USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 801300e:	687c      	ldr	r4, [r7, #4]
 8013010:	68ba      	ldr	r2, [r7, #8]
 8013012:	230e      	movs	r3, #14
 8013014:	18fb      	adds	r3, r7, r3
 8013016:	7819      	ldrb	r1, [r3, #0]
 8013018:	230f      	movs	r3, #15
 801301a:	18fb      	adds	r3, r7, r3
 801301c:	7818      	ldrb	r0, [r3, #0]
 801301e:	0023      	movs	r3, r4
 8013020:	f7ff fd86 	bl	8012b30 <USBPD_PWR_IF_GetPortPDOs>
			*Size *= 4;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	009a      	lsls	r2, r3, #2
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	601a      	str	r2, [r3, #0]
			break;
 801302e:	e02c      	b.n	801308a <USBPD_DPM_GetDataInfo+0xca>
 // case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content            */
		// break;
 // case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content        */
		// break;
		default:
			DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 8013030:	230e      	movs	r3, #14
 8013032:	18fb      	adds	r3, r7, r3
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	4a18      	ldr	r2, [pc, #96]	; (8013098 <USBPD_DPM_GetDataInfo+0xd8>)
 8013038:	2414      	movs	r4, #20
 801303a:	1938      	adds	r0, r7, r4
 801303c:	2132      	movs	r1, #50	; 0x32
 801303e:	f006 f937 	bl	80192b0 <sniprintf>
 8013042:	0002      	movs	r2, r0
 8013044:	2147      	movs	r1, #71	; 0x47
 8013046:	187b      	adds	r3, r7, r1
 8013048:	701a      	strb	r2, [r3, #0]
 801304a:	187b      	adds	r3, r7, r1
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	2b31      	cmp	r3, #49	; 0x31
 8013050:	d80e      	bhi.n	8013070 <USBPD_DPM_GetDataInfo+0xb0>
 8013052:	193b      	adds	r3, r7, r4
 8013054:	0018      	movs	r0, r3
 8013056:	f7f3 f973 	bl	8006340 <strlen>
 801305a:	193a      	adds	r2, r7, r4
 801305c:	230f      	movs	r3, #15
 801305e:	18fb      	adds	r3, r7, r3
 8013060:	7819      	ldrb	r1, [r3, #0]
 8013062:	9000      	str	r0, [sp, #0]
 8013064:	0013      	movs	r3, r2
 8013066:	2200      	movs	r2, #0
 8013068:	2006      	movs	r0, #6
 801306a:	f7fa f8b7 	bl	800d1dc <USBPD_TRACE_Add>
			break;
 801306e:	e00b      	b.n	8013088 <USBPD_DPM_GetDataInfo+0xc8>
			DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 8013070:	2314      	movs	r3, #20
 8013072:	18fa      	adds	r2, r7, r3
 8013074:	230f      	movs	r3, #15
 8013076:	18fb      	adds	r3, r7, r3
 8013078:	7819      	ldrb	r1, [r3, #0]
 801307a:	2332      	movs	r3, #50	; 0x32
 801307c:	9300      	str	r3, [sp, #0]
 801307e:	0013      	movs	r3, r2
 8013080:	2200      	movs	r2, #0
 8013082:	2006      	movs	r0, #6
 8013084:	f7fa f8aa 	bl	800d1dc <USBPD_TRACE_Add>
			break;
 8013088:	46c0      	nop			; (mov r8, r8)
	}
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801308a:	46c0      	nop			; (mov r8, r8)
 801308c:	46bd      	mov	sp, r7
 801308e:	b013      	add	sp, #76	; 0x4c
 8013090:	bd90      	pop	{r4, r7, pc}
 8013092:	46c0      	nop			; (mov r8, r8)
 8013094:	200027f4 	.word	0x200027f4
 8013098:	0801a014 	.word	0x0801a014

0801309c <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801309c:	b5b0      	push	{r4, r5, r7, lr}
 801309e:	b094      	sub	sp, #80	; 0x50
 80130a0:	af02      	add	r7, sp, #8
 80130a2:	60ba      	str	r2, [r7, #8]
 80130a4:	607b      	str	r3, [r7, #4]
 80130a6:	230f      	movs	r3, #15
 80130a8:	18fb      	adds	r3, r7, r3
 80130aa:	1c02      	adds	r2, r0, #0
 80130ac:	701a      	strb	r2, [r3, #0]
 80130ae:	200e      	movs	r0, #14
 80130b0:	183b      	adds	r3, r7, r0
 80130b2:	1c0a      	adds	r2, r1, #0
 80130b4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
	/* Check type of information targeted by request */
	switch(DataId)
 80130b6:	183b      	adds	r3, r7, r0
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	d002      	beq.n	80130c4 <USBPD_DPM_SetDataInfo+0x28>
 80130be:	2b06      	cmp	r3, #6
 80130c0:	d035      	beq.n	801312e <USBPD_DPM_SetDataInfo+0x92>
 80130c2:	e048      	b.n	8013156 <USBPD_DPM_SetDataInfo+0xba>
	{
	 case USBPD_CORE_DATATYPE_RDO_POSITION:   /*!< Reset the PDO position selected by the sink only          */
		if (Size == 4)
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b04      	cmp	r3, #4
 80130c8:	d172      	bne.n	80131b0 <USBPD_DPM_SetDataInfo+0x114>
		{
			uint8_t* temp;
			temp = (uint8_t*)&DPM_Ports[PortNum].DPM_RDOPosition;
 80130ca:	240f      	movs	r4, #15
 80130cc:	193b      	adds	r3, r7, r4
 80130ce:	781a      	ldrb	r2, [r3, #0]
 80130d0:	0013      	movs	r3, r2
 80130d2:	011b      	lsls	r3, r3, #4
 80130d4:	1a9b      	subs	r3, r3, r2
 80130d6:	009b      	lsls	r3, r3, #2
 80130d8:	3320      	adds	r3, #32
 80130da:	001a      	movs	r2, r3
 80130dc:	4b40      	ldr	r3, [pc, #256]	; (80131e0 <USBPD_DPM_SetDataInfo+0x144>)
 80130de:	18d3      	adds	r3, r2, r3
 80130e0:	647b      	str	r3, [r7, #68]	; 0x44
			(void)memcpy(temp, Ptr, Size);
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	68b9      	ldr	r1, [r7, #8]
 80130e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130e8:	0018      	movs	r0, r3
 80130ea:	f006 f98b 	bl	8019404 <memcpy>
			DPM_Ports[PortNum].DPM_RDOPositionPrevious = *Ptr;
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	7819      	ldrb	r1, [r3, #0]
 80130f2:	193b      	adds	r3, r7, r4
 80130f4:	781a      	ldrb	r2, [r3, #0]
 80130f6:	0008      	movs	r0, r1
 80130f8:	4939      	ldr	r1, [pc, #228]	; (80131e0 <USBPD_DPM_SetDataInfo+0x144>)
 80130fa:	0013      	movs	r3, r2
 80130fc:	011b      	lsls	r3, r3, #4
 80130fe:	1a9b      	subs	r3, r3, r2
 8013100:	009b      	lsls	r3, r3, #2
 8013102:	18cb      	adds	r3, r1, r3
 8013104:	3324      	adds	r3, #36	; 0x24
 8013106:	6018      	str	r0, [r3, #0]
			temp = (uint8_t*)&DPM_Ports[PortNum].DPM_RDOPositionPrevious;
 8013108:	193b      	adds	r3, r7, r4
 801310a:	781a      	ldrb	r2, [r3, #0]
 801310c:	0013      	movs	r3, r2
 801310e:	011b      	lsls	r3, r3, #4
 8013110:	1a9b      	subs	r3, r3, r2
 8013112:	009b      	lsls	r3, r3, #2
 8013114:	3320      	adds	r3, #32
 8013116:	001a      	movs	r2, r3
 8013118:	4b31      	ldr	r3, [pc, #196]	; (80131e0 <USBPD_DPM_SetDataInfo+0x144>)
 801311a:	18d3      	adds	r3, r2, r3
 801311c:	3304      	adds	r3, #4
 801311e:	647b      	str	r3, [r7, #68]	; 0x44
			(void)memcpy(temp, Ptr, Size);
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	68b9      	ldr	r1, [r7, #8]
 8013124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013126:	0018      	movs	r0, r3
 8013128:	f006 f96c 	bl	8019404 <memcpy>
		}
		break;
 801312c:	e040      	b.n	80131b0 <USBPD_DPM_SetDataInfo+0x114>
 // case USBPD_CORE_DATATYPE_RCV_SRC_PDO:   /*!< Storage of Received Source PDO values                     */
	 // break;
 // case USBPD_CORE_DATATYPE_RCV_SNK_PDO:   /*!< Storage of Received Sink PDO values                       */
	 // break;
		case USBPD_CORE_DATATYPE_RCV_REQ_PDO :  /*!< Storage of Received Sink Request PDO value                */
			if (Size == 4)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2b04      	cmp	r3, #4
 8013132:	d13f      	bne.n	80131b4 <USBPD_DPM_SetDataInfo+0x118>
			{
				memcpy((uint8_t *)&DPM_Ports[PortNum].DPM_RcvRequestDOMsg,  Ptr, 4);
 8013134:	230f      	movs	r3, #15
 8013136:	18fb      	adds	r3, r7, r3
 8013138:	781a      	ldrb	r2, [r3, #0]
 801313a:	0013      	movs	r3, r2
 801313c:	011b      	lsls	r3, r3, #4
 801313e:	1a9b      	subs	r3, r3, r2
 8013140:	009b      	lsls	r3, r3, #2
 8013142:	3330      	adds	r3, #48	; 0x30
 8013144:	001a      	movs	r2, r3
 8013146:	4b26      	ldr	r3, [pc, #152]	; (80131e0 <USBPD_DPM_SetDataInfo+0x144>)
 8013148:	18d3      	adds	r3, r2, r3
 801314a:	68b9      	ldr	r1, [r7, #8]
 801314c:	2204      	movs	r2, #4
 801314e:	0018      	movs	r0, r3
 8013150:	f006 f958 	bl	8019404 <memcpy>
			}
			break;
 8013154:	e02e      	b.n	80131b4 <USBPD_DPM_SetDataInfo+0x118>
 // case USBPD_CORE_GET_BATTERY_CAPABILITY: /*!< Storing of received Get Battery capability message content*/
	 // break;
 // case USBPD_CORE_SNK_EXTENDED_CAPA:      /*!< Storing of Sink Extended capability message content       */
	 // break;
		default:
			DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 8013156:	230e      	movs	r3, #14
 8013158:	18fb      	adds	r3, r7, r3
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	4a21      	ldr	r2, [pc, #132]	; (80131e4 <USBPD_DPM_SetDataInfo+0x148>)
 801315e:	2410      	movs	r4, #16
 8013160:	1938      	adds	r0, r7, r4
 8013162:	2132      	movs	r1, #50	; 0x32
 8013164:	f006 f8a4 	bl	80192b0 <sniprintf>
 8013168:	0002      	movs	r2, r0
 801316a:	2143      	movs	r1, #67	; 0x43
 801316c:	187b      	adds	r3, r7, r1
 801316e:	701a      	strb	r2, [r3, #0]
 8013170:	187b      	adds	r3, r7, r1
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	2b31      	cmp	r3, #49	; 0x31
 8013176:	d80e      	bhi.n	8013196 <USBPD_DPM_SetDataInfo+0xfa>
 8013178:	193b      	adds	r3, r7, r4
 801317a:	0018      	movs	r0, r3
 801317c:	f7f3 f8e0 	bl	8006340 <strlen>
 8013180:	193a      	adds	r2, r7, r4
 8013182:	230f      	movs	r3, #15
 8013184:	18fb      	adds	r3, r7, r3
 8013186:	7819      	ldrb	r1, [r3, #0]
 8013188:	9000      	str	r0, [sp, #0]
 801318a:	0013      	movs	r3, r2
 801318c:	2200      	movs	r2, #0
 801318e:	2006      	movs	r0, #6
 8013190:	f7fa f824 	bl	800d1dc <USBPD_TRACE_Add>
			break;
 8013194:	e00f      	b.n	80131b6 <USBPD_DPM_SetDataInfo+0x11a>
			DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 8013196:	2310      	movs	r3, #16
 8013198:	18fa      	adds	r2, r7, r3
 801319a:	230f      	movs	r3, #15
 801319c:	18fb      	adds	r3, r7, r3
 801319e:	7819      	ldrb	r1, [r3, #0]
 80131a0:	2332      	movs	r3, #50	; 0x32
 80131a2:	9300      	str	r3, [sp, #0]
 80131a4:	0013      	movs	r3, r2
 80131a6:	2200      	movs	r2, #0
 80131a8:	2006      	movs	r0, #6
 80131aa:	f7fa f817 	bl	800d1dc <USBPD_TRACE_Add>
			break;
 80131ae:	e002      	b.n	80131b6 <USBPD_DPM_SetDataInfo+0x11a>
		break;
 80131b0:	46c0      	nop			; (mov r8, r8)
 80131b2:	e000      	b.n	80131b6 <USBPD_DPM_SetDataInfo+0x11a>
			break;
 80131b4:	46c0      	nop			; (mov r8, r8)
	}
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 80131b6:	4b0c      	ldr	r3, [pc, #48]	; (80131e8 <USBPD_DPM_SetDataInfo+0x14c>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d00b      	beq.n	80131d6 <USBPD_DPM_SetDataInfo+0x13a>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 80131be:	4b0a      	ldr	r3, [pc, #40]	; (80131e8 <USBPD_DPM_SetDataInfo+0x14c>)
 80131c0:	681c      	ldr	r4, [r3, #0]
 80131c2:	687d      	ldr	r5, [r7, #4]
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	230e      	movs	r3, #14
 80131c8:	18fb      	adds	r3, r7, r3
 80131ca:	7819      	ldrb	r1, [r3, #0]
 80131cc:	230f      	movs	r3, #15
 80131ce:	18fb      	adds	r3, r7, r3
 80131d0:	7818      	ldrb	r0, [r3, #0]
 80131d2:	002b      	movs	r3, r5
 80131d4:	47a0      	blx	r4
  }
}
 80131d6:	46c0      	nop			; (mov r8, r8)
 80131d8:	46bd      	mov	sp, r7
 80131da:	b012      	add	sp, #72	; 0x48
 80131dc:	bdb0      	pop	{r4, r5, r7, pc}
 80131de:	46c0      	nop			; (mov r8, r8)
 80131e0:	200027f4 	.word	0x200027f4
 80131e4:	0801a03c 	.word	0x0801a03c
 80131e8:	200027f0 	.word	0x200027f0

080131ec <USBPD_DPM_EvaluateRequest>:
  * @param  PortNum Port number
  * @param  PtrPowerObject  Pointer on the power data object
  * @retval USBPD status : USBPD_ACCEPT, USBPD_REJECT, USBPD_WAIT, USBPD_GOTOMIN
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateRequest(uint8_t PortNum, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 80131ec:	b590      	push	{r4, r7, lr}
 80131ee:	b087      	sub	sp, #28
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	0002      	movs	r2, r0
 80131f4:	6039      	str	r1, [r7, #0]
 80131f6:	1dfb      	adds	r3, r7, #7
 80131f8:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateRequest */
	USBPD_StatusTypeDef _retr = USBPD_REJECT;
 80131fa:	2317      	movs	r3, #23
 80131fc:	18fb      	adds	r3, r7, r3
 80131fe:	220c      	movs	r2, #12
 8013200:	701a      	strb	r2, [r3, #0]
	USBPD_PDO_TypeDef pdo;
	USBPD_SNKRDO_TypeDef rdo;

	/* read the request value received */
	rdo.d32 = DPM_Ports[PortNum].DPM_RcvRequestDOMsg;
 8013202:	1dfb      	adds	r3, r7, #7
 8013204:	781a      	ldrb	r2, [r3, #0]
 8013206:	4945      	ldr	r1, [pc, #276]	; (801331c <USBPD_DPM_EvaluateRequest+0x130>)
 8013208:	0013      	movs	r3, r2
 801320a:	011b      	lsls	r3, r3, #4
 801320c:	1a9b      	subs	r3, r3, r2
 801320e:	009b      	lsls	r3, r3, #2
 8013210:	18cb      	adds	r3, r1, r3
 8013212:	3330      	adds	r3, #48	; 0x30
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	60fb      	str	r3, [r7, #12]

	/* Search PDO in Port Source PDO list, that corresponds to Position provided in Request RDO */
	if (USBPD_PWR_IF_SearchRequestedPDO(PortNum,  rdo.GenericRDO.ObjectPosition, &pdo.d32) == USBPD_OK)
 8013218:	230f      	movs	r3, #15
 801321a:	18fb      	adds	r3, r7, r3
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	065b      	lsls	r3, r3, #25
 8013220:	0f5b      	lsrs	r3, r3, #29
 8013222:	b2db      	uxtb	r3, r3
 8013224:	0019      	movs	r1, r3
 8013226:	2410      	movs	r4, #16
 8013228:	193a      	adds	r2, r7, r4
 801322a:	1dfb      	adds	r3, r7, #7
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	0018      	movs	r0, r3
 8013230:	f7ff fd1a 	bl	8012c68 <USBPD_PWR_IF_SearchRequestedPDO>
 8013234:	1e03      	subs	r3, r0, #0
 8013236:	d169      	bne.n	801330c <USBPD_DPM_EvaluateRequest+0x120>
	{

		/* Evaluate the request */
		if(pdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_FIXED)
 8013238:	2313      	movs	r3, #19
 801323a:	18fb      	adds	r3, r7, r3
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	223f      	movs	r2, #63	; 0x3f
 8013240:	4393      	bics	r3, r2
 8013242:	b2db      	uxtb	r3, r3
 8013244:	2b00      	cmp	r3, #0
 8013246:	d161      	bne.n	801330c <USBPD_DPM_EvaluateRequest+0x120>
		{
			if((rdo.FixedVariableRDO.OperatingCurrentIn10mAunits > pdo.SRCFixedPDO.MaxCurrentIn10mAunits)
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	031b      	lsls	r3, r3, #12
 801324c:	0d9b      	lsrs	r3, r3, #22
 801324e:	b29a      	uxth	r2, r3
 8013250:	193b      	adds	r3, r7, r4
 8013252:	881b      	ldrh	r3, [r3, #0]
 8013254:	059b      	lsls	r3, r3, #22
 8013256:	0d9b      	lsrs	r3, r3, #22
 8013258:	b29b      	uxth	r3, r3
 801325a:	429a      	cmp	r2, r3
 801325c:	d80c      	bhi.n	8013278 <USBPD_DPM_EvaluateRequest+0x8c>
				 || (rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits > pdo.SRCFixedPDO.MaxCurrentIn10mAunits))
 801325e:	230c      	movs	r3, #12
 8013260:	18fb      	adds	r3, r7, r3
 8013262:	881b      	ldrh	r3, [r3, #0]
 8013264:	059b      	lsls	r3, r3, #22
 8013266:	0d9b      	lsrs	r3, r3, #22
 8013268:	b29a      	uxth	r2, r3
 801326a:	193b      	adds	r3, r7, r4
 801326c:	881b      	ldrh	r3, [r3, #0]
 801326e:	059b      	lsls	r3, r3, #22
 8013270:	0d9b      	lsrs	r3, r3, #22
 8013272:	b29b      	uxth	r3, r3
 8013274:	429a      	cmp	r2, r3
 8013276:	d904      	bls.n	8013282 <USBPD_DPM_EvaluateRequest+0x96>
			{
				/* Sink requests too much maximum operating current */
				/* USBPD_DPM_EvaluateRequest: Sink requests too much maximum operating current */
				_retr =  USBPD_REJECT;
 8013278:	2317      	movs	r3, #23
 801327a:	18fb      	adds	r3, r7, r3
 801327c:	220c      	movs	r2, #12
 801327e:	701a      	strb	r2, [r3, #0]
 8013280:	e044      	b.n	801330c <USBPD_DPM_EvaluateRequest+0x120>
			}
			else
			{
				/* Save the power object */
				*PtrPowerObject = pdo.GenericPDO.PowerObject;
 8013282:	2313      	movs	r3, #19
 8013284:	18fb      	adds	r3, r7, r3
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	061b      	lsls	r3, r3, #24
 801328a:	0f9b      	lsrs	r3, r3, #30
 801328c:	b2db      	uxtb	r3, r3
 801328e:	001a      	movs	r2, r3
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	601a      	str	r2, [r3, #0]
				/* Set RDO position and requested voltage in DPM port structure */
				DPM_Ports[PortNum].DPM_RequestedVoltage = pdo.SRCFixedPDO.VoltageIn50mVunits * 50;
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	031b      	lsls	r3, r3, #12
 8013298:	0d9b      	lsrs	r3, r3, #22
 801329a:	b29b      	uxth	r3, r3
 801329c:	001a      	movs	r2, r3
 801329e:	2332      	movs	r3, #50	; 0x32
 80132a0:	4353      	muls	r3, r2
 80132a2:	0019      	movs	r1, r3
 80132a4:	1dfb      	adds	r3, r7, #7
 80132a6:	781a      	ldrb	r2, [r3, #0]
 80132a8:	0008      	movs	r0, r1
 80132aa:	491c      	ldr	r1, [pc, #112]	; (801331c <USBPD_DPM_EvaluateRequest+0x130>)
 80132ac:	0013      	movs	r3, r2
 80132ae:	011b      	lsls	r3, r3, #4
 80132b0:	1a9b      	subs	r3, r3, r2
 80132b2:	009b      	lsls	r3, r3, #2
 80132b4:	18cb      	adds	r3, r1, r3
 80132b6:	3328      	adds	r3, #40	; 0x28
 80132b8:	6018      	str	r0, [r3, #0]
				DPM_Ports[PortNum].DPM_RDOPositionPrevious = DPM_Ports[PortNum].DPM_RDOPosition;
 80132ba:	1dfb      	adds	r3, r7, #7
 80132bc:	7819      	ldrb	r1, [r3, #0]
 80132be:	1dfb      	adds	r3, r7, #7
 80132c0:	781a      	ldrb	r2, [r3, #0]
 80132c2:	4816      	ldr	r0, [pc, #88]	; (801331c <USBPD_DPM_EvaluateRequest+0x130>)
 80132c4:	000b      	movs	r3, r1
 80132c6:	011b      	lsls	r3, r3, #4
 80132c8:	1a5b      	subs	r3, r3, r1
 80132ca:	009b      	lsls	r3, r3, #2
 80132cc:	18c3      	adds	r3, r0, r3
 80132ce:	3320      	adds	r3, #32
 80132d0:	6819      	ldr	r1, [r3, #0]
 80132d2:	4812      	ldr	r0, [pc, #72]	; (801331c <USBPD_DPM_EvaluateRequest+0x130>)
 80132d4:	0013      	movs	r3, r2
 80132d6:	011b      	lsls	r3, r3, #4
 80132d8:	1a9b      	subs	r3, r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	18c3      	adds	r3, r0, r3
 80132de:	3324      	adds	r3, #36	; 0x24
 80132e0:	6019      	str	r1, [r3, #0]
				DPM_Ports[PortNum].DPM_RDOPosition = rdo.GenericRDO.ObjectPosition;
 80132e2:	230f      	movs	r3, #15
 80132e4:	18fb      	adds	r3, r7, r3
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	065b      	lsls	r3, r3, #25
 80132ea:	0f5b      	lsrs	r3, r3, #29
 80132ec:	b2d9      	uxtb	r1, r3
 80132ee:	1dfb      	adds	r3, r7, #7
 80132f0:	781a      	ldrb	r2, [r3, #0]
 80132f2:	0008      	movs	r0, r1
 80132f4:	4909      	ldr	r1, [pc, #36]	; (801331c <USBPD_DPM_EvaluateRequest+0x130>)
 80132f6:	0013      	movs	r3, r2
 80132f8:	011b      	lsls	r3, r3, #4
 80132fa:	1a9b      	subs	r3, r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	18cb      	adds	r3, r1, r3
 8013300:	3320      	adds	r3, #32
 8013302:	6018      	str	r0, [r3, #0]
				 _retr = USBPD_ACCEPT;
 8013304:	2317      	movs	r3, #23
 8013306:	18fb      	adds	r3, r7, r3
 8013308:	220a      	movs	r2, #10
 801330a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return _retr;
 801330c:	2317      	movs	r3, #23
 801330e:	18fb      	adds	r3, r7, r3
 8013310:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateRequest */
}
 8013312:	0018      	movs	r0, r3
 8013314:	46bd      	mov	sp, r7
 8013316:	b007      	add	sp, #28
 8013318:	bd90      	pop	{r4, r7, pc}
 801331a:	46c0      	nop			; (mov r8, r8)
 801331c:	200027f4 	.word	0x200027f4

08013320 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8013320:	b590      	push	{r4, r7, lr}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	0004      	movs	r4, r0
 8013328:	0008      	movs	r0, r1
 801332a:	603a      	str	r2, [r7, #0]
 801332c:	0019      	movs	r1, r3
 801332e:	1dfb      	adds	r3, r7, #7
 8013330:	1c22      	adds	r2, r4, #0
 8013332:	701a      	strb	r2, [r3, #0]
 8013334:	1dbb      	adds	r3, r7, #6
 8013336:	1c02      	adds	r2, r0, #0
 8013338:	701a      	strb	r2, [r3, #0]
 801333a:	1d3b      	adds	r3, r7, #4
 801333c:	1c0a      	adds	r2, r1, #0
 801333e:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8013340:	46c0      	nop			; (mov r8, r8)
 8013342:	46bd      	mov	sp, r7
 8013344:	b003      	add	sp, #12
 8013346:	bd90      	pop	{r4, r7, pc}

08013348 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	0002      	movs	r2, r0
 8013350:	1dfb      	adds	r3, r7, #7
 8013352:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8013354:	1dfb      	adds	r3, r7, #7
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	0018      	movs	r0, r3
 801335a:	f7ec fff3 	bl	8000344 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801335e:	46c0      	nop			; (mov r8, r8)
 8013360:	46bd      	mov	sp, r7
 8013362:	b002      	add	sp, #8
 8013364:	bd80      	pop	{r7, pc}
	...

08013368 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b084      	sub	sp, #16
 801336c:	af00      	add	r7, sp, #0
 801336e:	0002      	movs	r2, r0
 8013370:	1dfb      	adds	r3, r7, #7
 8013372:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8013374:	230f      	movs	r3, #15
 8013376:	18fb      	adds	r3, r7, r3
 8013378:	220c      	movs	r2, #12
 801337a:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801337c:	1dfb      	adds	r3, r7, #7
 801337e:	781a      	ldrb	r2, [r3, #0]
 8013380:	4931      	ldr	r1, [pc, #196]	; (8013448 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8013382:	0013      	movs	r3, r2
 8013384:	00db      	lsls	r3, r3, #3
 8013386:	1a9b      	subs	r3, r3, r2
 8013388:	011b      	lsls	r3, r3, #4
 801338a:	5c5b      	ldrb	r3, [r3, r1]
 801338c:	07db      	lsls	r3, r3, #31
 801338e:	0fdb      	lsrs	r3, r3, #31
 8013390:	b2db      	uxtb	r3, r3
 8013392:	2b00      	cmp	r3, #0
 8013394:	d019      	beq.n	80133ca <USBPD_DPM_EvaluateDataRoleSwap+0x62>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 8013396:	1dfb      	adds	r3, r7, #7
 8013398:	781a      	ldrb	r2, [r3, #0]
 801339a:	492b      	ldr	r1, [pc, #172]	; (8013448 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 801339c:	0013      	movs	r3, r2
 801339e:	00db      	lsls	r3, r3, #3
 80133a0:	1a9b      	subs	r3, r3, r2
 80133a2:	011b      	lsls	r3, r3, #4
 80133a4:	5c5b      	ldrb	r3, [r3, r1]
 80133a6:	075b      	lsls	r3, r3, #29
 80133a8:	0fdb      	lsrs	r3, r3, #31
 80133aa:	b2db      	uxtb	r3, r3
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d111      	bne.n	80133d4 <USBPD_DPM_EvaluateDataRoleSwap+0x6c>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 80133b0:	1dfb      	adds	r3, r7, #7
 80133b2:	781a      	ldrb	r2, [r3, #0]
 80133b4:	4924      	ldr	r1, [pc, #144]	; (8013448 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 80133b6:	0013      	movs	r3, r2
 80133b8:	00db      	lsls	r3, r3, #3
 80133ba:	1a9b      	subs	r3, r3, r2
 80133bc:	011b      	lsls	r3, r3, #4
 80133be:	5c5b      	ldrb	r3, [r3, r1]
 80133c0:	071b      	lsls	r3, r3, #28
 80133c2:	0fdb      	lsrs	r3, r3, #31
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d104      	bne.n	80133d4 <USBPD_DPM_EvaluateDataRoleSwap+0x6c>
  {
    status = USBPD_NOTSUPPORTED;
 80133ca:	230f      	movs	r3, #15
 80133cc:	18fb      	adds	r3, r7, r3
 80133ce:	2201      	movs	r2, #1
 80133d0:	701a      	strb	r2, [r3, #0]
 80133d2:	e031      	b.n	8013438 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 80133d4:	1dfb      	adds	r3, r7, #7
 80133d6:	781a      	ldrb	r2, [r3, #0]
 80133d8:	491b      	ldr	r1, [pc, #108]	; (8013448 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 80133da:	0013      	movs	r3, r2
 80133dc:	00db      	lsls	r3, r3, #3
 80133de:	1a9b      	subs	r3, r3, r2
 80133e0:	011b      	lsls	r3, r3, #4
 80133e2:	5c5b      	ldrb	r3, [r3, r1]
 80133e4:	075b      	lsls	r3, r3, #29
 80133e6:	0fdb      	lsrs	r3, r3, #31
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	d109      	bne.n	8013402 <USBPD_DPM_EvaluateDataRoleSwap+0x9a>
 80133ee:	1dfb      	adds	r3, r7, #7
 80133f0:	781a      	ldrb	r2, [r3, #0]
 80133f2:	4b16      	ldr	r3, [pc, #88]	; (801344c <USBPD_DPM_EvaluateDataRoleSwap+0xe4>)
 80133f4:	0092      	lsls	r2, r2, #2
 80133f6:	5cd3      	ldrb	r3, [r2, r3]
 80133f8:	071b      	lsls	r3, r3, #28
 80133fa:	0fdb      	lsrs	r3, r3, #31
 80133fc:	b2db      	uxtb	r3, r3
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d016      	beq.n	8013430 <USBPD_DPM_EvaluateDataRoleSwap+0xc8>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8013402:	1dfb      	adds	r3, r7, #7
 8013404:	781a      	ldrb	r2, [r3, #0]
 8013406:	4910      	ldr	r1, [pc, #64]	; (8013448 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8013408:	0013      	movs	r3, r2
 801340a:	00db      	lsls	r3, r3, #3
 801340c:	1a9b      	subs	r3, r3, r2
 801340e:	011b      	lsls	r3, r3, #4
 8013410:	5c5b      	ldrb	r3, [r3, r1]
 8013412:	071b      	lsls	r3, r3, #28
 8013414:	0fdb      	lsrs	r3, r3, #31
 8013416:	b2db      	uxtb	r3, r3
 8013418:	2b01      	cmp	r3, #1
 801341a:	d10d      	bne.n	8013438 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
 801341c:	1dfb      	adds	r3, r7, #7
 801341e:	781a      	ldrb	r2, [r3, #0]
 8013420:	4b0a      	ldr	r3, [pc, #40]	; (801344c <USBPD_DPM_EvaluateDataRoleSwap+0xe4>)
 8013422:	0092      	lsls	r2, r2, #2
 8013424:	5cd3      	ldrb	r3, [r2, r3]
 8013426:	071b      	lsls	r3, r3, #28
 8013428:	0fdb      	lsrs	r3, r3, #31
 801342a:	b2db      	uxtb	r3, r3
 801342c:	2b01      	cmp	r3, #1
 801342e:	d103      	bne.n	8013438 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
    {
      status = USBPD_ACCEPT;
 8013430:	230f      	movs	r3, #15
 8013432:	18fb      	adds	r3, r7, r3
 8013434:	220a      	movs	r2, #10
 8013436:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 8013438:	230f      	movs	r3, #15
 801343a:	18fb      	adds	r3, r7, r3
 801343c:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801343e:	0018      	movs	r0, r3
 8013440:	46bd      	mov	sp, r7
 8013442:	b004      	add	sp, #16
 8013444:	bd80      	pop	{r7, pc}
 8013446:	46c0      	nop			; (mov r8, r8)
 8013448:	20000094 	.word	0x20000094
 801344c:	200027dc 	.word	0x200027dc

08013450 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	0002      	movs	r2, r0
 8013458:	1dfb      	adds	r3, r7, #7
 801345a:	701a      	strb	r2, [r3, #0]
 801345c:	1dbb      	adds	r3, r7, #6
 801345e:	1c0a      	adds	r2, r1, #0
 8013460:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8013462:	1dbb      	adds	r3, r7, #6
 8013464:	781a      	ldrb	r2, [r3, #0]
 8013466:	1dfb      	adds	r3, r7, #7
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	0011      	movs	r1, r2
 801346c:	0018      	movs	r0, r3
 801346e:	f7ff faef 	bl	8012a50 <USBPD_PWR_IF_SupplyReady>
 8013472:	0003      	movs	r3, r0
 8013474:	425a      	negs	r2, r3
 8013476:	4153      	adcs	r3, r2
 8013478:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801347a:	0018      	movs	r0, r3
 801347c:	46bd      	mov	sp, r7
 801347e:	b002      	add	sp, #8
 8013480:	bd80      	pop	{r7, pc}
	...

08013484 <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 8013484:	b5b0      	push	{r4, r5, r7, lr}
 8013486:	b092      	sub	sp, #72	; 0x48
 8013488:	af02      	add	r7, sp, #8
 801348a:	0002      	movs	r2, r0
 801348c:	1dfb      	adds	r3, r7, #7
 801348e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 8013490:	253f      	movs	r5, #63	; 0x3f
 8013492:	197c      	adds	r4, r7, r5
 8013494:	1dfb      	adds	r3, r7, #7
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	0018      	movs	r0, r3
 801349a:	f7ed f861 	bl	8000560 <USBPD_PE_Request_HardReset>
 801349e:	0003      	movs	r3, r0
 80134a0:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 80134a2:	197b      	adds	r3, r7, r5
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d027      	beq.n	80134fa <USBPD_DPM_RequestHardReset+0x76>
 80134aa:	4a17      	ldr	r2, [pc, #92]	; (8013508 <USBPD_DPM_RequestHardReset+0x84>)
 80134ac:	240c      	movs	r4, #12
 80134ae:	193b      	adds	r3, r7, r4
 80134b0:	2132      	movs	r1, #50	; 0x32
 80134b2:	0018      	movs	r0, r3
 80134b4:	f005 fefc 	bl	80192b0 <sniprintf>
 80134b8:	0002      	movs	r2, r0
 80134ba:	213e      	movs	r1, #62	; 0x3e
 80134bc:	187b      	adds	r3, r7, r1
 80134be:	701a      	strb	r2, [r3, #0]
 80134c0:	187b      	adds	r3, r7, r1
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	2b31      	cmp	r3, #49	; 0x31
 80134c6:	d80d      	bhi.n	80134e4 <USBPD_DPM_RequestHardReset+0x60>
 80134c8:	193b      	adds	r3, r7, r4
 80134ca:	0018      	movs	r0, r3
 80134cc:	f7f2 ff38 	bl	8006340 <strlen>
 80134d0:	193a      	adds	r2, r7, r4
 80134d2:	1dfb      	adds	r3, r7, #7
 80134d4:	7819      	ldrb	r1, [r3, #0]
 80134d6:	9000      	str	r0, [sp, #0]
 80134d8:	0013      	movs	r3, r2
 80134da:	2200      	movs	r2, #0
 80134dc:	2006      	movs	r0, #6
 80134de:	f7f9 fe7d 	bl	800d1dc <USBPD_TRACE_Add>
 80134e2:	e00a      	b.n	80134fa <USBPD_DPM_RequestHardReset+0x76>
 80134e4:	230c      	movs	r3, #12
 80134e6:	18fa      	adds	r2, r7, r3
 80134e8:	1dfb      	adds	r3, r7, #7
 80134ea:	7819      	ldrb	r1, [r3, #0]
 80134ec:	2332      	movs	r3, #50	; 0x32
 80134ee:	9300      	str	r3, [sp, #0]
 80134f0:	0013      	movs	r3, r2
 80134f2:	2200      	movs	r2, #0
 80134f4:	2006      	movs	r0, #6
 80134f6:	f7f9 fe71 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 80134fa:	233f      	movs	r3, #63	; 0x3f
 80134fc:	18fb      	adds	r3, r7, r3
 80134fe:	781b      	ldrb	r3, [r3, #0]
}
 8013500:	0018      	movs	r0, r3
 8013502:	46bd      	mov	sp, r7
 8013504:	b010      	add	sp, #64	; 0x40
 8013506:	bdb0      	pop	{r4, r5, r7, pc}
 8013508:	0801a064 	.word	0x0801a064

0801350c <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 801350c:	b5b0      	push	{r4, r5, r7, lr}
 801350e:	b092      	sub	sp, #72	; 0x48
 8013510:	af02      	add	r7, sp, #8
 8013512:	0002      	movs	r2, r0
 8013514:	1dfb      	adds	r3, r7, #7
 8013516:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 8013518:	253f      	movs	r5, #63	; 0x3f
 801351a:	197c      	adds	r4, r7, r5
 801351c:	1dfb      	adds	r3, r7, #7
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	0018      	movs	r0, r3
 8013522:	f7ed f829 	bl	8000578 <USBPD_PE_Request_CableReset>
 8013526:	0003      	movs	r3, r0
 8013528:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 801352a:	197b      	adds	r3, r7, r5
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d027      	beq.n	8013582 <USBPD_DPM_RequestCableReset+0x76>
 8013532:	4a17      	ldr	r2, [pc, #92]	; (8013590 <USBPD_DPM_RequestCableReset+0x84>)
 8013534:	240c      	movs	r4, #12
 8013536:	193b      	adds	r3, r7, r4
 8013538:	2132      	movs	r1, #50	; 0x32
 801353a:	0018      	movs	r0, r3
 801353c:	f005 feb8 	bl	80192b0 <sniprintf>
 8013540:	0002      	movs	r2, r0
 8013542:	213e      	movs	r1, #62	; 0x3e
 8013544:	187b      	adds	r3, r7, r1
 8013546:	701a      	strb	r2, [r3, #0]
 8013548:	187b      	adds	r3, r7, r1
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	2b31      	cmp	r3, #49	; 0x31
 801354e:	d80d      	bhi.n	801356c <USBPD_DPM_RequestCableReset+0x60>
 8013550:	193b      	adds	r3, r7, r4
 8013552:	0018      	movs	r0, r3
 8013554:	f7f2 fef4 	bl	8006340 <strlen>
 8013558:	193a      	adds	r2, r7, r4
 801355a:	1dfb      	adds	r3, r7, #7
 801355c:	7819      	ldrb	r1, [r3, #0]
 801355e:	9000      	str	r0, [sp, #0]
 8013560:	0013      	movs	r3, r2
 8013562:	2200      	movs	r2, #0
 8013564:	2006      	movs	r0, #6
 8013566:	f7f9 fe39 	bl	800d1dc <USBPD_TRACE_Add>
 801356a:	e00a      	b.n	8013582 <USBPD_DPM_RequestCableReset+0x76>
 801356c:	230c      	movs	r3, #12
 801356e:	18fa      	adds	r2, r7, r3
 8013570:	1dfb      	adds	r3, r7, #7
 8013572:	7819      	ldrb	r1, [r3, #0]
 8013574:	2332      	movs	r3, #50	; 0x32
 8013576:	9300      	str	r3, [sp, #0]
 8013578:	0013      	movs	r3, r2
 801357a:	2200      	movs	r2, #0
 801357c:	2006      	movs	r0, #6
 801357e:	f7f9 fe2d 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013582:	233f      	movs	r3, #63	; 0x3f
 8013584:	18fb      	adds	r3, r7, r3
 8013586:	781b      	ldrb	r3, [r3, #0]
}
 8013588:	0018      	movs	r0, r3
 801358a:	46bd      	mov	sp, r7
 801358c:	b010      	add	sp, #64	; 0x40
 801358e:	bdb0      	pop	{r4, r5, r7, pc}
 8013590:	0801a08c 	.word	0x0801a08c

08013594 <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 8013594:	b5b0      	push	{r4, r5, r7, lr}
 8013596:	b092      	sub	sp, #72	; 0x48
 8013598:	af02      	add	r7, sp, #8
 801359a:	0002      	movs	r2, r0
 801359c:	1dfb      	adds	r3, r7, #7
 801359e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 80135a0:	253f      	movs	r5, #63	; 0x3f
 80135a2:	197c      	adds	r4, r7, r5
 80135a4:	1dfb      	adds	r3, r7, #7
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	2200      	movs	r2, #0
 80135aa:	2102      	movs	r1, #2
 80135ac:	0018      	movs	r0, r3
 80135ae:	f7ec fffd 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 80135b2:	0003      	movs	r3, r0
 80135b4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 80135b6:	197b      	adds	r3, r7, r5
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d027      	beq.n	801360e <USBPD_DPM_RequestGotoMin+0x7a>
 80135be:	4a17      	ldr	r2, [pc, #92]	; (801361c <USBPD_DPM_RequestGotoMin+0x88>)
 80135c0:	240c      	movs	r4, #12
 80135c2:	193b      	adds	r3, r7, r4
 80135c4:	2132      	movs	r1, #50	; 0x32
 80135c6:	0018      	movs	r0, r3
 80135c8:	f005 fe72 	bl	80192b0 <sniprintf>
 80135cc:	0002      	movs	r2, r0
 80135ce:	213e      	movs	r1, #62	; 0x3e
 80135d0:	187b      	adds	r3, r7, r1
 80135d2:	701a      	strb	r2, [r3, #0]
 80135d4:	187b      	adds	r3, r7, r1
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	2b31      	cmp	r3, #49	; 0x31
 80135da:	d80d      	bhi.n	80135f8 <USBPD_DPM_RequestGotoMin+0x64>
 80135dc:	193b      	adds	r3, r7, r4
 80135de:	0018      	movs	r0, r3
 80135e0:	f7f2 feae 	bl	8006340 <strlen>
 80135e4:	193a      	adds	r2, r7, r4
 80135e6:	1dfb      	adds	r3, r7, #7
 80135e8:	7819      	ldrb	r1, [r3, #0]
 80135ea:	9000      	str	r0, [sp, #0]
 80135ec:	0013      	movs	r3, r2
 80135ee:	2200      	movs	r2, #0
 80135f0:	2006      	movs	r0, #6
 80135f2:	f7f9 fdf3 	bl	800d1dc <USBPD_TRACE_Add>
 80135f6:	e00a      	b.n	801360e <USBPD_DPM_RequestGotoMin+0x7a>
 80135f8:	230c      	movs	r3, #12
 80135fa:	18fa      	adds	r2, r7, r3
 80135fc:	1dfb      	adds	r3, r7, #7
 80135fe:	7819      	ldrb	r1, [r3, #0]
 8013600:	2332      	movs	r3, #50	; 0x32
 8013602:	9300      	str	r3, [sp, #0]
 8013604:	0013      	movs	r3, r2
 8013606:	2200      	movs	r2, #0
 8013608:	2006      	movs	r0, #6
 801360a:	f7f9 fde7 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 801360e:	233f      	movs	r3, #63	; 0x3f
 8013610:	18fb      	adds	r3, r7, r3
 8013612:	781b      	ldrb	r3, [r3, #0]
}
 8013614:	0018      	movs	r0, r3
 8013616:	46bd      	mov	sp, r7
 8013618:	b010      	add	sp, #64	; 0x40
 801361a:	bdb0      	pop	{r4, r5, r7, pc}
 801361c:	0801a0b4 	.word	0x0801a0b4

08013620 <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 8013620:	b5b0      	push	{r4, r5, r7, lr}
 8013622:	b092      	sub	sp, #72	; 0x48
 8013624:	af02      	add	r7, sp, #8
 8013626:	0002      	movs	r2, r0
 8013628:	1dfb      	adds	r3, r7, #7
 801362a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 801362c:	253f      	movs	r5, #63	; 0x3f
 801362e:	197c      	adds	r4, r7, r5
 8013630:	1dfb      	adds	r3, r7, #7
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	2200      	movs	r2, #0
 8013636:	2105      	movs	r1, #5
 8013638:	0018      	movs	r0, r3
 801363a:	f7ec ffb7 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 801363e:	0003      	movs	r3, r0
 8013640:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 8013642:	197b      	adds	r3, r7, r5
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d027      	beq.n	801369a <USBPD_DPM_RequestPing+0x7a>
 801364a:	4a17      	ldr	r2, [pc, #92]	; (80136a8 <USBPD_DPM_RequestPing+0x88>)
 801364c:	240c      	movs	r4, #12
 801364e:	193b      	adds	r3, r7, r4
 8013650:	2132      	movs	r1, #50	; 0x32
 8013652:	0018      	movs	r0, r3
 8013654:	f005 fe2c 	bl	80192b0 <sniprintf>
 8013658:	0002      	movs	r2, r0
 801365a:	213e      	movs	r1, #62	; 0x3e
 801365c:	187b      	adds	r3, r7, r1
 801365e:	701a      	strb	r2, [r3, #0]
 8013660:	187b      	adds	r3, r7, r1
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	2b31      	cmp	r3, #49	; 0x31
 8013666:	d80d      	bhi.n	8013684 <USBPD_DPM_RequestPing+0x64>
 8013668:	193b      	adds	r3, r7, r4
 801366a:	0018      	movs	r0, r3
 801366c:	f7f2 fe68 	bl	8006340 <strlen>
 8013670:	193a      	adds	r2, r7, r4
 8013672:	1dfb      	adds	r3, r7, #7
 8013674:	7819      	ldrb	r1, [r3, #0]
 8013676:	9000      	str	r0, [sp, #0]
 8013678:	0013      	movs	r3, r2
 801367a:	2200      	movs	r2, #0
 801367c:	2006      	movs	r0, #6
 801367e:	f7f9 fdad 	bl	800d1dc <USBPD_TRACE_Add>
 8013682:	e00a      	b.n	801369a <USBPD_DPM_RequestPing+0x7a>
 8013684:	230c      	movs	r3, #12
 8013686:	18fa      	adds	r2, r7, r3
 8013688:	1dfb      	adds	r3, r7, #7
 801368a:	7819      	ldrb	r1, [r3, #0]
 801368c:	2332      	movs	r3, #50	; 0x32
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	0013      	movs	r3, r2
 8013692:	2200      	movs	r2, #0
 8013694:	2006      	movs	r0, #6
 8013696:	f7f9 fda1 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 801369a:	233f      	movs	r3, #63	; 0x3f
 801369c:	18fb      	adds	r3, r7, r3
 801369e:	781b      	ldrb	r3, [r3, #0]
}
 80136a0:	0018      	movs	r0, r3
 80136a2:	46bd      	mov	sp, r7
 80136a4:	b010      	add	sp, #64	; 0x40
 80136a6:	bdb0      	pop	{r4, r5, r7, pc}
 80136a8:	0801a0d8 	.word	0x0801a0d8

080136ac <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 80136ac:	b590      	push	{r4, r7, lr}
 80136ae:	b093      	sub	sp, #76	; 0x4c
 80136b0:	af02      	add	r7, sp, #8
 80136b2:	0004      	movs	r4, r0
 80136b4:	0008      	movs	r0, r1
 80136b6:	0011      	movs	r1, r2
 80136b8:	1dfb      	adds	r3, r7, #7
 80136ba:	1c22      	adds	r2, r4, #0
 80136bc:	701a      	strb	r2, [r3, #0]
 80136be:	1dbb      	adds	r3, r7, #6
 80136c0:	1c02      	adds	r2, r0, #0
 80136c2:	701a      	strb	r2, [r3, #0]
 80136c4:	1d3b      	adds	r3, r7, #4
 80136c6:	1c0a      	adds	r2, r1, #0
 80136c8:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 80136ca:	233f      	movs	r3, #63	; 0x3f
 80136cc:	18fb      	adds	r3, r7, r3
 80136ce:	2202      	movs	r2, #2
 80136d0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_RequestMessageRequest */
  /* To be adapted to call the PE function */
  /*       _status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);*/
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_RequestMessageRequest");
 80136d2:	4a2e      	ldr	r2, [pc, #184]	; (801378c <USBPD_DPM_RequestMessageRequest+0xe0>)
 80136d4:	2408      	movs	r4, #8
 80136d6:	193b      	adds	r3, r7, r4
 80136d8:	2132      	movs	r1, #50	; 0x32
 80136da:	0018      	movs	r0, r3
 80136dc:	f005 fde8 	bl	80192b0 <sniprintf>
 80136e0:	0002      	movs	r2, r0
 80136e2:	213e      	movs	r1, #62	; 0x3e
 80136e4:	187b      	adds	r3, r7, r1
 80136e6:	701a      	strb	r2, [r3, #0]
 80136e8:	187b      	adds	r3, r7, r1
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	2b31      	cmp	r3, #49	; 0x31
 80136ee:	d80d      	bhi.n	801370c <USBPD_DPM_RequestMessageRequest+0x60>
 80136f0:	193b      	adds	r3, r7, r4
 80136f2:	0018      	movs	r0, r3
 80136f4:	f7f2 fe24 	bl	8006340 <strlen>
 80136f8:	193a      	adds	r2, r7, r4
 80136fa:	1dfb      	adds	r3, r7, #7
 80136fc:	7819      	ldrb	r1, [r3, #0]
 80136fe:	9000      	str	r0, [sp, #0]
 8013700:	0013      	movs	r3, r2
 8013702:	2200      	movs	r2, #0
 8013704:	2006      	movs	r0, #6
 8013706:	f7f9 fd69 	bl	800d1dc <USBPD_TRACE_Add>
 801370a:	e00a      	b.n	8013722 <USBPD_DPM_RequestMessageRequest+0x76>
 801370c:	2308      	movs	r3, #8
 801370e:	18fa      	adds	r2, r7, r3
 8013710:	1dfb      	adds	r3, r7, #7
 8013712:	7819      	ldrb	r1, [r3, #0]
 8013714:	2332      	movs	r3, #50	; 0x32
 8013716:	9300      	str	r3, [sp, #0]
 8013718:	0013      	movs	r3, r2
 801371a:	2200      	movs	r2, #0
 801371c:	2006      	movs	r0, #6
 801371e:	f7f9 fd5d 	bl	800d1dc <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 8013722:	233f      	movs	r3, #63	; 0x3f
 8013724:	18fb      	adds	r3, r7, r3
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d027      	beq.n	801377c <USBPD_DPM_RequestMessageRequest+0xd0>
 801372c:	4a18      	ldr	r2, [pc, #96]	; (8013790 <USBPD_DPM_RequestMessageRequest+0xe4>)
 801372e:	2408      	movs	r4, #8
 8013730:	193b      	adds	r3, r7, r4
 8013732:	2132      	movs	r1, #50	; 0x32
 8013734:	0018      	movs	r0, r3
 8013736:	f005 fdbb 	bl	80192b0 <sniprintf>
 801373a:	0002      	movs	r2, r0
 801373c:	213d      	movs	r1, #61	; 0x3d
 801373e:	187b      	adds	r3, r7, r1
 8013740:	701a      	strb	r2, [r3, #0]
 8013742:	187b      	adds	r3, r7, r1
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	2b31      	cmp	r3, #49	; 0x31
 8013748:	d80d      	bhi.n	8013766 <USBPD_DPM_RequestMessageRequest+0xba>
 801374a:	193b      	adds	r3, r7, r4
 801374c:	0018      	movs	r0, r3
 801374e:	f7f2 fdf7 	bl	8006340 <strlen>
 8013752:	193a      	adds	r2, r7, r4
 8013754:	1dfb      	adds	r3, r7, #7
 8013756:	7819      	ldrb	r1, [r3, #0]
 8013758:	9000      	str	r0, [sp, #0]
 801375a:	0013      	movs	r3, r2
 801375c:	2200      	movs	r2, #0
 801375e:	2006      	movs	r0, #6
 8013760:	f7f9 fd3c 	bl	800d1dc <USBPD_TRACE_Add>
 8013764:	e00a      	b.n	801377c <USBPD_DPM_RequestMessageRequest+0xd0>
 8013766:	2308      	movs	r3, #8
 8013768:	18fa      	adds	r2, r7, r3
 801376a:	1dfb      	adds	r3, r7, #7
 801376c:	7819      	ldrb	r1, [r3, #0]
 801376e:	2332      	movs	r3, #50	; 0x32
 8013770:	9300      	str	r3, [sp, #0]
 8013772:	0013      	movs	r3, r2
 8013774:	2200      	movs	r2, #0
 8013776:	2006      	movs	r0, #6
 8013778:	f7f9 fd30 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 801377c:	233f      	movs	r3, #63	; 0x3f
 801377e:	18fb      	adds	r3, r7, r3
 8013780:	781b      	ldrb	r3, [r3, #0]
}
 8013782:	0018      	movs	r0, r3
 8013784:	46bd      	mov	sp, r7
 8013786:	b011      	add	sp, #68	; 0x44
 8013788:	bd90      	pop	{r4, r7, pc}
 801378a:	46c0      	nop			; (mov r8, r8)
 801378c:	0801a0f8 	.word	0x0801a0f8
 8013790:	0801a128 	.word	0x0801a128

08013794 <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 8013794:	b5b0      	push	{r4, r5, r7, lr}
 8013796:	b092      	sub	sp, #72	; 0x48
 8013798:	af02      	add	r7, sp, #8
 801379a:	0002      	movs	r2, r0
 801379c:	1dfb      	adds	r3, r7, #7
 801379e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 80137a0:	253f      	movs	r5, #63	; 0x3f
 80137a2:	197c      	adds	r4, r7, r5
 80137a4:	1dfb      	adds	r3, r7, #7
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	2200      	movs	r2, #0
 80137aa:	2107      	movs	r1, #7
 80137ac:	0018      	movs	r0, r3
 80137ae:	f7ec fefd 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 80137b2:	0003      	movs	r3, r0
 80137b4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 80137b6:	197b      	adds	r3, r7, r5
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d027      	beq.n	801380e <USBPD_DPM_RequestGetSourceCapability+0x7a>
 80137be:	4a17      	ldr	r2, [pc, #92]	; (801381c <USBPD_DPM_RequestGetSourceCapability+0x88>)
 80137c0:	240c      	movs	r4, #12
 80137c2:	193b      	adds	r3, r7, r4
 80137c4:	2132      	movs	r1, #50	; 0x32
 80137c6:	0018      	movs	r0, r3
 80137c8:	f005 fd72 	bl	80192b0 <sniprintf>
 80137cc:	0002      	movs	r2, r0
 80137ce:	213e      	movs	r1, #62	; 0x3e
 80137d0:	187b      	adds	r3, r7, r1
 80137d2:	701a      	strb	r2, [r3, #0]
 80137d4:	187b      	adds	r3, r7, r1
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	2b31      	cmp	r3, #49	; 0x31
 80137da:	d80d      	bhi.n	80137f8 <USBPD_DPM_RequestGetSourceCapability+0x64>
 80137dc:	193b      	adds	r3, r7, r4
 80137de:	0018      	movs	r0, r3
 80137e0:	f7f2 fdae 	bl	8006340 <strlen>
 80137e4:	193a      	adds	r2, r7, r4
 80137e6:	1dfb      	adds	r3, r7, #7
 80137e8:	7819      	ldrb	r1, [r3, #0]
 80137ea:	9000      	str	r0, [sp, #0]
 80137ec:	0013      	movs	r3, r2
 80137ee:	2200      	movs	r2, #0
 80137f0:	2006      	movs	r0, #6
 80137f2:	f7f9 fcf3 	bl	800d1dc <USBPD_TRACE_Add>
 80137f6:	e00a      	b.n	801380e <USBPD_DPM_RequestGetSourceCapability+0x7a>
 80137f8:	230c      	movs	r3, #12
 80137fa:	18fa      	adds	r2, r7, r3
 80137fc:	1dfb      	adds	r3, r7, #7
 80137fe:	7819      	ldrb	r1, [r3, #0]
 8013800:	2332      	movs	r3, #50	; 0x32
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	0013      	movs	r3, r2
 8013806:	2200      	movs	r2, #0
 8013808:	2006      	movs	r0, #6
 801380a:	f7f9 fce7 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 801380e:	233f      	movs	r3, #63	; 0x3f
 8013810:	18fb      	adds	r3, r7, r3
 8013812:	781b      	ldrb	r3, [r3, #0]
}
 8013814:	0018      	movs	r0, r3
 8013816:	46bd      	mov	sp, r7
 8013818:	b010      	add	sp, #64	; 0x40
 801381a:	bdb0      	pop	{r4, r5, r7, pc}
 801381c:	0801a14c 	.word	0x0801a14c

08013820 <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 8013820:	b5b0      	push	{r4, r5, r7, lr}
 8013822:	b092      	sub	sp, #72	; 0x48
 8013824:	af02      	add	r7, sp, #8
 8013826:	0002      	movs	r2, r0
 8013828:	1dfb      	adds	r3, r7, #7
 801382a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 801382c:	253f      	movs	r5, #63	; 0x3f
 801382e:	197c      	adds	r4, r7, r5
 8013830:	1dfb      	adds	r3, r7, #7
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	2200      	movs	r2, #0
 8013836:	2108      	movs	r1, #8
 8013838:	0018      	movs	r0, r3
 801383a:	f7ec feb7 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 801383e:	0003      	movs	r3, r0
 8013840:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 8013842:	197b      	adds	r3, r7, r5
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d027      	beq.n	801389a <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801384a:	4a17      	ldr	r2, [pc, #92]	; (80138a8 <USBPD_DPM_RequestGetSinkCapability+0x88>)
 801384c:	240c      	movs	r4, #12
 801384e:	193b      	adds	r3, r7, r4
 8013850:	2132      	movs	r1, #50	; 0x32
 8013852:	0018      	movs	r0, r3
 8013854:	f005 fd2c 	bl	80192b0 <sniprintf>
 8013858:	0002      	movs	r2, r0
 801385a:	213e      	movs	r1, #62	; 0x3e
 801385c:	187b      	adds	r3, r7, r1
 801385e:	701a      	strb	r2, [r3, #0]
 8013860:	187b      	adds	r3, r7, r1
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	2b31      	cmp	r3, #49	; 0x31
 8013866:	d80d      	bhi.n	8013884 <USBPD_DPM_RequestGetSinkCapability+0x64>
 8013868:	193b      	adds	r3, r7, r4
 801386a:	0018      	movs	r0, r3
 801386c:	f7f2 fd68 	bl	8006340 <strlen>
 8013870:	193a      	adds	r2, r7, r4
 8013872:	1dfb      	adds	r3, r7, #7
 8013874:	7819      	ldrb	r1, [r3, #0]
 8013876:	9000      	str	r0, [sp, #0]
 8013878:	0013      	movs	r3, r2
 801387a:	2200      	movs	r2, #0
 801387c:	2006      	movs	r0, #6
 801387e:	f7f9 fcad 	bl	800d1dc <USBPD_TRACE_Add>
 8013882:	e00a      	b.n	801389a <USBPD_DPM_RequestGetSinkCapability+0x7a>
 8013884:	230c      	movs	r3, #12
 8013886:	18fa      	adds	r2, r7, r3
 8013888:	1dfb      	adds	r3, r7, #7
 801388a:	7819      	ldrb	r1, [r3, #0]
 801388c:	2332      	movs	r3, #50	; 0x32
 801388e:	9300      	str	r3, [sp, #0]
 8013890:	0013      	movs	r3, r2
 8013892:	2200      	movs	r2, #0
 8013894:	2006      	movs	r0, #6
 8013896:	f7f9 fca1 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 801389a:	233f      	movs	r3, #63	; 0x3f
 801389c:	18fb      	adds	r3, r7, r3
 801389e:	781b      	ldrb	r3, [r3, #0]
}
 80138a0:	0018      	movs	r0, r3
 80138a2:	46bd      	mov	sp, r7
 80138a4:	b010      	add	sp, #64	; 0x40
 80138a6:	bdb0      	pop	{r4, r5, r7, pc}
 80138a8:	0801a174 	.word	0x0801a174

080138ac <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 80138ac:	b5b0      	push	{r4, r5, r7, lr}
 80138ae:	b092      	sub	sp, #72	; 0x48
 80138b0:	af02      	add	r7, sp, #8
 80138b2:	0002      	movs	r2, r0
 80138b4:	1dfb      	adds	r3, r7, #7
 80138b6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 80138b8:	253f      	movs	r5, #63	; 0x3f
 80138ba:	197c      	adds	r4, r7, r5
 80138bc:	1dfb      	adds	r3, r7, #7
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	2200      	movs	r2, #0
 80138c2:	2109      	movs	r1, #9
 80138c4:	0018      	movs	r0, r3
 80138c6:	f7ec fe71 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 80138ca:	0003      	movs	r3, r0
 80138cc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 80138ce:	197b      	adds	r3, r7, r5
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d027      	beq.n	8013926 <USBPD_DPM_RequestDataRoleSwap+0x7a>
 80138d6:	4a17      	ldr	r2, [pc, #92]	; (8013934 <USBPD_DPM_RequestDataRoleSwap+0x88>)
 80138d8:	240c      	movs	r4, #12
 80138da:	193b      	adds	r3, r7, r4
 80138dc:	2132      	movs	r1, #50	; 0x32
 80138de:	0018      	movs	r0, r3
 80138e0:	f005 fce6 	bl	80192b0 <sniprintf>
 80138e4:	0002      	movs	r2, r0
 80138e6:	213e      	movs	r1, #62	; 0x3e
 80138e8:	187b      	adds	r3, r7, r1
 80138ea:	701a      	strb	r2, [r3, #0]
 80138ec:	187b      	adds	r3, r7, r1
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	2b31      	cmp	r3, #49	; 0x31
 80138f2:	d80d      	bhi.n	8013910 <USBPD_DPM_RequestDataRoleSwap+0x64>
 80138f4:	193b      	adds	r3, r7, r4
 80138f6:	0018      	movs	r0, r3
 80138f8:	f7f2 fd22 	bl	8006340 <strlen>
 80138fc:	193a      	adds	r2, r7, r4
 80138fe:	1dfb      	adds	r3, r7, #7
 8013900:	7819      	ldrb	r1, [r3, #0]
 8013902:	9000      	str	r0, [sp, #0]
 8013904:	0013      	movs	r3, r2
 8013906:	2200      	movs	r2, #0
 8013908:	2006      	movs	r0, #6
 801390a:	f7f9 fc67 	bl	800d1dc <USBPD_TRACE_Add>
 801390e:	e00a      	b.n	8013926 <USBPD_DPM_RequestDataRoleSwap+0x7a>
 8013910:	230c      	movs	r3, #12
 8013912:	18fa      	adds	r2, r7, r3
 8013914:	1dfb      	adds	r3, r7, #7
 8013916:	7819      	ldrb	r1, [r3, #0]
 8013918:	2332      	movs	r3, #50	; 0x32
 801391a:	9300      	str	r3, [sp, #0]
 801391c:	0013      	movs	r3, r2
 801391e:	2200      	movs	r2, #0
 8013920:	2006      	movs	r0, #6
 8013922:	f7f9 fc5b 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013926:	233f      	movs	r3, #63	; 0x3f
 8013928:	18fb      	adds	r3, r7, r3
 801392a:	781b      	ldrb	r3, [r3, #0]
}
 801392c:	0018      	movs	r0, r3
 801392e:	46bd      	mov	sp, r7
 8013930:	b010      	add	sp, #64	; 0x40
 8013932:	bdb0      	pop	{r4, r5, r7, pc}
 8013934:	0801a19c 	.word	0x0801a19c

08013938 <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 8013938:	b590      	push	{r4, r7, lr}
 801393a:	b093      	sub	sp, #76	; 0x4c
 801393c:	af02      	add	r7, sp, #8
 801393e:	0002      	movs	r2, r0
 8013940:	1dfb      	adds	r3, r7, #7
 8013942:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 8013944:	4a16      	ldr	r2, [pc, #88]	; (80139a0 <USBPD_DPM_RequestPowerRoleSwap+0x68>)
 8013946:	240c      	movs	r4, #12
 8013948:	193b      	adds	r3, r7, r4
 801394a:	2132      	movs	r1, #50	; 0x32
 801394c:	0018      	movs	r0, r3
 801394e:	f005 fcaf 	bl	80192b0 <sniprintf>
 8013952:	0002      	movs	r2, r0
 8013954:	213f      	movs	r1, #63	; 0x3f
 8013956:	187b      	adds	r3, r7, r1
 8013958:	701a      	strb	r2, [r3, #0]
 801395a:	187b      	adds	r3, r7, r1
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	2b31      	cmp	r3, #49	; 0x31
 8013960:	d80d      	bhi.n	801397e <USBPD_DPM_RequestPowerRoleSwap+0x46>
 8013962:	193b      	adds	r3, r7, r4
 8013964:	0018      	movs	r0, r3
 8013966:	f7f2 fceb 	bl	8006340 <strlen>
 801396a:	193a      	adds	r2, r7, r4
 801396c:	1dfb      	adds	r3, r7, #7
 801396e:	7819      	ldrb	r1, [r3, #0]
 8013970:	9000      	str	r0, [sp, #0]
 8013972:	0013      	movs	r3, r2
 8013974:	2200      	movs	r2, #0
 8013976:	2006      	movs	r0, #6
 8013978:	f7f9 fc30 	bl	800d1dc <USBPD_TRACE_Add>
 801397c:	e00a      	b.n	8013994 <USBPD_DPM_RequestPowerRoleSwap+0x5c>
 801397e:	230c      	movs	r3, #12
 8013980:	18fa      	adds	r2, r7, r3
 8013982:	1dfb      	adds	r3, r7, #7
 8013984:	7819      	ldrb	r1, [r3, #0]
 8013986:	2332      	movs	r3, #50	; 0x32
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	0013      	movs	r3, r2
 801398c:	2200      	movs	r2, #0
 801398e:	2006      	movs	r0, #6
 8013990:	f7f9 fc24 	bl	800d1dc <USBPD_TRACE_Add>
  return USBPD_ERROR;
 8013994:	2302      	movs	r3, #2
}
 8013996:	0018      	movs	r0, r3
 8013998:	46bd      	mov	sp, r7
 801399a:	b011      	add	sp, #68	; 0x44
 801399c:	bd90      	pop	{r4, r7, pc}
 801399e:	46c0      	nop			; (mov r8, r8)
 80139a0:	0801a1bc 	.word	0x0801a1bc

080139a4 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 80139a4:	b5b0      	push	{r4, r5, r7, lr}
 80139a6:	b092      	sub	sp, #72	; 0x48
 80139a8:	af02      	add	r7, sp, #8
 80139aa:	0002      	movs	r2, r0
 80139ac:	1dfb      	adds	r3, r7, #7
 80139ae:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 80139b0:	253f      	movs	r5, #63	; 0x3f
 80139b2:	197c      	adds	r4, r7, r5
 80139b4:	1dfb      	adds	r3, r7, #7
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	2200      	movs	r2, #0
 80139ba:	210b      	movs	r1, #11
 80139bc:	0018      	movs	r0, r3
 80139be:	f7ec fdf5 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 80139c2:	0003      	movs	r3, r0
 80139c4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 80139c6:	197b      	adds	r3, r7, r5
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d027      	beq.n	8013a1e <USBPD_DPM_RequestVconnSwap+0x7a>
 80139ce:	4a17      	ldr	r2, [pc, #92]	; (8013a2c <USBPD_DPM_RequestVconnSwap+0x88>)
 80139d0:	240c      	movs	r4, #12
 80139d2:	193b      	adds	r3, r7, r4
 80139d4:	2132      	movs	r1, #50	; 0x32
 80139d6:	0018      	movs	r0, r3
 80139d8:	f005 fc6a 	bl	80192b0 <sniprintf>
 80139dc:	0002      	movs	r2, r0
 80139de:	213e      	movs	r1, #62	; 0x3e
 80139e0:	187b      	adds	r3, r7, r1
 80139e2:	701a      	strb	r2, [r3, #0]
 80139e4:	187b      	adds	r3, r7, r1
 80139e6:	781b      	ldrb	r3, [r3, #0]
 80139e8:	2b31      	cmp	r3, #49	; 0x31
 80139ea:	d80d      	bhi.n	8013a08 <USBPD_DPM_RequestVconnSwap+0x64>
 80139ec:	193b      	adds	r3, r7, r4
 80139ee:	0018      	movs	r0, r3
 80139f0:	f7f2 fca6 	bl	8006340 <strlen>
 80139f4:	193a      	adds	r2, r7, r4
 80139f6:	1dfb      	adds	r3, r7, #7
 80139f8:	7819      	ldrb	r1, [r3, #0]
 80139fa:	9000      	str	r0, [sp, #0]
 80139fc:	0013      	movs	r3, r2
 80139fe:	2200      	movs	r2, #0
 8013a00:	2006      	movs	r0, #6
 8013a02:	f7f9 fbeb 	bl	800d1dc <USBPD_TRACE_Add>
 8013a06:	e00a      	b.n	8013a1e <USBPD_DPM_RequestVconnSwap+0x7a>
 8013a08:	230c      	movs	r3, #12
 8013a0a:	18fa      	adds	r2, r7, r3
 8013a0c:	1dfb      	adds	r3, r7, #7
 8013a0e:	7819      	ldrb	r1, [r3, #0]
 8013a10:	2332      	movs	r3, #50	; 0x32
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	0013      	movs	r3, r2
 8013a16:	2200      	movs	r2, #0
 8013a18:	2006      	movs	r0, #6
 8013a1a:	f7f9 fbdf 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013a1e:	233f      	movs	r3, #63	; 0x3f
 8013a20:	18fb      	adds	r3, r7, r3
 8013a22:	781b      	ldrb	r3, [r3, #0]
}
 8013a24:	0018      	movs	r0, r3
 8013a26:	46bd      	mov	sp, r7
 8013a28:	b010      	add	sp, #64	; 0x40
 8013a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8013a2c:	0801a1dc 	.word	0x0801a1dc

08013a30 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 8013a30:	b5b0      	push	{r4, r5, r7, lr}
 8013a32:	b092      	sub	sp, #72	; 0x48
 8013a34:	af02      	add	r7, sp, #8
 8013a36:	0002      	movs	r2, r0
 8013a38:	1dfb      	adds	r3, r7, #7
 8013a3a:	701a      	strb	r2, [r3, #0]
 8013a3c:	1dbb      	adds	r3, r7, #6
 8013a3e:	1c0a      	adds	r2, r1, #0
 8013a40:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 8013a42:	253f      	movs	r5, #63	; 0x3f
 8013a44:	197c      	adds	r4, r7, r5
 8013a46:	1dbb      	adds	r3, r7, #6
 8013a48:	781a      	ldrb	r2, [r3, #0]
 8013a4a:	1dfb      	adds	r3, r7, #7
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	210d      	movs	r1, #13
 8013a50:	0018      	movs	r0, r3
 8013a52:	f7ec fdab 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 8013a56:	0003      	movs	r3, r0
 8013a58:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 8013a5a:	197b      	adds	r3, r7, r5
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d027      	beq.n	8013ab2 <USBPD_DPM_RequestSoftReset+0x82>
 8013a62:	4a17      	ldr	r2, [pc, #92]	; (8013ac0 <USBPD_DPM_RequestSoftReset+0x90>)
 8013a64:	240c      	movs	r4, #12
 8013a66:	193b      	adds	r3, r7, r4
 8013a68:	2132      	movs	r1, #50	; 0x32
 8013a6a:	0018      	movs	r0, r3
 8013a6c:	f005 fc20 	bl	80192b0 <sniprintf>
 8013a70:	0002      	movs	r2, r0
 8013a72:	213e      	movs	r1, #62	; 0x3e
 8013a74:	187b      	adds	r3, r7, r1
 8013a76:	701a      	strb	r2, [r3, #0]
 8013a78:	187b      	adds	r3, r7, r1
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	2b31      	cmp	r3, #49	; 0x31
 8013a7e:	d80d      	bhi.n	8013a9c <USBPD_DPM_RequestSoftReset+0x6c>
 8013a80:	193b      	adds	r3, r7, r4
 8013a82:	0018      	movs	r0, r3
 8013a84:	f7f2 fc5c 	bl	8006340 <strlen>
 8013a88:	193a      	adds	r2, r7, r4
 8013a8a:	1dfb      	adds	r3, r7, #7
 8013a8c:	7819      	ldrb	r1, [r3, #0]
 8013a8e:	9000      	str	r0, [sp, #0]
 8013a90:	0013      	movs	r3, r2
 8013a92:	2200      	movs	r2, #0
 8013a94:	2006      	movs	r0, #6
 8013a96:	f7f9 fba1 	bl	800d1dc <USBPD_TRACE_Add>
 8013a9a:	e00a      	b.n	8013ab2 <USBPD_DPM_RequestSoftReset+0x82>
 8013a9c:	230c      	movs	r3, #12
 8013a9e:	18fa      	adds	r2, r7, r3
 8013aa0:	1dfb      	adds	r3, r7, #7
 8013aa2:	7819      	ldrb	r1, [r3, #0]
 8013aa4:	2332      	movs	r3, #50	; 0x32
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	0013      	movs	r3, r2
 8013aaa:	2200      	movs	r2, #0
 8013aac:	2006      	movs	r0, #6
 8013aae:	f7f9 fb95 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013ab2:	233f      	movs	r3, #63	; 0x3f
 8013ab4:	18fb      	adds	r3, r7, r3
 8013ab6:	781b      	ldrb	r3, [r3, #0]
}
 8013ab8:	0018      	movs	r0, r3
 8013aba:	46bd      	mov	sp, r7
 8013abc:	b010      	add	sp, #64	; 0x40
 8013abe:	bdb0      	pop	{r4, r5, r7, pc}
 8013ac0:	0801a1fc 	.word	0x0801a1fc

08013ac4 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 8013ac4:	b5b0      	push	{r4, r5, r7, lr}
 8013ac6:	b092      	sub	sp, #72	; 0x48
 8013ac8:	af02      	add	r7, sp, #8
 8013aca:	0002      	movs	r2, r0
 8013acc:	1dfb      	adds	r3, r7, #7
 8013ace:	701a      	strb	r2, [r3, #0]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 8013ad0:	253f      	movs	r5, #63	; 0x3f
 8013ad2:	197c      	adds	r4, r7, r5
 8013ad4:	1dfb      	adds	r3, r7, #7
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	2101      	movs	r1, #1
 8013adc:	0018      	movs	r0, r3
 8013ade:	f7ec fe11 	bl	8000704 <USBPD_PE_Request_DataMessage>
 8013ae2:	0003      	movs	r3, r0
 8013ae4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 8013ae6:	197b      	adds	r3, r7, r5
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d027      	beq.n	8013b3e <USBPD_DPM_RequestSourceCapability+0x7a>
 8013aee:	4a17      	ldr	r2, [pc, #92]	; (8013b4c <USBPD_DPM_RequestSourceCapability+0x88>)
 8013af0:	240c      	movs	r4, #12
 8013af2:	193b      	adds	r3, r7, r4
 8013af4:	2132      	movs	r1, #50	; 0x32
 8013af6:	0018      	movs	r0, r3
 8013af8:	f005 fbda 	bl	80192b0 <sniprintf>
 8013afc:	0002      	movs	r2, r0
 8013afe:	213e      	movs	r1, #62	; 0x3e
 8013b00:	187b      	adds	r3, r7, r1
 8013b02:	701a      	strb	r2, [r3, #0]
 8013b04:	187b      	adds	r3, r7, r1
 8013b06:	781b      	ldrb	r3, [r3, #0]
 8013b08:	2b31      	cmp	r3, #49	; 0x31
 8013b0a:	d80d      	bhi.n	8013b28 <USBPD_DPM_RequestSourceCapability+0x64>
 8013b0c:	193b      	adds	r3, r7, r4
 8013b0e:	0018      	movs	r0, r3
 8013b10:	f7f2 fc16 	bl	8006340 <strlen>
 8013b14:	193a      	adds	r2, r7, r4
 8013b16:	1dfb      	adds	r3, r7, #7
 8013b18:	7819      	ldrb	r1, [r3, #0]
 8013b1a:	9000      	str	r0, [sp, #0]
 8013b1c:	0013      	movs	r3, r2
 8013b1e:	2200      	movs	r2, #0
 8013b20:	2006      	movs	r0, #6
 8013b22:	f7f9 fb5b 	bl	800d1dc <USBPD_TRACE_Add>
 8013b26:	e00a      	b.n	8013b3e <USBPD_DPM_RequestSourceCapability+0x7a>
 8013b28:	230c      	movs	r3, #12
 8013b2a:	18fa      	adds	r2, r7, r3
 8013b2c:	1dfb      	adds	r3, r7, #7
 8013b2e:	7819      	ldrb	r1, [r3, #0]
 8013b30:	2332      	movs	r3, #50	; 0x32
 8013b32:	9300      	str	r3, [sp, #0]
 8013b34:	0013      	movs	r3, r2
 8013b36:	2200      	movs	r2, #0
 8013b38:	2006      	movs	r0, #6
 8013b3a:	f7f9 fb4f 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013b3e:	233f      	movs	r3, #63	; 0x3f
 8013b40:	18fb      	adds	r3, r7, r3
 8013b42:	781b      	ldrb	r3, [r3, #0]
}
 8013b44:	0018      	movs	r0, r3
 8013b46:	46bd      	mov	sp, r7
 8013b48:	b010      	add	sp, #64	; 0x40
 8013b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8013b4c:	0801a224 	.word	0x0801a224

08013b50 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 8013b50:	b5b0      	push	{r4, r5, r7, lr}
 8013b52:	b092      	sub	sp, #72	; 0x48
 8013b54:	af02      	add	r7, sp, #8
 8013b56:	0002      	movs	r2, r0
 8013b58:	6039      	str	r1, [r7, #0]
 8013b5a:	1dfb      	adds	r3, r7, #7
 8013b5c:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 8013b5e:	253f      	movs	r5, #63	; 0x3f
 8013b60:	197c      	adds	r4, r7, r5
 8013b62:	003a      	movs	r2, r7
 8013b64:	1dfb      	adds	r3, r7, #7
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	2106      	movs	r1, #6
 8013b6a:	0018      	movs	r0, r3
 8013b6c:	f7ec fdca 	bl	8000704 <USBPD_PE_Request_DataMessage>
 8013b70:	0003      	movs	r3, r0
 8013b72:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 8013b74:	197b      	adds	r3, r7, r5
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d027      	beq.n	8013bcc <USBPD_DPM_RequestAlert+0x7c>
 8013b7c:	4a17      	ldr	r2, [pc, #92]	; (8013bdc <USBPD_DPM_RequestAlert+0x8c>)
 8013b7e:	240c      	movs	r4, #12
 8013b80:	193b      	adds	r3, r7, r4
 8013b82:	2132      	movs	r1, #50	; 0x32
 8013b84:	0018      	movs	r0, r3
 8013b86:	f005 fb93 	bl	80192b0 <sniprintf>
 8013b8a:	0002      	movs	r2, r0
 8013b8c:	213e      	movs	r1, #62	; 0x3e
 8013b8e:	187b      	adds	r3, r7, r1
 8013b90:	701a      	strb	r2, [r3, #0]
 8013b92:	187b      	adds	r3, r7, r1
 8013b94:	781b      	ldrb	r3, [r3, #0]
 8013b96:	2b31      	cmp	r3, #49	; 0x31
 8013b98:	d80d      	bhi.n	8013bb6 <USBPD_DPM_RequestAlert+0x66>
 8013b9a:	193b      	adds	r3, r7, r4
 8013b9c:	0018      	movs	r0, r3
 8013b9e:	f7f2 fbcf 	bl	8006340 <strlen>
 8013ba2:	193a      	adds	r2, r7, r4
 8013ba4:	1dfb      	adds	r3, r7, #7
 8013ba6:	7819      	ldrb	r1, [r3, #0]
 8013ba8:	9000      	str	r0, [sp, #0]
 8013baa:	0013      	movs	r3, r2
 8013bac:	2200      	movs	r2, #0
 8013bae:	2006      	movs	r0, #6
 8013bb0:	f7f9 fb14 	bl	800d1dc <USBPD_TRACE_Add>
 8013bb4:	e00a      	b.n	8013bcc <USBPD_DPM_RequestAlert+0x7c>
 8013bb6:	230c      	movs	r3, #12
 8013bb8:	18fa      	adds	r2, r7, r3
 8013bba:	1dfb      	adds	r3, r7, #7
 8013bbc:	7819      	ldrb	r1, [r3, #0]
 8013bbe:	2332      	movs	r3, #50	; 0x32
 8013bc0:	9300      	str	r3, [sp, #0]
 8013bc2:	0013      	movs	r3, r2
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	2006      	movs	r0, #6
 8013bc8:	f7f9 fb08 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013bcc:	233f      	movs	r3, #63	; 0x3f
 8013bce:	18fb      	adds	r3, r7, r3
 8013bd0:	781b      	ldrb	r3, [r3, #0]
}
 8013bd2:	0018      	movs	r0, r3
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	b010      	add	sp, #64	; 0x40
 8013bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8013bda:	46c0      	nop			; (mov r8, r8)
 8013bdc:	0801a3b4 	.word	0x0801a3b4

08013be0 <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 8013be0:	b5b0      	push	{r4, r5, r7, lr}
 8013be2:	b092      	sub	sp, #72	; 0x48
 8013be4:	af02      	add	r7, sp, #8
 8013be6:	0002      	movs	r2, r0
 8013be8:	1dfb      	adds	r3, r7, #7
 8013bea:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 8013bec:	253f      	movs	r5, #63	; 0x3f
 8013bee:	197c      	adds	r4, r7, r5
 8013bf0:	1dfb      	adds	r3, r7, #7
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	2111      	movs	r1, #17
 8013bf8:	0018      	movs	r0, r3
 8013bfa:	f7ec fcd7 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 8013bfe:	0003      	movs	r3, r0
 8013c00:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 8013c02:	197b      	adds	r3, r7, r5
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d027      	beq.n	8013c5a <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 8013c0a:	4a17      	ldr	r2, [pc, #92]	; (8013c68 <USBPD_DPM_RequestGetSourceCapabilityExt+0x88>)
 8013c0c:	240c      	movs	r4, #12
 8013c0e:	193b      	adds	r3, r7, r4
 8013c10:	2132      	movs	r1, #50	; 0x32
 8013c12:	0018      	movs	r0, r3
 8013c14:	f005 fb4c 	bl	80192b0 <sniprintf>
 8013c18:	0002      	movs	r2, r0
 8013c1a:	213e      	movs	r1, #62	; 0x3e
 8013c1c:	187b      	adds	r3, r7, r1
 8013c1e:	701a      	strb	r2, [r3, #0]
 8013c20:	187b      	adds	r3, r7, r1
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	2b31      	cmp	r3, #49	; 0x31
 8013c26:	d80d      	bhi.n	8013c44 <USBPD_DPM_RequestGetSourceCapabilityExt+0x64>
 8013c28:	193b      	adds	r3, r7, r4
 8013c2a:	0018      	movs	r0, r3
 8013c2c:	f7f2 fb88 	bl	8006340 <strlen>
 8013c30:	193a      	adds	r2, r7, r4
 8013c32:	1dfb      	adds	r3, r7, #7
 8013c34:	7819      	ldrb	r1, [r3, #0]
 8013c36:	9000      	str	r0, [sp, #0]
 8013c38:	0013      	movs	r3, r2
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	2006      	movs	r0, #6
 8013c3e:	f7f9 facd 	bl	800d1dc <USBPD_TRACE_Add>
 8013c42:	e00a      	b.n	8013c5a <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 8013c44:	230c      	movs	r3, #12
 8013c46:	18fa      	adds	r2, r7, r3
 8013c48:	1dfb      	adds	r3, r7, #7
 8013c4a:	7819      	ldrb	r1, [r3, #0]
 8013c4c:	2332      	movs	r3, #50	; 0x32
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	0013      	movs	r3, r2
 8013c52:	2200      	movs	r2, #0
 8013c54:	2006      	movs	r0, #6
 8013c56:	f7f9 fac1 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013c5a:	233f      	movs	r3, #63	; 0x3f
 8013c5c:	18fb      	adds	r3, r7, r3
 8013c5e:	781b      	ldrb	r3, [r3, #0]
}
 8013c60:	0018      	movs	r0, r3
 8013c62:	46bd      	mov	sp, r7
 8013c64:	b010      	add	sp, #64	; 0x40
 8013c66:	bdb0      	pop	{r4, r5, r7, pc}
 8013c68:	0801a3d4 	.word	0x0801a3d4

08013c6c <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 8013c6c:	b590      	push	{r4, r7, lr}
 8013c6e:	b093      	sub	sp, #76	; 0x4c
 8013c70:	af02      	add	r7, sp, #8
 8013c72:	0002      	movs	r2, r0
 8013c74:	1dfb      	adds	r3, r7, #7
 8013c76:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "GET_SINK_CAPA_EXT not accepted by the stack");
 8013c78:	4a16      	ldr	r2, [pc, #88]	; (8013cd4 <USBPD_DPM_RequestGetSinkCapabilityExt+0x68>)
 8013c7a:	240c      	movs	r4, #12
 8013c7c:	193b      	adds	r3, r7, r4
 8013c7e:	2132      	movs	r1, #50	; 0x32
 8013c80:	0018      	movs	r0, r3
 8013c82:	f005 fb15 	bl	80192b0 <sniprintf>
 8013c86:	0002      	movs	r2, r0
 8013c88:	213f      	movs	r1, #63	; 0x3f
 8013c8a:	187b      	adds	r3, r7, r1
 8013c8c:	701a      	strb	r2, [r3, #0]
 8013c8e:	187b      	adds	r3, r7, r1
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	2b31      	cmp	r3, #49	; 0x31
 8013c94:	d80d      	bhi.n	8013cb2 <USBPD_DPM_RequestGetSinkCapabilityExt+0x46>
 8013c96:	193b      	adds	r3, r7, r4
 8013c98:	0018      	movs	r0, r3
 8013c9a:	f7f2 fb51 	bl	8006340 <strlen>
 8013c9e:	193a      	adds	r2, r7, r4
 8013ca0:	1dfb      	adds	r3, r7, #7
 8013ca2:	7819      	ldrb	r1, [r3, #0]
 8013ca4:	9000      	str	r0, [sp, #0]
 8013ca6:	0013      	movs	r3, r2
 8013ca8:	2200      	movs	r2, #0
 8013caa:	2006      	movs	r0, #6
 8013cac:	f7f9 fa96 	bl	800d1dc <USBPD_TRACE_Add>
 8013cb0:	e00a      	b.n	8013cc8 <USBPD_DPM_RequestGetSinkCapabilityExt+0x5c>
 8013cb2:	230c      	movs	r3, #12
 8013cb4:	18fa      	adds	r2, r7, r3
 8013cb6:	1dfb      	adds	r3, r7, #7
 8013cb8:	7819      	ldrb	r1, [r3, #0]
 8013cba:	2332      	movs	r3, #50	; 0x32
 8013cbc:	9300      	str	r3, [sp, #0]
 8013cbe:	0013      	movs	r3, r2
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	2006      	movs	r0, #6
 8013cc4:	f7f9 fa8a 	bl	800d1dc <USBPD_TRACE_Add>
  return USBPD_ERROR;
 8013cc8:	2302      	movs	r3, #2
}
 8013cca:	0018      	movs	r0, r3
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	b011      	add	sp, #68	; 0x44
 8013cd0:	bd90      	pop	{r4, r7, pc}
 8013cd2:	46c0      	nop			; (mov r8, r8)
 8013cd4:	0801a400 	.word	0x0801a400

08013cd8 <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 8013cd8:	b590      	push	{r4, r7, lr}
 8013cda:	b093      	sub	sp, #76	; 0x4c
 8013cdc:	af02      	add	r7, sp, #8
 8013cde:	603a      	str	r2, [r7, #0]
 8013ce0:	1dfb      	adds	r3, r7, #7
 8013ce2:	1c02      	adds	r2, r0, #0
 8013ce4:	701a      	strb	r2, [r3, #0]
 8013ce6:	1dbb      	adds	r3, r7, #6
 8013ce8:	1c0a      	adds	r2, r1, #0
 8013cea:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 8013cec:	213f      	movs	r1, #63	; 0x3f
 8013cee:	187b      	adds	r3, r7, r1
 8013cf0:	2202      	movs	r2, #2
 8013cf2:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_SOP == SOPType)
 8013cf4:	1dbb      	adds	r3, r7, #6
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d10d      	bne.n	8013d18 <USBPD_DPM_RequestGetManufacturerInfo+0x40>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 8013cfc:	187c      	adds	r4, r7, r1
 8013cfe:	683a      	ldr	r2, [r7, #0]
 8013d00:	1dbb      	adds	r3, r7, #6
 8013d02:	7819      	ldrb	r1, [r3, #0]
 8013d04:	1dfb      	adds	r3, r7, #7
 8013d06:	7818      	ldrb	r0, [r3, #0]
 8013d08:	2302      	movs	r3, #2
 8013d0a:	9300      	str	r3, [sp, #0]
 8013d0c:	0013      	movs	r3, r2
 8013d0e:	2206      	movs	r2, #6
 8013d10:	f7ec fd84 	bl	800081c <USBPD_PE_SendExtendedMessage>
 8013d14:	0003      	movs	r3, r0
 8013d16:	7023      	strb	r3, [r4, #0]
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 8013d18:	233f      	movs	r3, #63	; 0x3f
 8013d1a:	18fb      	adds	r3, r7, r3
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d027      	beq.n	8013d72 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 8013d22:	4a17      	ldr	r2, [pc, #92]	; (8013d80 <USBPD_DPM_RequestGetManufacturerInfo+0xa8>)
 8013d24:	240c      	movs	r4, #12
 8013d26:	193b      	adds	r3, r7, r4
 8013d28:	2132      	movs	r1, #50	; 0x32
 8013d2a:	0018      	movs	r0, r3
 8013d2c:	f005 fac0 	bl	80192b0 <sniprintf>
 8013d30:	0002      	movs	r2, r0
 8013d32:	213e      	movs	r1, #62	; 0x3e
 8013d34:	187b      	adds	r3, r7, r1
 8013d36:	701a      	strb	r2, [r3, #0]
 8013d38:	187b      	adds	r3, r7, r1
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	2b31      	cmp	r3, #49	; 0x31
 8013d3e:	d80d      	bhi.n	8013d5c <USBPD_DPM_RequestGetManufacturerInfo+0x84>
 8013d40:	193b      	adds	r3, r7, r4
 8013d42:	0018      	movs	r0, r3
 8013d44:	f7f2 fafc 	bl	8006340 <strlen>
 8013d48:	193a      	adds	r2, r7, r4
 8013d4a:	1dfb      	adds	r3, r7, #7
 8013d4c:	7819      	ldrb	r1, [r3, #0]
 8013d4e:	9000      	str	r0, [sp, #0]
 8013d50:	0013      	movs	r3, r2
 8013d52:	2200      	movs	r2, #0
 8013d54:	2006      	movs	r0, #6
 8013d56:	f7f9 fa41 	bl	800d1dc <USBPD_TRACE_Add>
 8013d5a:	e00a      	b.n	8013d72 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 8013d5c:	230c      	movs	r3, #12
 8013d5e:	18fa      	adds	r2, r7, r3
 8013d60:	1dfb      	adds	r3, r7, #7
 8013d62:	7819      	ldrb	r1, [r3, #0]
 8013d64:	2332      	movs	r3, #50	; 0x32
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	0013      	movs	r3, r2
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	2006      	movs	r0, #6
 8013d6e:	f7f9 fa35 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013d72:	233f      	movs	r3, #63	; 0x3f
 8013d74:	18fb      	adds	r3, r7, r3
 8013d76:	781b      	ldrb	r3, [r3, #0]
}
 8013d78:	0018      	movs	r0, r3
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	b011      	add	sp, #68	; 0x44
 8013d7e:	bd90      	pop	{r4, r7, pc}
 8013d80:	0801a42c 	.word	0x0801a42c

08013d84 <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 8013d84:	b5b0      	push	{r4, r5, r7, lr}
 8013d86:	b092      	sub	sp, #72	; 0x48
 8013d88:	af02      	add	r7, sp, #8
 8013d8a:	0002      	movs	r2, r0
 8013d8c:	1dfb      	adds	r3, r7, #7
 8013d8e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 8013d90:	253f      	movs	r5, #63	; 0x3f
 8013d92:	197c      	adds	r4, r7, r5
 8013d94:	1dfb      	adds	r3, r7, #7
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	2114      	movs	r1, #20
 8013d9c:	0018      	movs	r0, r3
 8013d9e:	f7ec fc05 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 8013da2:	0003      	movs	r3, r0
 8013da4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 8013da6:	197b      	adds	r3, r7, r5
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d027      	beq.n	8013dfe <USBPD_DPM_RequestGetPPS_Status+0x7a>
 8013dae:	4a17      	ldr	r2, [pc, #92]	; (8013e0c <USBPD_DPM_RequestGetPPS_Status+0x88>)
 8013db0:	240c      	movs	r4, #12
 8013db2:	193b      	adds	r3, r7, r4
 8013db4:	2132      	movs	r1, #50	; 0x32
 8013db6:	0018      	movs	r0, r3
 8013db8:	f005 fa7a 	bl	80192b0 <sniprintf>
 8013dbc:	0002      	movs	r2, r0
 8013dbe:	213e      	movs	r1, #62	; 0x3e
 8013dc0:	187b      	adds	r3, r7, r1
 8013dc2:	701a      	strb	r2, [r3, #0]
 8013dc4:	187b      	adds	r3, r7, r1
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	2b31      	cmp	r3, #49	; 0x31
 8013dca:	d80d      	bhi.n	8013de8 <USBPD_DPM_RequestGetPPS_Status+0x64>
 8013dcc:	193b      	adds	r3, r7, r4
 8013dce:	0018      	movs	r0, r3
 8013dd0:	f7f2 fab6 	bl	8006340 <strlen>
 8013dd4:	193a      	adds	r2, r7, r4
 8013dd6:	1dfb      	adds	r3, r7, #7
 8013dd8:	7819      	ldrb	r1, [r3, #0]
 8013dda:	9000      	str	r0, [sp, #0]
 8013ddc:	0013      	movs	r3, r2
 8013dde:	2200      	movs	r2, #0
 8013de0:	2006      	movs	r0, #6
 8013de2:	f7f9 f9fb 	bl	800d1dc <USBPD_TRACE_Add>
 8013de6:	e00a      	b.n	8013dfe <USBPD_DPM_RequestGetPPS_Status+0x7a>
 8013de8:	230c      	movs	r3, #12
 8013dea:	18fa      	adds	r2, r7, r3
 8013dec:	1dfb      	adds	r3, r7, #7
 8013dee:	7819      	ldrb	r1, [r3, #0]
 8013df0:	2332      	movs	r3, #50	; 0x32
 8013df2:	9300      	str	r3, [sp, #0]
 8013df4:	0013      	movs	r3, r2
 8013df6:	2200      	movs	r2, #0
 8013df8:	2006      	movs	r0, #6
 8013dfa:	f7f9 f9ef 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013dfe:	233f      	movs	r3, #63	; 0x3f
 8013e00:	18fb      	adds	r3, r7, r3
 8013e02:	781b      	ldrb	r3, [r3, #0]
}
 8013e04:	0018      	movs	r0, r3
 8013e06:	46bd      	mov	sp, r7
 8013e08:	b010      	add	sp, #64	; 0x40
 8013e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8013e0c:	0801a454 	.word	0x0801a454

08013e10 <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 8013e10:	b5b0      	push	{r4, r5, r7, lr}
 8013e12:	b092      	sub	sp, #72	; 0x48
 8013e14:	af02      	add	r7, sp, #8
 8013e16:	0002      	movs	r2, r0
 8013e18:	1dfb      	adds	r3, r7, #7
 8013e1a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 8013e1c:	253f      	movs	r5, #63	; 0x3f
 8013e1e:	197c      	adds	r4, r7, r5
 8013e20:	1dfb      	adds	r3, r7, #7
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	2200      	movs	r2, #0
 8013e26:	2112      	movs	r1, #18
 8013e28:	0018      	movs	r0, r3
 8013e2a:	f7ec fbbf 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 8013e2e:	0003      	movs	r3, r0
 8013e30:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 8013e32:	197b      	adds	r3, r7, r5
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d027      	beq.n	8013e8a <USBPD_DPM_RequestGetStatus+0x7a>
 8013e3a:	4a17      	ldr	r2, [pc, #92]	; (8013e98 <USBPD_DPM_RequestGetStatus+0x88>)
 8013e3c:	240c      	movs	r4, #12
 8013e3e:	193b      	adds	r3, r7, r4
 8013e40:	2132      	movs	r1, #50	; 0x32
 8013e42:	0018      	movs	r0, r3
 8013e44:	f005 fa34 	bl	80192b0 <sniprintf>
 8013e48:	0002      	movs	r2, r0
 8013e4a:	213e      	movs	r1, #62	; 0x3e
 8013e4c:	187b      	adds	r3, r7, r1
 8013e4e:	701a      	strb	r2, [r3, #0]
 8013e50:	187b      	adds	r3, r7, r1
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	2b31      	cmp	r3, #49	; 0x31
 8013e56:	d80d      	bhi.n	8013e74 <USBPD_DPM_RequestGetStatus+0x64>
 8013e58:	193b      	adds	r3, r7, r4
 8013e5a:	0018      	movs	r0, r3
 8013e5c:	f7f2 fa70 	bl	8006340 <strlen>
 8013e60:	193a      	adds	r2, r7, r4
 8013e62:	1dfb      	adds	r3, r7, #7
 8013e64:	7819      	ldrb	r1, [r3, #0]
 8013e66:	9000      	str	r0, [sp, #0]
 8013e68:	0013      	movs	r3, r2
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	2006      	movs	r0, #6
 8013e6e:	f7f9 f9b5 	bl	800d1dc <USBPD_TRACE_Add>
 8013e72:	e00a      	b.n	8013e8a <USBPD_DPM_RequestGetStatus+0x7a>
 8013e74:	230c      	movs	r3, #12
 8013e76:	18fa      	adds	r2, r7, r3
 8013e78:	1dfb      	adds	r3, r7, #7
 8013e7a:	7819      	ldrb	r1, [r3, #0]
 8013e7c:	2332      	movs	r3, #50	; 0x32
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	0013      	movs	r3, r2
 8013e82:	2200      	movs	r2, #0
 8013e84:	2006      	movs	r0, #6
 8013e86:	f7f9 f9a9 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013e8a:	233f      	movs	r3, #63	; 0x3f
 8013e8c:	18fb      	adds	r3, r7, r3
 8013e8e:	781b      	ldrb	r3, [r3, #0]
}
 8013e90:	0018      	movs	r0, r3
 8013e92:	46bd      	mov	sp, r7
 8013e94:	b010      	add	sp, #64	; 0x40
 8013e96:	bdb0      	pop	{r4, r5, r7, pc}
 8013e98:	0801a480 	.word	0x0801a480

08013e9c <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 8013e9c:	b5b0      	push	{r4, r5, r7, lr}
 8013e9e:	b092      	sub	sp, #72	; 0x48
 8013ea0:	af02      	add	r7, sp, #8
 8013ea2:	0002      	movs	r2, r0
 8013ea4:	1dfb      	adds	r3, r7, #7
 8013ea6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 8013ea8:	253f      	movs	r5, #63	; 0x3f
 8013eaa:	197c      	adds	r4, r7, r5
 8013eac:	1dfb      	adds	r3, r7, #7
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	2113      	movs	r1, #19
 8013eb4:	0018      	movs	r0, r3
 8013eb6:	f7ec fb79 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 8013eba:	0003      	movs	r3, r0
 8013ebc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 8013ebe:	197b      	adds	r3, r7, r5
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d027      	beq.n	8013f16 <USBPD_DPM_RequestFastRoleSwap+0x7a>
 8013ec6:	4a17      	ldr	r2, [pc, #92]	; (8013f24 <USBPD_DPM_RequestFastRoleSwap+0x88>)
 8013ec8:	240c      	movs	r4, #12
 8013eca:	193b      	adds	r3, r7, r4
 8013ecc:	2132      	movs	r1, #50	; 0x32
 8013ece:	0018      	movs	r0, r3
 8013ed0:	f005 f9ee 	bl	80192b0 <sniprintf>
 8013ed4:	0002      	movs	r2, r0
 8013ed6:	213e      	movs	r1, #62	; 0x3e
 8013ed8:	187b      	adds	r3, r7, r1
 8013eda:	701a      	strb	r2, [r3, #0]
 8013edc:	187b      	adds	r3, r7, r1
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	2b31      	cmp	r3, #49	; 0x31
 8013ee2:	d80d      	bhi.n	8013f00 <USBPD_DPM_RequestFastRoleSwap+0x64>
 8013ee4:	193b      	adds	r3, r7, r4
 8013ee6:	0018      	movs	r0, r3
 8013ee8:	f7f2 fa2a 	bl	8006340 <strlen>
 8013eec:	193a      	adds	r2, r7, r4
 8013eee:	1dfb      	adds	r3, r7, #7
 8013ef0:	7819      	ldrb	r1, [r3, #0]
 8013ef2:	9000      	str	r0, [sp, #0]
 8013ef4:	0013      	movs	r3, r2
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	2006      	movs	r0, #6
 8013efa:	f7f9 f96f 	bl	800d1dc <USBPD_TRACE_Add>
 8013efe:	e00a      	b.n	8013f16 <USBPD_DPM_RequestFastRoleSwap+0x7a>
 8013f00:	230c      	movs	r3, #12
 8013f02:	18fa      	adds	r2, r7, r3
 8013f04:	1dfb      	adds	r3, r7, #7
 8013f06:	7819      	ldrb	r1, [r3, #0]
 8013f08:	2332      	movs	r3, #50	; 0x32
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	0013      	movs	r3, r2
 8013f0e:	2200      	movs	r2, #0
 8013f10:	2006      	movs	r0, #6
 8013f12:	f7f9 f963 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013f16:	233f      	movs	r3, #63	; 0x3f
 8013f18:	18fb      	adds	r3, r7, r3
 8013f1a:	781b      	ldrb	r3, [r3, #0]
}
 8013f1c:	0018      	movs	r0, r3
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	b010      	add	sp, #64	; 0x40
 8013f22:	bdb0      	pop	{r4, r5, r7, pc}
 8013f24:	0801a4a8 	.word	0x0801a4a8

08013f28 <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 8013f28:	b5b0      	push	{r4, r5, r7, lr}
 8013f2a:	b092      	sub	sp, #72	; 0x48
 8013f2c:	af02      	add	r7, sp, #8
 8013f2e:	0002      	movs	r2, r0
 8013f30:	1dfb      	adds	r3, r7, #7
 8013f32:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 8013f34:	253f      	movs	r5, #63	; 0x3f
 8013f36:	197c      	adds	r4, r7, r5
 8013f38:	1dfb      	adds	r3, r7, #7
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	2115      	movs	r1, #21
 8013f40:	0018      	movs	r0, r3
 8013f42:	f7ec fb33 	bl	80005ac <USBPD_PE_Request_CtrlMessage>
 8013f46:	0003      	movs	r3, r0
 8013f48:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 8013f4a:	197b      	adds	r3, r7, r5
 8013f4c:	781b      	ldrb	r3, [r3, #0]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d027      	beq.n	8013fa2 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 8013f52:	4a17      	ldr	r2, [pc, #92]	; (8013fb0 <USBPD_DPM_RequestGetCountryCodes+0x88>)
 8013f54:	240c      	movs	r4, #12
 8013f56:	193b      	adds	r3, r7, r4
 8013f58:	2132      	movs	r1, #50	; 0x32
 8013f5a:	0018      	movs	r0, r3
 8013f5c:	f005 f9a8 	bl	80192b0 <sniprintf>
 8013f60:	0002      	movs	r2, r0
 8013f62:	213e      	movs	r1, #62	; 0x3e
 8013f64:	187b      	adds	r3, r7, r1
 8013f66:	701a      	strb	r2, [r3, #0]
 8013f68:	187b      	adds	r3, r7, r1
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	2b31      	cmp	r3, #49	; 0x31
 8013f6e:	d80d      	bhi.n	8013f8c <USBPD_DPM_RequestGetCountryCodes+0x64>
 8013f70:	193b      	adds	r3, r7, r4
 8013f72:	0018      	movs	r0, r3
 8013f74:	f7f2 f9e4 	bl	8006340 <strlen>
 8013f78:	193a      	adds	r2, r7, r4
 8013f7a:	1dfb      	adds	r3, r7, #7
 8013f7c:	7819      	ldrb	r1, [r3, #0]
 8013f7e:	9000      	str	r0, [sp, #0]
 8013f80:	0013      	movs	r3, r2
 8013f82:	2200      	movs	r2, #0
 8013f84:	2006      	movs	r0, #6
 8013f86:	f7f9 f929 	bl	800d1dc <USBPD_TRACE_Add>
 8013f8a:	e00a      	b.n	8013fa2 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 8013f8c:	230c      	movs	r3, #12
 8013f8e:	18fa      	adds	r2, r7, r3
 8013f90:	1dfb      	adds	r3, r7, #7
 8013f92:	7819      	ldrb	r1, [r3, #0]
 8013f94:	2332      	movs	r3, #50	; 0x32
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	0013      	movs	r3, r2
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	2006      	movs	r0, #6
 8013f9e:	f7f9 f91d 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8013fa2:	233f      	movs	r3, #63	; 0x3f
 8013fa4:	18fb      	adds	r3, r7, r3
 8013fa6:	781b      	ldrb	r3, [r3, #0]
}
 8013fa8:	0018      	movs	r0, r3
 8013faa:	46bd      	mov	sp, r7
 8013fac:	b010      	add	sp, #64	; 0x40
 8013fae:	bdb0      	pop	{r4, r5, r7, pc}
 8013fb0:	0801a4c8 	.word	0x0801a4c8

08013fb4 <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 8013fb4:	b5b0      	push	{r4, r5, r7, lr}
 8013fb6:	b092      	sub	sp, #72	; 0x48
 8013fb8:	af02      	add	r7, sp, #8
 8013fba:	0002      	movs	r2, r0
 8013fbc:	1dfb      	adds	r3, r7, #7
 8013fbe:	701a      	strb	r2, [r3, #0]
 8013fc0:	1d3b      	adds	r3, r7, #4
 8013fc2:	1c0a      	adds	r2, r1, #0
 8013fc4:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 8013fc6:	253f      	movs	r5, #63	; 0x3f
 8013fc8:	197c      	adds	r4, r7, r5
 8013fca:	1d3a      	adds	r2, r7, #4
 8013fcc:	1dfb      	adds	r3, r7, #7
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	2107      	movs	r1, #7
 8013fd2:	0018      	movs	r0, r3
 8013fd4:	f7ec fb96 	bl	8000704 <USBPD_PE_Request_DataMessage>
 8013fd8:	0003      	movs	r3, r0
 8013fda:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 8013fdc:	197b      	adds	r3, r7, r5
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d027      	beq.n	8014034 <USBPD_DPM_RequestGetCountryInfo+0x80>
 8013fe4:	4a17      	ldr	r2, [pc, #92]	; (8014044 <USBPD_DPM_RequestGetCountryInfo+0x90>)
 8013fe6:	240c      	movs	r4, #12
 8013fe8:	193b      	adds	r3, r7, r4
 8013fea:	2132      	movs	r1, #50	; 0x32
 8013fec:	0018      	movs	r0, r3
 8013fee:	f005 f95f 	bl	80192b0 <sniprintf>
 8013ff2:	0002      	movs	r2, r0
 8013ff4:	213e      	movs	r1, #62	; 0x3e
 8013ff6:	187b      	adds	r3, r7, r1
 8013ff8:	701a      	strb	r2, [r3, #0]
 8013ffa:	187b      	adds	r3, r7, r1
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	2b31      	cmp	r3, #49	; 0x31
 8014000:	d80d      	bhi.n	801401e <USBPD_DPM_RequestGetCountryInfo+0x6a>
 8014002:	193b      	adds	r3, r7, r4
 8014004:	0018      	movs	r0, r3
 8014006:	f7f2 f99b 	bl	8006340 <strlen>
 801400a:	193a      	adds	r2, r7, r4
 801400c:	1dfb      	adds	r3, r7, #7
 801400e:	7819      	ldrb	r1, [r3, #0]
 8014010:	9000      	str	r0, [sp, #0]
 8014012:	0013      	movs	r3, r2
 8014014:	2200      	movs	r2, #0
 8014016:	2006      	movs	r0, #6
 8014018:	f7f9 f8e0 	bl	800d1dc <USBPD_TRACE_Add>
 801401c:	e00a      	b.n	8014034 <USBPD_DPM_RequestGetCountryInfo+0x80>
 801401e:	230c      	movs	r3, #12
 8014020:	18fa      	adds	r2, r7, r3
 8014022:	1dfb      	adds	r3, r7, #7
 8014024:	7819      	ldrb	r1, [r3, #0]
 8014026:	2332      	movs	r3, #50	; 0x32
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	0013      	movs	r3, r2
 801402c:	2200      	movs	r2, #0
 801402e:	2006      	movs	r0, #6
 8014030:	f7f9 f8d4 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 8014034:	233f      	movs	r3, #63	; 0x3f
 8014036:	18fb      	adds	r3, r7, r3
 8014038:	781b      	ldrb	r3, [r3, #0]
}
 801403a:	0018      	movs	r0, r3
 801403c:	46bd      	mov	sp, r7
 801403e:	b010      	add	sp, #64	; 0x40
 8014040:	bdb0      	pop	{r4, r5, r7, pc}
 8014042:	46c0      	nop			; (mov r8, r8)
 8014044:	0801a4f4 	.word	0x0801a4f4

08014048 <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 8014048:	b5b0      	push	{r4, r5, r7, lr}
 801404a:	b092      	sub	sp, #72	; 0x48
 801404c:	af02      	add	r7, sp, #8
 801404e:	0002      	movs	r2, r0
 8014050:	6039      	str	r1, [r7, #0]
 8014052:	1dfb      	adds	r3, r7, #7
 8014054:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 8014056:	253f      	movs	r5, #63	; 0x3f
 8014058:	197c      	adds	r4, r7, r5
 801405a:	683a      	ldr	r2, [r7, #0]
 801405c:	1dfb      	adds	r3, r7, #7
 801405e:	7818      	ldrb	r0, [r3, #0]
 8014060:	2301      	movs	r3, #1
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	0013      	movs	r3, r2
 8014066:	2203      	movs	r2, #3
 8014068:	2100      	movs	r1, #0
 801406a:	f7ec fbd7 	bl	800081c <USBPD_PE_SendExtendedMessage>
 801406e:	0003      	movs	r3, r0
 8014070:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 8014072:	197b      	adds	r3, r7, r5
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d027      	beq.n	80140ca <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801407a:	4a17      	ldr	r2, [pc, #92]	; (80140d8 <USBPD_DPM_RequestGetBatteryCapability+0x90>)
 801407c:	240c      	movs	r4, #12
 801407e:	193b      	adds	r3, r7, r4
 8014080:	2132      	movs	r1, #50	; 0x32
 8014082:	0018      	movs	r0, r3
 8014084:	f005 f914 	bl	80192b0 <sniprintf>
 8014088:	0002      	movs	r2, r0
 801408a:	213e      	movs	r1, #62	; 0x3e
 801408c:	187b      	adds	r3, r7, r1
 801408e:	701a      	strb	r2, [r3, #0]
 8014090:	187b      	adds	r3, r7, r1
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	2b31      	cmp	r3, #49	; 0x31
 8014096:	d80d      	bhi.n	80140b4 <USBPD_DPM_RequestGetBatteryCapability+0x6c>
 8014098:	193b      	adds	r3, r7, r4
 801409a:	0018      	movs	r0, r3
 801409c:	f7f2 f950 	bl	8006340 <strlen>
 80140a0:	193a      	adds	r2, r7, r4
 80140a2:	1dfb      	adds	r3, r7, #7
 80140a4:	7819      	ldrb	r1, [r3, #0]
 80140a6:	9000      	str	r0, [sp, #0]
 80140a8:	0013      	movs	r3, r2
 80140aa:	2200      	movs	r2, #0
 80140ac:	2006      	movs	r0, #6
 80140ae:	f7f9 f895 	bl	800d1dc <USBPD_TRACE_Add>
 80140b2:	e00a      	b.n	80140ca <USBPD_DPM_RequestGetBatteryCapability+0x82>
 80140b4:	230c      	movs	r3, #12
 80140b6:	18fa      	adds	r2, r7, r3
 80140b8:	1dfb      	adds	r3, r7, #7
 80140ba:	7819      	ldrb	r1, [r3, #0]
 80140bc:	2332      	movs	r3, #50	; 0x32
 80140be:	9300      	str	r3, [sp, #0]
 80140c0:	0013      	movs	r3, r2
 80140c2:	2200      	movs	r2, #0
 80140c4:	2006      	movs	r0, #6
 80140c6:	f7f9 f889 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 80140ca:	233f      	movs	r3, #63	; 0x3f
 80140cc:	18fb      	adds	r3, r7, r3
 80140ce:	781b      	ldrb	r3, [r3, #0]
}
 80140d0:	0018      	movs	r0, r3
 80140d2:	46bd      	mov	sp, r7
 80140d4:	b010      	add	sp, #64	; 0x40
 80140d6:	bdb0      	pop	{r4, r5, r7, pc}
 80140d8:	0801a520 	.word	0x0801a520

080140dc <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 80140dc:	b5b0      	push	{r4, r5, r7, lr}
 80140de:	b092      	sub	sp, #72	; 0x48
 80140e0:	af02      	add	r7, sp, #8
 80140e2:	0002      	movs	r2, r0
 80140e4:	6039      	str	r1, [r7, #0]
 80140e6:	1dfb      	adds	r3, r7, #7
 80140e8:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 80140ea:	253f      	movs	r5, #63	; 0x3f
 80140ec:	197c      	adds	r4, r7, r5
 80140ee:	683a      	ldr	r2, [r7, #0]
 80140f0:	1dfb      	adds	r3, r7, #7
 80140f2:	7818      	ldrb	r0, [r3, #0]
 80140f4:	2301      	movs	r3, #1
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	0013      	movs	r3, r2
 80140fa:	2204      	movs	r2, #4
 80140fc:	2100      	movs	r1, #0
 80140fe:	f7ec fb8d 	bl	800081c <USBPD_PE_SendExtendedMessage>
 8014102:	0003      	movs	r3, r0
 8014104:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 8014106:	197b      	adds	r3, r7, r5
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d027      	beq.n	801415e <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801410e:	4a17      	ldr	r2, [pc, #92]	; (801416c <USBPD_DPM_RequestGetBatteryStatus+0x90>)
 8014110:	240c      	movs	r4, #12
 8014112:	193b      	adds	r3, r7, r4
 8014114:	2132      	movs	r1, #50	; 0x32
 8014116:	0018      	movs	r0, r3
 8014118:	f005 f8ca 	bl	80192b0 <sniprintf>
 801411c:	0002      	movs	r2, r0
 801411e:	213e      	movs	r1, #62	; 0x3e
 8014120:	187b      	adds	r3, r7, r1
 8014122:	701a      	strb	r2, [r3, #0]
 8014124:	187b      	adds	r3, r7, r1
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	2b31      	cmp	r3, #49	; 0x31
 801412a:	d80d      	bhi.n	8014148 <USBPD_DPM_RequestGetBatteryStatus+0x6c>
 801412c:	193b      	adds	r3, r7, r4
 801412e:	0018      	movs	r0, r3
 8014130:	f7f2 f906 	bl	8006340 <strlen>
 8014134:	193a      	adds	r2, r7, r4
 8014136:	1dfb      	adds	r3, r7, #7
 8014138:	7819      	ldrb	r1, [r3, #0]
 801413a:	9000      	str	r0, [sp, #0]
 801413c:	0013      	movs	r3, r2
 801413e:	2200      	movs	r2, #0
 8014140:	2006      	movs	r0, #6
 8014142:	f7f9 f84b 	bl	800d1dc <USBPD_TRACE_Add>
 8014146:	e00a      	b.n	801415e <USBPD_DPM_RequestGetBatteryStatus+0x82>
 8014148:	230c      	movs	r3, #12
 801414a:	18fa      	adds	r2, r7, r3
 801414c:	1dfb      	adds	r3, r7, #7
 801414e:	7819      	ldrb	r1, [r3, #0]
 8014150:	2332      	movs	r3, #50	; 0x32
 8014152:	9300      	str	r3, [sp, #0]
 8014154:	0013      	movs	r3, r2
 8014156:	2200      	movs	r2, #0
 8014158:	2006      	movs	r0, #6
 801415a:	f7f9 f83f 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 801415e:	233f      	movs	r3, #63	; 0x3f
 8014160:	18fb      	adds	r3, r7, r3
 8014162:	781b      	ldrb	r3, [r3, #0]
}
 8014164:	0018      	movs	r0, r3
 8014166:	46bd      	mov	sp, r7
 8014168:	b010      	add	sp, #64	; 0x40
 801416a:	bdb0      	pop	{r4, r5, r7, pc}
 801416c:	0801a54c 	.word	0x0801a54c

08014170 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 8014170:	b590      	push	{r4, r7, lr}
 8014172:	b093      	sub	sp, #76	; 0x4c
 8014174:	af02      	add	r7, sp, #8
 8014176:	0002      	movs	r2, r0
 8014178:	1dfb      	adds	r3, r7, #7
 801417a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801417c:	213f      	movs	r1, #63	; 0x3f
 801417e:	187b      	adds	r3, r7, r1
 8014180:	2202      	movs	r2, #2
 8014182:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 8014184:	187b      	adds	r3, r7, r1
 8014186:	781b      	ldrb	r3, [r3, #0]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d027      	beq.n	80141dc <USBPD_DPM_RequestSecurityRequest+0x6c>
 801418c:	4a17      	ldr	r2, [pc, #92]	; (80141ec <USBPD_DPM_RequestSecurityRequest+0x7c>)
 801418e:	240c      	movs	r4, #12
 8014190:	193b      	adds	r3, r7, r4
 8014192:	2132      	movs	r1, #50	; 0x32
 8014194:	0018      	movs	r0, r3
 8014196:	f005 f88b 	bl	80192b0 <sniprintf>
 801419a:	0002      	movs	r2, r0
 801419c:	213e      	movs	r1, #62	; 0x3e
 801419e:	187b      	adds	r3, r7, r1
 80141a0:	701a      	strb	r2, [r3, #0]
 80141a2:	187b      	adds	r3, r7, r1
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	2b31      	cmp	r3, #49	; 0x31
 80141a8:	d80d      	bhi.n	80141c6 <USBPD_DPM_RequestSecurityRequest+0x56>
 80141aa:	193b      	adds	r3, r7, r4
 80141ac:	0018      	movs	r0, r3
 80141ae:	f7f2 f8c7 	bl	8006340 <strlen>
 80141b2:	193a      	adds	r2, r7, r4
 80141b4:	1dfb      	adds	r3, r7, #7
 80141b6:	7819      	ldrb	r1, [r3, #0]
 80141b8:	9000      	str	r0, [sp, #0]
 80141ba:	0013      	movs	r3, r2
 80141bc:	2200      	movs	r2, #0
 80141be:	2006      	movs	r0, #6
 80141c0:	f7f9 f80c 	bl	800d1dc <USBPD_TRACE_Add>
 80141c4:	e00a      	b.n	80141dc <USBPD_DPM_RequestSecurityRequest+0x6c>
 80141c6:	230c      	movs	r3, #12
 80141c8:	18fa      	adds	r2, r7, r3
 80141ca:	1dfb      	adds	r3, r7, #7
 80141cc:	7819      	ldrb	r1, [r3, #0]
 80141ce:	2332      	movs	r3, #50	; 0x32
 80141d0:	9300      	str	r3, [sp, #0]
 80141d2:	0013      	movs	r3, r2
 80141d4:	2200      	movs	r2, #0
 80141d6:	2006      	movs	r0, #6
 80141d8:	f7f9 f800 	bl	800d1dc <USBPD_TRACE_Add>
  return _status;
 80141dc:	233f      	movs	r3, #63	; 0x3f
 80141de:	18fb      	adds	r3, r7, r3
 80141e0:	781b      	ldrb	r3, [r3, #0]
}
 80141e2:	0018      	movs	r0, r3
 80141e4:	46bd      	mov	sp, r7
 80141e6:	b011      	add	sp, #68	; 0x44
 80141e8:	bd90      	pop	{r4, r7, pc}
 80141ea:	46c0      	nop			; (mov r8, r8)
 80141ec:	0801a57c 	.word	0x0801a57c

080141f0 <DPM_TurnOffPower>:
  * @param  PortNum The current port number
  * @param  Role    Port power role
  * @retval USBPD_OK, USBPD_ERROR
  */
static USBPD_StatusTypeDef DPM_TurnOffPower(uint8_t PortNum, USBPD_PortPowerRole_TypeDef Role)
{
 80141f0:	b5b0      	push	{r4, r5, r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	0002      	movs	r2, r0
 80141f8:	6039      	str	r1, [r7, #0]
 80141fa:	1dfb      	adds	r3, r7, #7
 80141fc:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status;

  status = USBPD_PWR_IF_VBUSDisable(PortNum);
 80141fe:	250f      	movs	r5, #15
 8014200:	197c      	adds	r4, r7, r5
 8014202:	1dfb      	adds	r3, r7, #7
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	0018      	movs	r0, r3
 8014208:	f7fe fc79 	bl	8012afe <USBPD_PWR_IF_VBUSDisable>
 801420c:	0003      	movs	r3, r0
 801420e:	7023      	strb	r3, [r4, #0]
  return status;
 8014210:	197b      	adds	r3, r7, r5
 8014212:	781b      	ldrb	r3, [r3, #0]
}
 8014214:	0018      	movs	r0, r3
 8014216:	46bd      	mov	sp, r7
 8014218:	b004      	add	sp, #16
 801421a:	bdb0      	pop	{r4, r5, r7, pc}

0801421c <DPM_TurnOnPower>:
  * @param  PortNum The current port number
  * @param  Role    Port power role
  * @retval USBPD_ACCEPT, USBPD_WAIT, USBPD_REJECT
  */
static USBPD_StatusTypeDef DPM_TurnOnPower(uint8_t PortNum, USBPD_PortPowerRole_TypeDef Role)
{
 801421c:	b5b0      	push	{r4, r5, r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	0002      	movs	r2, r0
 8014224:	6039      	str	r1, [r7, #0]
 8014226:	1dfb      	adds	r3, r7, #7
 8014228:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status;

  /* Enable the output */
  status = USBPD_PWR_IF_VBUSEnable(PortNum);
 801422a:	250f      	movs	r5, #15
 801422c:	197c      	adds	r4, r7, r5
 801422e:	1dfb      	adds	r3, r7, #7
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	0018      	movs	r0, r3
 8014234:	f7fe fc4a 	bl	8012acc <USBPD_PWR_IF_VBUSEnable>
 8014238:	0003      	movs	r3, r0
 801423a:	7023      	strb	r3, [r4, #0]
  return status;
 801423c:	197b      	adds	r3, r7, r5
 801423e:	781b      	ldrb	r3, [r3, #0]
}
 8014240:	0018      	movs	r0, r3
 8014242:	46bd      	mov	sp, r7
 8014244:	b004      	add	sp, #16
 8014246:	bdb0      	pop	{r4, r5, r7, pc}

08014248 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b086      	sub	sp, #24
 801424c:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 801424e:	230f      	movs	r3, #15
 8014250:	18fb      	adds	r3, r7, r3
 8014252:	2203      	movs	r2, #3
 8014254:	701a      	strb	r2, [r3, #0]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 8014256:	4bc0      	ldr	r3, [pc, #768]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 8014258:	681a      	ldr	r2, [r3, #0]
 801425a:	23c0      	movs	r3, #192	; 0xc0
 801425c:	049b      	lsls	r3, r3, #18
 801425e:	4013      	ands	r3, r2
 8014260:	d00e      	beq.n	8014280 <BSP_GUI_LoadDataFromFlash+0x38>
 8014262:	4bbd      	ldr	r3, [pc, #756]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 8014264:	681a      	ldr	r2, [r3, #0]
 8014266:	23c0      	movs	r3, #192	; 0xc0
 8014268:	049b      	lsls	r3, r3, #18
 801426a:	401a      	ands	r2, r3
 801426c:	2380      	movs	r3, #128	; 0x80
 801426e:	045b      	lsls	r3, r3, #17
 8014270:	429a      	cmp	r2, r3
 8014272:	d110      	bne.n	8014296 <BSP_GUI_LoadDataFromFlash+0x4e>
 8014274:	4bb9      	ldr	r3, [pc, #740]	; (801455c <BSP_GUI_LoadDataFromFlash+0x314>)
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	2380      	movs	r3, #128	; 0x80
 801427a:	039b      	lsls	r3, r3, #14
 801427c:	4013      	ands	r3, r2
 801427e:	d10a      	bne.n	8014296 <BSP_GUI_LoadDataFromFlash+0x4e>
 8014280:	4bb7      	ldr	r3, [pc, #732]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	029b      	lsls	r3, r3, #10
 8014286:	4ab7      	ldr	r2, [pc, #732]	; (8014564 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8014288:	4013      	ands	r3, r2
 801428a:	0adb      	lsrs	r3, r3, #11
 801428c:	031b      	lsls	r3, r3, #12
 801428e:	4ab6      	ldr	r2, [pc, #728]	; (8014568 <BSP_GUI_LoadDataFromFlash+0x320>)
 8014290:	4694      	mov	ip, r2
 8014292:	4463      	add	r3, ip
 8014294:	e00a      	b.n	80142ac <BSP_GUI_LoadDataFromFlash+0x64>
 8014296:	4bb2      	ldr	r3, [pc, #712]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	029b      	lsls	r3, r3, #10
 801429c:	085b      	lsrs	r3, r3, #1
 801429e:	4ab3      	ldr	r2, [pc, #716]	; (801456c <BSP_GUI_LoadDataFromFlash+0x324>)
 80142a0:	4013      	ands	r3, r2
 80142a2:	0adb      	lsrs	r3, r3, #11
 80142a4:	031b      	lsls	r3, r3, #12
 80142a6:	4ab0      	ldr	r2, [pc, #704]	; (8014568 <BSP_GUI_LoadDataFromFlash+0x320>)
 80142a8:	4694      	mov	ip, r2
 80142aa:	4463      	add	r3, ip
 80142ac:	60bb      	str	r3, [r7, #8]
#else
  uint32_t _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
#endif /* GUI_FLASH_MAGIC_NUMBER */

  /* Check that we did not reach the end of page */
  if (GUI_FLASH_ADDR_RESERVED > ADDR_FLASH_PAGE_END)
 80142ae:	4baa      	ldr	r3, [pc, #680]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	23c0      	movs	r3, #192	; 0xc0
 80142b4:	049b      	lsls	r3, r3, #18
 80142b6:	4013      	ands	r3, r2
 80142b8:	d00e      	beq.n	80142d8 <BSP_GUI_LoadDataFromFlash+0x90>
 80142ba:	4ba7      	ldr	r3, [pc, #668]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 80142bc:	681a      	ldr	r2, [r3, #0]
 80142be:	23c0      	movs	r3, #192	; 0xc0
 80142c0:	049b      	lsls	r3, r3, #18
 80142c2:	401a      	ands	r2, r3
 80142c4:	2380      	movs	r3, #128	; 0x80
 80142c6:	045b      	lsls	r3, r3, #17
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d10f      	bne.n	80142ec <BSP_GUI_LoadDataFromFlash+0xa4>
 80142cc:	4ba3      	ldr	r3, [pc, #652]	; (801455c <BSP_GUI_LoadDataFromFlash+0x314>)
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	2380      	movs	r3, #128	; 0x80
 80142d2:	039b      	lsls	r3, r3, #14
 80142d4:	4013      	ands	r3, r2
 80142d6:	d109      	bne.n	80142ec <BSP_GUI_LoadDataFromFlash+0xa4>
 80142d8:	4ba1      	ldr	r3, [pc, #644]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	029b      	lsls	r3, r3, #10
 80142de:	4aa1      	ldr	r2, [pc, #644]	; (8014564 <BSP_GUI_LoadDataFromFlash+0x31c>)
 80142e0:	4013      	ands	r3, r2
 80142e2:	0adb      	lsrs	r3, r3, #11
 80142e4:	031b      	lsls	r3, r3, #12
 80142e6:	4aa2      	ldr	r2, [pc, #648]	; (8014570 <BSP_GUI_LoadDataFromFlash+0x328>)
 80142e8:	189a      	adds	r2, r3, r2
 80142ea:	e009      	b.n	8014300 <BSP_GUI_LoadDataFromFlash+0xb8>
 80142ec:	4b9c      	ldr	r3, [pc, #624]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	029b      	lsls	r3, r3, #10
 80142f2:	085b      	lsrs	r3, r3, #1
 80142f4:	4a9d      	ldr	r2, [pc, #628]	; (801456c <BSP_GUI_LoadDataFromFlash+0x324>)
 80142f6:	4013      	ands	r3, r2
 80142f8:	0adb      	lsrs	r3, r3, #11
 80142fa:	031b      	lsls	r3, r3, #12
 80142fc:	4a9c      	ldr	r2, [pc, #624]	; (8014570 <BSP_GUI_LoadDataFromFlash+0x328>)
 80142fe:	189a      	adds	r2, r3, r2
 8014300:	4b95      	ldr	r3, [pc, #596]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 8014302:	6819      	ldr	r1, [r3, #0]
 8014304:	23c0      	movs	r3, #192	; 0xc0
 8014306:	049b      	lsls	r3, r3, #18
 8014308:	400b      	ands	r3, r1
 801430a:	d00e      	beq.n	801432a <BSP_GUI_LoadDataFromFlash+0xe2>
 801430c:	4b92      	ldr	r3, [pc, #584]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 801430e:	6819      	ldr	r1, [r3, #0]
 8014310:	23c0      	movs	r3, #192	; 0xc0
 8014312:	049b      	lsls	r3, r3, #18
 8014314:	4019      	ands	r1, r3
 8014316:	2380      	movs	r3, #128	; 0x80
 8014318:	045b      	lsls	r3, r3, #17
 801431a:	4299      	cmp	r1, r3
 801431c:	d112      	bne.n	8014344 <BSP_GUI_LoadDataFromFlash+0xfc>
 801431e:	4b8f      	ldr	r3, [pc, #572]	; (801455c <BSP_GUI_LoadDataFromFlash+0x314>)
 8014320:	6819      	ldr	r1, [r3, #0]
 8014322:	2380      	movs	r3, #128	; 0x80
 8014324:	039b      	lsls	r3, r3, #14
 8014326:	400b      	ands	r3, r1
 8014328:	d10c      	bne.n	8014344 <BSP_GUI_LoadDataFromFlash+0xfc>
 801432a:	4b8d      	ldr	r3, [pc, #564]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	029b      	lsls	r3, r3, #10
 8014330:	498c      	ldr	r1, [pc, #560]	; (8014564 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8014332:	400b      	ands	r3, r1
 8014334:	0adb      	lsrs	r3, r3, #11
 8014336:	2180      	movs	r1, #128	; 0x80
 8014338:	0209      	lsls	r1, r1, #8
 801433a:	468c      	mov	ip, r1
 801433c:	4463      	add	r3, ip
 801433e:	031b      	lsls	r3, r3, #12
 8014340:	3b01      	subs	r3, #1
 8014342:	e00c      	b.n	801435e <BSP_GUI_LoadDataFromFlash+0x116>
 8014344:	4b86      	ldr	r3, [pc, #536]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	029b      	lsls	r3, r3, #10
 801434a:	085b      	lsrs	r3, r3, #1
 801434c:	4987      	ldr	r1, [pc, #540]	; (801456c <BSP_GUI_LoadDataFromFlash+0x324>)
 801434e:	400b      	ands	r3, r1
 8014350:	0adb      	lsrs	r3, r3, #11
 8014352:	2180      	movs	r1, #128	; 0x80
 8014354:	0209      	lsls	r1, r1, #8
 8014356:	468c      	mov	ip, r1
 8014358:	4463      	add	r3, ip
 801435a:	031b      	lsls	r3, r3, #12
 801435c:	3b01      	subs	r3, #1
 801435e:	429a      	cmp	r2, r3
 8014360:	d900      	bls.n	8014364 <BSP_GUI_LoadDataFromFlash+0x11c>
 8014362:	e16c      	b.n	801463e <BSP_GUI_LoadDataFromFlash+0x3f6>
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	3301      	adds	r3, #1
 801436a:	d011      	beq.n	8014390 <BSP_GUI_LoadDataFromFlash+0x148>
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	681a      	ldr	r2, [r3, #0]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	4880      	ldr	r0, [pc, #512]	; (8014574 <BSP_GUI_LoadDataFromFlash+0x32c>)
 8014374:	4980      	ldr	r1, [pc, #512]	; (8014578 <BSP_GUI_LoadDataFromFlash+0x330>)
 8014376:	4282      	cmp	r2, r0
 8014378:	d101      	bne.n	801437e <BSP_GUI_LoadDataFromFlash+0x136>
 801437a:	428b      	cmp	r3, r1
 801437c:	d008      	beq.n	8014390 <BSP_GUI_LoadDataFromFlash+0x148>
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
#if defined(_TRACE)
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 801437e:	4b7f      	ldr	r3, [pc, #508]	; (801457c <BSP_GUI_LoadDataFromFlash+0x334>)
 8014380:	2218      	movs	r2, #24
 8014382:	9200      	str	r2, [sp, #0]
 8014384:	2200      	movs	r2, #0
 8014386:	2100      	movs	r1, #0
 8014388:	2006      	movs	r0, #6
 801438a:	f7f8 ff27 	bl	800d1dc <USBPD_TRACE_Add>
#endif /* _TRACE */
    goto _exit;
 801438e:	e159      	b.n	8014644 <BSP_GUI_LoadDataFromFlash+0x3fc>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	3301      	adds	r3, #1
 8014396:	d100      	bne.n	801439a <BSP_GUI_LoadDataFromFlash+0x152>
 8014398:	e153      	b.n	8014642 <BSP_GUI_LoadDataFromFlash+0x3fa>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 801439a:	4b6f      	ldr	r3, [pc, #444]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	23c0      	movs	r3, #192	; 0xc0
 80143a0:	049b      	lsls	r3, r3, #18
 80143a2:	4013      	ands	r3, r2
 80143a4:	d00e      	beq.n	80143c4 <BSP_GUI_LoadDataFromFlash+0x17c>
 80143a6:	4b6c      	ldr	r3, [pc, #432]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	23c0      	movs	r3, #192	; 0xc0
 80143ac:	049b      	lsls	r3, r3, #18
 80143ae:	401a      	ands	r2, r3
 80143b0:	2380      	movs	r3, #128	; 0x80
 80143b2:	045b      	lsls	r3, r3, #17
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d110      	bne.n	80143da <BSP_GUI_LoadDataFromFlash+0x192>
 80143b8:	4b68      	ldr	r3, [pc, #416]	; (801455c <BSP_GUI_LoadDataFromFlash+0x314>)
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	2380      	movs	r3, #128	; 0x80
 80143be:	039b      	lsls	r3, r3, #14
 80143c0:	4013      	ands	r3, r2
 80143c2:	d10a      	bne.n	80143da <BSP_GUI_LoadDataFromFlash+0x192>
 80143c4:	4b66      	ldr	r3, [pc, #408]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	029b      	lsls	r3, r3, #10
 80143ca:	4a66      	ldr	r2, [pc, #408]	; (8014564 <BSP_GUI_LoadDataFromFlash+0x31c>)
 80143cc:	4013      	ands	r3, r2
 80143ce:	0adb      	lsrs	r3, r3, #11
 80143d0:	031b      	lsls	r3, r3, #12
 80143d2:	4a6b      	ldr	r2, [pc, #428]	; (8014580 <BSP_GUI_LoadDataFromFlash+0x338>)
 80143d4:	4694      	mov	ip, r2
 80143d6:	4463      	add	r3, ip
 80143d8:	e00a      	b.n	80143f0 <BSP_GUI_LoadDataFromFlash+0x1a8>
 80143da:	4b61      	ldr	r3, [pc, #388]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	029b      	lsls	r3, r3, #10
 80143e0:	085b      	lsrs	r3, r3, #1
 80143e2:	4a62      	ldr	r2, [pc, #392]	; (801456c <BSP_GUI_LoadDataFromFlash+0x324>)
 80143e4:	4013      	ands	r3, r2
 80143e6:	0adb      	lsrs	r3, r3, #11
 80143e8:	031b      	lsls	r3, r3, #12
 80143ea:	4a65      	ldr	r2, [pc, #404]	; (8014580 <BSP_GUI_LoadDataFromFlash+0x338>)
 80143ec:	4694      	mov	ip, r2
 80143ee:	4463      	add	r3, ip
 80143f0:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 80143f2:	4b64      	ldr	r3, [pc, #400]	; (8014584 <BSP_GUI_LoadDataFromFlash+0x33c>)
 80143f4:	607b      	str	r3, [r7, #4]
    USBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 80143f6:	230e      	movs	r3, #14
 80143f8:	18fb      	adds	r3, r7, r3
 80143fa:	2200      	movs	r2, #0
 80143fc:	701a      	strb	r2, [r3, #0]
 80143fe:	e012      	b.n	8014426 <BSP_GUI_LoadDataFromFlash+0x1de>
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	681a      	ldr	r2, [r3, #0]
 8014404:	200e      	movs	r0, #14
 8014406:	183b      	adds	r3, r7, r0
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	40da      	lsrs	r2, r3
 801440e:	0011      	movs	r1, r2
 8014410:	183b      	adds	r3, r7, r0
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	18d3      	adds	r3, r2, r3
 8014418:	b2ca      	uxtb	r2, r1
 801441a:	701a      	strb	r2, [r3, #0]
 801441c:	183b      	adds	r3, r7, r0
 801441e:	781a      	ldrb	r2, [r3, #0]
 8014420:	183b      	adds	r3, r7, r0
 8014422:	3201      	adds	r2, #1
 8014424:	701a      	strb	r2, [r3, #0]
 8014426:	230e      	movs	r3, #14
 8014428:	18fb      	adds	r3, r7, r3
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	2b03      	cmp	r3, #3
 801442e:	d9e7      	bls.n	8014400 <BSP_GUI_LoadDataFromFlash+0x1b8>
    _status = GUI_OK;
 8014430:	230f      	movs	r3, #15
 8014432:	18fb      	adds	r3, r7, r3
 8014434:	2200      	movs	r2, #0
 8014436:	701a      	strb	r2, [r3, #0]
  }

#if defined(_SRC) || defined(_DRP)
  /* Load PORT0_PDO_ListSRC */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
 8014438:	4b47      	ldr	r3, [pc, #284]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 801443a:	681a      	ldr	r2, [r3, #0]
 801443c:	23c0      	movs	r3, #192	; 0xc0
 801443e:	049b      	lsls	r3, r3, #18
 8014440:	4013      	ands	r3, r2
 8014442:	d00e      	beq.n	8014462 <BSP_GUI_LoadDataFromFlash+0x21a>
 8014444:	4b44      	ldr	r3, [pc, #272]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 8014446:	681a      	ldr	r2, [r3, #0]
 8014448:	23c0      	movs	r3, #192	; 0xc0
 801444a:	049b      	lsls	r3, r3, #18
 801444c:	401a      	ands	r2, r3
 801444e:	2380      	movs	r3, #128	; 0x80
 8014450:	045b      	lsls	r3, r3, #17
 8014452:	429a      	cmp	r2, r3
 8014454:	d110      	bne.n	8014478 <BSP_GUI_LoadDataFromFlash+0x230>
 8014456:	4b41      	ldr	r3, [pc, #260]	; (801455c <BSP_GUI_LoadDataFromFlash+0x314>)
 8014458:	681a      	ldr	r2, [r3, #0]
 801445a:	2380      	movs	r3, #128	; 0x80
 801445c:	039b      	lsls	r3, r3, #14
 801445e:	4013      	ands	r3, r2
 8014460:	d10a      	bne.n	8014478 <BSP_GUI_LoadDataFromFlash+0x230>
 8014462:	4b3f      	ldr	r3, [pc, #252]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	029b      	lsls	r3, r3, #10
 8014468:	4a3e      	ldr	r2, [pc, #248]	; (8014564 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801446a:	4013      	ands	r3, r2
 801446c:	0adb      	lsrs	r3, r3, #11
 801446e:	031b      	lsls	r3, r3, #12
 8014470:	4a45      	ldr	r2, [pc, #276]	; (8014588 <BSP_GUI_LoadDataFromFlash+0x340>)
 8014472:	4694      	mov	ip, r2
 8014474:	4463      	add	r3, ip
 8014476:	e00a      	b.n	801448e <BSP_GUI_LoadDataFromFlash+0x246>
 8014478:	4b39      	ldr	r3, [pc, #228]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	029b      	lsls	r3, r3, #10
 801447e:	085b      	lsrs	r3, r3, #1
 8014480:	4a3a      	ldr	r2, [pc, #232]	; (801456c <BSP_GUI_LoadDataFromFlash+0x324>)
 8014482:	4013      	ands	r3, r2
 8014484:	0adb      	lsrs	r3, r3, #11
 8014486:	031b      	lsls	r3, r3, #12
 8014488:	4a3f      	ldr	r2, [pc, #252]	; (8014588 <BSP_GUI_LoadDataFromFlash+0x340>)
 801448a:	4694      	mov	ip, r2
 801448c:	4463      	add	r3, ip
 801448e:	4a3f      	ldr	r2, [pc, #252]	; (801458c <BSP_GUI_LoadDataFromFlash+0x344>)
 8014490:	0011      	movs	r1, r2
 8014492:	0018      	movs	r0, r3
 8014494:	f000 fc44 	bl	8014d20 <LoadPDOFromFlash>
 8014498:	0003      	movs	r3, r0
 801449a:	0019      	movs	r1, r3
 801449c:	220f      	movs	r2, #15
 801449e:	18bb      	adds	r3, r7, r2
 80144a0:	18ba      	adds	r2, r7, r2
 80144a2:	7812      	ldrb	r2, [r2, #0]
 80144a4:	430a      	orrs	r2, r1
 80144a6:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 80144a8:	4b2b      	ldr	r3, [pc, #172]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	23c0      	movs	r3, #192	; 0xc0
 80144ae:	049b      	lsls	r3, r3, #18
 80144b0:	4013      	ands	r3, r2
 80144b2:	d00e      	beq.n	80144d2 <BSP_GUI_LoadDataFromFlash+0x28a>
 80144b4:	4b28      	ldr	r3, [pc, #160]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	23c0      	movs	r3, #192	; 0xc0
 80144ba:	049b      	lsls	r3, r3, #18
 80144bc:	401a      	ands	r2, r3
 80144be:	2380      	movs	r3, #128	; 0x80
 80144c0:	045b      	lsls	r3, r3, #17
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d110      	bne.n	80144e8 <BSP_GUI_LoadDataFromFlash+0x2a0>
 80144c6:	4b25      	ldr	r3, [pc, #148]	; (801455c <BSP_GUI_LoadDataFromFlash+0x314>)
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	2380      	movs	r3, #128	; 0x80
 80144cc:	039b      	lsls	r3, r3, #14
 80144ce:	4013      	ands	r3, r2
 80144d0:	d10a      	bne.n	80144e8 <BSP_GUI_LoadDataFromFlash+0x2a0>
 80144d2:	4b23      	ldr	r3, [pc, #140]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	029b      	lsls	r3, r3, #10
 80144d8:	4a22      	ldr	r2, [pc, #136]	; (8014564 <BSP_GUI_LoadDataFromFlash+0x31c>)
 80144da:	4013      	ands	r3, r2
 80144dc:	0adb      	lsrs	r3, r3, #11
 80144de:	031b      	lsls	r3, r3, #12
 80144e0:	4a2b      	ldr	r2, [pc, #172]	; (8014590 <BSP_GUI_LoadDataFromFlash+0x348>)
 80144e2:	4694      	mov	ip, r2
 80144e4:	4463      	add	r3, ip
 80144e6:	e00a      	b.n	80144fe <BSP_GUI_LoadDataFromFlash+0x2b6>
 80144e8:	4b1d      	ldr	r3, [pc, #116]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	029b      	lsls	r3, r3, #10
 80144ee:	085b      	lsrs	r3, r3, #1
 80144f0:	4a1e      	ldr	r2, [pc, #120]	; (801456c <BSP_GUI_LoadDataFromFlash+0x324>)
 80144f2:	4013      	ands	r3, r2
 80144f4:	0adb      	lsrs	r3, r3, #11
 80144f6:	031b      	lsls	r3, r3, #12
 80144f8:	4a25      	ldr	r2, [pc, #148]	; (8014590 <BSP_GUI_LoadDataFromFlash+0x348>)
 80144fa:	4694      	mov	ip, r2
 80144fc:	4463      	add	r3, ip
 80144fe:	4925      	ldr	r1, [pc, #148]	; (8014594 <BSP_GUI_LoadDataFromFlash+0x34c>)
 8014500:	220c      	movs	r2, #12
 8014502:	0018      	movs	r0, r3
 8014504:	f000 fc34 	bl	8014d70 <LoadSettingsFromFlash>
 8014508:	0003      	movs	r3, r0
 801450a:	0019      	movs	r1, r3
 801450c:	220f      	movs	r2, #15
 801450e:	18bb      	adds	r3, r7, r2
 8014510:	18ba      	adds	r2, r7, r2
 8014512:	7812      	ldrb	r2, [r2, #0]
 8014514:	430a      	orrs	r2, r1
 8014516:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 8014518:	4b0f      	ldr	r3, [pc, #60]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 801451a:	681a      	ldr	r2, [r3, #0]
 801451c:	23c0      	movs	r3, #192	; 0xc0
 801451e:	049b      	lsls	r3, r3, #18
 8014520:	4013      	ands	r3, r2
 8014522:	d00e      	beq.n	8014542 <BSP_GUI_LoadDataFromFlash+0x2fa>
 8014524:	4b0c      	ldr	r3, [pc, #48]	; (8014558 <BSP_GUI_LoadDataFromFlash+0x310>)
 8014526:	681a      	ldr	r2, [r3, #0]
 8014528:	23c0      	movs	r3, #192	; 0xc0
 801452a:	049b      	lsls	r3, r3, #18
 801452c:	401a      	ands	r2, r3
 801452e:	2380      	movs	r3, #128	; 0x80
 8014530:	045b      	lsls	r3, r3, #17
 8014532:	429a      	cmp	r2, r3
 8014534:	d132      	bne.n	801459c <BSP_GUI_LoadDataFromFlash+0x354>
 8014536:	4b09      	ldr	r3, [pc, #36]	; (801455c <BSP_GUI_LoadDataFromFlash+0x314>)
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	2380      	movs	r3, #128	; 0x80
 801453c:	039b      	lsls	r3, r3, #14
 801453e:	4013      	ands	r3, r2
 8014540:	d12c      	bne.n	801459c <BSP_GUI_LoadDataFromFlash+0x354>
 8014542:	4b07      	ldr	r3, [pc, #28]	; (8014560 <BSP_GUI_LoadDataFromFlash+0x318>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	029b      	lsls	r3, r3, #10
 8014548:	4a06      	ldr	r2, [pc, #24]	; (8014564 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801454a:	4013      	ands	r3, r2
 801454c:	0adb      	lsrs	r3, r3, #11
 801454e:	031b      	lsls	r3, r3, #12
 8014550:	4a11      	ldr	r2, [pc, #68]	; (8014598 <BSP_GUI_LoadDataFromFlash+0x350>)
 8014552:	4694      	mov	ip, r2
 8014554:	4463      	add	r3, ip
 8014556:	e02c      	b.n	80145b2 <BSP_GUI_LoadDataFromFlash+0x36a>
 8014558:	1fff7500 	.word	0x1fff7500
 801455c:	40022020 	.word	0x40022020
 8014560:	1fff75e0 	.word	0x1fff75e0
 8014564:	000ffc00 	.word	0x000ffc00
 8014568:	07fff800 	.word	0x07fff800
 801456c:	0007fe00 	.word	0x0007fe00
 8014570:	07fff920 	.word	0x07fff920
 8014574:	deadf00d 	.word	0xdeadf00d
 8014578:	deadbabe 	.word	0xdeadbabe
 801457c:	0801a5a8 	.word	0x0801a5a8
 8014580:	07fff808 	.word	0x07fff808
 8014584:	20000104 	.word	0x20000104
 8014588:	07fff810 	.word	0x07fff810
 801458c:	20000108 	.word	0x20000108
 8014590:	07fff890 	.word	0x07fff890
 8014594:	20000080 	.word	0x20000080
 8014598:	07fff918 	.word	0x07fff918
 801459c:	4b2d      	ldr	r3, [pc, #180]	; (8014654 <BSP_GUI_LoadDataFromFlash+0x40c>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	029b      	lsls	r3, r3, #10
 80145a2:	085b      	lsrs	r3, r3, #1
 80145a4:	4a2c      	ldr	r2, [pc, #176]	; (8014658 <BSP_GUI_LoadDataFromFlash+0x410>)
 80145a6:	4013      	ands	r3, r2
 80145a8:	0adb      	lsrs	r3, r3, #11
 80145aa:	031b      	lsls	r3, r3, #12
 80145ac:	4a2b      	ldr	r2, [pc, #172]	; (801465c <BSP_GUI_LoadDataFromFlash+0x414>)
 80145ae:	4694      	mov	ip, r2
 80145b0:	4463      	add	r3, ip
 80145b2:	492b      	ldr	r1, [pc, #172]	; (8014660 <BSP_GUI_LoadDataFromFlash+0x418>)
 80145b4:	2208      	movs	r2, #8
 80145b6:	0018      	movs	r0, r3
 80145b8:	f000 fbda 	bl	8014d70 <LoadSettingsFromFlash>
 80145bc:	0003      	movs	r3, r0
 80145be:	0019      	movs	r1, r3
 80145c0:	220f      	movs	r2, #15
 80145c2:	18bb      	adds	r3, r7, r2
 80145c4:	18ba      	adds	r2, r7, r2
 80145c6:	7812      	ldrb	r2, [r2, #0]
 80145c8:	430a      	orrs	r2, r1
 80145ca:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 80145cc:	4b25      	ldr	r3, [pc, #148]	; (8014664 <BSP_GUI_LoadDataFromFlash+0x41c>)
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	23c0      	movs	r3, #192	; 0xc0
 80145d2:	049b      	lsls	r3, r3, #18
 80145d4:	4013      	ands	r3, r2
 80145d6:	d00e      	beq.n	80145f6 <BSP_GUI_LoadDataFromFlash+0x3ae>
 80145d8:	4b22      	ldr	r3, [pc, #136]	; (8014664 <BSP_GUI_LoadDataFromFlash+0x41c>)
 80145da:	681a      	ldr	r2, [r3, #0]
 80145dc:	23c0      	movs	r3, #192	; 0xc0
 80145de:	049b      	lsls	r3, r3, #18
 80145e0:	401a      	ands	r2, r3
 80145e2:	2380      	movs	r3, #128	; 0x80
 80145e4:	045b      	lsls	r3, r3, #17
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d110      	bne.n	801460c <BSP_GUI_LoadDataFromFlash+0x3c4>
 80145ea:	4b1f      	ldr	r3, [pc, #124]	; (8014668 <BSP_GUI_LoadDataFromFlash+0x420>)
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	2380      	movs	r3, #128	; 0x80
 80145f0:	039b      	lsls	r3, r3, #14
 80145f2:	4013      	ands	r3, r2
 80145f4:	d10a      	bne.n	801460c <BSP_GUI_LoadDataFromFlash+0x3c4>
 80145f6:	4b17      	ldr	r3, [pc, #92]	; (8014654 <BSP_GUI_LoadDataFromFlash+0x40c>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	029b      	lsls	r3, r3, #10
 80145fc:	4a1b      	ldr	r2, [pc, #108]	; (801466c <BSP_GUI_LoadDataFromFlash+0x424>)
 80145fe:	4013      	ands	r3, r2
 8014600:	0adb      	lsrs	r3, r3, #11
 8014602:	031b      	lsls	r3, r3, #12
 8014604:	4a1a      	ldr	r2, [pc, #104]	; (8014670 <BSP_GUI_LoadDataFromFlash+0x428>)
 8014606:	4694      	mov	ip, r2
 8014608:	4463      	add	r3, ip
 801460a:	e00a      	b.n	8014622 <BSP_GUI_LoadDataFromFlash+0x3da>
 801460c:	4b11      	ldr	r3, [pc, #68]	; (8014654 <BSP_GUI_LoadDataFromFlash+0x40c>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	029b      	lsls	r3, r3, #10
 8014612:	085b      	lsrs	r3, r3, #1
 8014614:	4a10      	ldr	r2, [pc, #64]	; (8014658 <BSP_GUI_LoadDataFromFlash+0x410>)
 8014616:	4013      	ands	r3, r2
 8014618:	0adb      	lsrs	r3, r3, #11
 801461a:	031b      	lsls	r3, r3, #12
 801461c:	4a14      	ldr	r2, [pc, #80]	; (8014670 <BSP_GUI_LoadDataFromFlash+0x428>)
 801461e:	4694      	mov	ip, r2
 8014620:	4463      	add	r3, ip
 8014622:	4914      	ldr	r1, [pc, #80]	; (8014674 <BSP_GUI_LoadDataFromFlash+0x42c>)
 8014624:	2270      	movs	r2, #112	; 0x70
 8014626:	0018      	movs	r0, r3
 8014628:	f000 fba2 	bl	8014d70 <LoadSettingsFromFlash>
 801462c:	0003      	movs	r3, r0
 801462e:	0019      	movs	r1, r3
 8014630:	220f      	movs	r2, #15
 8014632:	18bb      	adds	r3, r7, r2
 8014634:	18ba      	adds	r2, r7, r2
 8014636:	7812      	ldrb	r2, [r2, #0]
 8014638:	430a      	orrs	r2, r1
 801463a:	701a      	strb	r2, [r3, #0]
 801463c:	e002      	b.n	8014644 <BSP_GUI_LoadDataFromFlash+0x3fc>
    goto _exit;
 801463e:	46c0      	nop			; (mov r8, r8)
 8014640:	e000      	b.n	8014644 <BSP_GUI_LoadDataFromFlash+0x3fc>
    goto _exit;
 8014642:	46c0      	nop			; (mov r8, r8)
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 8014644:	230f      	movs	r3, #15
 8014646:	18fb      	adds	r3, r7, r3
 8014648:	781b      	ldrb	r3, [r3, #0]
}
 801464a:	0018      	movs	r0, r3
 801464c:	46bd      	mov	sp, r7
 801464e:	b004      	add	sp, #16
 8014650:	bd80      	pop	{r7, pc}
 8014652:	46c0      	nop			; (mov r8, r8)
 8014654:	1fff75e0 	.word	0x1fff75e0
 8014658:	0007fe00 	.word	0x0007fe00
 801465c:	07fff918 	.word	0x07fff918
 8014660:	2000008c 	.word	0x2000008c
 8014664:	1fff7500 	.word	0x1fff7500
 8014668:	40022020 	.word	0x40022020
 801466c:	000ffc00 	.word	0x000ffc00
 8014670:	07fff89c 	.word	0x07fff89c
 8014674:	20000094 	.word	0x20000094

08014678 <BSP_GUI_SaveDataInFlash>:

  return status;
}

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 8014678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801467a:	b099      	sub	sp, #100	; 0x64
 801467c:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 801467e:	2327      	movs	r3, #39	; 0x27
 8014680:	2638      	movs	r6, #56	; 0x38
 8014682:	199b      	adds	r3, r3, r6
 8014684:	19da      	adds	r2, r3, r7
 8014686:	2300      	movs	r3, #0
 8014688:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801468a:	b672      	cpsid	i
}
 801468c:	46c0      	nop			; (mov r8, r8)

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 801468e:	f7f5 fd8f 	bl	800a1b0 <HAL_FLASH_Unlock>
  erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
  erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
  erase_init.Sector        = FLASH_SECTOR_ID;
  erase_init.NbSectors     = 1;
#else
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 8014692:	2308      	movs	r3, #8
 8014694:	199b      	adds	r3, r3, r6
 8014696:	19da      	adds	r2, r3, r7
 8014698:	2302      	movs	r3, #2
 801469a:	6013      	str	r3, [r2, #0]

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 801469c:	4bbf      	ldr	r3, [pc, #764]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	23c0      	movs	r3, #192	; 0xc0
 80146a2:	049b      	lsls	r3, r3, #18
 80146a4:	4013      	ands	r3, r2
 80146a6:	d00e      	beq.n	80146c6 <BSP_GUI_SaveDataInFlash+0x4e>
 80146a8:	4bbc      	ldr	r3, [pc, #752]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 80146aa:	681a      	ldr	r2, [r3, #0]
 80146ac:	23c0      	movs	r3, #192	; 0xc0
 80146ae:	049b      	lsls	r3, r3, #18
 80146b0:	401a      	ands	r2, r3
 80146b2:	2380      	movs	r3, #128	; 0x80
 80146b4:	045b      	lsls	r3, r3, #17
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d10e      	bne.n	80146d8 <BSP_GUI_SaveDataInFlash+0x60>
 80146ba:	4bb9      	ldr	r3, [pc, #740]	; (80149a0 <BSP_GUI_SaveDataInFlash+0x328>)
 80146bc:	681a      	ldr	r2, [r3, #0]
 80146be:	2380      	movs	r3, #128	; 0x80
 80146c0:	039b      	lsls	r3, r3, #14
 80146c2:	4013      	ands	r3, r2
 80146c4:	d108      	bne.n	80146d8 <BSP_GUI_SaveDataInFlash+0x60>
 80146c6:	4bb7      	ldr	r3, [pc, #732]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	029a      	lsls	r2, r3, #10
 80146cc:	4bb6      	ldr	r3, [pc, #728]	; (80149a8 <BSP_GUI_SaveDataInFlash+0x330>)
 80146ce:	4013      	ands	r3, r2
 80146d0:	0adb      	lsrs	r3, r3, #11
 80146d2:	005b      	lsls	r3, r3, #1
 80146d4:	1e5a      	subs	r2, r3, #1
 80146d6:	e008      	b.n	80146ea <BSP_GUI_SaveDataInFlash+0x72>
 80146d8:	4bb2      	ldr	r3, [pc, #712]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	029b      	lsls	r3, r3, #10
 80146de:	085a      	lsrs	r2, r3, #1
 80146e0:	4bb2      	ldr	r3, [pc, #712]	; (80149ac <BSP_GUI_SaveDataInFlash+0x334>)
 80146e2:	4013      	ands	r3, r2
 80146e4:	0adb      	lsrs	r3, r3, #11
 80146e6:	005b      	lsls	r3, r3, #1
 80146e8:	1e5a      	subs	r2, r3, #1
 80146ea:	2108      	movs	r1, #8
 80146ec:	2038      	movs	r0, #56	; 0x38
 80146ee:	180b      	adds	r3, r1, r0
 80146f0:	19db      	adds	r3, r3, r7
 80146f2:	609a      	str	r2, [r3, #8]
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
 80146f4:	180b      	adds	r3, r1, r0
 80146f6:	19da      	adds	r2, r3, r7
 80146f8:	2380      	movs	r3, #128	; 0x80
 80146fa:	021b      	lsls	r3, r3, #8
 80146fc:	6053      	str	r3, [r2, #4]
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 80146fe:	180b      	adds	r3, r1, r0
 8014700:	19da      	adds	r2, r3, r7
 8014702:	2301      	movs	r3, #1
 8014704:	60d3      	str	r3, [r2, #12]

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 8014706:	4baa      	ldr	r3, [pc, #680]	; (80149b0 <BSP_GUI_SaveDataInFlash+0x338>)
 8014708:	691b      	ldr	r3, [r3, #16]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d003      	beq.n	8014716 <BSP_GUI_SaveDataInFlash+0x9e>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 801470e:	4aa8      	ldr	r2, [pc, #672]	; (80149b0 <BSP_GUI_SaveDataInFlash+0x338>)
 8014710:	2380      	movs	r3, #128	; 0x80
 8014712:	021b      	lsls	r3, r3, #8
 8014714:	6113      	str	r3, [r2, #16]
  }
#endif /* FLASH_SR_OPTVERR */
#endif /* FLASH_CR_SER */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 8014716:	233c      	movs	r3, #60	; 0x3c
 8014718:	18fa      	adds	r2, r7, r3
 801471a:	2308      	movs	r3, #8
 801471c:	2638      	movs	r6, #56	; 0x38
 801471e:	199b      	adds	r3, r3, r6
 8014720:	19db      	adds	r3, r3, r7
 8014722:	0011      	movs	r1, r2
 8014724:	0018      	movs	r0, r3
 8014726:	f7f5 fdf1 	bl	800a30c <HAL_FLASHEx_Erase>
 801472a:	1e03      	subs	r3, r0, #0
 801472c:	d004      	beq.n	8014738 <BSP_GUI_SaveDataInFlash+0xc0>
  {
    status = GUI_ERASE_ERROR;
 801472e:	2327      	movs	r3, #39	; 0x27
 8014730:	199b      	adds	r3, r3, r6
 8014732:	19da      	adds	r2, r3, r7
 8014734:	2301      	movs	r3, #1
 8014736:	7013      	strb	r3, [r2, #0]
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 8014738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801473a:	3301      	adds	r3, #1
 801473c:	d000      	beq.n	8014740 <BSP_GUI_SaveDataInFlash+0xc8>
 801473e:	e1d9      	b.n	8014af4 <BSP_GUI_SaveDataInFlash+0x47c>
 8014740:	2327      	movs	r3, #39	; 0x27
 8014742:	2238      	movs	r2, #56	; 0x38
 8014744:	189b      	adds	r3, r3, r2
 8014746:	19db      	adds	r3, r3, r7
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d000      	beq.n	8014750 <BSP_GUI_SaveDataInFlash+0xd8>
 801474e:	e1d1      	b.n	8014af4 <BSP_GUI_SaveDataInFlash+0x47c>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 8014750:	4b92      	ldr	r3, [pc, #584]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 8014752:	681a      	ldr	r2, [r3, #0]
 8014754:	23c0      	movs	r3, #192	; 0xc0
 8014756:	049b      	lsls	r3, r3, #18
 8014758:	4013      	ands	r3, r2
 801475a:	d00e      	beq.n	801477a <BSP_GUI_SaveDataInFlash+0x102>
 801475c:	4b8f      	ldr	r3, [pc, #572]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	23c0      	movs	r3, #192	; 0xc0
 8014762:	049b      	lsls	r3, r3, #18
 8014764:	401a      	ands	r2, r3
 8014766:	2380      	movs	r3, #128	; 0x80
 8014768:	045b      	lsls	r3, r3, #17
 801476a:	429a      	cmp	r2, r3
 801476c:	d10f      	bne.n	801478e <BSP_GUI_SaveDataInFlash+0x116>
 801476e:	4b8c      	ldr	r3, [pc, #560]	; (80149a0 <BSP_GUI_SaveDataInFlash+0x328>)
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	2380      	movs	r3, #128	; 0x80
 8014774:	039b      	lsls	r3, r3, #14
 8014776:	4013      	ands	r3, r2
 8014778:	d109      	bne.n	801478e <BSP_GUI_SaveDataInFlash+0x116>
 801477a:	4b8a      	ldr	r3, [pc, #552]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	029a      	lsls	r2, r3, #10
 8014780:	4b89      	ldr	r3, [pc, #548]	; (80149a8 <BSP_GUI_SaveDataInFlash+0x330>)
 8014782:	4013      	ands	r3, r2
 8014784:	0adb      	lsrs	r3, r3, #11
 8014786:	031b      	lsls	r3, r3, #12
 8014788:	4a8a      	ldr	r2, [pc, #552]	; (80149b4 <BSP_GUI_SaveDataInFlash+0x33c>)
 801478a:	1899      	adds	r1, r3, r2
 801478c:	e009      	b.n	80147a2 <BSP_GUI_SaveDataInFlash+0x12a>
 801478e:	4b85      	ldr	r3, [pc, #532]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	029b      	lsls	r3, r3, #10
 8014794:	085a      	lsrs	r2, r3, #1
 8014796:	4b85      	ldr	r3, [pc, #532]	; (80149ac <BSP_GUI_SaveDataInFlash+0x334>)
 8014798:	4013      	ands	r3, r2
 801479a:	0adb      	lsrs	r3, r3, #11
 801479c:	031b      	lsls	r3, r3, #12
 801479e:	4a85      	ldr	r2, [pc, #532]	; (80149b4 <BSP_GUI_SaveDataInFlash+0x33c>)
 80147a0:	1899      	adds	r1, r3, r2
 80147a2:	4a85      	ldr	r2, [pc, #532]	; (80149b8 <BSP_GUI_SaveDataInFlash+0x340>)
 80147a4:	4b85      	ldr	r3, [pc, #532]	; (80149bc <BSP_GUI_SaveDataInFlash+0x344>)
 80147a6:	2001      	movs	r0, #1
 80147a8:	f7f5 fcb4 	bl	800a114 <HAL_FLASH_Program>
 80147ac:	1e03      	subs	r3, r0, #0
 80147ae:	d005      	beq.n	80147bc <BSP_GUI_SaveDataInFlash+0x144>
    {
      status = GUI_WRITE_ERROR;
 80147b0:	2327      	movs	r3, #39	; 0x27
 80147b2:	2238      	movs	r2, #56	; 0x38
 80147b4:	189b      	adds	r3, r3, r2
 80147b6:	19da      	adds	r2, r3, r7
 80147b8:	2302      	movs	r3, #2
 80147ba:	7013      	strb	r3, [r2, #0]
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 80147bc:	2327      	movs	r3, #39	; 0x27
 80147be:	2238      	movs	r2, #56	; 0x38
 80147c0:	189b      	adds	r3, r3, r2
 80147c2:	19db      	adds	r3, r3, r7
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d000      	beq.n	80147cc <BSP_GUI_SaveDataInFlash+0x154>
 80147ca:	e082      	b.n	80148d2 <BSP_GUI_SaveDataInFlash+0x25a>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 80147cc:	2200      	movs	r2, #0
 80147ce:	2300      	movs	r3, #0
 80147d0:	653a      	str	r2, [r7, #80]	; 0x50
 80147d2:	657b      	str	r3, [r7, #84]	; 0x54
      value |= USBPD_NbPDO[0];
 80147d4:	4b7a      	ldr	r3, [pc, #488]	; (80149c0 <BSP_GUI_SaveDataInFlash+0x348>)
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	633b      	str	r3, [r7, #48]	; 0x30
 80147da:	2300      	movs	r3, #0
 80147dc:	637b      	str	r3, [r7, #52]	; 0x34
 80147de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80147e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80147e4:	0008      	movs	r0, r1
 80147e6:	4318      	orrs	r0, r3
 80147e8:	0004      	movs	r4, r0
 80147ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147ec:	431a      	orrs	r2, r3
 80147ee:	0015      	movs	r5, r2
 80147f0:	653c      	str	r4, [r7, #80]	; 0x50
 80147f2:	657d      	str	r5, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[1] << 8);
 80147f4:	4b72      	ldr	r3, [pc, #456]	; (80149c0 <BSP_GUI_SaveDataInFlash+0x348>)
 80147f6:	785b      	ldrb	r3, [r3, #1]
 80147f8:	021b      	lsls	r3, r3, #8
 80147fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80147fc:	17db      	asrs	r3, r3, #31
 80147fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014806:	0008      	movs	r0, r1
 8014808:	4318      	orrs	r0, r3
 801480a:	6138      	str	r0, [r7, #16]
 801480c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801480e:	431a      	orrs	r2, r3
 8014810:	617a      	str	r2, [r7, #20]
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	697c      	ldr	r4, [r7, #20]
 8014816:	653b      	str	r3, [r7, #80]	; 0x50
 8014818:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[2] << 16);
 801481a:	4b69      	ldr	r3, [pc, #420]	; (80149c0 <BSP_GUI_SaveDataInFlash+0x348>)
 801481c:	789b      	ldrb	r3, [r3, #2]
 801481e:	041b      	lsls	r3, r3, #16
 8014820:	623b      	str	r3, [r7, #32]
 8014822:	17db      	asrs	r3, r3, #31
 8014824:	627b      	str	r3, [r7, #36]	; 0x24
 8014826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014828:	6a39      	ldr	r1, [r7, #32]
 801482a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801482c:	0008      	movs	r0, r1
 801482e:	4318      	orrs	r0, r3
 8014830:	60b8      	str	r0, [r7, #8]
 8014832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014834:	431a      	orrs	r2, r3
 8014836:	60fa      	str	r2, [r7, #12]
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	68fc      	ldr	r4, [r7, #12]
 801483c:	653b      	str	r3, [r7, #80]	; 0x50
 801483e:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[3] << 24);
 8014840:	4b5f      	ldr	r3, [pc, #380]	; (80149c0 <BSP_GUI_SaveDataInFlash+0x348>)
 8014842:	78db      	ldrb	r3, [r3, #3]
 8014844:	061b      	lsls	r3, r3, #24
 8014846:	61bb      	str	r3, [r7, #24]
 8014848:	17db      	asrs	r3, r3, #31
 801484a:	61fb      	str	r3, [r7, #28]
 801484c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801484e:	69b9      	ldr	r1, [r7, #24]
 8014850:	69fa      	ldr	r2, [r7, #28]
 8014852:	0008      	movs	r0, r1
 8014854:	4318      	orrs	r0, r3
 8014856:	6038      	str	r0, [r7, #0]
 8014858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801485a:	431a      	orrs	r2, r3
 801485c:	607a      	str	r2, [r7, #4]
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	687c      	ldr	r4, [r7, #4]
 8014862:	653b      	str	r3, [r7, #80]	; 0x50
 8014864:	657c      	str	r4, [r7, #84]	; 0x54
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 8014866:	4b4d      	ldr	r3, [pc, #308]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	23c0      	movs	r3, #192	; 0xc0
 801486c:	049b      	lsls	r3, r3, #18
 801486e:	4013      	ands	r3, r2
 8014870:	d00e      	beq.n	8014890 <BSP_GUI_SaveDataInFlash+0x218>
 8014872:	4b4a      	ldr	r3, [pc, #296]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 8014874:	681a      	ldr	r2, [r3, #0]
 8014876:	23c0      	movs	r3, #192	; 0xc0
 8014878:	049b      	lsls	r3, r3, #18
 801487a:	401a      	ands	r2, r3
 801487c:	2380      	movs	r3, #128	; 0x80
 801487e:	045b      	lsls	r3, r3, #17
 8014880:	429a      	cmp	r2, r3
 8014882:	d10f      	bne.n	80148a4 <BSP_GUI_SaveDataInFlash+0x22c>
 8014884:	4b46      	ldr	r3, [pc, #280]	; (80149a0 <BSP_GUI_SaveDataInFlash+0x328>)
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	2380      	movs	r3, #128	; 0x80
 801488a:	039b      	lsls	r3, r3, #14
 801488c:	4013      	ands	r3, r2
 801488e:	d109      	bne.n	80148a4 <BSP_GUI_SaveDataInFlash+0x22c>
 8014890:	4b44      	ldr	r3, [pc, #272]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	029b      	lsls	r3, r3, #10
 8014896:	4a44      	ldr	r2, [pc, #272]	; (80149a8 <BSP_GUI_SaveDataInFlash+0x330>)
 8014898:	4013      	ands	r3, r2
 801489a:	0adb      	lsrs	r3, r3, #11
 801489c:	031b      	lsls	r3, r3, #12
 801489e:	4a49      	ldr	r2, [pc, #292]	; (80149c4 <BSP_GUI_SaveDataInFlash+0x34c>)
 80148a0:	1899      	adds	r1, r3, r2
 80148a2:	e009      	b.n	80148b8 <BSP_GUI_SaveDataInFlash+0x240>
 80148a4:	4b3f      	ldr	r3, [pc, #252]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	029b      	lsls	r3, r3, #10
 80148aa:	085b      	lsrs	r3, r3, #1
 80148ac:	4a3f      	ldr	r2, [pc, #252]	; (80149ac <BSP_GUI_SaveDataInFlash+0x334>)
 80148ae:	4013      	ands	r3, r2
 80148b0:	0adb      	lsrs	r3, r3, #11
 80148b2:	031b      	lsls	r3, r3, #12
 80148b4:	4a43      	ldr	r2, [pc, #268]	; (80149c4 <BSP_GUI_SaveDataInFlash+0x34c>)
 80148b6:	1899      	adds	r1, r3, r2
 80148b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148bc:	2001      	movs	r0, #1
 80148be:	f7f5 fc29 	bl	800a114 <HAL_FLASH_Program>
 80148c2:	1e03      	subs	r3, r0, #0
 80148c4:	d005      	beq.n	80148d2 <BSP_GUI_SaveDataInFlash+0x25a>
      {
        status = GUI_WRITE_ERROR;
 80148c6:	2327      	movs	r3, #39	; 0x27
 80148c8:	2238      	movs	r2, #56	; 0x38
 80148ca:	189b      	adds	r3, r3, r2
 80148cc:	19db      	adds	r3, r3, r7
 80148ce:	2202      	movs	r2, #2
 80148d0:	701a      	strb	r2, [r3, #0]
    }
#endif  /* GUI_FLASH_ADDR_NB_PDO_SNK_P0 */

#if defined(_SRC) || defined(_DRP)
    /* Save PORT0_PDO_ListSRC */
    if (GUI_OK == status)
 80148d2:	2327      	movs	r3, #39	; 0x27
 80148d4:	2238      	movs	r2, #56	; 0x38
 80148d6:	189b      	adds	r3, r3, r2
 80148d8:	19db      	adds	r3, r3, r7
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d135      	bne.n	801494c <BSP_GUI_SaveDataInFlash+0x2d4>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
 80148e0:	4b2e      	ldr	r3, [pc, #184]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 80148e2:	681a      	ldr	r2, [r3, #0]
 80148e4:	23c0      	movs	r3, #192	; 0xc0
 80148e6:	049b      	lsls	r3, r3, #18
 80148e8:	4013      	ands	r3, r2
 80148ea:	d00e      	beq.n	801490a <BSP_GUI_SaveDataInFlash+0x292>
 80148ec:	4b2b      	ldr	r3, [pc, #172]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 80148ee:	681a      	ldr	r2, [r3, #0]
 80148f0:	23c0      	movs	r3, #192	; 0xc0
 80148f2:	049b      	lsls	r3, r3, #18
 80148f4:	401a      	ands	r2, r3
 80148f6:	2380      	movs	r3, #128	; 0x80
 80148f8:	045b      	lsls	r3, r3, #17
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d110      	bne.n	8014920 <BSP_GUI_SaveDataInFlash+0x2a8>
 80148fe:	4b28      	ldr	r3, [pc, #160]	; (80149a0 <BSP_GUI_SaveDataInFlash+0x328>)
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	2380      	movs	r3, #128	; 0x80
 8014904:	039b      	lsls	r3, r3, #14
 8014906:	4013      	ands	r3, r2
 8014908:	d10a      	bne.n	8014920 <BSP_GUI_SaveDataInFlash+0x2a8>
 801490a:	4b26      	ldr	r3, [pc, #152]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	029b      	lsls	r3, r3, #10
 8014910:	4a25      	ldr	r2, [pc, #148]	; (80149a8 <BSP_GUI_SaveDataInFlash+0x330>)
 8014912:	4013      	ands	r3, r2
 8014914:	0adb      	lsrs	r3, r3, #11
 8014916:	031b      	lsls	r3, r3, #12
 8014918:	4a2b      	ldr	r2, [pc, #172]	; (80149c8 <BSP_GUI_SaveDataInFlash+0x350>)
 801491a:	4694      	mov	ip, r2
 801491c:	4463      	add	r3, ip
 801491e:	e00a      	b.n	8014936 <BSP_GUI_SaveDataInFlash+0x2be>
 8014920:	4b20      	ldr	r3, [pc, #128]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	029b      	lsls	r3, r3, #10
 8014926:	085b      	lsrs	r3, r3, #1
 8014928:	4a20      	ldr	r2, [pc, #128]	; (80149ac <BSP_GUI_SaveDataInFlash+0x334>)
 801492a:	4013      	ands	r3, r2
 801492c:	0adb      	lsrs	r3, r3, #11
 801492e:	031b      	lsls	r3, r3, #12
 8014930:	4a25      	ldr	r2, [pc, #148]	; (80149c8 <BSP_GUI_SaveDataInFlash+0x350>)
 8014932:	4694      	mov	ip, r2
 8014934:	4463      	add	r3, ip
 8014936:	2227      	movs	r2, #39	; 0x27
 8014938:	2138      	movs	r1, #56	; 0x38
 801493a:	1852      	adds	r2, r2, r1
 801493c:	19d4      	adds	r4, r2, r7
 801493e:	4a23      	ldr	r2, [pc, #140]	; (80149cc <BSP_GUI_SaveDataInFlash+0x354>)
 8014940:	0011      	movs	r1, r2
 8014942:	0018      	movs	r0, r3
 8014944:	f000 f8fa 	bl	8014b3c <SavePDOInFlash>
 8014948:	0003      	movs	r3, r0
 801494a:	7023      	strb	r3, [r4, #0]
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801494c:	2327      	movs	r3, #39	; 0x27
 801494e:	2238      	movs	r2, #56	; 0x38
 8014950:	189b      	adds	r3, r3, r2
 8014952:	19db      	adds	r3, r3, r7
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d152      	bne.n	8014a00 <BSP_GUI_SaveDataInFlash+0x388>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 801495a:	4b10      	ldr	r3, [pc, #64]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	23c0      	movs	r3, #192	; 0xc0
 8014960:	049b      	lsls	r3, r3, #18
 8014962:	4013      	ands	r3, r2
 8014964:	d00e      	beq.n	8014984 <BSP_GUI_SaveDataInFlash+0x30c>
 8014966:	4b0d      	ldr	r3, [pc, #52]	; (801499c <BSP_GUI_SaveDataInFlash+0x324>)
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	23c0      	movs	r3, #192	; 0xc0
 801496c:	049b      	lsls	r3, r3, #18
 801496e:	401a      	ands	r2, r3
 8014970:	2380      	movs	r3, #128	; 0x80
 8014972:	045b      	lsls	r3, r3, #17
 8014974:	429a      	cmp	r2, r3
 8014976:	d12d      	bne.n	80149d4 <BSP_GUI_SaveDataInFlash+0x35c>
 8014978:	4b09      	ldr	r3, [pc, #36]	; (80149a0 <BSP_GUI_SaveDataInFlash+0x328>)
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	2380      	movs	r3, #128	; 0x80
 801497e:	039b      	lsls	r3, r3, #14
 8014980:	4013      	ands	r3, r2
 8014982:	d127      	bne.n	80149d4 <BSP_GUI_SaveDataInFlash+0x35c>
 8014984:	4b07      	ldr	r3, [pc, #28]	; (80149a4 <BSP_GUI_SaveDataInFlash+0x32c>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	029b      	lsls	r3, r3, #10
 801498a:	4a07      	ldr	r2, [pc, #28]	; (80149a8 <BSP_GUI_SaveDataInFlash+0x330>)
 801498c:	4013      	ands	r3, r2
 801498e:	0adb      	lsrs	r3, r3, #11
 8014990:	031b      	lsls	r3, r3, #12
 8014992:	4a0f      	ldr	r2, [pc, #60]	; (80149d0 <BSP_GUI_SaveDataInFlash+0x358>)
 8014994:	4694      	mov	ip, r2
 8014996:	4463      	add	r3, ip
 8014998:	e027      	b.n	80149ea <BSP_GUI_SaveDataInFlash+0x372>
 801499a:	46c0      	nop			; (mov r8, r8)
 801499c:	1fff7500 	.word	0x1fff7500
 80149a0:	40022020 	.word	0x40022020
 80149a4:	1fff75e0 	.word	0x1fff75e0
 80149a8:	000ffc00 	.word	0x000ffc00
 80149ac:	0007fe00 	.word	0x0007fe00
 80149b0:	40022000 	.word	0x40022000
 80149b4:	07fff800 	.word	0x07fff800
 80149b8:	deadf00d 	.word	0xdeadf00d
 80149bc:	deadbabe 	.word	0xdeadbabe
 80149c0:	20000104 	.word	0x20000104
 80149c4:	07fff808 	.word	0x07fff808
 80149c8:	07fff810 	.word	0x07fff810
 80149cc:	20000108 	.word	0x20000108
 80149d0:	07fff890 	.word	0x07fff890
 80149d4:	4b4e      	ldr	r3, [pc, #312]	; (8014b10 <BSP_GUI_SaveDataInFlash+0x498>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	029b      	lsls	r3, r3, #10
 80149da:	085b      	lsrs	r3, r3, #1
 80149dc:	4a4d      	ldr	r2, [pc, #308]	; (8014b14 <BSP_GUI_SaveDataInFlash+0x49c>)
 80149de:	4013      	ands	r3, r2
 80149e0:	0adb      	lsrs	r3, r3, #11
 80149e2:	031b      	lsls	r3, r3, #12
 80149e4:	4a4c      	ldr	r2, [pc, #304]	; (8014b18 <BSP_GUI_SaveDataInFlash+0x4a0>)
 80149e6:	4694      	mov	ip, r2
 80149e8:	4463      	add	r3, ip
 80149ea:	2227      	movs	r2, #39	; 0x27
 80149ec:	2138      	movs	r1, #56	; 0x38
 80149ee:	1852      	adds	r2, r2, r1
 80149f0:	19d4      	adds	r4, r2, r7
 80149f2:	494a      	ldr	r1, [pc, #296]	; (8014b1c <BSP_GUI_SaveDataInFlash+0x4a4>)
 80149f4:	220c      	movs	r2, #12
 80149f6:	0018      	movs	r0, r3
 80149f8:	f000 f913 	bl	8014c22 <SaveSettingsInFlash>
 80149fc:	0003      	movs	r3, r0
 80149fe:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 8014a00:	2327      	movs	r3, #39	; 0x27
 8014a02:	2238      	movs	r2, #56	; 0x38
 8014a04:	189b      	adds	r3, r3, r2
 8014a06:	19db      	adds	r3, r3, r7
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d135      	bne.n	8014a7a <BSP_GUI_SaveDataInFlash+0x402>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 8014a0e:	4b44      	ldr	r3, [pc, #272]	; (8014b20 <BSP_GUI_SaveDataInFlash+0x4a8>)
 8014a10:	681a      	ldr	r2, [r3, #0]
 8014a12:	23c0      	movs	r3, #192	; 0xc0
 8014a14:	049b      	lsls	r3, r3, #18
 8014a16:	4013      	ands	r3, r2
 8014a18:	d00e      	beq.n	8014a38 <BSP_GUI_SaveDataInFlash+0x3c0>
 8014a1a:	4b41      	ldr	r3, [pc, #260]	; (8014b20 <BSP_GUI_SaveDataInFlash+0x4a8>)
 8014a1c:	681a      	ldr	r2, [r3, #0]
 8014a1e:	23c0      	movs	r3, #192	; 0xc0
 8014a20:	049b      	lsls	r3, r3, #18
 8014a22:	401a      	ands	r2, r3
 8014a24:	2380      	movs	r3, #128	; 0x80
 8014a26:	045b      	lsls	r3, r3, #17
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d110      	bne.n	8014a4e <BSP_GUI_SaveDataInFlash+0x3d6>
 8014a2c:	4b3d      	ldr	r3, [pc, #244]	; (8014b24 <BSP_GUI_SaveDataInFlash+0x4ac>)
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	2380      	movs	r3, #128	; 0x80
 8014a32:	039b      	lsls	r3, r3, #14
 8014a34:	4013      	ands	r3, r2
 8014a36:	d10a      	bne.n	8014a4e <BSP_GUI_SaveDataInFlash+0x3d6>
 8014a38:	4b35      	ldr	r3, [pc, #212]	; (8014b10 <BSP_GUI_SaveDataInFlash+0x498>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	029b      	lsls	r3, r3, #10
 8014a3e:	4a3a      	ldr	r2, [pc, #232]	; (8014b28 <BSP_GUI_SaveDataInFlash+0x4b0>)
 8014a40:	4013      	ands	r3, r2
 8014a42:	0adb      	lsrs	r3, r3, #11
 8014a44:	031b      	lsls	r3, r3, #12
 8014a46:	4a39      	ldr	r2, [pc, #228]	; (8014b2c <BSP_GUI_SaveDataInFlash+0x4b4>)
 8014a48:	4694      	mov	ip, r2
 8014a4a:	4463      	add	r3, ip
 8014a4c:	e00a      	b.n	8014a64 <BSP_GUI_SaveDataInFlash+0x3ec>
 8014a4e:	4b30      	ldr	r3, [pc, #192]	; (8014b10 <BSP_GUI_SaveDataInFlash+0x498>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	029b      	lsls	r3, r3, #10
 8014a54:	085b      	lsrs	r3, r3, #1
 8014a56:	4a2f      	ldr	r2, [pc, #188]	; (8014b14 <BSP_GUI_SaveDataInFlash+0x49c>)
 8014a58:	4013      	ands	r3, r2
 8014a5a:	0adb      	lsrs	r3, r3, #11
 8014a5c:	031b      	lsls	r3, r3, #12
 8014a5e:	4a33      	ldr	r2, [pc, #204]	; (8014b2c <BSP_GUI_SaveDataInFlash+0x4b4>)
 8014a60:	4694      	mov	ip, r2
 8014a62:	4463      	add	r3, ip
 8014a64:	2227      	movs	r2, #39	; 0x27
 8014a66:	2138      	movs	r1, #56	; 0x38
 8014a68:	1852      	adds	r2, r2, r1
 8014a6a:	19d4      	adds	r4, r2, r7
 8014a6c:	4930      	ldr	r1, [pc, #192]	; (8014b30 <BSP_GUI_SaveDataInFlash+0x4b8>)
 8014a6e:	2208      	movs	r2, #8
 8014a70:	0018      	movs	r0, r3
 8014a72:	f000 f8d6 	bl	8014c22 <SaveSettingsInFlash>
 8014a76:	0003      	movs	r3, r0
 8014a78:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8014a7a:	2327      	movs	r3, #39	; 0x27
 8014a7c:	2238      	movs	r2, #56	; 0x38
 8014a7e:	189b      	adds	r3, r3, r2
 8014a80:	19db      	adds	r3, r3, r7
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d135      	bne.n	8014af4 <BSP_GUI_SaveDataInFlash+0x47c>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 8014a88:	4b25      	ldr	r3, [pc, #148]	; (8014b20 <BSP_GUI_SaveDataInFlash+0x4a8>)
 8014a8a:	681a      	ldr	r2, [r3, #0]
 8014a8c:	23c0      	movs	r3, #192	; 0xc0
 8014a8e:	049b      	lsls	r3, r3, #18
 8014a90:	4013      	ands	r3, r2
 8014a92:	d00e      	beq.n	8014ab2 <BSP_GUI_SaveDataInFlash+0x43a>
 8014a94:	4b22      	ldr	r3, [pc, #136]	; (8014b20 <BSP_GUI_SaveDataInFlash+0x4a8>)
 8014a96:	681a      	ldr	r2, [r3, #0]
 8014a98:	23c0      	movs	r3, #192	; 0xc0
 8014a9a:	049b      	lsls	r3, r3, #18
 8014a9c:	401a      	ands	r2, r3
 8014a9e:	2380      	movs	r3, #128	; 0x80
 8014aa0:	045b      	lsls	r3, r3, #17
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d110      	bne.n	8014ac8 <BSP_GUI_SaveDataInFlash+0x450>
 8014aa6:	4b1f      	ldr	r3, [pc, #124]	; (8014b24 <BSP_GUI_SaveDataInFlash+0x4ac>)
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	2380      	movs	r3, #128	; 0x80
 8014aac:	039b      	lsls	r3, r3, #14
 8014aae:	4013      	ands	r3, r2
 8014ab0:	d10a      	bne.n	8014ac8 <BSP_GUI_SaveDataInFlash+0x450>
 8014ab2:	4b17      	ldr	r3, [pc, #92]	; (8014b10 <BSP_GUI_SaveDataInFlash+0x498>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	029b      	lsls	r3, r3, #10
 8014ab8:	4a1b      	ldr	r2, [pc, #108]	; (8014b28 <BSP_GUI_SaveDataInFlash+0x4b0>)
 8014aba:	4013      	ands	r3, r2
 8014abc:	0adb      	lsrs	r3, r3, #11
 8014abe:	031b      	lsls	r3, r3, #12
 8014ac0:	4a1c      	ldr	r2, [pc, #112]	; (8014b34 <BSP_GUI_SaveDataInFlash+0x4bc>)
 8014ac2:	4694      	mov	ip, r2
 8014ac4:	4463      	add	r3, ip
 8014ac6:	e00a      	b.n	8014ade <BSP_GUI_SaveDataInFlash+0x466>
 8014ac8:	4b11      	ldr	r3, [pc, #68]	; (8014b10 <BSP_GUI_SaveDataInFlash+0x498>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	029b      	lsls	r3, r3, #10
 8014ace:	085b      	lsrs	r3, r3, #1
 8014ad0:	4a10      	ldr	r2, [pc, #64]	; (8014b14 <BSP_GUI_SaveDataInFlash+0x49c>)
 8014ad2:	4013      	ands	r3, r2
 8014ad4:	0adb      	lsrs	r3, r3, #11
 8014ad6:	031b      	lsls	r3, r3, #12
 8014ad8:	4a16      	ldr	r2, [pc, #88]	; (8014b34 <BSP_GUI_SaveDataInFlash+0x4bc>)
 8014ada:	4694      	mov	ip, r2
 8014adc:	4463      	add	r3, ip
 8014ade:	2227      	movs	r2, #39	; 0x27
 8014ae0:	2138      	movs	r1, #56	; 0x38
 8014ae2:	1852      	adds	r2, r2, r1
 8014ae4:	19d4      	adds	r4, r2, r7
 8014ae6:	4914      	ldr	r1, [pc, #80]	; (8014b38 <BSP_GUI_SaveDataInFlash+0x4c0>)
 8014ae8:	2270      	movs	r2, #112	; 0x70
 8014aea:	0018      	movs	r0, r3
 8014aec:	f000 f899 	bl	8014c22 <SaveSettingsInFlash>
 8014af0:	0003      	movs	r3, r0
 8014af2:	7023      	strb	r3, [r4, #0]
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 8014af4:	f7f5 fb80 	bl	800a1f8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8014af8:	b662      	cpsie	i
}
 8014afa:	46c0      	nop			; (mov r8, r8)

  /* Enable interrupts */
  __enable_irq();

  return status;
 8014afc:	2327      	movs	r3, #39	; 0x27
 8014afe:	2238      	movs	r2, #56	; 0x38
 8014b00:	189b      	adds	r3, r3, r2
 8014b02:	19db      	adds	r3, r3, r7
 8014b04:	781b      	ldrb	r3, [r3, #0]
}
 8014b06:	0018      	movs	r0, r3
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	b019      	add	sp, #100	; 0x64
 8014b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b0e:	46c0      	nop			; (mov r8, r8)
 8014b10:	1fff75e0 	.word	0x1fff75e0
 8014b14:	0007fe00 	.word	0x0007fe00
 8014b18:	07fff890 	.word	0x07fff890
 8014b1c:	20000080 	.word	0x20000080
 8014b20:	1fff7500 	.word	0x1fff7500
 8014b24:	40022020 	.word	0x40022020
 8014b28:	000ffc00 	.word	0x000ffc00
 8014b2c:	07fff918 	.word	0x07fff918
 8014b30:	2000008c 	.word	0x2000008c
 8014b34:	07fff89c 	.word	0x07fff89c
 8014b38:	20000094 	.word	0x20000094

08014b3c <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8014b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b3e:	b08f      	sub	sp, #60	; 0x3c
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6178      	str	r0, [r7, #20]
 8014b44:	6139      	str	r1, [r7, #16]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 8014b46:	231f      	movs	r3, #31
 8014b48:	2210      	movs	r2, #16
 8014b4a:	189b      	adds	r3, r3, r2
 8014b4c:	19db      	adds	r3, r3, r7
 8014b4e:	2200      	movs	r2, #0
 8014b50:	701a      	strb	r2, [r3, #0]

  index_flash = 0U;
 8014b52:	2300      	movs	r3, #0
 8014b54:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 8014b56:	2300      	movs	r3, #0
 8014b58:	637b      	str	r3, [r7, #52]	; 0x34
 8014b5a:	e04f      	b.n	8014bfc <SavePDOInFlash+0xc0>
  {
    value[0] = pListOfPDO[index];
 8014b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b5e:	009b      	lsls	r3, r3, #2
 8014b60:	693a      	ldr	r2, [r7, #16]
 8014b62:	18d3      	adds	r3, r2, r3
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	2108      	movs	r1, #8
 8014b68:	2010      	movs	r0, #16
 8014b6a:	180b      	adds	r3, r1, r0
 8014b6c:	19db      	adds	r3, r3, r7
 8014b6e:	601a      	str	r2, [r3, #0]
    index++;
 8014b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b72:	3301      	adds	r3, #1
 8014b74:	637b      	str	r3, [r7, #52]	; 0x34
    if (index < USBPD_MAX_NB_PDO)
 8014b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b78:	2b06      	cmp	r3, #6
 8014b7a:	d808      	bhi.n	8014b8e <SavePDOInFlash+0x52>
    {
      value[1] = pListOfPDO[index];
 8014b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b7e:	009b      	lsls	r3, r3, #2
 8014b80:	693a      	ldr	r2, [r7, #16]
 8014b82:	18d3      	adds	r3, r2, r3
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	180b      	adds	r3, r1, r0
 8014b88:	19db      	adds	r3, r3, r7
 8014b8a:	605a      	str	r2, [r3, #4]
 8014b8c:	e006      	b.n	8014b9c <SavePDOInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8014b8e:	2308      	movs	r3, #8
 8014b90:	2210      	movs	r2, #16
 8014b92:	189b      	adds	r3, r3, r2
 8014b94:	19db      	adds	r3, r3, r7
 8014b96:	2201      	movs	r2, #1
 8014b98:	4252      	negs	r2, r2
 8014b9a:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 8014b9c:	2208      	movs	r2, #8
 8014b9e:	2610      	movs	r6, #16
 8014ba0:	1993      	adds	r3, r2, r6
 8014ba2:	19db      	adds	r3, r3, r7
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	60bb      	str	r3, [r7, #8]
 8014ba8:	2300      	movs	r3, #0
 8014baa:	60fb      	str	r3, [r7, #12]
 8014bac:	1993      	adds	r3, r2, r6
 8014bae:	19db      	adds	r3, r3, r7
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	603b      	str	r3, [r7, #0]
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	607b      	str	r3, [r7, #4]
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	001d      	movs	r5, r3
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	001c      	movs	r4, r3
 8014bc0:	68b9      	ldr	r1, [r7, #8]
 8014bc2:	68fa      	ldr	r2, [r7, #12]
 8014bc4:	000b      	movs	r3, r1
 8014bc6:	4323      	orrs	r3, r4
 8014bc8:	623b      	str	r3, [r7, #32]
 8014bca:	0013      	movs	r3, r2
 8014bcc:	432b      	orrs	r3, r5
 8014bce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 8014bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd2:	00da      	lsls	r2, r3, #3
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	18d1      	adds	r1, r2, r3
 8014bd8:	6a3a      	ldr	r2, [r7, #32]
 8014bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bdc:	2001      	movs	r0, #1
 8014bde:	f7f5 fa99 	bl	800a114 <HAL_FLASH_Program>
 8014be2:	1e03      	subs	r3, r0, #0
 8014be4:	d004      	beq.n	8014bf0 <SavePDOInFlash+0xb4>
    {
      status = GUI_WRITE_ERROR;
 8014be6:	231f      	movs	r3, #31
 8014be8:	199b      	adds	r3, r3, r6
 8014bea:	19db      	adds	r3, r3, r7
 8014bec:	2202      	movs	r2, #2
 8014bee:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1;
 8014bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 8014bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bf8:	3301      	adds	r3, #1
 8014bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8014bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bfe:	2b06      	cmp	r3, #6
 8014c00:	d806      	bhi.n	8014c10 <SavePDOInFlash+0xd4>
 8014c02:	231f      	movs	r3, #31
 8014c04:	2210      	movs	r2, #16
 8014c06:	189b      	adds	r3, r3, r2
 8014c08:	19db      	adds	r3, r3, r7
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d0a5      	beq.n	8014b5c <SavePDOInFlash+0x20>
  }
  return status;
 8014c10:	231f      	movs	r3, #31
 8014c12:	2210      	movs	r2, #16
 8014c14:	189b      	adds	r3, r3, r2
 8014c16:	19db      	adds	r3, r3, r7
 8014c18:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8014c1a:	0018      	movs	r0, r3
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	b00f      	add	sp, #60	; 0x3c
 8014c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c22 <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8014c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c24:	b091      	sub	sp, #68	; 0x44
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	61f8      	str	r0, [r7, #28]
 8014c2a:	61b9      	str	r1, [r7, #24]
 8014c2c:	617a      	str	r2, [r7, #20]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	089b      	lsrs	r3, r3, #2
 8014c32:	633b      	str	r3, [r7, #48]	; 0x30
  GUI_StatusTypeDef status = GUI_OK;
 8014c34:	2327      	movs	r3, #39	; 0x27
 8014c36:	2210      	movs	r2, #16
 8014c38:	189b      	adds	r3, r3, r2
 8014c3a:	19db      	adds	r3, r3, r7
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	701a      	strb	r2, [r3, #0]

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 8014c40:	697b      	ldr	r3, [r7, #20]
 8014c42:	2203      	movs	r2, #3
 8014c44:	4013      	ands	r3, r2
 8014c46:	d001      	beq.n	8014c4c <SaveSettingsInFlash+0x2a>
  {
    return (GUI_ERROR);
 8014c48:	2303      	movs	r3, #3
 8014c4a:	e065      	b.n	8014d18 <SaveSettingsInFlash+0xf6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 8014c50:	2300      	movs	r3, #0
 8014c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014c54:	e050      	b.n	8014cf8 <SaveSettingsInFlash+0xd6>
  {
    value[0] = pSettings[index];
 8014c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	69ba      	ldr	r2, [r7, #24]
 8014c5c:	18d3      	adds	r3, r2, r3
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	2110      	movs	r1, #16
 8014c62:	2010      	movs	r0, #16
 8014c64:	180b      	adds	r3, r1, r0
 8014c66:	19db      	adds	r3, r3, r7
 8014c68:	601a      	str	r2, [r3, #0]
    index++;
 8014c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (index < nb_u32)
 8014c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d208      	bcs.n	8014c8a <SaveSettingsInFlash+0x68>
    {
      value[1] = pSettings[index];
 8014c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c7a:	009b      	lsls	r3, r3, #2
 8014c7c:	69ba      	ldr	r2, [r7, #24]
 8014c7e:	18d3      	adds	r3, r2, r3
 8014c80:	681a      	ldr	r2, [r3, #0]
 8014c82:	180b      	adds	r3, r1, r0
 8014c84:	19db      	adds	r3, r3, r7
 8014c86:	605a      	str	r2, [r3, #4]
 8014c88:	e006      	b.n	8014c98 <SaveSettingsInFlash+0x76>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8014c8a:	2310      	movs	r3, #16
 8014c8c:	2210      	movs	r2, #16
 8014c8e:	189b      	adds	r3, r3, r2
 8014c90:	19db      	adds	r3, r3, r7
 8014c92:	2201      	movs	r2, #1
 8014c94:	4252      	negs	r2, r2
 8014c96:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 8014c98:	2210      	movs	r2, #16
 8014c9a:	2610      	movs	r6, #16
 8014c9c:	1993      	adds	r3, r2, r6
 8014c9e:	19db      	adds	r3, r3, r7
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	60bb      	str	r3, [r7, #8]
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	60fb      	str	r3, [r7, #12]
 8014ca8:	1993      	adds	r3, r2, r6
 8014caa:	19db      	adds	r3, r3, r7
 8014cac:	685b      	ldr	r3, [r3, #4]
 8014cae:	603b      	str	r3, [r7, #0]
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	607b      	str	r3, [r7, #4]
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	001d      	movs	r5, r3
 8014cb8:	2300      	movs	r3, #0
 8014cba:	001c      	movs	r4, r3
 8014cbc:	68b9      	ldr	r1, [r7, #8]
 8014cbe:	68fa      	ldr	r2, [r7, #12]
 8014cc0:	000b      	movs	r3, r1
 8014cc2:	4323      	orrs	r3, r4
 8014cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8014cc6:	0013      	movs	r3, r2
 8014cc8:	432b      	orrs	r3, r5
 8014cca:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 8014ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cce:	00da      	lsls	r2, r3, #3
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	18d1      	adds	r1, r2, r3
 8014cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd8:	2001      	movs	r0, #1
 8014cda:	f7f5 fa1b 	bl	800a114 <HAL_FLASH_Program>
 8014cde:	1e03      	subs	r3, r0, #0
 8014ce0:	d004      	beq.n	8014cec <SaveSettingsInFlash+0xca>
    {
      status = GUI_WRITE_ERROR;
 8014ce2:	2327      	movs	r3, #39	; 0x27
 8014ce4:	199b      	adds	r3, r3, r6
 8014ce6:	19db      	adds	r3, r3, r7
 8014ce8:	2202      	movs	r2, #2
 8014cea:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1U;
 8014cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cee:	3301      	adds	r3, #1
 8014cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 8014cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d206      	bcs.n	8014d0e <SaveSettingsInFlash+0xec>
 8014d00:	2327      	movs	r3, #39	; 0x27
 8014d02:	2210      	movs	r2, #16
 8014d04:	189b      	adds	r3, r3, r2
 8014d06:	19db      	adds	r3, r3, r7
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d0a3      	beq.n	8014c56 <SaveSettingsInFlash+0x34>
  }
  return status;
 8014d0e:	2327      	movs	r3, #39	; 0x27
 8014d10:	2210      	movs	r2, #16
 8014d12:	189b      	adds	r3, r3, r2
 8014d14:	19db      	adds	r3, r3, r7
 8014d16:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8014d18:	0018      	movs	r0, r3
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	b011      	add	sp, #68	; 0x44
 8014d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014d20 <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b086      	sub	sp, #24
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
 8014d28:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8014d2e:	230f      	movs	r3, #15
 8014d30:	18fb      	adds	r3, r7, r3
 8014d32:	2203      	movs	r2, #3
 8014d34:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8014d36:	2300      	movs	r3, #0
 8014d38:	613b      	str	r3, [r7, #16]
 8014d3a:	e00c      	b.n	8014d56 <LoadPDOFromFlash+0x36>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 8014d3c:	697a      	ldr	r2, [r7, #20]
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	009b      	lsls	r3, r3, #2
 8014d42:	6839      	ldr	r1, [r7, #0]
 8014d44:	18cb      	adds	r3, r1, r3
 8014d46:	6812      	ldr	r2, [r2, #0]
 8014d48:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 8014d4a:	697b      	ldr	r3, [r7, #20]
 8014d4c:	3304      	adds	r3, #4
 8014d4e:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	3301      	adds	r3, #1
 8014d54:	613b      	str	r3, [r7, #16]
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	2b06      	cmp	r3, #6
 8014d5a:	d9ef      	bls.n	8014d3c <LoadPDOFromFlash+0x1c>
    }
    _status = GUI_OK;
 8014d5c:	210f      	movs	r1, #15
 8014d5e:	187b      	adds	r3, r7, r1
 8014d60:	2200      	movs	r2, #0
 8014d62:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 8014d64:	187b      	adds	r3, r7, r1
 8014d66:	781b      	ldrb	r3, [r3, #0]
}
 8014d68:	0018      	movs	r0, r3
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	b006      	add	sp, #24
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8014d70:	b590      	push	{r4, r7, lr}
 8014d72:	b087      	sub	sp, #28
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	60b9      	str	r1, [r7, #8]
 8014d7a:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8014d80:	2413      	movs	r4, #19
 8014d82:	193b      	adds	r3, r7, r4
 8014d84:	2203      	movs	r2, #3
 8014d86:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 8014d88:	6979      	ldr	r1, [r7, #20]
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	0018      	movs	r0, r3
 8014d90:	f004 fb38 	bl	8019404 <memcpy>
    _status = GUI_OK;
 8014d94:	193b      	adds	r3, r7, r4
 8014d96:	2200      	movs	r2, #0
 8014d98:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 8014d9a:	193b      	adds	r3, r7, r4
 8014d9c:	781b      	ldrb	r3, [r3, #0]
}
 8014d9e:	0018      	movs	r0, r3
 8014da0:	46bd      	mov	sp, r7
 8014da2:	b007      	add	sp, #28
 8014da4:	bd90      	pop	{r4, r7, pc}

08014da6 <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 8014da6:	b580      	push	{r7, lr}
 8014da8:	b084      	sub	sp, #16
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	60f8      	str	r0, [r7, #12]
 8014dae:	0008      	movs	r0, r1
 8014db0:	0011      	movs	r1, r2
 8014db2:	607b      	str	r3, [r7, #4]
 8014db4:	230b      	movs	r3, #11
 8014db6:	18fb      	adds	r3, r7, r3
 8014db8:	1c02      	adds	r2, r0, #0
 8014dba:	701a      	strb	r2, [r3, #0]
 8014dbc:	2308      	movs	r3, #8
 8014dbe:	18fb      	adds	r3, r7, r3
 8014dc0:	1c0a      	adds	r2, r1, #0
 8014dc2:	801a      	strh	r2, [r3, #0]
  if (Ptr == NULL)
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d101      	bne.n	8014dce <TLV_init_encode+0x28>
  {
    return 0xFF;  /* Buffer is NULL*/
 8014dca:	23ff      	movs	r3, #255	; 0xff
 8014dcc:	e04a      	b.n	8014e64 <TLV_init_encode+0xbe>
  }
  if (SizeMax < 11U)
 8014dce:	2308      	movs	r3, #8
 8014dd0:	18fb      	adds	r3, r7, r3
 8014dd2:	881b      	ldrh	r3, [r3, #0]
 8014dd4:	2b0a      	cmp	r3, #10
 8014dd6:	d801      	bhi.n	8014ddc <TLV_init_encode+0x36>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 8014dd8:	23ff      	movs	r3, #255	; 0xff
 8014dda:	e043      	b.n	8014e64 <TLV_init_encode+0xbe>
  }

  ToSendTLV->data = Ptr;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2208      	movs	r2, #8
 8014de6:	18ba      	adds	r2, r7, r2
 8014de8:	8812      	ldrh	r2, [r2, #0]
 8014dea:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	22fd      	movs	r2, #253	; 0xfd
 8014df2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	3301      	adds	r3, #1
 8014dfa:	22fd      	movs	r2, #253	; 0xfd
 8014dfc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	3302      	adds	r3, #2
 8014e04:	22fd      	movs	r2, #253	; 0xfd
 8014e06:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	3303      	adds	r3, #3
 8014e0e:	22fd      	movs	r2, #253	; 0xfd
 8014e10:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	3304      	adds	r3, #4
 8014e18:	220b      	movs	r2, #11
 8014e1a:	18ba      	adds	r2, r7, r2
 8014e1c:	7812      	ldrb	r2, [r2, #0]
 8014e1e:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	3305      	adds	r3, #5
 8014e26:	2200      	movs	r2, #0
 8014e28:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	3306      	adds	r3, #6
 8014e30:	2200      	movs	r2, #0
 8014e32:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	3307      	adds	r3, #7
 8014e3a:	22a5      	movs	r2, #165	; 0xa5
 8014e3c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	3308      	adds	r3, #8
 8014e44:	22a5      	movs	r2, #165	; 0xa5
 8014e46:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	3309      	adds	r3, #9
 8014e4e:	22a5      	movs	r2, #165	; 0xa5
 8014e50:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	330a      	adds	r3, #10
 8014e58:	22a5      	movs	r2, #165	; 0xa5
 8014e5a:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2207      	movs	r2, #7
 8014e60:	80da      	strh	r2, [r3, #6]

  return 0;
 8014e62:	2300      	movs	r3, #0
}
 8014e64:	0018      	movs	r0, r3
 8014e66:	46bd      	mov	sp, r7
 8014e68:	b004      	add	sp, #16
 8014e6a:	bd80      	pop	{r7, pc}

08014e6c <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b086      	sub	sp, #24
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	0008      	movs	r0, r1
 8014e76:	0011      	movs	r1, r2
 8014e78:	607b      	str	r3, [r7, #4]
 8014e7a:	230b      	movs	r3, #11
 8014e7c:	18fb      	adds	r3, r7, r3
 8014e7e:	1c02      	adds	r2, r0, #0
 8014e80:	701a      	strb	r2, [r3, #0]
 8014e82:	2308      	movs	r3, #8
 8014e84:	18fb      	adds	r3, r7, r3
 8014e86:	1c0a      	adds	r2, r1, #0
 8014e88:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	68fa      	ldr	r2, [r7, #12]
 8014e90:	88d2      	ldrh	r2, [r2, #6]
 8014e92:	189b      	adds	r3, r3, r2
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	2ba5      	cmp	r3, #165	; 0xa5
 8014e98:	d001      	beq.n	8014e9e <TLV_add+0x32>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8014e9a:	4b5a      	ldr	r3, [pc, #360]	; (8015004 <TLV_add+0x198>)
 8014e9c:	e0ae      	b.n	8014ffc <TLV_add+0x190>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	88db      	ldrh	r3, [r3, #6]
 8014ea2:	001a      	movs	r2, r3
 8014ea4:	2308      	movs	r3, #8
 8014ea6:	18fb      	adds	r3, r7, r3
 8014ea8:	881b      	ldrh	r3, [r3, #0]
 8014eaa:	18d3      	adds	r3, r2, r3
 8014eac:	3307      	adds	r3, #7
 8014eae:	68fa      	ldr	r2, [r7, #12]
 8014eb0:	8892      	ldrh	r2, [r2, #4]
 8014eb2:	4293      	cmp	r3, r2
 8014eb4:	d901      	bls.n	8014eba <TLV_add+0x4e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 8014eb6:	4b53      	ldr	r3, [pc, #332]	; (8015004 <TLV_add+0x198>)
 8014eb8:	e0a0      	b.n	8014ffc <TLV_add+0x190>
  }
  if (ToSendTLV->data == NULL)
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d101      	bne.n	8014ec6 <TLV_add+0x5a>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 8014ec2:	4b50      	ldr	r3, [pc, #320]	; (8015004 <TLV_add+0x198>)
 8014ec4:	e09a      	b.n	8014ffc <TLV_add+0x190>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	88db      	ldrh	r3, [r3, #6]
 8014eca:	4a4e      	ldr	r2, [pc, #312]	; (8015004 <TLV_add+0x198>)
 8014ecc:	4293      	cmp	r3, r2
 8014ece:	d101      	bne.n	8014ed4 <TLV_add+0x68>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 8014ed0:	4b4c      	ldr	r3, [pc, #304]	; (8015004 <TLV_add+0x198>)
 8014ed2:	e093      	b.n	8014ffc <TLV_add+0x190>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	68fa      	ldr	r2, [r7, #12]
 8014eda:	88d2      	ldrh	r2, [r2, #6]
 8014edc:	189b      	adds	r3, r3, r2
 8014ede:	220b      	movs	r2, #11
 8014ee0:	18ba      	adds	r2, r7, r2
 8014ee2:	7812      	ldrb	r2, [r2, #0]
 8014ee4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	88db      	ldrh	r3, [r3, #6]
 8014eea:	3301      	adds	r3, #1
 8014eec:	b29a      	uxth	r2, r3
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	88da      	ldrh	r2, [r3, #6]
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 8014efa:	2008      	movs	r0, #8
 8014efc:	183b      	adds	r3, r7, r0
 8014efe:	881b      	ldrh	r3, [r3, #0]
 8014f00:	0a1b      	lsrs	r3, r3, #8
 8014f02:	b299      	uxth	r1, r3
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	68fa      	ldr	r2, [r7, #12]
 8014f0a:	88d2      	ldrh	r2, [r2, #6]
 8014f0c:	189b      	adds	r3, r3, r2
 8014f0e:	b2ca      	uxtb	r2, r1
 8014f10:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	681a      	ldr	r2, [r3, #0]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	88db      	ldrh	r3, [r3, #6]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	18d3      	adds	r3, r2, r3
 8014f1e:	183a      	adds	r2, r7, r0
 8014f20:	8812      	ldrh	r2, [r2, #0]
 8014f22:	b2d2      	uxtb	r2, r2
 8014f24:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	88db      	ldrh	r3, [r3, #6]
 8014f2a:	3302      	adds	r3, #2
 8014f2c:	b29a      	uxth	r2, r3
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 8014f32:	2300      	movs	r3, #0
 8014f34:	617b      	str	r3, [r7, #20]
 8014f36:	e012      	b.n	8014f5e <TLV_add+0xf2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8014f38:	687a      	ldr	r2, [r7, #4]
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	18d2      	adds	r2, r2, r3
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	68f9      	ldr	r1, [r7, #12]
 8014f44:	88c9      	ldrh	r1, [r1, #6]
 8014f46:	185b      	adds	r3, r3, r1
 8014f48:	7812      	ldrb	r2, [r2, #0]
 8014f4a:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	88db      	ldrh	r3, [r3, #6]
 8014f50:	3301      	adds	r3, #1
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	617b      	str	r3, [r7, #20]
 8014f5e:	2108      	movs	r1, #8
 8014f60:	187b      	adds	r3, r7, r1
 8014f62:	881b      	ldrh	r3, [r3, #0]
 8014f64:	697a      	ldr	r2, [r7, #20]
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d3e6      	bcc.n	8014f38 <TLV_add+0xcc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	68fa      	ldr	r2, [r7, #12]
 8014f70:	88d2      	ldrh	r2, [r2, #6]
 8014f72:	189b      	adds	r3, r3, r2
 8014f74:	22a5      	movs	r2, #165	; 0xa5
 8014f76:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	88db      	ldrh	r3, [r3, #6]
 8014f80:	3301      	adds	r3, #1
 8014f82:	18d3      	adds	r3, r2, r3
 8014f84:	22a5      	movs	r2, #165	; 0xa5
 8014f86:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681a      	ldr	r2, [r3, #0]
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	88db      	ldrh	r3, [r3, #6]
 8014f90:	3302      	adds	r3, #2
 8014f92:	18d3      	adds	r3, r2, r3
 8014f94:	22a5      	movs	r2, #165	; 0xa5
 8014f96:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	88db      	ldrh	r3, [r3, #6]
 8014fa0:	3303      	adds	r3, #3
 8014fa2:	18d3      	adds	r3, r2, r3
 8014fa4:	22a5      	movs	r2, #165	; 0xa5
 8014fa6:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	3305      	adds	r3, #5
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	b29b      	uxth	r3, r3
 8014fb2:	021b      	lsls	r3, r3, #8
 8014fb4:	b29a      	uxth	r2, r3
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	3306      	adds	r3, #6
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	18d3      	adds	r3, r2, r3
 8014fc2:	b29a      	uxth	r2, r3
 8014fc4:	187b      	adds	r3, r7, r1
 8014fc6:	881b      	ldrh	r3, [r3, #0]
 8014fc8:	18d3      	adds	r3, r2, r3
 8014fca:	b29a      	uxth	r2, r3
 8014fcc:	2012      	movs	r0, #18
 8014fce:	183b      	adds	r3, r7, r0
 8014fd0:	3203      	adds	r2, #3
 8014fd2:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 8014fd4:	183b      	adds	r3, r7, r0
 8014fd6:	881b      	ldrh	r3, [r3, #0]
 8014fd8:	0a1b      	lsrs	r3, r3, #8
 8014fda:	b29a      	uxth	r2, r3
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	3305      	adds	r3, #5
 8014fe2:	b2d2      	uxtb	r2, r2
 8014fe4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	3306      	adds	r3, #6
 8014fec:	183a      	adds	r2, r7, r0
 8014fee:	8812      	ldrh	r2, [r2, #0]
 8014ff0:	b2d2      	uxtb	r2, r2
 8014ff2:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 8014ff4:	187b      	adds	r3, r7, r1
 8014ff6:	881b      	ldrh	r3, [r3, #0]
 8014ff8:	3303      	adds	r3, #3
 8014ffa:	b29b      	uxth	r3, r3
}
 8014ffc:	0018      	movs	r0, r3
 8014ffe:	46bd      	mov	sp, r7
 8015000:	b006      	add	sp, #24
 8015002:	bd80      	pop	{r7, pc}
 8015004:	0000ffff 	.word	0x0000ffff

08015008 <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b086      	sub	sp, #24
 801500c:	af00      	add	r7, sp, #0
 801500e:	60f8      	str	r0, [r7, #12]
 8015010:	60b9      	str	r1, [r7, #8]
 8015012:	1dbb      	adds	r3, r7, #6
 8015014:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68fa      	ldr	r2, [r7, #12]
 801501c:	88d2      	ldrh	r2, [r2, #6]
 801501e:	189b      	adds	r3, r3, r2
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	2ba5      	cmp	r3, #165	; 0xa5
 8015024:	d001      	beq.n	801502a <TLV_addValue+0x22>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8015026:	4b41      	ldr	r3, [pc, #260]	; (801512c <TLV_addValue+0x124>)
 8015028:	e07c      	b.n	8015124 <TLV_addValue+0x11c>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	88db      	ldrh	r3, [r3, #6]
 801502e:	001a      	movs	r2, r3
 8015030:	1dbb      	adds	r3, r7, #6
 8015032:	881b      	ldrh	r3, [r3, #0]
 8015034:	18d3      	adds	r3, r2, r3
 8015036:	3307      	adds	r3, #7
 8015038:	68fa      	ldr	r2, [r7, #12]
 801503a:	8892      	ldrh	r2, [r2, #4]
 801503c:	4293      	cmp	r3, r2
 801503e:	d901      	bls.n	8015044 <TLV_addValue+0x3c>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 8015040:	4b3a      	ldr	r3, [pc, #232]	; (801512c <TLV_addValue+0x124>)
 8015042:	e06f      	b.n	8015124 <TLV_addValue+0x11c>
  }
  if (ToSendTLV->data == NULL)
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d101      	bne.n	8015050 <TLV_addValue+0x48>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801504c:	4b37      	ldr	r3, [pc, #220]	; (801512c <TLV_addValue+0x124>)
 801504e:	e069      	b.n	8015124 <TLV_addValue+0x11c>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	88db      	ldrh	r3, [r3, #6]
 8015054:	4a35      	ldr	r2, [pc, #212]	; (801512c <TLV_addValue+0x124>)
 8015056:	4293      	cmp	r3, r2
 8015058:	d101      	bne.n	801505e <TLV_addValue+0x56>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801505a:	4b34      	ldr	r3, [pc, #208]	; (801512c <TLV_addValue+0x124>)
 801505c:	e062      	b.n	8015124 <TLV_addValue+0x11c>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 801505e:	2300      	movs	r3, #0
 8015060:	617b      	str	r3, [r7, #20]
 8015062:	e012      	b.n	801508a <TLV_addValue+0x82>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8015064:	68ba      	ldr	r2, [r7, #8]
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	18d2      	adds	r2, r2, r3
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	68f9      	ldr	r1, [r7, #12]
 8015070:	88c9      	ldrh	r1, [r1, #6]
 8015072:	185b      	adds	r3, r3, r1
 8015074:	7812      	ldrb	r2, [r2, #0]
 8015076:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	88db      	ldrh	r3, [r3, #6]
 801507c:	3301      	adds	r3, #1
 801507e:	b29a      	uxth	r2, r3
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	3301      	adds	r3, #1
 8015088:	617b      	str	r3, [r7, #20]
 801508a:	1dbb      	adds	r3, r7, #6
 801508c:	881b      	ldrh	r3, [r3, #0]
 801508e:	697a      	ldr	r2, [r7, #20]
 8015090:	429a      	cmp	r2, r3
 8015092:	d3e7      	bcc.n	8015064 <TLV_addValue+0x5c>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	68fa      	ldr	r2, [r7, #12]
 801509a:	88d2      	ldrh	r2, [r2, #6]
 801509c:	189b      	adds	r3, r3, r2
 801509e:	22a5      	movs	r2, #165	; 0xa5
 80150a0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681a      	ldr	r2, [r3, #0]
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	88db      	ldrh	r3, [r3, #6]
 80150aa:	3301      	adds	r3, #1
 80150ac:	18d3      	adds	r3, r2, r3
 80150ae:	22a5      	movs	r2, #165	; 0xa5
 80150b0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	88db      	ldrh	r3, [r3, #6]
 80150ba:	3302      	adds	r3, #2
 80150bc:	18d3      	adds	r3, r2, r3
 80150be:	22a5      	movs	r2, #165	; 0xa5
 80150c0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	88db      	ldrh	r3, [r3, #6]
 80150ca:	3303      	adds	r3, #3
 80150cc:	18d3      	adds	r3, r2, r3
 80150ce:	22a5      	movs	r2, #165	; 0xa5
 80150d0:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	3305      	adds	r3, #5
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	b29b      	uxth	r3, r3
 80150dc:	021b      	lsls	r3, r3, #8
 80150de:	b29a      	uxth	r2, r3
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	3306      	adds	r3, #6
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	18d3      	adds	r3, r2, r3
 80150ec:	b299      	uxth	r1, r3
 80150ee:	2012      	movs	r0, #18
 80150f0:	183b      	adds	r3, r7, r0
 80150f2:	1dba      	adds	r2, r7, #6
 80150f4:	8812      	ldrh	r2, [r2, #0]
 80150f6:	188a      	adds	r2, r1, r2
 80150f8:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 80150fa:	0001      	movs	r1, r0
 80150fc:	187b      	adds	r3, r7, r1
 80150fe:	881b      	ldrh	r3, [r3, #0]
 8015100:	0a1b      	lsrs	r3, r3, #8
 8015102:	b29a      	uxth	r2, r3
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	3305      	adds	r3, #5
 801510a:	b2d2      	uxtb	r2, r2
 801510c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	3306      	adds	r3, #6
 8015114:	187a      	adds	r2, r7, r1
 8015116:	8812      	ldrh	r2, [r2, #0]
 8015118:	b2d2      	uxtb	r2, r2
 801511a:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 801511c:	1dbb      	adds	r3, r7, #6
 801511e:	881b      	ldrh	r3, [r3, #0]
 8015120:	3303      	adds	r3, #3
 8015122:	b29b      	uxth	r3, r3
}
 8015124:	0018      	movs	r0, r3
 8015126:	46bd      	mov	sp, r7
 8015128:	b006      	add	sp, #24
 801512a:	bd80      	pop	{r7, pc}
 801512c:	0000ffff 	.word	0x0000ffff

08015130 <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2200      	movs	r2, #0
 801513c:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	2201      	movs	r2, #1
 8015142:	4252      	negs	r2, r2
 8015144:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	2200      	movs	r2, #0
 801514a:	809a      	strh	r2, [r3, #4]
}
 801514c:	46c0      	nop			; (mov r8, r8)
 801514e:	46bd      	mov	sp, r7
 8015150:	b002      	add	sp, #8
 8015152:	bd80      	pop	{r7, pc}

08015154 <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b082      	sub	sp, #8
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d101      	bne.n	8015168 <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 8015164:	23ff      	movs	r3, #255	; 0xff
 8015166:	e01d      	b.n	80151a4 <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	2bfd      	cmp	r3, #253	; 0xfd
 801516e:	d10e      	bne.n	801518e <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	3301      	adds	r3, #1
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	2bfd      	cmp	r3, #253	; 0xfd
 8015178:	d109      	bne.n	801518e <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	3302      	adds	r3, #2
 801517e:	781b      	ldrb	r3, [r3, #0]
 8015180:	2bfd      	cmp	r3, #253	; 0xfd
 8015182:	d104      	bne.n	801518e <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	3303      	adds	r3, #3
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	2bfd      	cmp	r3, #253	; 0xfd
 801518c:	d001      	beq.n	8015192 <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 801518e:	23ff      	movs	r3, #255	; 0xff
 8015190:	e008      	b.n	80151a4 <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	683a      	ldr	r2, [r7, #0]
 8015196:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2207      	movs	r2, #7
 801519c:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	889b      	ldrh	r3, [r3, #4]
 80151a2:	b2db      	uxtb	r3, r3
}
 80151a4:	0018      	movs	r0, r3
 80151a6:	46bd      	mov	sp, r7
 80151a8:	b002      	add	sp, #8
 80151aa:	bd80      	pop	{r7, pc}

080151ac <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b084      	sub	sp, #16
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	60b9      	str	r1, [r7, #8]
 80151b6:	607a      	str	r2, [r7, #4]
 80151b8:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d101      	bne.n	80151c6 <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 80151c2:	23ff      	movs	r3, #255	; 0xff
 80151c4:	e048      	b.n	8015258 <TLV_get+0xac>
  }
  if (ToProcessTLV->cursor == 0U)
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	889b      	ldrh	r3, [r3, #4]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d101      	bne.n	80151d2 <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 80151ce:	23ff      	movs	r3, #255	; 0xff
 80151d0:	e042      	b.n	8015258 <TLV_get+0xac>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	68fa      	ldr	r2, [r7, #12]
 80151d8:	8892      	ldrh	r2, [r2, #4]
 80151da:	189b      	adds	r3, r3, r2
 80151dc:	781b      	ldrb	r3, [r3, #0]
 80151de:	2ba5      	cmp	r3, #165	; 0xa5
 80151e0:	d101      	bne.n	80151e6 <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 80151e2:	23ff      	movs	r3, #255	; 0xff
 80151e4:	e038      	b.n	8015258 <TLV_get+0xac>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	68fa      	ldr	r2, [r7, #12]
 80151ec:	8892      	ldrh	r2, [r2, #4]
 80151ee:	189b      	adds	r3, r3, r2
 80151f0:	781a      	ldrb	r2, [r3, #0]
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	889b      	ldrh	r3, [r3, #4]
 80151fa:	3301      	adds	r3, #1
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	68fa      	ldr	r2, [r7, #12]
 8015208:	8892      	ldrh	r2, [r2, #4]
 801520a:	189b      	adds	r3, r3, r2
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	b29b      	uxth	r3, r3
 8015210:	021b      	lsls	r3, r3, #8
 8015212:	b29a      	uxth	r2, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	6819      	ldr	r1, [r3, #0]
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	889b      	ldrh	r3, [r3, #4]
 801521c:	3301      	adds	r3, #1
 801521e:	18cb      	adds	r3, r1, r3
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	b29b      	uxth	r3, r3
 8015224:	18d3      	adds	r3, r2, r3
 8015226:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	889b      	ldrh	r3, [r3, #4]
 8015230:	3302      	adds	r3, #2
 8015232:	b29a      	uxth	r2, r3
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	68fa      	ldr	r2, [r7, #12]
 801523e:	8892      	ldrh	r2, [r2, #4]
 8015240:	189a      	adds	r2, r3, r2
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	889a      	ldrh	r2, [r3, #4]
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	881b      	ldrh	r3, [r3, #0]
 801524e:	18d3      	adds	r3, r2, r3
 8015250:	b29a      	uxth	r2, r3
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	809a      	strh	r2, [r3, #4]

  return 0;
 8015256:	2300      	movs	r3, #0
}
 8015258:	0018      	movs	r0, r3
 801525a:	46bd      	mov	sp, r7
 801525c:	b004      	add	sp, #16
 801525e:	bd80      	pop	{r7, pc}

08015260 <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b082      	sub	sp, #8
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2200      	movs	r2, #0
 801526c:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2200      	movs	r2, #0
 8015272:	809a      	strh	r2, [r3, #4]
}
 8015274:	46c0      	nop			; (mov r8, r8)
 8015276:	46bd      	mov	sp, r7
 8015278:	b002      	add	sp, #8
 801527a:	bd80      	pop	{r7, pc}

0801527c <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b084      	sub	sp, #16
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 8015284:	230f      	movs	r3, #15
 8015286:	18fb      	adds	r3, r7, r3
 8015288:	2200      	movs	r2, #0
 801528a:	701a      	strb	r2, [r3, #0]

  while (pString[start] == TLV_SOF)
 801528c:	e005      	b.n	801529a <TLV_get_string_length+0x1e>
  {
    start++;
 801528e:	210f      	movs	r1, #15
 8015290:	187b      	adds	r3, r7, r1
 8015292:	781a      	ldrb	r2, [r3, #0]
 8015294:	187b      	adds	r3, r7, r1
 8015296:	3201      	adds	r2, #1
 8015298:	701a      	strb	r2, [r3, #0]
  while (pString[start] == TLV_SOF)
 801529a:	210f      	movs	r1, #15
 801529c:	187b      	adds	r3, r7, r1
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	18d3      	adds	r3, r2, r3
 80152a4:	781b      	ldrb	r3, [r3, #0]
 80152a6:	2bfd      	cmp	r3, #253	; 0xfd
 80152a8:	d0f1      	beq.n	801528e <TLV_get_string_length+0x12>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 80152aa:	187b      	adds	r3, r7, r1
 80152ac:	781b      	ldrb	r3, [r3, #0]
 80152ae:	3301      	adds	r3, #1
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	18d3      	adds	r3, r2, r3
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	021b      	lsls	r3, r3, #8
 80152b8:	b21a      	sxth	r2, r3
 80152ba:	187b      	adds	r3, r7, r1
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	3302      	adds	r3, #2
 80152c0:	6879      	ldr	r1, [r7, #4]
 80152c2:	18cb      	adds	r3, r1, r3
 80152c4:	781b      	ldrb	r3, [r3, #0]
 80152c6:	b21b      	sxth	r3, r3
 80152c8:	4313      	orrs	r3, r2
 80152ca:	b21a      	sxth	r2, r3
 80152cc:	210c      	movs	r1, #12
 80152ce:	187b      	adds	r3, r7, r1
 80152d0:	801a      	strh	r2, [r3, #0]
  length += 3U;
 80152d2:	187b      	adds	r3, r7, r1
 80152d4:	187a      	adds	r2, r7, r1
 80152d6:	8812      	ldrh	r2, [r2, #0]
 80152d8:	3203      	adds	r2, #3
 80152da:	801a      	strh	r2, [r3, #0]

  return length;
 80152dc:	187b      	adds	r3, r7, r1
 80152de:	881b      	ldrh	r3, [r3, #0]
}
 80152e0:	0018      	movs	r0, r3
 80152e2:	46bd      	mov	sp, r7
 80152e4:	b004      	add	sp, #16
 80152e6:	bd80      	pop	{r7, pc}

080152e8 <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	60b9      	str	r1, [r7, #8]
 80152f2:	607a      	str	r2, [r7, #4]
 80152f4:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 80152f6:	2317      	movs	r3, #23
 80152f8:	18fb      	adds	r3, r7, r3
 80152fa:	2201      	movs	r2, #1
 80152fc:	701a      	strb	r2, [r3, #0]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 80152fe:	f7fe ffa3 	bl	8014248 <BSP_GUI_LoadDataFromFlash>
 8015302:	0003      	movs	r3, r0
 8015304:	1e5a      	subs	r2, r3, #1
 8015306:	4193      	sbcs	r3, r2
 8015308:	b2db      	uxtb	r3, r3
 801530a:	001a      	movs	r2, r3
 801530c:	4b3f      	ldr	r3, [pc, #252]	; (801540c <GUI_Init+0x124>)
 801530e:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 8015310:	4b3f      	ldr	r3, [pc, #252]	; (8015410 <GUI_Init+0x128>)
 8015312:	799b      	ldrb	r3, [r3, #6]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d003      	beq.n	8015320 <GUI_Init+0x38>
 8015318:	4b3d      	ldr	r3, [pc, #244]	; (8015410 <GUI_Init+0x128>)
 801531a:	79db      	ldrb	r3, [r3, #7]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d115      	bne.n	801534c <GUI_Init+0x64>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 8015320:	4b3c      	ldr	r3, [pc, #240]	; (8015414 <GUI_Init+0x12c>)
 8015322:	2268      	movs	r2, #104	; 0x68
 8015324:	189b      	adds	r3, r3, r2
 8015326:	785a      	ldrb	r2, [r3, #1]
 8015328:	2101      	movs	r1, #1
 801532a:	400a      	ands	r2, r1
 801532c:	1c11      	adds	r1, r2, #0
 801532e:	2260      	movs	r2, #96	; 0x60
 8015330:	4252      	negs	r2, r2
 8015332:	430a      	orrs	r2, r1
 8015334:	705a      	strb	r2, [r3, #1]
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 8015336:	4b37      	ldr	r3, [pc, #220]	; (8015414 <GUI_Init+0x12c>)
 8015338:	2268      	movs	r2, #104	; 0x68
 801533a:	189b      	adds	r3, r3, r2
 801533c:	789a      	ldrb	r2, [r3, #2]
 801533e:	217f      	movs	r1, #127	; 0x7f
 8015340:	438a      	bics	r2, r1
 8015342:	1c11      	adds	r1, r2, #0
 8015344:	2232      	movs	r2, #50	; 0x32
 8015346:	430a      	orrs	r2, r1
 8015348:	709a      	strb	r2, [r3, #2]
 801534a:	e040      	b.n	80153ce <GUI_Init+0xe6>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801534c:	4b30      	ldr	r3, [pc, #192]	; (8015410 <GUI_Init+0x128>)
 801534e:	79db      	ldrb	r3, [r3, #7]
 8015350:	001a      	movs	r2, r3
 8015352:	2364      	movs	r3, #100	; 0x64
 8015354:	435a      	muls	r2, r3
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 8015356:	4b2e      	ldr	r3, [pc, #184]	; (8015410 <GUI_Init+0x128>)
 8015358:	79db      	ldrb	r3, [r3, #7]
 801535a:	0019      	movs	r1, r3
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 801535c:	4b2c      	ldr	r3, [pc, #176]	; (8015410 <GUI_Init+0x128>)
 801535e:	799b      	ldrb	r3, [r3, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 8015360:	18cb      	adds	r3, r1, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8015362:	0019      	movs	r1, r3
 8015364:	0010      	movs	r0, r2
 8015366:	f7f0 fffd 	bl	8006364 <__udivsi3>
 801536a:	0003      	movs	r3, r0
 801536c:	1c1a      	adds	r2, r3, #0
 801536e:	237f      	movs	r3, #127	; 0x7f
 8015370:	4013      	ands	r3, r2
 8015372:	b2da      	uxtb	r2, r3
 8015374:	4b27      	ldr	r3, [pc, #156]	; (8015414 <GUI_Init+0x12c>)
 8015376:	2168      	movs	r1, #104	; 0x68
 8015378:	185b      	adds	r3, r3, r1
 801537a:	217f      	movs	r1, #127	; 0x7f
 801537c:	400a      	ands	r2, r1
 801537e:	0010      	movs	r0, r2
 8015380:	789a      	ldrb	r2, [r3, #2]
 8015382:	217f      	movs	r1, #127	; 0x7f
 8015384:	438a      	bics	r2, r1
 8015386:	1c11      	adds	r1, r2, #0
 8015388:	1c02      	adds	r2, r0, #0
 801538a:	430a      	orrs	r2, r1
 801538c:	709a      	strb	r2, [r3, #2]
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801538e:	4b20      	ldr	r3, [pc, #128]	; (8015410 <GUI_Init+0x128>)
 8015390:	79db      	ldrb	r3, [r3, #7]
 8015392:	001a      	movs	r2, r3
 8015394:	2364      	movs	r3, #100	; 0x64
 8015396:	435a      	muls	r2, r3
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 8015398:	4b1e      	ldr	r3, [pc, #120]	; (8015414 <GUI_Init+0x12c>)
 801539a:	216a      	movs	r1, #106	; 0x6a
 801539c:	5c5b      	ldrb	r3, [r3, r1]
 801539e:	065b      	lsls	r3, r3, #25
 80153a0:	0e5b      	lsrs	r3, r3, #25
 80153a2:	b2db      	uxtb	r3, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 80153a4:	0019      	movs	r1, r3
 80153a6:	0010      	movs	r0, r2
 80153a8:	f7f0 ffdc 	bl	8006364 <__udivsi3>
 80153ac:	0003      	movs	r3, r0
 80153ae:	1c1a      	adds	r2, r3, #0
 80153b0:	237f      	movs	r3, #127	; 0x7f
 80153b2:	4013      	ands	r3, r2
 80153b4:	b2d9      	uxtb	r1, r3
 80153b6:	4b17      	ldr	r3, [pc, #92]	; (8015414 <GUI_Init+0x12c>)
 80153b8:	2268      	movs	r2, #104	; 0x68
 80153ba:	189b      	adds	r3, r3, r2
 80153bc:	1c0a      	adds	r2, r1, #0
 80153be:	1890      	adds	r0, r2, r2
 80153c0:	785a      	ldrb	r2, [r3, #1]
 80153c2:	2101      	movs	r1, #1
 80153c4:	400a      	ands	r2, r1
 80153c6:	1c11      	adds	r1, r2, #0
 80153c8:	1c02      	adds	r2, r0, #0
 80153ca:	430a      	orrs	r2, r1
 80153cc:	705a      	strb	r2, [r3, #1]
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 80153ce:	4b12      	ldr	r3, [pc, #72]	; (8015418 <GUI_Init+0x130>)
 80153d0:	68fa      	ldr	r2, [r7, #12]
 80153d2:	601a      	str	r2, [r3, #0]
  pCB_HWPDType        = CB_HWPDType;
 80153d4:	4b11      	ldr	r3, [pc, #68]	; (801541c <GUI_Init+0x134>)
 80153d6:	68ba      	ldr	r2, [r7, #8]
 80153d8:	601a      	str	r2, [r3, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 80153da:	4b11      	ldr	r3, [pc, #68]	; (8015420 <GUI_Init+0x138>)
 80153dc:	687a      	ldr	r2, [r7, #4]
 80153de:	601a      	str	r2, [r3, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 80153e0:	4b10      	ldr	r3, [pc, #64]	; (8015424 <GUI_Init+0x13c>)
 80153e2:	683a      	ldr	r2, [r7, #0]
 80153e4:	601a      	str	r2, [r3, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 80153e6:	4a10      	ldr	r2, [pc, #64]	; (8015428 <GUI_Init+0x140>)
 80153e8:	4910      	ldr	r1, [pc, #64]	; (801542c <GUI_Init+0x144>)
 80153ea:	4b11      	ldr	r3, [pc, #68]	; (8015430 <GUI_Init+0x148>)
 80153ec:	0018      	movs	r0, r3
 80153ee:	f7fd fcd7 	bl	8012da0 <USBPD_DPM_SetNotification_GUI>

#if !defined(USBPD_THREADX)
  _status = (USBPD_FunctionalState) GUI_InitOS(NULL);
 80153f2:	2000      	movs	r0, #0
 80153f4:	f000 f81e 	bl	8015434 <GUI_InitOS>
 80153f8:	0002      	movs	r2, r0
 80153fa:	2117      	movs	r1, #23
 80153fc:	187b      	adds	r3, r7, r1
 80153fe:	701a      	strb	r2, [r3, #0]
#endif /* !USBPD_THREADX */
  return _status;
 8015400:	187b      	adds	r3, r7, r1
 8015402:	781b      	ldrb	r3, [r3, #0]
}
 8015404:	0018      	movs	r0, r3
 8015406:	46bd      	mov	sp, r7
 8015408:	b006      	add	sp, #24
 801540a:	bd80      	pop	{r7, pc}
 801540c:	20002a3d 	.word	0x20002a3d
 8015410:	20000080 	.word	0x20000080
 8015414:	20000094 	.word	0x20000094
 8015418:	20002a48 	.word	0x20002a48
 801541c:	20002a4c 	.word	0x20002a4c
 8015420:	20002a50 	.word	0x20002a50
 8015424:	20002a54 	.word	0x20002a54
 8015428:	08016479 	.word	0x08016479
 801542c:	0801642d 	.word	0x0801642d
 8015430:	080157f3 	.word	0x080157f3

08015434 <GUI_InitOS>:

uint32_t GUI_InitOS(void *MemoryPtr)
{
 8015434:	b5b0      	push	{r4, r5, r7, lr}
 8015436:	b08a      	sub	sp, #40	; 0x28
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
  static uint8_t _init = 0;
  GUIOS_INIT();
 801543c:	2301      	movs	r3, #1
 801543e:	627b      	str	r3, [r7, #36]	; 0x24

  /* This init check to keep the compatibility with the previous version of the GUI */
  /* Only threadX required to separate the OS object init with the init code.       */
  if (_init == 0)
 8015440:	4b1b      	ldr	r3, [pc, #108]	; (80154b0 <GUI_InitOS+0x7c>)
 8015442:	781b      	ldrb	r3, [r3, #0]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d12d      	bne.n	80154a4 <GUI_InitOS+0x70>
  {
    _init = 1;
 8015448:	4b19      	ldr	r3, [pc, #100]	; (80154b0 <GUI_InitOS+0x7c>)
 801544a:	2201      	movs	r2, #1
 801544c:	701a      	strb	r2, [r3, #0]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_CREATE_QUEUE(GUIMsgBox, "GUIBOX", GUI_BOX_MESSAGES_MAX, GUIOS_ELEMENT_SIZE);
 801544e:	241c      	movs	r4, #28
 8015450:	193b      	adds	r3, r7, r4
 8015452:	4a18      	ldr	r2, [pc, #96]	; (80154b4 <GUI_InitOS+0x80>)
 8015454:	ca03      	ldmia	r2!, {r0, r1}
 8015456:	c303      	stmia	r3!, {r0, r1}
 8015458:	193b      	adds	r3, r7, r4
 801545a:	2100      	movs	r1, #0
 801545c:	0018      	movs	r0, r3
 801545e:	f7fa fff8 	bl	8010452 <osMessageCreate>
 8015462:	0002      	movs	r2, r0
 8015464:	4b14      	ldr	r3, [pc, #80]	; (80154b8 <GUI_InitOS+0x84>)
 8015466:	601a      	str	r2, [r3, #0]
 8015468:	4b13      	ldr	r3, [pc, #76]	; (80154b8 <GUI_InitOS+0x84>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d102      	bne.n	8015476 <GUI_InitOS+0x42>
 8015470:	2300      	movs	r3, #0
 8015472:	627b      	str	r3, [r7, #36]	; 0x24
 8015474:	e017      	b.n	80154a6 <GUI_InitOS+0x72>
    GUIOS_CREATE_TASK(GUI_ThreadID, GUI, TaskGUI, OS_GUI_PRIORITY, OS_GUI_STACK_SIZE, &GUIMsgBox);
 8015476:	2508      	movs	r5, #8
 8015478:	197b      	adds	r3, r7, r5
 801547a:	4a10      	ldr	r2, [pc, #64]	; (80154bc <GUI_InitOS+0x88>)
 801547c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801547e:	c313      	stmia	r3!, {r0, r1, r4}
 8015480:	ca03      	ldmia	r2!, {r0, r1}
 8015482:	c303      	stmia	r3!, {r0, r1}
 8015484:	4a0c      	ldr	r2, [pc, #48]	; (80154b8 <GUI_InitOS+0x84>)
 8015486:	197b      	adds	r3, r7, r5
 8015488:	0011      	movs	r1, r2
 801548a:	0018      	movs	r0, r3
 801548c:	f7fa ff9d 	bl	80103ca <osThreadCreate>
 8015490:	0002      	movs	r2, r0
 8015492:	4b0b      	ldr	r3, [pc, #44]	; (80154c0 <GUI_InitOS+0x8c>)
 8015494:	601a      	str	r2, [r3, #0]
 8015496:	4b0a      	ldr	r3, [pc, #40]	; (80154c0 <GUI_InitOS+0x8c>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d103      	bne.n	80154a6 <GUI_InitOS+0x72>
 801549e:	2300      	movs	r3, #0
 80154a0:	627b      	str	r3, [r7, #36]	; 0x24
 80154a2:	e000      	b.n	80154a6 <GUI_InitOS+0x72>
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS || USBPD_THREADX */
  }

#if defined(_RTOS) || defined(USBPD_THREADX)
error:
 80154a4:	46c0      	nop			; (mov r8, r8)
  return(_status);
 80154a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#else
  return(USBPD_ENABLE);
#endif /* _RTOS || USBPD_THREADX */
}
 80154a8:	0018      	movs	r0, r3
 80154aa:	46bd      	mov	sp, r7
 80154ac:	b00a      	add	sp, #40	; 0x28
 80154ae:	bdb0      	pop	{r4, r5, r7, pc}
 80154b0:	20002acc 	.word	0x20002acc
 80154b4:	0801a5c0 	.word	0x0801a5c0
 80154b8:	20002a40 	.word	0x20002a40
 80154bc:	0801a5cc 	.word	0x0801a5cc
 80154c0:	20002a44 	.word	0x20002a44

080154c4 <GUI_Start>:
{
  BSP_GUI_EraseDataInFlash();
}

void GUI_Start(void)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 80154c8:	4b03      	ldr	r3, [pc, #12]	; (80154d8 <GUI_Start+0x14>)
 80154ca:	0018      	movs	r0, r3
 80154cc:	f002 fe7c 	bl	80181c8 <TRACER_EMB_StartRX>
}
 80154d0:	46c0      	nop			; (mov r8, r8)
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	46c0      	nop			; (mov r8, r8)
 80154d8:	080156f1 	.word	0x080156f1

080154dc <TaskGUI>:
#if defined(_RTOS) || defined(USBPD_THREADX)
GUIDEF_TASK_FUNCTION(TaskGUI)
#else
void GUI_Execute(void)
#endif /* _RTOS || USBPD_THREADX */
{
 80154dc:	b590      	push	{r4, r7, lr}
 80154de:	b08b      	sub	sp, #44	; 0x2c
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
#if defined(_RTOS) || defined(USBPD_THREADX)
  uint32_t _timing = GUI_DEFAULT_WAIT;
 80154e4:	2301      	movs	r3, #1
 80154e6:	425b      	negs	r3, r3
 80154e8:	627b      	str	r3, [r7, #36]	; 0x24
  GUI_Start();
 80154ea:	f7ff ffeb 	bl	80154c4 <GUI_Start>
  do
  {
    GUIOS_QUEUE_EVENT event = 0;
 80154ee:	2300      	movs	r3, #0
 80154f0:	61fb      	str	r3, [r7, #28]
    GUIOS_GETMESSAGE_QUEUE(GUIMsgBox, _timing, event);
 80154f2:	4b52      	ldr	r3, [pc, #328]	; (801563c <TaskGUI+0x160>)
 80154f4:	6819      	ldr	r1, [r3, #0]
 80154f6:	240c      	movs	r4, #12
 80154f8:	193b      	adds	r3, r7, r4
 80154fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154fc:	0018      	movs	r0, r3
 80154fe:	f7fa fff7 	bl	80104f0 <osMessageGet>
 8015502:	193b      	adds	r3, r7, r4
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	61fb      	str	r3, [r7, #28]
    switch ((GUI_USER_EVENT)(event & 0xFU))
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	b2db      	uxtb	r3, r3
 801550c:	001a      	movs	r2, r3
 801550e:	230f      	movs	r3, #15
 8015510:	4013      	ands	r3, r2
 8015512:	d00e      	beq.n	8015532 <TaskGUI+0x56>
 8015514:	2b01      	cmp	r3, #1
 8015516:	d000      	beq.n	801551a <TaskGUI+0x3e>
 8015518:	e08a      	b.n	8015630 <TaskGUI+0x154>
    {
      case GUI_USER_EVENT_GUI:
      {
        (void)GUI_RXProcess((uint32_t)event);
 801551a:	69fb      	ldr	r3, [r7, #28]
 801551c:	0018      	movs	r0, r3
 801551e:	f000 f90f 	bl	8015740 <GUI_RXProcess>
        /* Sent an event to check if measurement report has been requested */
        GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
 8015522:	4b46      	ldr	r3, [pc, #280]	; (801563c <TaskGUI+0x160>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	2200      	movs	r2, #0
 8015528:	2100      	movs	r1, #0
 801552a:	0018      	movs	r0, r3
 801552c:	f7fa ffa4 	bl	8010478 <osMessagePut>
        break;
 8015530:	e07f      	b.n	8015632 <TaskGUI+0x156>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* _RTOS || USBPD_THREADX */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8015532:	2323      	movs	r3, #35	; 0x23
 8015534:	18fb      	adds	r3, r7, r3
 8015536:	2200      	movs	r2, #0
 8015538:	701a      	strb	r2, [r3, #0]
 801553a:	e073      	b.n	8015624 <TaskGUI+0x148>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 801553c:	2023      	movs	r0, #35	; 0x23
 801553e:	183b      	adds	r3, r7, r0
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	4a3f      	ldr	r2, [pc, #252]	; (8015640 <TaskGUI+0x164>)
 8015544:	009b      	lsls	r3, r3, #2
 8015546:	18d3      	adds	r3, r2, r3
 8015548:	785b      	ldrb	r3, [r3, #1]
 801554a:	06db      	lsls	r3, r3, #27
 801554c:	0fdb      	lsrs	r3, r3, #31
 801554e:	b2db      	uxtb	r3, r3
 8015550:	2b01      	cmp	r3, #1
 8015552:	d15a      	bne.n	801560a <TaskGUI+0x12e>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 8015554:	183b      	adds	r3, r7, r0
 8015556:	781a      	ldrb	r2, [r3, #0]
 8015558:	493a      	ldr	r1, [pc, #232]	; (8015644 <TaskGUI+0x168>)
 801555a:	0013      	movs	r3, r2
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	189b      	adds	r3, r3, r2
 8015560:	005b      	lsls	r3, r3, #1
 8015562:	18cb      	adds	r3, r1, r3
 8015564:	791b      	ldrb	r3, [r3, #4]
 8015566:	061b      	lsls	r3, r3, #24
 8015568:	0fdb      	lsrs	r3, r3, #31
 801556a:	b2db      	uxtb	r3, r3
 801556c:	2b01      	cmp	r3, #1
 801556e:	d14c      	bne.n	801560a <TaskGUI+0x12e>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 8015570:	183b      	adds	r3, r7, r0
 8015572:	781a      	ldrb	r2, [r3, #0]
 8015574:	4933      	ldr	r1, [pc, #204]	; (8015644 <TaskGUI+0x168>)
 8015576:	0013      	movs	r3, r2
 8015578:	005b      	lsls	r3, r3, #1
 801557a:	189b      	adds	r3, r3, r2
 801557c:	005b      	lsls	r3, r3, #1
 801557e:	18cb      	adds	r3, r1, r3
 8015580:	791b      	ldrb	r3, [r3, #4]
 8015582:	065b      	lsls	r3, r3, #25
 8015584:	0e5b      	lsrs	r3, r3, #25
 8015586:	b2db      	uxtb	r3, r3
 8015588:	2b00      	cmp	r3, #0
 801558a:	d03e      	beq.n	801560a <TaskGUI+0x12e>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 801558c:	183b      	adds	r3, r7, r0
 801558e:	781a      	ldrb	r2, [r3, #0]
 8015590:	4b2d      	ldr	r3, [pc, #180]	; (8015648 <TaskGUI+0x16c>)
 8015592:	0052      	lsls	r2, r2, #1
 8015594:	5ad3      	ldrh	r3, [r2, r3]
 8015596:	b29a      	uxth	r2, r3
 8015598:	2380      	movs	r3, #128	; 0x80
 801559a:	021b      	lsls	r3, r3, #8
 801559c:	429a      	cmp	r2, r3
 801559e:	d109      	bne.n	80155b4 <TaskGUI+0xd8>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 80155a0:	183b      	adds	r3, r7, r0
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 80155a6:	4a29      	ldr	r2, [pc, #164]	; (801564c <TaskGUI+0x170>)
 80155a8:	4313      	orrs	r3, r2
              uint32_t event_mr = GUI_USER_EVENT_GUI
 80155aa:	61bb      	str	r3, [r7, #24]
              (void)GUI_RXProcess(event_mr);
 80155ac:	69bb      	ldr	r3, [r7, #24]
 80155ae:	0018      	movs	r0, r3
 80155b0:	f000 f8c6 	bl	8015740 <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 80155b4:	2023      	movs	r0, #35	; 0x23
 80155b6:	183b      	adds	r3, r7, r0
 80155b8:	781a      	ldrb	r2, [r3, #0]
 80155ba:	4b23      	ldr	r3, [pc, #140]	; (8015648 <TaskGUI+0x16c>)
 80155bc:	0052      	lsls	r2, r2, #1
 80155be:	5ad3      	ldrh	r3, [r2, r3]
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	045b      	lsls	r3, r3, #17
 80155c4:	0c5b      	lsrs	r3, r3, #17
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	dc26      	bgt.n	8015618 <TaskGUI+0x13c>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 80155ca:	183b      	adds	r3, r7, r0
 80155cc:	781a      	ldrb	r2, [r3, #0]
 80155ce:	491d      	ldr	r1, [pc, #116]	; (8015644 <TaskGUI+0x168>)
 80155d0:	0013      	movs	r3, r2
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	189b      	adds	r3, r3, r2
 80155d6:	005b      	lsls	r3, r3, #1
 80155d8:	18cb      	adds	r3, r1, r3
 80155da:	791b      	ldrb	r3, [r3, #4]
 80155dc:	065b      	lsls	r3, r3, #25
 80155de:	0e5b      	lsrs	r3, r3, #25
 80155e0:	b2db      	uxtb	r3, r3
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	2228      	movs	r2, #40	; 0x28
 80155e6:	4353      	muls	r3, r2
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	183a      	adds	r2, r7, r0
 80155ec:	7812      	ldrb	r2, [r2, #0]
 80155ee:	4918      	ldr	r1, [pc, #96]	; (8015650 <TaskGUI+0x174>)
 80155f0:	430b      	orrs	r3, r1
 80155f2:	b299      	uxth	r1, r3
 80155f4:	4b14      	ldr	r3, [pc, #80]	; (8015648 <TaskGUI+0x16c>)
 80155f6:	0052      	lsls	r2, r2, #1
 80155f8:	52d1      	strh	r1, [r2, r3]
 80155fa:	4b10      	ldr	r3, [pc, #64]	; (801563c <TaskGUI+0x160>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	2200      	movs	r2, #0
 8015600:	2100      	movs	r1, #0
 8015602:	0018      	movs	r0, r3
 8015604:	f7fa ff38 	bl	8010478 <osMessagePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 8015608:	e006      	b.n	8015618 <TaskGUI+0x13c>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 801560a:	2323      	movs	r3, #35	; 0x23
 801560c:	18fb      	adds	r3, r7, r3
 801560e:	781a      	ldrb	r2, [r3, #0]
 8015610:	4b0d      	ldr	r3, [pc, #52]	; (8015648 <TaskGUI+0x16c>)
 8015612:	0052      	lsls	r2, r2, #1
 8015614:	2100      	movs	r1, #0
 8015616:	52d1      	strh	r1, [r2, r3]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8015618:	2123      	movs	r1, #35	; 0x23
 801561a:	187b      	adds	r3, r7, r1
 801561c:	781a      	ldrb	r2, [r3, #0]
 801561e:	187b      	adds	r3, r7, r1
 8015620:	3201      	adds	r2, #1
 8015622:	701a      	strb	r2, [r3, #0]
 8015624:	2323      	movs	r3, #35	; 0x23
 8015626:	18fb      	adds	r3, r7, r3
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d086      	beq.n	801553c <TaskGUI+0x60>
          }
        }
#if defined(_RTOS) || defined(USBPD_THREADX)
        break;
 801562e:	e000      	b.n	8015632 <TaskGUI+0x156>
      }

      default:
        break;
 8015630:	46c0      	nop			; (mov r8, r8)
    }
    _timing = CheckGUITimers();
 8015632:	f000 f80f 	bl	8015654 <CheckGUITimers>
 8015636:	0003      	movs	r3, r0
 8015638:	627b      	str	r3, [r7, #36]	; 0x24
  {
 801563a:	e758      	b.n	80154ee <TaskGUI+0x12>
 801563c:	20002a40 	.word	0x20002a40
 8015640:	200027dc 	.word	0x200027dc
 8015644:	20002834 	.word	0x20002834
 8015648:	20002830 	.word	0x20002830
 801564c:	00000711 	.word	0x00000711
 8015650:	ffff8000 	.word	0xffff8000

08015654 <CheckGUITimers>:
#endif /* _RTOS || USBPD_THREADX */
}

#if defined(_RTOS) || defined(USBPD_THREADX)
static uint32_t CheckGUITimers(void)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b084      	sub	sp, #16
 8015658:	af00      	add	r7, sp, #0
  uint32_t _timing = GUI_DEFAULT_WAIT;
 801565a:	2301      	movs	r3, #1
 801565c:	425b      	negs	r3, r3
 801565e:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8015660:	230b      	movs	r3, #11
 8015662:	18fb      	adds	r3, r7, r3
 8015664:	2200      	movs	r2, #0
 8015666:	701a      	strb	r2, [r3, #0]
 8015668:	e018      	b.n	801569c <CheckGUITimers+0x48>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 801566a:	230b      	movs	r3, #11
 801566c:	18fb      	adds	r3, r7, r3
 801566e:	781a      	ldrb	r2, [r3, #0]
 8015670:	4b0f      	ldr	r3, [pc, #60]	; (80156b0 <CheckGUITimers+0x5c>)
 8015672:	0052      	lsls	r2, r2, #1
 8015674:	5ad3      	ldrh	r3, [r2, r3]
 8015676:	b29b      	uxth	r3, r3
 8015678:	045b      	lsls	r3, r3, #17
 801567a:	0c5b      	lsrs	r3, r3, #17
 801567c:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d005      	beq.n	8015690 <CheckGUITimers+0x3c>
    {
      if (_current_timing < _timing)
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	429a      	cmp	r2, r3
 801568a:	d201      	bcs.n	8015690 <CheckGUITimers+0x3c>
      {
        _timing = _current_timing;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8015690:	210b      	movs	r1, #11
 8015692:	187b      	adds	r3, r7, r1
 8015694:	781a      	ldrb	r2, [r3, #0]
 8015696:	187b      	adds	r3, r7, r1
 8015698:	3201      	adds	r2, #1
 801569a:	701a      	strb	r2, [r3, #0]
 801569c:	230b      	movs	r3, #11
 801569e:	18fb      	adds	r3, r7, r3
 80156a0:	781b      	ldrb	r3, [r3, #0]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d0e1      	beq.n	801566a <CheckGUITimers+0x16>
      }
    }
  }
  return _timing;
 80156a6:	68fb      	ldr	r3, [r7, #12]
}
 80156a8:	0018      	movs	r0, r3
 80156aa:	46bd      	mov	sp, r7
 80156ac:	b004      	add	sp, #16
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	20002830 	.word	0x20002830

080156b4 <GUI_TimerCounter>:
#endif /* RTOS || USBPD_THREADX */

void GUI_TimerCounter(void)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 80156b8:	4b0b      	ldr	r3, [pc, #44]	; (80156e8 <GUI_TimerCounter+0x34>)
 80156ba:	791b      	ldrb	r3, [r3, #4]
 80156bc:	227f      	movs	r2, #127	; 0x7f
 80156be:	4393      	bics	r3, r2
 80156c0:	b2db      	uxtb	r3, r3
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d00c      	beq.n	80156e0 <GUI_TimerCounter+0x2c>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 80156c6:	4b09      	ldr	r3, [pc, #36]	; (80156ec <GUI_TimerCounter+0x38>)
 80156c8:	881b      	ldrh	r3, [r3, #0]
 80156ca:	b29b      	uxth	r3, r3
 80156cc:	045b      	lsls	r3, r3, #17
 80156ce:	0c5b      	lsrs	r3, r3, #17
 80156d0:	d006      	beq.n	80156e0 <GUI_TimerCounter+0x2c>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 80156d2:	4b06      	ldr	r3, [pc, #24]	; (80156ec <GUI_TimerCounter+0x38>)
 80156d4:	881b      	ldrh	r3, [r3, #0]
 80156d6:	b29b      	uxth	r3, r3
 80156d8:	3b01      	subs	r3, #1
 80156da:	b29a      	uxth	r2, r3
 80156dc:	4b03      	ldr	r3, [pc, #12]	; (80156ec <GUI_TimerCounter+0x38>)
 80156de:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !(_RTOS || USBPD_THREADX) && USE_STM32_UTILITY_OS) */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 80156e0:	46c0      	nop			; (mov r8, r8)
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	46c0      	nop			; (mov r8, r8)
 80156e8:	20002834 	.word	0x20002834
 80156ec:	20002830 	.word	0x20002830

080156f0 <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b084      	sub	sp, #16
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	0002      	movs	r2, r0
 80156f8:	1dfb      	adds	r3, r7, #7
 80156fa:	701a      	strb	r2, [r3, #0]
 80156fc:	1dbb      	adds	r3, r7, #6
 80156fe:	1c0a      	adds	r2, r1, #0
 8015700:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8015702:	b672      	cpsid	i
}
 8015704:	46c0      	nop			; (mov r8, r8)
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 8015706:	1dbb      	adds	r3, r7, #6
 8015708:	781a      	ldrb	r2, [r3, #0]
 801570a:	1dfb      	adds	r3, r7, #7
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	0011      	movs	r1, r2
 8015710:	0018      	movs	r0, r3
 8015712:	f000 f88f 	bl	8015834 <GUI_GetMessage>
 8015716:	0003      	movs	r3, r0
 8015718:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 801571a:	b662      	cpsie	i
}
 801571c:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
  if (event == 1U)
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	2b01      	cmp	r3, #1
 8015722:	d106      	bne.n	8015732 <GUI_CALLBACK_RX+0x42>
  {
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_GUI, 0U);
 8015724:	4b05      	ldr	r3, [pc, #20]	; (801573c <GUI_CALLBACK_RX+0x4c>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	2200      	movs	r2, #0
 801572a:	2101      	movs	r1, #1
 801572c:	0018      	movs	r0, r3
 801572e:	f7fa fea3 	bl	8010478 <osMessagePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8015732:	46c0      	nop			; (mov r8, r8)
 8015734:	46bd      	mov	sp, r7
 8015736:	b004      	add	sp, #16
 8015738:	bd80      	pop	{r7, pc}
 801573a:	46c0      	nop			; (mov r8, r8)
 801573c:	20002a40 	.word	0x20002a40

08015740 <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 8015740:	b5b0      	push	{r4, r5, r7, lr}
 8015742:	b086      	sub	sp, #24
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	23ff      	movs	r3, #255	; 0xff
 801574c:	011b      	lsls	r3, r3, #4
 801574e:	4013      	ands	r3, r2
 8015750:	d11f      	bne.n	8015792 <GUI_RXProcess+0x52>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 8015752:	2515      	movs	r5, #21
 8015754:	197c      	adds	r4, r7, r5
 8015756:	230f      	movs	r3, #15
 8015758:	18fa      	adds	r2, r7, r3
 801575a:	2310      	movs	r3, #16
 801575c:	18fb      	adds	r3, r7, r3
 801575e:	0011      	movs	r1, r2
 8015760:	0018      	movs	r0, r3
 8015762:	f000 f96b 	bl	8015a3c <GUI_SendAnswer>
 8015766:	0003      	movs	r3, r0
 8015768:	7023      	strb	r3, [r4, #0]

    switch (state)
 801576a:	197b      	adds	r3, r7, r5
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d039      	beq.n	80157e6 <GUI_RXProcess+0xa6>
 8015772:	2b02      	cmp	r3, #2
 8015774:	d104      	bne.n	8015780 <GUI_RXProcess+0x40>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 8015776:	f7fe ff7f 	bl	8014678 <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 801577a:	f7f4 fcba 	bl	800a0f2 <HAL_NVIC_SystemReset>
        break;
 801577e:	e033      	b.n	80157e8 <GUI_RXProcess+0xa8>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 8015780:	693a      	ldr	r2, [r7, #16]
 8015782:	230f      	movs	r3, #15
 8015784:	18fb      	adds	r3, r7, r3
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	0019      	movs	r1, r3
 801578a:	0010      	movs	r0, r2
 801578c:	f002 fcb2 	bl	80180f4 <TRACER_EMB_Add>
        break;
 8015790:	e02a      	b.n	80157e8 <GUI_RXProcess+0xa8>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	b29b      	uxth	r3, r3
 8015796:	091b      	lsrs	r3, r3, #4
 8015798:	b29a      	uxth	r2, r3
 801579a:	2016      	movs	r0, #22
 801579c:	183b      	adds	r3, r7, r0
 801579e:	21ff      	movs	r1, #255	; 0xff
 80157a0:	400a      	ands	r2, r1
 80157a2:	801a      	strh	r2, [r3, #0]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 80157a4:	183b      	adds	r3, r7, r0
 80157a6:	881b      	ldrh	r3, [r3, #0]
 80157a8:	2b71      	cmp	r3, #113	; 0x71
 80157aa:	d10e      	bne.n	80157ca <GUI_RXProcess+0x8a>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	0e1b      	lsrs	r3, r3, #24
 80157b0:	2203      	movs	r2, #3
 80157b2:	4013      	ands	r3, r2
 80157b4:	001c      	movs	r4, r3
 80157b6:	f7f4 fb75 	bl	8009ea4 <HAL_GetTick>
 80157ba:	0002      	movs	r2, r0
 80157bc:	2380      	movs	r3, #128	; 0x80
 80157be:	011b      	lsls	r3, r3, #4
 80157c0:	0019      	movs	r1, r3
 80157c2:	0020      	movs	r0, r4
 80157c4:	f000 f815 	bl	80157f2 <GUI_FormatAndSendNotification>
 80157c8:	e00e      	b.n	80157e8 <GUI_RXProcess+0xa8>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	0e1b      	lsrs	r3, r3, #24
 80157ce:	2203      	movs	r2, #3
 80157d0:	4013      	ands	r3, r2
 80157d2:	0018      	movs	r0, r3
 80157d4:	2316      	movs	r3, #22
 80157d6:	18fb      	adds	r3, r7, r3
 80157d8:	881a      	ldrh	r2, [r3, #0]
 80157da:	2380      	movs	r3, #128	; 0x80
 80157dc:	019b      	lsls	r3, r3, #6
 80157de:	0019      	movs	r1, r3
 80157e0:	f000 f807 	bl	80157f2 <GUI_FormatAndSendNotification>
 80157e4:	e000      	b.n	80157e8 <GUI_RXProcess+0xa8>
        break;
 80157e6:	46c0      	nop			; (mov r8, r8)
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 80157e8:	2300      	movs	r3, #0
}
 80157ea:	0018      	movs	r0, r3
 80157ec:	46bd      	mov	sp, r7
 80157ee:	b006      	add	sp, #24
 80157f0:	bdb0      	pop	{r4, r5, r7, pc}

080157f2 <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 80157f2:	b5b0      	push	{r4, r5, r7, lr}
 80157f4:	b088      	sub	sp, #32
 80157f6:	af02      	add	r7, sp, #8
 80157f8:	60f8      	str	r0, [r7, #12]
 80157fa:	60b9      	str	r1, [r7, #8]
 80157fc:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	b2d8      	uxtb	r0, r3
 8015802:	68bc      	ldr	r4, [r7, #8]
 8015804:	2513      	movs	r5, #19
 8015806:	197a      	adds	r2, r7, r5
 8015808:	2314      	movs	r3, #20
 801580a:	18f9      	adds	r1, r7, r3
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	9300      	str	r3, [sp, #0]
 8015810:	0023      	movs	r3, r4
 8015812:	f000 fa03 	bl	8015c1c <GUI_SendNotification>
 8015816:	1e03      	subs	r3, r0, #0
 8015818:	d006      	beq.n	8015828 <GUI_FormatAndSendNotification+0x36>
  {
    TRACER_EMB_Add(msg, size);
 801581a:	697a      	ldr	r2, [r7, #20]
 801581c:	197b      	adds	r3, r7, r5
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	0019      	movs	r1, r3
 8015822:	0010      	movs	r0, r2
 8015824:	f002 fc66 	bl	80180f4 <TRACER_EMB_Add>
  }
  return 0;
 8015828:	2300      	movs	r3, #0
}
 801582a:	0018      	movs	r0, r3
 801582c:	46bd      	mov	sp, r7
 801582e:	b006      	add	sp, #24
 8015830:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015834 <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b084      	sub	sp, #16
 8015838:	af00      	add	r7, sp, #0
 801583a:	0002      	movs	r2, r0
 801583c:	1dfb      	adds	r3, r7, #7
 801583e:	701a      	strb	r2, [r3, #0]
 8015840:	1dbb      	adds	r3, r7, #6
 8015842:	1c0a      	adds	r2, r1, #0
 8015844:	701a      	strb	r2, [r3, #0]
  uint32_t status = 0;
 8015846:	2300      	movs	r3, #0
 8015848:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 801584a:	4b76      	ldr	r3, [pc, #472]	; (8015a24 <GUI_GetMessage+0x1f0>)
 801584c:	881b      	ldrh	r3, [r3, #0]
 801584e:	2bff      	cmp	r3, #255	; 0xff
 8015850:	d80b      	bhi.n	801586a <GUI_GetMessage+0x36>
  {
    PtrDataRx[cursor] = Character;
 8015852:	4b74      	ldr	r3, [pc, #464]	; (8015a24 <GUI_GetMessage+0x1f0>)
 8015854:	881b      	ldrh	r3, [r3, #0]
 8015856:	0019      	movs	r1, r3
 8015858:	4b73      	ldr	r3, [pc, #460]	; (8015a28 <GUI_GetMessage+0x1f4>)
 801585a:	1dfa      	adds	r2, r7, #7
 801585c:	7812      	ldrb	r2, [r2, #0]
 801585e:	545a      	strb	r2, [r3, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 8015860:	1dbb      	adds	r3, r7, #6
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d00e      	beq.n	8015886 <GUI_GetMessage+0x52>
 8015868:	e00a      	b.n	8015880 <GUI_GetMessage+0x4c>
    cursor = 0U;
 801586a:	4b6e      	ldr	r3, [pc, #440]	; (8015a24 <GUI_GetMessage+0x1f0>)
 801586c:	2200      	movs	r2, #0
 801586e:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 8015870:	4b6e      	ldr	r3, [pc, #440]	; (8015a2c <GUI_GetMessage+0x1f8>)
 8015872:	2200      	movs	r2, #0
 8015874:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 8015876:	4b6e      	ldr	r3, [pc, #440]	; (8015a30 <GUI_GetMessage+0x1fc>)
 8015878:	2200      	movs	r2, #0
 801587a:	701a      	strb	r2, [r3, #0]
    return 0;
 801587c:	2300      	movs	r3, #0
 801587e:	e0cc      	b.n	8015a1a <GUI_GetMessage+0x1e6>
  {
    Rstate = Rerror;
 8015880:	4b6b      	ldr	r3, [pc, #428]	; (8015a30 <GUI_GetMessage+0x1fc>)
 8015882:	2204      	movs	r2, #4
 8015884:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 8015886:	4b6a      	ldr	r3, [pc, #424]	; (8015a30 <GUI_GetMessage+0x1fc>)
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	2b04      	cmp	r3, #4
 801588c:	d900      	bls.n	8015890 <GUI_GetMessage+0x5c>
 801588e:	e0b4      	b.n	80159fa <GUI_GetMessage+0x1c6>
 8015890:	009a      	lsls	r2, r3, #2
 8015892:	4b68      	ldr	r3, [pc, #416]	; (8015a34 <GUI_GetMessage+0x200>)
 8015894:	18d3      	adds	r3, r2, r3
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	469f      	mov	pc, r3
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 801589a:	4b62      	ldr	r3, [pc, #392]	; (8015a24 <GUI_GetMessage+0x1f0>)
 801589c:	881b      	ldrh	r3, [r3, #0]
 801589e:	001a      	movs	r2, r3
 80158a0:	4b61      	ldr	r3, [pc, #388]	; (8015a28 <GUI_GetMessage+0x1f4>)
 80158a2:	5c9b      	ldrb	r3, [r3, r2]
 80158a4:	2bfd      	cmp	r3, #253	; 0xfd
 80158a6:	d106      	bne.n	80158b6 <GUI_GetMessage+0x82>
      {
        counter++;
 80158a8:	4b60      	ldr	r3, [pc, #384]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80158aa:	881b      	ldrh	r3, [r3, #0]
 80158ac:	3301      	adds	r3, #1
 80158ae:	b29a      	uxth	r2, r3
 80158b0:	4b5e      	ldr	r3, [pc, #376]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80158b2:	801a      	strh	r2, [r3, #0]
 80158b4:	e006      	b.n	80158c4 <GUI_GetMessage+0x90>
      }
      else
      {
        counter = 0U;
 80158b6:	4b5d      	ldr	r3, [pc, #372]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80158b8:	2200      	movs	r2, #0
 80158ba:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 80158bc:	4b59      	ldr	r3, [pc, #356]	; (8015a24 <GUI_GetMessage+0x1f0>)
 80158be:	2201      	movs	r2, #1
 80158c0:	4252      	negs	r2, r2
 80158c2:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 80158c4:	4b59      	ldr	r3, [pc, #356]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80158c6:	881b      	ldrh	r3, [r3, #0]
 80158c8:	2b04      	cmp	r3, #4
 80158ca:	d000      	beq.n	80158ce <GUI_GetMessage+0x9a>
 80158cc:	e097      	b.n	80159fe <GUI_GetMessage+0x1ca>
      {
        counter = 0U;
 80158ce:	4b57      	ldr	r3, [pc, #348]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80158d0:	2200      	movs	r2, #0
 80158d2:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 80158d4:	4b56      	ldr	r3, [pc, #344]	; (8015a30 <GUI_GetMessage+0x1fc>)
 80158d6:	2202      	movs	r2, #2
 80158d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80158da:	e090      	b.n	80159fe <GUI_GetMessage+0x1ca>
    case Rsize :
      counter++;
 80158dc:	4b53      	ldr	r3, [pc, #332]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80158de:	881b      	ldrh	r3, [r3, #0]
 80158e0:	3301      	adds	r3, #1
 80158e2:	b29a      	uxth	r2, r3
 80158e4:	4b51      	ldr	r3, [pc, #324]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80158e6:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 80158e8:	4b50      	ldr	r3, [pc, #320]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80158ea:	881b      	ldrh	r3, [r3, #0]
 80158ec:	2b03      	cmp	r3, #3
 80158ee:	d000      	beq.n	80158f2 <GUI_GetMessage+0xbe>
 80158f0:	e087      	b.n	8015a02 <GUI_GetMessage+0x1ce>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 80158f2:	4b4c      	ldr	r3, [pc, #304]	; (8015a24 <GUI_GetMessage+0x1f0>)
 80158f4:	881b      	ldrh	r3, [r3, #0]
 80158f6:	3b01      	subs	r3, #1
 80158f8:	4a4b      	ldr	r2, [pc, #300]	; (8015a28 <GUI_GetMessage+0x1f4>)
 80158fa:	5cd3      	ldrb	r3, [r2, r3]
 80158fc:	b29b      	uxth	r3, r3
 80158fe:	021b      	lsls	r3, r3, #8
 8015900:	b29a      	uxth	r2, r3
 8015902:	4b48      	ldr	r3, [pc, #288]	; (8015a24 <GUI_GetMessage+0x1f0>)
 8015904:	881b      	ldrh	r3, [r3, #0]
 8015906:	0019      	movs	r1, r3
 8015908:	4b47      	ldr	r3, [pc, #284]	; (8015a28 <GUI_GetMessage+0x1f4>)
 801590a:	5c5b      	ldrb	r3, [r3, r1]
 801590c:	b29b      	uxth	r3, r3
 801590e:	18d3      	adds	r3, r2, r3
 8015910:	b29a      	uxth	r2, r3
 8015912:	4b49      	ldr	r3, [pc, #292]	; (8015a38 <GUI_GetMessage+0x204>)
 8015914:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 8015916:	4b48      	ldr	r3, [pc, #288]	; (8015a38 <GUI_GetMessage+0x204>)
 8015918:	881b      	ldrh	r3, [r3, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d103      	bne.n	8015926 <GUI_GetMessage+0xf2>
        {
          Rstate = Rend;
 801591e:	4b44      	ldr	r3, [pc, #272]	; (8015a30 <GUI_GetMessage+0x1fc>)
 8015920:	2203      	movs	r2, #3
 8015922:	701a      	strb	r2, [r3, #0]
 8015924:	e002      	b.n	801592c <GUI_GetMessage+0xf8>
        }
        else
        {
          Rstate = RonGoing;
 8015926:	4b42      	ldr	r3, [pc, #264]	; (8015a30 <GUI_GetMessage+0x1fc>)
 8015928:	2201      	movs	r2, #1
 801592a:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 801592c:	4b3f      	ldr	r3, [pc, #252]	; (8015a2c <GUI_GetMessage+0x1f8>)
 801592e:	2200      	movs	r2, #0
 8015930:	801a      	strh	r2, [r3, #0]
      }
      break;
 8015932:	e066      	b.n	8015a02 <GUI_GetMessage+0x1ce>
    case RonGoing :
      counter++;
 8015934:	4b3d      	ldr	r3, [pc, #244]	; (8015a2c <GUI_GetMessage+0x1f8>)
 8015936:	881b      	ldrh	r3, [r3, #0]
 8015938:	3301      	adds	r3, #1
 801593a:	b29a      	uxth	r2, r3
 801593c:	4b3b      	ldr	r3, [pc, #236]	; (8015a2c <GUI_GetMessage+0x1f8>)
 801593e:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 8015940:	4b3a      	ldr	r3, [pc, #232]	; (8015a2c <GUI_GetMessage+0x1f8>)
 8015942:	881a      	ldrh	r2, [r3, #0]
 8015944:	4b3c      	ldr	r3, [pc, #240]	; (8015a38 <GUI_GetMessage+0x204>)
 8015946:	881b      	ldrh	r3, [r3, #0]
 8015948:	429a      	cmp	r2, r3
 801594a:	d15c      	bne.n	8015a06 <GUI_GetMessage+0x1d2>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 801594c:	4b37      	ldr	r3, [pc, #220]	; (8015a2c <GUI_GetMessage+0x1f8>)
 801594e:	2200      	movs	r2, #0
 8015950:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 8015952:	4b37      	ldr	r3, [pc, #220]	; (8015a30 <GUI_GetMessage+0x1fc>)
 8015954:	2203      	movs	r2, #3
 8015956:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015958:	e055      	b.n	8015a06 <GUI_GetMessage+0x1d2>
    case Rend :
      counter++;
 801595a:	4b34      	ldr	r3, [pc, #208]	; (8015a2c <GUI_GetMessage+0x1f8>)
 801595c:	881b      	ldrh	r3, [r3, #0]
 801595e:	3301      	adds	r3, #1
 8015960:	b29a      	uxth	r2, r3
 8015962:	4b32      	ldr	r3, [pc, #200]	; (8015a2c <GUI_GetMessage+0x1f8>)
 8015964:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 8015966:	4b2f      	ldr	r3, [pc, #188]	; (8015a24 <GUI_GetMessage+0x1f0>)
 8015968:	881b      	ldrh	r3, [r3, #0]
 801596a:	001a      	movs	r2, r3
 801596c:	4b2e      	ldr	r3, [pc, #184]	; (8015a28 <GUI_GetMessage+0x1f4>)
 801596e:	5c9b      	ldrb	r3, [r3, r2]
 8015970:	2ba5      	cmp	r3, #165	; 0xa5
 8015972:	d124      	bne.n	80159be <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 8015974:	4b2b      	ldr	r3, [pc, #172]	; (8015a24 <GUI_GetMessage+0x1f0>)
 8015976:	881b      	ldrh	r3, [r3, #0]
 8015978:	3b01      	subs	r3, #1
 801597a:	4a2b      	ldr	r2, [pc, #172]	; (8015a28 <GUI_GetMessage+0x1f4>)
 801597c:	5cd3      	ldrb	r3, [r2, r3]
 801597e:	2ba5      	cmp	r3, #165	; 0xa5
 8015980:	d11d      	bne.n	80159be <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 8015982:	4b28      	ldr	r3, [pc, #160]	; (8015a24 <GUI_GetMessage+0x1f0>)
 8015984:	881b      	ldrh	r3, [r3, #0]
 8015986:	3b02      	subs	r3, #2
 8015988:	4a27      	ldr	r2, [pc, #156]	; (8015a28 <GUI_GetMessage+0x1f4>)
 801598a:	5cd3      	ldrb	r3, [r2, r3]
 801598c:	2ba5      	cmp	r3, #165	; 0xa5
 801598e:	d116      	bne.n	80159be <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 8015990:	4b24      	ldr	r3, [pc, #144]	; (8015a24 <GUI_GetMessage+0x1f0>)
 8015992:	881b      	ldrh	r3, [r3, #0]
 8015994:	3b03      	subs	r3, #3
 8015996:	4a24      	ldr	r2, [pc, #144]	; (8015a28 <GUI_GetMessage+0x1f4>)
 8015998:	5cd3      	ldrb	r3, [r2, r3]
 801599a:	2ba5      	cmp	r3, #165	; 0xa5
 801599c:	d10f      	bne.n	80159be <GUI_GetMessage+0x18a>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 801599e:	4b23      	ldr	r3, [pc, #140]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80159a0:	881b      	ldrh	r3, [r3, #0]
 80159a2:	2b04      	cmp	r3, #4
 80159a4:	d101      	bne.n	80159aa <GUI_GetMessage+0x176>
        {
          status = 1U;
 80159a6:	2301      	movs	r3, #1
 80159a8:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 80159aa:	4b20      	ldr	r3, [pc, #128]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80159ac:	2200      	movs	r2, #0
 80159ae:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 80159b0:	4b1c      	ldr	r3, [pc, #112]	; (8015a24 <GUI_GetMessage+0x1f0>)
 80159b2:	2201      	movs	r2, #1
 80159b4:	4252      	negs	r2, r2
 80159b6:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 80159b8:	4b1d      	ldr	r3, [pc, #116]	; (8015a30 <GUI_GetMessage+0x1fc>)
 80159ba:	2200      	movs	r2, #0
 80159bc:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 80159be:	4b19      	ldr	r3, [pc, #100]	; (8015a24 <GUI_GetMessage+0x1f0>)
 80159c0:	881b      	ldrh	r3, [r3, #0]
 80159c2:	001a      	movs	r2, r3
 80159c4:	4b1c      	ldr	r3, [pc, #112]	; (8015a38 <GUI_GetMessage+0x204>)
 80159c6:	881b      	ldrh	r3, [r3, #0]
 80159c8:	330b      	adds	r3, #11
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d11d      	bne.n	8015a0a <GUI_GetMessage+0x1d6>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 80159ce:	4b17      	ldr	r3, [pc, #92]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80159d0:	2200      	movs	r2, #0
 80159d2:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 80159d4:	4b13      	ldr	r3, [pc, #76]	; (8015a24 <GUI_GetMessage+0x1f0>)
 80159d6:	2201      	movs	r2, #1
 80159d8:	4252      	negs	r2, r2
 80159da:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 80159dc:	4b14      	ldr	r3, [pc, #80]	; (8015a30 <GUI_GetMessage+0x1fc>)
 80159de:	2200      	movs	r2, #0
 80159e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80159e2:	e012      	b.n	8015a0a <GUI_GetMessage+0x1d6>
    case Rerror :
      counter = 0U;
 80159e4:	4b11      	ldr	r3, [pc, #68]	; (8015a2c <GUI_GetMessage+0x1f8>)
 80159e6:	2200      	movs	r2, #0
 80159e8:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 80159ea:	4b0e      	ldr	r3, [pc, #56]	; (8015a24 <GUI_GetMessage+0x1f0>)
 80159ec:	2201      	movs	r2, #1
 80159ee:	4252      	negs	r2, r2
 80159f0:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 80159f2:	4b0f      	ldr	r3, [pc, #60]	; (8015a30 <GUI_GetMessage+0x1fc>)
 80159f4:	2200      	movs	r2, #0
 80159f6:	701a      	strb	r2, [r3, #0]
      break;
 80159f8:	e008      	b.n	8015a0c <GUI_GetMessage+0x1d8>
    default:
      break;
 80159fa:	46c0      	nop			; (mov r8, r8)
 80159fc:	e006      	b.n	8015a0c <GUI_GetMessage+0x1d8>
      break;
 80159fe:	46c0      	nop			; (mov r8, r8)
 8015a00:	e004      	b.n	8015a0c <GUI_GetMessage+0x1d8>
      break;
 8015a02:	46c0      	nop			; (mov r8, r8)
 8015a04:	e002      	b.n	8015a0c <GUI_GetMessage+0x1d8>
      break;
 8015a06:	46c0      	nop			; (mov r8, r8)
 8015a08:	e000      	b.n	8015a0c <GUI_GetMessage+0x1d8>
      break;
 8015a0a:	46c0      	nop			; (mov r8, r8)
  }

  cursor++;
 8015a0c:	4b05      	ldr	r3, [pc, #20]	; (8015a24 <GUI_GetMessage+0x1f0>)
 8015a0e:	881b      	ldrh	r3, [r3, #0]
 8015a10:	3301      	adds	r3, #1
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	4b03      	ldr	r3, [pc, #12]	; (8015a24 <GUI_GetMessage+0x1f0>)
 8015a16:	801a      	strh	r2, [r3, #0]
  return status;
 8015a18:	68fb      	ldr	r3, [r7, #12]
}
 8015a1a:	0018      	movs	r0, r3
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	b004      	add	sp, #16
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	46c0      	nop			; (mov r8, r8)
 8015a24:	20002ace 	.word	0x20002ace
 8015a28:	2000283c 	.word	0x2000283c
 8015a2c:	20002ad0 	.word	0x20002ad0
 8015a30:	20002ad2 	.word	0x20002ad2
 8015a34:	0801a85c 	.word	0x0801a85c
 8015a38:	20002ad4 	.word	0x20002ad4

08015a3c <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 8015a3c:	b590      	push	{r4, r7, lr}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 8015a46:	4b70      	ldr	r3, [pc, #448]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015a48:	791a      	ldrb	r2, [r3, #4]
 8015a4a:	230f      	movs	r3, #15
 8015a4c:	18fb      	adds	r3, r7, r3
 8015a4e:	0952      	lsrs	r2, r2, #5
 8015a50:	701a      	strb	r2, [r3, #0]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 8015a52:	4b6d      	ldr	r3, [pc, #436]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015a54:	791b      	ldrb	r3, [r3, #4]
 8015a56:	001a      	movs	r2, r3
 8015a58:	231f      	movs	r3, #31
 8015a5a:	4013      	ands	r3, r2
 8015a5c:	2b10      	cmp	r3, #16
 8015a5e:	d900      	bls.n	8015a62 <GUI_SendAnswer+0x26>
 8015a60:	e0be      	b.n	8015be0 <GUI_SendAnswer+0x1a4>
 8015a62:	009a      	lsls	r2, r3, #2
 8015a64:	4b69      	ldr	r3, [pc, #420]	; (8015c0c <GUI_SendAnswer+0x1d0>)
 8015a66:	18d3      	adds	r3, r2, r3
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	469f      	mov	pc, r3
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 8015a6c:	2302      	movs	r3, #2
 8015a6e:	e0c7      	b.n	8015c00 <GUI_SendAnswer+0x1c4>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 8015a70:	4a67      	ldr	r2, [pc, #412]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015a72:	240f      	movs	r4, #15
 8015a74:	193b      	adds	r3, r7, r4
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	0011      	movs	r1, r2
 8015a7a:	0018      	movs	r0, r3
 8015a7c:	f000 fdea 	bl	8016654 <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	4a63      	ldr	r2, [pc, #396]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015a84:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8015a86:	4b62      	ldr	r3, [pc, #392]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015a88:	0018      	movs	r0, r3
 8015a8a:	f7ff fbf7 	bl	801527c <TLV_get_string_length>
 8015a8e:	0003      	movs	r3, r0
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	3308      	adds	r3, #8
 8015a94:	b2da      	uxtb	r2, r3
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	683b      	ldr	r3, [r7, #0]
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	0019      	movs	r1, r3
 8015aa4:	0010      	movs	r0, r2
 8015aa6:	f002 fb25 	bl	80180f4 <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 8015aaa:	4b5a      	ldr	r3, [pc, #360]	; (8015c14 <GUI_SendAnswer+0x1d8>)
 8015aac:	2201      	movs	r2, #1
 8015aae:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 8015ab0:	193b      	adds	r3, r7, r4
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d105      	bne.n	8015ac4 <GUI_SendAnswer+0x88>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 8015ab8:	4b57      	ldr	r3, [pc, #348]	; (8015c18 <GUI_SendAnswer+0x1dc>)
 8015aba:	2270      	movs	r2, #112	; 0x70
 8015abc:	0019      	movs	r1, r3
 8015abe:	2000      	movs	r0, #0
 8015ac0:	f7ff fe97 	bl	80157f2 <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	e09b      	b.n	8015c00 <GUI_SendAnswer+0x1c4>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 8015ac8:	220f      	movs	r2, #15
 8015aca:	18bb      	adds	r3, r7, r2
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d009      	beq.n	8015ae6 <GUI_SendAnswer+0xaa>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 8015ad2:	18bb      	adds	r3, r7, r2
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	3b01      	subs	r3, #1
 8015ad8:	b2db      	uxtb	r3, r3
 8015ada:	4a4d      	ldr	r2, [pc, #308]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015adc:	494a      	ldr	r1, [pc, #296]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015ade:	0018      	movs	r0, r3
 8015ae0:	f001 fefe 	bl	80178e0 <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8015ae4:	e07d      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8015ae6:	494a      	ldr	r1, [pc, #296]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015ae8:	230f      	movs	r3, #15
 8015aea:	18fb      	adds	r3, r7, r3
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	2205      	movs	r2, #5
 8015af0:	0018      	movs	r0, r3
 8015af2:	f002 f9df 	bl	8017eb4 <Send_DpmConfigGetRej>
      break;
 8015af6:	e074      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 8015af8:	220f      	movs	r2, #15
 8015afa:	18bb      	adds	r3, r7, r2
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d009      	beq.n	8015b16 <GUI_SendAnswer+0xda>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 8015b02:	18bb      	adds	r3, r7, r2
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	3b01      	subs	r3, #1
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	4a41      	ldr	r2, [pc, #260]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015b0c:	493e      	ldr	r1, [pc, #248]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015b0e:	0018      	movs	r0, r3
 8015b10:	f001 fa9e 	bl	8017050 <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8015b14:	e065      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8015b16:	493e      	ldr	r1, [pc, #248]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015b18:	230f      	movs	r3, #15
 8015b1a:	18fb      	adds	r3, r7, r3
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	2205      	movs	r2, #5
 8015b20:	0018      	movs	r0, r3
 8015b22:	f002 f9c7 	bl	8017eb4 <Send_DpmConfigGetRej>
      break;
 8015b26:	e05c      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 8015b28:	220f      	movs	r2, #15
 8015b2a:	18bb      	adds	r3, r7, r2
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d009      	beq.n	8015b46 <GUI_SendAnswer+0x10a>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 8015b32:	18bb      	adds	r3, r7, r2
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	3b01      	subs	r3, #1
 8015b38:	b2db      	uxtb	r3, r3
 8015b3a:	4a35      	ldr	r2, [pc, #212]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015b3c:	4932      	ldr	r1, [pc, #200]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015b3e:	0018      	movs	r0, r3
 8015b40:	f000 ff46 	bl	80169d0 <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8015b44:	e04d      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8015b46:	4932      	ldr	r1, [pc, #200]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015b48:	230f      	movs	r3, #15
 8015b4a:	18fb      	adds	r3, r7, r3
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	2205      	movs	r2, #5
 8015b50:	0018      	movs	r0, r3
 8015b52:	f002 f9d1 	bl	8017ef8 <Send_DpmMessageRej>
      break;
 8015b56:	e044      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 8015b58:	220f      	movs	r2, #15
 8015b5a:	18bb      	adds	r3, r7, r2
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d01d      	beq.n	8015b9e <GUI_SendAnswer+0x162>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 8015b62:	4b29      	ldr	r3, [pc, #164]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015b64:	795b      	ldrb	r3, [r3, #5]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d10d      	bne.n	8015b86 <GUI_SendAnswer+0x14a>
 8015b6a:	4b27      	ldr	r3, [pc, #156]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015b6c:	799b      	ldrb	r3, [r3, #6]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d109      	bne.n	8015b86 <GUI_SendAnswer+0x14a>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 8015b72:	18bb      	adds	r3, r7, r2
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	3b01      	subs	r3, #1
 8015b78:	b2db      	uxtb	r3, r3
 8015b7a:	4925      	ldr	r1, [pc, #148]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015b7c:	22ff      	movs	r2, #255	; 0xff
 8015b7e:	0018      	movs	r0, r3
 8015b80:	f002 f9dc 	bl	8017f3c <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8015b84:	e02d      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 8015b86:	230f      	movs	r3, #15
 8015b88:	18fb      	adds	r3, r7, r3
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	3b01      	subs	r3, #1
 8015b8e:	b2d8      	uxtb	r0, r3
 8015b90:	4b1d      	ldr	r3, [pc, #116]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015b92:	79da      	ldrb	r2, [r3, #7]
 8015b94:	4b1e      	ldr	r3, [pc, #120]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015b96:	0019      	movs	r1, r3
 8015b98:	f002 f9d0 	bl	8017f3c <Send_DpmRegisterReadCnf>
      break;
 8015b9c:	e021      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8015b9e:	491c      	ldr	r1, [pc, #112]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015ba0:	230f      	movs	r3, #15
 8015ba2:	18fb      	adds	r3, r7, r3
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	2205      	movs	r2, #5
 8015ba8:	0018      	movs	r0, r3
 8015baa:	f002 f983 	bl	8017eb4 <Send_DpmConfigGetRej>
      break;
 8015bae:	e018      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 8015bb0:	220f      	movs	r2, #15
 8015bb2:	18bb      	adds	r3, r7, r2
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d009      	beq.n	8015bce <GUI_SendAnswer+0x192>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 8015bba:	18bb      	adds	r3, r7, r2
 8015bbc:	781b      	ldrb	r3, [r3, #0]
 8015bbe:	3b01      	subs	r3, #1
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	4a11      	ldr	r2, [pc, #68]	; (8015c08 <GUI_SendAnswer+0x1cc>)
 8015bc4:	4912      	ldr	r1, [pc, #72]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015bc6:	0018      	movs	r0, r3
 8015bc8:	f002 fa16 	bl	8017ff8 <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8015bcc:	e009      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8015bce:	4910      	ldr	r1, [pc, #64]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015bd0:	230f      	movs	r3, #15
 8015bd2:	18fb      	adds	r3, r7, r3
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	2205      	movs	r2, #5
 8015bd8:	0018      	movs	r0, r3
 8015bda:	f002 f96b 	bl	8017eb4 <Send_DpmConfigGetRej>
      break;
 8015bde:	e000      	b.n	8015be2 <GUI_SendAnswer+0x1a6>
    default :
      break;
 8015be0:	46c0      	nop			; (mov r8, r8)
  }

  *pMsgToSend = Processed;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	4a0a      	ldr	r2, [pc, #40]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015be6:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8015be8:	4b09      	ldr	r3, [pc, #36]	; (8015c10 <GUI_SendAnswer+0x1d4>)
 8015bea:	0018      	movs	r0, r3
 8015bec:	f7ff fb46 	bl	801527c <TLV_get_string_length>
 8015bf0:	0003      	movs	r3, r0
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	3308      	adds	r3, #8
 8015bf6:	b2da      	uxtb	r2, r3
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 8015bfc:	4b05      	ldr	r3, [pc, #20]	; (8015c14 <GUI_SendAnswer+0x1d8>)
 8015bfe:	781b      	ldrb	r3, [r3, #0]
}
 8015c00:	0018      	movs	r0, r3
 8015c02:	46bd      	mov	sp, r7
 8015c04:	b005      	add	sp, #20
 8015c06:	bd90      	pop	{r4, r7, pc}
 8015c08:	2000283c 	.word	0x2000283c
 8015c0c:	0801a870 	.word	0x0801a870
 8015c10:	2000293c 	.word	0x2000293c
 8015c14:	20002a3c 	.word	0x20002a3c
 8015c18:	00006020 	.word	0x00006020

08015c1c <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 8015c1c:	b5b0      	push	{r4, r5, r7, lr}
 8015c1e:	b0a6      	sub	sp, #152	; 0x98
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	60b9      	str	r1, [r7, #8]
 8015c24:	607a      	str	r2, [r7, #4]
 8015c26:	603b      	str	r3, [r7, #0]
 8015c28:	240f      	movs	r4, #15
 8015c2a:	193b      	adds	r3, r7, r4
 8015c2c:	1c02      	adds	r2, r0, #0
 8015c2e:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 8015c30:	2397      	movs	r3, #151	; 0x97
 8015c32:	18fb      	adds	r3, r7, r3
 8015c34:	2200      	movs	r2, #0
 8015c36:	701a      	strb	r2, [r3, #0]

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 8015c38:	4bbf      	ldr	r3, [pc, #764]	; (8015f38 <GUI_SendNotification+0x31c>)
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d001      	beq.n	8015c44 <GUI_SendNotification+0x28>
 8015c40:	f000 fbe4 	bl	801640c <GUI_SendNotification+0x7f0>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 8015c44:	193b      	adds	r3, r7, r4
 8015c46:	781b      	ldrb	r3, [r3, #0]
 8015c48:	3301      	adds	r3, #1
 8015c4a:	b2db      	uxtb	r3, r3
 8015c4c:	015b      	lsls	r3, r3, #5
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	220c      	movs	r2, #12
 8015c52:	4313      	orrs	r3, r2
 8015c54:	b2d9      	uxtb	r1, r3
 8015c56:	4bb9      	ldr	r3, [pc, #740]	; (8015f3c <GUI_SendNotification+0x320>)
 8015c58:	2280      	movs	r2, #128	; 0x80
 8015c5a:	0052      	lsls	r2, r2, #1
 8015c5c:	2584      	movs	r5, #132	; 0x84
 8015c5e:	1978      	adds	r0, r7, r5
 8015c60:	f7ff f8a1 	bl	8014da6 <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	2220      	movs	r2, #32
 8015c68:	4013      	ands	r3, r2
 8015c6a:	d100      	bne.n	8015c6e <GUI_SendNotification+0x52>
 8015c6c:	e08d      	b.n	8015d8a <GUI_SendNotification+0x16e>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]){ DPM_Params[PortNum].PE_Power });
 8015c6e:	193b      	adds	r3, r7, r4
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	4ab3      	ldr	r2, [pc, #716]	; (8015f40 <GUI_SendNotification+0x324>)
 8015c74:	009b      	lsls	r3, r3, #2
 8015c76:	18d3      	adds	r3, r2, r3
 8015c78:	785b      	ldrb	r3, [r3, #1]
 8015c7a:	075b      	lsls	r3, r3, #29
 8015c7c:	0f5b      	lsrs	r3, r3, #29
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	001a      	movs	r2, r3
 8015c82:	2180      	movs	r1, #128	; 0x80
 8015c84:	187b      	adds	r3, r7, r1
 8015c86:	701a      	strb	r2, [r3, #0]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 8015c88:	187b      	adds	r3, r7, r1
 8015c8a:	1978      	adds	r0, r7, r5
 8015c8c:	2201      	movs	r2, #1
 8015c8e:	2105      	movs	r1, #5
 8015c90:	f7ff f8ec 	bl	8014e6c <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8015c94:	193b      	adds	r3, r7, r4
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	4aa9      	ldr	r2, [pc, #676]	; (8015f40 <GUI_SendNotification+0x324>)
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	18d3      	adds	r3, r2, r3
 8015c9e:	785b      	ldrb	r3, [r3, #1]
 8015ca0:	06db      	lsls	r3, r3, #27
 8015ca2:	0fdb      	lsrs	r3, r3, #31
 8015ca4:	b2db      	uxtb	r3, r3
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d16f      	bne.n	8015d8a <GUI_SendNotification+0x16e>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8015caa:	193b      	adds	r3, r7, r4
 8015cac:	781a      	ldrb	r2, [r3, #0]
 8015cae:	4ba4      	ldr	r3, [pc, #656]	; (8015f40 <GUI_SendNotification+0x324>)
 8015cb0:	0092      	lsls	r2, r2, #2
 8015cb2:	5cd3      	ldrb	r3, [r2, r3]
 8015cb4:	061b      	lsls	r3, r3, #24
 8015cb6:	0f9b      	lsrs	r3, r3, #30
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	001a      	movs	r2, r3
 8015cbc:	217c      	movs	r1, #124	; 0x7c
 8015cbe:	187b      	adds	r3, r7, r1
 8015cc0:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 8015cc2:	187b      	adds	r3, r7, r1
 8015cc4:	1978      	adds	r0, r7, r5
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	2106      	movs	r1, #6
 8015cca:	f7ff f8cf 	bl	8014e6c <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8015cce:	193b      	adds	r3, r7, r4
 8015cd0:	781a      	ldrb	r2, [r3, #0]
 8015cd2:	4b9b      	ldr	r3, [pc, #620]	; (8015f40 <GUI_SendNotification+0x324>)
 8015cd4:	0092      	lsls	r2, r2, #2
 8015cd6:	5cd3      	ldrb	r3, [r2, r3]
 8015cd8:	075b      	lsls	r3, r3, #29
 8015cda:	0fdb      	lsrs	r3, r3, #31
 8015cdc:	b2db      	uxtb	r3, r3
 8015cde:	001a      	movs	r2, r3
 8015ce0:	2178      	movs	r1, #120	; 0x78
 8015ce2:	187b      	adds	r3, r7, r1
 8015ce4:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8015ce6:	187b      	adds	r3, r7, r1
 8015ce8:	1978      	adds	r0, r7, r5
 8015cea:	2201      	movs	r2, #1
 8015cec:	2108      	movs	r1, #8
 8015cee:	f7ff f8bd 	bl	8014e6c <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 8015cf2:	217f      	movs	r1, #127	; 0x7f
 8015cf4:	187b      	adds	r3, r7, r1
 8015cf6:	2203      	movs	r2, #3
 8015cf8:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 8015cfa:	187b      	adds	r3, r7, r1
 8015cfc:	1978      	adds	r0, r7, r5
 8015cfe:	2201      	movs	r2, #1
 8015d00:	2109      	movs	r1, #9
 8015d02:	f7ff f8b3 	bl	8014e6c <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 8015d06:	193b      	adds	r3, r7, r4
 8015d08:	781b      	ldrb	r3, [r3, #0]
 8015d0a:	4a8d      	ldr	r2, [pc, #564]	; (8015f40 <GUI_SendNotification+0x324>)
 8015d0c:	009b      	lsls	r3, r3, #2
 8015d0e:	18d3      	adds	r3, r2, r3
 8015d10:	785b      	ldrb	r3, [r3, #1]
 8015d12:	075b      	lsls	r3, r3, #29
 8015d14:	0f5b      	lsrs	r3, r3, #29
 8015d16:	b2db      	uxtb	r3, r3
 8015d18:	2b03      	cmp	r3, #3
 8015d1a:	d136      	bne.n	8015d8a <GUI_SendNotification+0x16e>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8015d1c:	193b      	adds	r3, r7, r4
 8015d1e:	781a      	ldrb	r2, [r3, #0]
 8015d20:	4b87      	ldr	r3, [pc, #540]	; (8015f40 <GUI_SendNotification+0x324>)
 8015d22:	0092      	lsls	r2, r2, #2
 8015d24:	5cd3      	ldrb	r3, [r2, r3]
 8015d26:	071b      	lsls	r3, r3, #28
 8015d28:	0fdb      	lsrs	r3, r3, #31
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	001a      	movs	r2, r3
 8015d2e:	2174      	movs	r1, #116	; 0x74
 8015d30:	187b      	adds	r3, r7, r1
 8015d32:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8015d34:	187b      	adds	r3, r7, r1
 8015d36:	1978      	adds	r0, r7, r5
 8015d38:	2201      	movs	r2, #1
 8015d3a:	2107      	movs	r1, #7
 8015d3c:	f7ff f896 	bl	8014e6c <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8015d40:	193b      	adds	r3, r7, r4
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	4a7e      	ldr	r2, [pc, #504]	; (8015f40 <GUI_SendNotification+0x324>)
 8015d46:	009b      	lsls	r3, r3, #2
 8015d48:	18d3      	adds	r3, r2, r3
 8015d4a:	785b      	ldrb	r3, [r3, #1]
 8015d4c:	061b      	lsls	r3, r3, #24
 8015d4e:	0fdb      	lsrs	r3, r3, #31
 8015d50:	b2db      	uxtb	r3, r3
 8015d52:	001a      	movs	r2, r3
 8015d54:	2170      	movs	r1, #112	; 0x70
 8015d56:	187b      	adds	r3, r7, r1
 8015d58:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8015d5a:	187b      	adds	r3, r7, r1
 8015d5c:	1978      	adds	r0, r7, r5
 8015d5e:	2201      	movs	r2, #1
 8015d60:	210a      	movs	r1, #10
 8015d62:	f7ff f883 	bl	8014e6c <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8015d66:	193b      	adds	r3, r7, r4
 8015d68:	781a      	ldrb	r2, [r3, #0]
 8015d6a:	4b75      	ldr	r3, [pc, #468]	; (8015f40 <GUI_SendNotification+0x324>)
 8015d6c:	0092      	lsls	r2, r2, #2
 8015d6e:	5cd3      	ldrb	r3, [r2, r3]
 8015d70:	079b      	lsls	r3, r3, #30
 8015d72:	0f9b      	lsrs	r3, r3, #30
 8015d74:	b2db      	uxtb	r3, r3
 8015d76:	001a      	movs	r2, r3
 8015d78:	216c      	movs	r1, #108	; 0x6c
 8015d7a:	187b      	adds	r3, r7, r1
 8015d7c:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8015d7e:	187b      	adds	r3, r7, r1
 8015d80:	1978      	adds	r0, r7, r5
 8015d82:	2201      	movs	r2, #1
 8015d84:	210d      	movs	r1, #13
 8015d86:	f7ff f871 	bl	8014e6c <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 8015d8a:	683a      	ldr	r2, [r7, #0]
 8015d8c:	2380      	movs	r3, #128	; 0x80
 8015d8e:	019b      	lsls	r3, r3, #6
 8015d90:	4013      	ands	r3, r2
 8015d92:	d100      	bne.n	8015d96 <GUI_SendNotification+0x17a>
 8015d94:	e27d      	b.n	8016292 <GUI_SendNotification+0x676>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 8015d96:	22a0      	movs	r2, #160	; 0xa0
 8015d98:	2108      	movs	r1, #8
 8015d9a:	1853      	adds	r3, r2, r1
 8015d9c:	19db      	adds	r3, r3, r7
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	2b70      	cmp	r3, #112	; 0x70
 8015da2:	d100      	bne.n	8015da6 <GUI_SendNotification+0x18a>
 8015da4:	e1c1      	b.n	801612a <GUI_SendNotification+0x50e>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 8015da6:	2384      	movs	r3, #132	; 0x84
 8015da8:	18f8      	adds	r0, r7, r3
 8015daa:	0014      	movs	r4, r2
 8015dac:	000d      	movs	r5, r1
 8015dae:	1853      	adds	r3, r2, r1
 8015db0:	19db      	adds	r3, r3, r7
 8015db2:	2201      	movs	r2, #1
 8015db4:	210e      	movs	r1, #14
 8015db6:	f7ff f859 	bl	8014e6c <TLV_add>

        switch (Value)
 8015dba:	0022      	movs	r2, r4
 8015dbc:	1953      	adds	r3, r2, r5
 8015dbe:	19db      	adds	r3, r3, r7
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	2b42      	cmp	r3, #66	; 0x42
 8015dc4:	d80b      	bhi.n	8015dde <GUI_SendNotification+0x1c2>
 8015dc6:	2b07      	cmp	r3, #7
 8015dc8:	d200      	bcs.n	8015dcc <GUI_SendNotification+0x1b0>
 8015dca:	e25b      	b.n	8016284 <GUI_SendNotification+0x668>
 8015dcc:	3b07      	subs	r3, #7
 8015dce:	2b3b      	cmp	r3, #59	; 0x3b
 8015dd0:	d900      	bls.n	8015dd4 <GUI_SendNotification+0x1b8>
 8015dd2:	e257      	b.n	8016284 <GUI_SendNotification+0x668>
 8015dd4:	009a      	lsls	r2, r3, #2
 8015dd6:	4b5b      	ldr	r3, [pc, #364]	; (8015f44 <GUI_SendNotification+0x328>)
 8015dd8:	18d3      	adds	r3, r2, r3
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	469f      	mov	pc, r3
 8015dde:	2b5a      	cmp	r3, #90	; 0x5a
 8015de0:	d000      	beq.n	8015de4 <GUI_SendNotification+0x1c8>
 8015de2:	e24f      	b.n	8016284 <GUI_SendNotification+0x668>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8015de4:	240f      	movs	r4, #15
 8015de6:	193b      	adds	r3, r7, r4
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	4a55      	ldr	r2, [pc, #340]	; (8015f40 <GUI_SendNotification+0x324>)
 8015dec:	009b      	lsls	r3, r3, #2
 8015dee:	18d3      	adds	r3, r2, r3
 8015df0:	785b      	ldrb	r3, [r3, #1]
 8015df2:	075b      	lsls	r3, r3, #29
 8015df4:	0f5b      	lsrs	r3, r3, #29
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	001a      	movs	r2, r3
 8015dfa:	2168      	movs	r1, #104	; 0x68
 8015dfc:	187b      	adds	r3, r7, r1
 8015dfe:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 8015e00:	187b      	adds	r3, r7, r1
 8015e02:	2584      	movs	r5, #132	; 0x84
 8015e04:	1978      	adds	r0, r7, r5
 8015e06:	2201      	movs	r2, #1
 8015e08:	2105      	movs	r1, #5
 8015e0a:	f7ff f82f 	bl	8014e6c <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8015e0e:	193b      	adds	r3, r7, r4
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	4a4b      	ldr	r2, [pc, #300]	; (8015f40 <GUI_SendNotification+0x324>)
 8015e14:	009b      	lsls	r3, r3, #2
 8015e16:	18d3      	adds	r3, r2, r3
 8015e18:	785b      	ldrb	r3, [r3, #1]
 8015e1a:	075b      	lsls	r3, r3, #29
 8015e1c:	0f5b      	lsrs	r3, r3, #29
 8015e1e:	b2db      	uxtb	r3, r3
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d000      	beq.n	8015e26 <GUI_SendNotification+0x20a>
 8015e24:	e234      	b.n	8016290 <GUI_SendNotification+0x674>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8015e26:	193b      	adds	r3, r7, r4
 8015e28:	781a      	ldrb	r2, [r3, #0]
 8015e2a:	4b45      	ldr	r3, [pc, #276]	; (8015f40 <GUI_SendNotification+0x324>)
 8015e2c:	0092      	lsls	r2, r2, #2
 8015e2e:	5cd3      	ldrb	r3, [r2, r3]
 8015e30:	061b      	lsls	r3, r3, #24
 8015e32:	0f9b      	lsrs	r3, r3, #30
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	001a      	movs	r2, r3
 8015e38:	2138      	movs	r1, #56	; 0x38
 8015e3a:	187b      	adds	r3, r7, r1
 8015e3c:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 8015e3e:	187b      	adds	r3, r7, r1
 8015e40:	1978      	adds	r0, r7, r5
 8015e42:	2201      	movs	r2, #1
 8015e44:	2106      	movs	r1, #6
 8015e46:	f7ff f811 	bl	8014e6c <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8015e4a:	193b      	adds	r3, r7, r4
 8015e4c:	781a      	ldrb	r2, [r3, #0]
 8015e4e:	4b3c      	ldr	r3, [pc, #240]	; (8015f40 <GUI_SendNotification+0x324>)
 8015e50:	0092      	lsls	r2, r2, #2
 8015e52:	5cd3      	ldrb	r3, [r2, r3]
 8015e54:	075b      	lsls	r3, r3, #29
 8015e56:	0fdb      	lsrs	r3, r3, #31
 8015e58:	b2db      	uxtb	r3, r3
 8015e5a:	001a      	movs	r2, r3
 8015e5c:	2134      	movs	r1, #52	; 0x34
 8015e5e:	187b      	adds	r3, r7, r1
 8015e60:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8015e62:	187b      	adds	r3, r7, r1
 8015e64:	1978      	adds	r0, r7, r5
 8015e66:	2201      	movs	r2, #1
 8015e68:	2108      	movs	r1, #8
 8015e6a:	f7fe ffff 	bl	8014e6c <TLV_add>
            }
            break;
 8015e6e:	e20f      	b.n	8016290 <GUI_SendNotification+0x674>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO
 8015e70:	240f      	movs	r4, #15
 8015e72:	193b      	adds	r3, r7, r4
 8015e74:	781a      	ldrb	r2, [r3, #0]
 8015e76:	4934      	ldr	r1, [pc, #208]	; (8015f48 <GUI_SendNotification+0x32c>)
 8015e78:	0013      	movs	r3, r2
 8015e7a:	00db      	lsls	r3, r3, #3
 8015e7c:	1a9b      	subs	r3, r3, r2
 8015e7e:	011b      	lsls	r3, r3, #4
 8015e80:	18cb      	adds	r3, r1, r3
 8015e82:	333c      	adds	r3, #60	; 0x3c
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	b2da      	uxtb	r2, r3
 8015e88:	2164      	movs	r1, #100	; 0x64
 8015e8a:	187b      	adds	r3, r7, r1
 8015e8c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 8015e8e:	187b      	adds	r3, r7, r1
 8015e90:	2584      	movs	r5, #132	; 0x84
 8015e92:	1978      	adds	r0, r7, r5
 8015e94:	2201      	movs	r2, #1
 8015e96:	2100      	movs	r1, #0
 8015e98:	f7fe ffe8 	bl	8014e6c <TLV_add>
            });
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 8015e9c:	193b      	adds	r3, r7, r4
 8015e9e:	781a      	ldrb	r2, [r3, #0]
 8015ea0:	4929      	ldr	r1, [pc, #164]	; (8015f48 <GUI_SendNotification+0x32c>)
 8015ea2:	0013      	movs	r3, r2
 8015ea4:	00db      	lsls	r3, r3, #3
 8015ea6:	1a9b      	subs	r3, r3, r2
 8015ea8:	011b      	lsls	r3, r3, #4
 8015eaa:	18cb      	adds	r3, r1, r3
 8015eac:	333c      	adds	r3, #60	; 0x3c
 8015eae:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	009b      	lsls	r3, r3, #2
 8015eb4:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8015eb6:	193b      	adds	r3, r7, r4
 8015eb8:	781a      	ldrb	r2, [r3, #0]
 8015eba:	0013      	movs	r3, r2
 8015ebc:	00db      	lsls	r3, r3, #3
 8015ebe:	1a9b      	subs	r3, r3, r2
 8015ec0:	011b      	lsls	r3, r3, #4
 8015ec2:	3320      	adds	r3, #32
 8015ec4:	001a      	movs	r2, r3
 8015ec6:	4b20      	ldr	r3, [pc, #128]	; (8015f48 <GUI_SendNotification+0x32c>)
 8015ec8:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8015eca:	1978      	adds	r0, r7, r5
 8015ecc:	000a      	movs	r2, r1
 8015ece:	2104      	movs	r1, #4
 8015ed0:	f7fe ffcc 	bl	8014e6c <TLV_add>
            break;
 8015ed4:	e1dd      	b.n	8016292 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8015ed6:	240f      	movs	r4, #15
 8015ed8:	193b      	adds	r3, r7, r4
 8015eda:	781a      	ldrb	r2, [r3, #0]
 8015edc:	491a      	ldr	r1, [pc, #104]	; (8015f48 <GUI_SendNotification+0x32c>)
 8015ede:	0013      	movs	r3, r2
 8015ee0:	00db      	lsls	r3, r3, #3
 8015ee2:	1a9b      	subs	r3, r3, r2
 8015ee4:	011b      	lsls	r3, r3, #4
 8015ee6:	18cb      	adds	r3, r1, r3
 8015ee8:	331c      	adds	r3, #28
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	b2da      	uxtb	r2, r3
 8015eee:	2160      	movs	r1, #96	; 0x60
 8015ef0:	187b      	adds	r3, r7, r1
 8015ef2:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8015ef4:	187b      	adds	r3, r7, r1
 8015ef6:	2584      	movs	r5, #132	; 0x84
 8015ef8:	1978      	adds	r0, r7, r5
 8015efa:	2201      	movs	r2, #1
 8015efc:	2103      	movs	r1, #3
 8015efe:	f7fe ffb5 	bl	8014e6c <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 8015f02:	193b      	adds	r3, r7, r4
 8015f04:	781a      	ldrb	r2, [r3, #0]
 8015f06:	4910      	ldr	r1, [pc, #64]	; (8015f48 <GUI_SendNotification+0x32c>)
 8015f08:	0013      	movs	r3, r2
 8015f0a:	00db      	lsls	r3, r3, #3
 8015f0c:	1a9b      	subs	r3, r3, r2
 8015f0e:	011b      	lsls	r3, r3, #4
 8015f10:	18cb      	adds	r3, r1, r3
 8015f12:	331c      	adds	r3, #28
 8015f14:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8015f16:	b29b      	uxth	r3, r3
 8015f18:	009b      	lsls	r3, r3, #2
 8015f1a:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8015f1c:	193b      	adds	r3, r7, r4
 8015f1e:	781a      	ldrb	r2, [r3, #0]
 8015f20:	0013      	movs	r3, r2
 8015f22:	00db      	lsls	r3, r3, #3
 8015f24:	1a9b      	subs	r3, r3, r2
 8015f26:	011b      	lsls	r3, r3, #4
 8015f28:	4a07      	ldr	r2, [pc, #28]	; (8015f48 <GUI_SendNotification+0x32c>)
 8015f2a:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8015f2c:	1978      	adds	r0, r7, r5
 8015f2e:	000a      	movs	r2, r1
 8015f30:	2102      	movs	r1, #2
 8015f32:	f7fe ff9b 	bl	8014e6c <TLV_add>
            break;
 8015f36:	e1ac      	b.n	8016292 <GUI_SendNotification+0x676>
 8015f38:	20002a3c 	.word	0x20002a3c
 8015f3c:	2000293c 	.word	0x2000293c
 8015f40:	200027dc 	.word	0x200027dc
 8015f44:	0801a8b4 	.word	0x0801a8b4
 8015f48:	20002a5c 	.word	0x20002a5c
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8015f4c:	240f      	movs	r4, #15
 8015f4e:	193b      	adds	r3, r7, r4
 8015f50:	781a      	ldrb	r2, [r3, #0]
 8015f52:	4bcd      	ldr	r3, [pc, #820]	; (8016288 <GUI_SendNotification+0x66c>)
 8015f54:	0092      	lsls	r2, r2, #2
 8015f56:	5cd3      	ldrb	r3, [r2, r3]
 8015f58:	075b      	lsls	r3, r3, #29
 8015f5a:	0fdb      	lsrs	r3, r3, #31
 8015f5c:	b2db      	uxtb	r3, r3
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d12e      	bne.n	8015fc0 <GUI_SendNotification+0x3a4>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8015f62:	193b      	adds	r3, r7, r4
 8015f64:	781a      	ldrb	r2, [r3, #0]
 8015f66:	49c9      	ldr	r1, [pc, #804]	; (801628c <GUI_SendNotification+0x670>)
 8015f68:	0013      	movs	r3, r2
 8015f6a:	00db      	lsls	r3, r3, #3
 8015f6c:	1a9b      	subs	r3, r3, r2
 8015f6e:	011b      	lsls	r3, r3, #4
 8015f70:	18cb      	adds	r3, r1, r3
 8015f72:	331c      	adds	r3, #28
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	b2da      	uxtb	r2, r3
 8015f78:	2130      	movs	r1, #48	; 0x30
 8015f7a:	187b      	adds	r3, r7, r1
 8015f7c:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8015f7e:	187b      	adds	r3, r7, r1
 8015f80:	2584      	movs	r5, #132	; 0x84
 8015f82:	1978      	adds	r0, r7, r5
 8015f84:	2201      	movs	r2, #1
 8015f86:	2103      	movs	r1, #3
 8015f88:	f7fe ff70 	bl	8014e6c <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 8015f8c:	193b      	adds	r3, r7, r4
 8015f8e:	781a      	ldrb	r2, [r3, #0]
 8015f90:	49be      	ldr	r1, [pc, #760]	; (801628c <GUI_SendNotification+0x670>)
 8015f92:	0013      	movs	r3, r2
 8015f94:	00db      	lsls	r3, r3, #3
 8015f96:	1a9b      	subs	r3, r3, r2
 8015f98:	011b      	lsls	r3, r3, #4
 8015f9a:	18cb      	adds	r3, r1, r3
 8015f9c:	331c      	adds	r3, #28
 8015f9e:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8015fa0:	b29b      	uxth	r3, r3
 8015fa2:	009b      	lsls	r3, r3, #2
 8015fa4:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8015fa6:	193b      	adds	r3, r7, r4
 8015fa8:	781a      	ldrb	r2, [r3, #0]
 8015faa:	0013      	movs	r3, r2
 8015fac:	00db      	lsls	r3, r3, #3
 8015fae:	1a9b      	subs	r3, r3, r2
 8015fb0:	011b      	lsls	r3, r3, #4
 8015fb2:	4ab6      	ldr	r2, [pc, #728]	; (801628c <GUI_SendNotification+0x670>)
 8015fb4:	189b      	adds	r3, r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8015fb6:	1978      	adds	r0, r7, r5
 8015fb8:	000a      	movs	r2, r1
 8015fba:	2102      	movs	r1, #2
 8015fbc:	f7fe ff56 	bl	8014e6c <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 8015fc0:	240f      	movs	r4, #15
 8015fc2:	193b      	adds	r3, r7, r4
 8015fc4:	781a      	ldrb	r2, [r3, #0]
 8015fc6:	49b1      	ldr	r1, [pc, #708]	; (801628c <GUI_SendNotification+0x670>)
 8015fc8:	0013      	movs	r3, r2
 8015fca:	00db      	lsls	r3, r3, #3
 8015fcc:	1a9b      	subs	r3, r3, r2
 8015fce:	011b      	lsls	r3, r3, #4
 8015fd0:	18cb      	adds	r3, r1, r3
 8015fd2:	3340      	adds	r3, #64	; 0x40
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	b2da      	uxtb	r2, r3
 8015fd8:	215c      	movs	r1, #92	; 0x5c
 8015fda:	187b      	adds	r3, r7, r1
 8015fdc:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 8015fde:	187b      	adds	r3, r7, r1
 8015fe0:	2584      	movs	r5, #132	; 0x84
 8015fe2:	1978      	adds	r0, r7, r5
 8015fe4:	2201      	movs	r2, #1
 8015fe6:	2101      	movs	r1, #1
 8015fe8:	f7fe ff40 	bl	8014e6c <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8015fec:	193b      	adds	r3, r7, r4
 8015fee:	781a      	ldrb	r2, [r3, #0]
 8015ff0:	4ba5      	ldr	r3, [pc, #660]	; (8016288 <GUI_SendNotification+0x66c>)
 8015ff2:	0092      	lsls	r2, r2, #2
 8015ff4:	5cd3      	ldrb	r3, [r2, r3]
 8015ff6:	071b      	lsls	r3, r3, #28
 8015ff8:	0fdb      	lsrs	r3, r3, #31
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	001a      	movs	r2, r3
 8015ffe:	2158      	movs	r1, #88	; 0x58
 8016000:	187b      	adds	r3, r7, r1
 8016002:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8016004:	187b      	adds	r3, r7, r1
 8016006:	1978      	adds	r0, r7, r5
 8016008:	2201      	movs	r2, #1
 801600a:	2107      	movs	r1, #7
 801600c:	f7fe ff2e 	bl	8014e6c <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8016010:	193b      	adds	r3, r7, r4
 8016012:	781a      	ldrb	r2, [r3, #0]
 8016014:	4b9c      	ldr	r3, [pc, #624]	; (8016288 <GUI_SendNotification+0x66c>)
 8016016:	0092      	lsls	r2, r2, #2
 8016018:	5cd3      	ldrb	r3, [r2, r3]
 801601a:	075b      	lsls	r3, r3, #29
 801601c:	0fdb      	lsrs	r3, r3, #31
 801601e:	b2db      	uxtb	r3, r3
 8016020:	001a      	movs	r2, r3
 8016022:	2154      	movs	r1, #84	; 0x54
 8016024:	187b      	adds	r3, r7, r1
 8016026:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8016028:	187b      	adds	r3, r7, r1
 801602a:	1978      	adds	r0, r7, r5
 801602c:	2201      	movs	r2, #1
 801602e:	2108      	movs	r1, #8
 8016030:	f7fe ff1c 	bl	8014e6c <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8016034:	193b      	adds	r3, r7, r4
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	4a93      	ldr	r2, [pc, #588]	; (8016288 <GUI_SendNotification+0x66c>)
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	18d3      	adds	r3, r2, r3
 801603e:	785b      	ldrb	r3, [r3, #1]
 8016040:	061b      	lsls	r3, r3, #24
 8016042:	0fdb      	lsrs	r3, r3, #31
 8016044:	b2db      	uxtb	r3, r3
 8016046:	001a      	movs	r2, r3
 8016048:	2150      	movs	r1, #80	; 0x50
 801604a:	187b      	adds	r3, r7, r1
 801604c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801604e:	187b      	adds	r3, r7, r1
 8016050:	1978      	adds	r0, r7, r5
 8016052:	2201      	movs	r2, #1
 8016054:	210a      	movs	r1, #10
 8016056:	f7fe ff09 	bl	8014e6c <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801605a:	193b      	adds	r3, r7, r4
 801605c:	781a      	ldrb	r2, [r3, #0]
 801605e:	4b8a      	ldr	r3, [pc, #552]	; (8016288 <GUI_SendNotification+0x66c>)
 8016060:	0092      	lsls	r2, r2, #2
 8016062:	5cd3      	ldrb	r3, [r2, r3]
 8016064:	079b      	lsls	r3, r3, #30
 8016066:	0f9b      	lsrs	r3, r3, #30
 8016068:	b2db      	uxtb	r3, r3
 801606a:	001a      	movs	r2, r3
 801606c:	214c      	movs	r1, #76	; 0x4c
 801606e:	187b      	adds	r3, r7, r1
 8016070:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8016072:	187b      	adds	r3, r7, r1
 8016074:	1978      	adds	r0, r7, r5
 8016076:	2201      	movs	r2, #1
 8016078:	210d      	movs	r1, #13
 801607a:	f7fe fef7 	bl	8014e6c <TLV_add>
            break;
 801607e:	e108      	b.n	8016292 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8016080:	230f      	movs	r3, #15
 8016082:	18fb      	adds	r3, r7, r3
 8016084:	781a      	ldrb	r2, [r3, #0]
 8016086:	4b80      	ldr	r3, [pc, #512]	; (8016288 <GUI_SendNotification+0x66c>)
 8016088:	0092      	lsls	r2, r2, #2
 801608a:	5cd3      	ldrb	r3, [r2, r3]
 801608c:	075b      	lsls	r3, r3, #29
 801608e:	0fdb      	lsrs	r3, r3, #31
 8016090:	b2db      	uxtb	r3, r3
 8016092:	001a      	movs	r2, r3
 8016094:	2148      	movs	r1, #72	; 0x48
 8016096:	187b      	adds	r3, r7, r1
 8016098:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801609a:	187b      	adds	r3, r7, r1
 801609c:	2284      	movs	r2, #132	; 0x84
 801609e:	18b8      	adds	r0, r7, r2
 80160a0:	2201      	movs	r2, #1
 80160a2:	2108      	movs	r1, #8
 80160a4:	f7fe fee2 	bl	8014e6c <TLV_add>
            break;
 80160a8:	e0f3      	b.n	8016292 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 80160aa:	230f      	movs	r3, #15
 80160ac:	18fb      	adds	r3, r7, r3
 80160ae:	781a      	ldrb	r2, [r3, #0]
 80160b0:	4b75      	ldr	r3, [pc, #468]	; (8016288 <GUI_SendNotification+0x66c>)
 80160b2:	0092      	lsls	r2, r2, #2
 80160b4:	5cd3      	ldrb	r3, [r2, r3]
 80160b6:	071b      	lsls	r3, r3, #28
 80160b8:	0fdb      	lsrs	r3, r3, #31
 80160ba:	b2db      	uxtb	r3, r3
 80160bc:	001a      	movs	r2, r3
 80160be:	2144      	movs	r1, #68	; 0x44
 80160c0:	187b      	adds	r3, r7, r1
 80160c2:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80160c4:	187b      	adds	r3, r7, r1
 80160c6:	2284      	movs	r2, #132	; 0x84
 80160c8:	18b8      	adds	r0, r7, r2
 80160ca:	2201      	movs	r2, #1
 80160cc:	2107      	movs	r1, #7
 80160ce:	f7fe fecd 	bl	8014e6c <TLV_add>
            break;
 80160d2:	e0de      	b.n	8016292 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80160d4:	230f      	movs	r3, #15
 80160d6:	18fb      	adds	r3, r7, r3
 80160d8:	781a      	ldrb	r2, [r3, #0]
 80160da:	4b6b      	ldr	r3, [pc, #428]	; (8016288 <GUI_SendNotification+0x66c>)
 80160dc:	0092      	lsls	r2, r2, #2
 80160de:	5cd3      	ldrb	r3, [r2, r3]
 80160e0:	079b      	lsls	r3, r3, #30
 80160e2:	0f9b      	lsrs	r3, r3, #30
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	001a      	movs	r2, r3
 80160e8:	2140      	movs	r1, #64	; 0x40
 80160ea:	187b      	adds	r3, r7, r1
 80160ec:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80160ee:	187b      	adds	r3, r7, r1
 80160f0:	2284      	movs	r2, #132	; 0x84
 80160f2:	18b8      	adds	r0, r7, r2
 80160f4:	2201      	movs	r2, #1
 80160f6:	210d      	movs	r1, #13
 80160f8:	f7fe feb8 	bl	8014e6c <TLV_add>
            break;
 80160fc:	e0c9      	b.n	8016292 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 80160fe:	230f      	movs	r3, #15
 8016100:	18fb      	adds	r3, r7, r3
 8016102:	781b      	ldrb	r3, [r3, #0]
 8016104:	4a60      	ldr	r2, [pc, #384]	; (8016288 <GUI_SendNotification+0x66c>)
 8016106:	009b      	lsls	r3, r3, #2
 8016108:	18d3      	adds	r3, r2, r3
 801610a:	785b      	ldrb	r3, [r3, #1]
 801610c:	061b      	lsls	r3, r3, #24
 801610e:	0fdb      	lsrs	r3, r3, #31
 8016110:	b2db      	uxtb	r3, r3
 8016112:	001a      	movs	r2, r3
 8016114:	213c      	movs	r1, #60	; 0x3c
 8016116:	187b      	adds	r3, r7, r1
 8016118:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801611a:	187b      	adds	r3, r7, r1
 801611c:	2284      	movs	r2, #132	; 0x84
 801611e:	18b8      	adds	r0, r7, r2
 8016120:	2201      	movs	r2, #1
 8016122:	210a      	movs	r1, #10
 8016124:	f7fe fea2 	bl	8014e6c <TLV_add>
            break;
 8016128:	e0b3      	b.n	8016292 <GUI_SendNotification+0x676>
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 801612a:	240f      	movs	r4, #15
 801612c:	193b      	adds	r3, r7, r4
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	4a55      	ldr	r2, [pc, #340]	; (8016288 <GUI_SendNotification+0x66c>)
 8016132:	009b      	lsls	r3, r3, #2
 8016134:	18d3      	adds	r3, r2, r3
 8016136:	785b      	ldrb	r3, [r3, #1]
 8016138:	06db      	lsls	r3, r3, #27
 801613a:	0fdb      	lsrs	r3, r3, #31
 801613c:	b2db      	uxtb	r3, r3
 801613e:	2b01      	cmp	r3, #1
 8016140:	d000      	beq.n	8016144 <GUI_SendNotification+0x528>
 8016142:	e0a6      	b.n	8016292 <GUI_SendNotification+0x676>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 8016144:	193b      	adds	r3, r7, r4
 8016146:	781a      	ldrb	r2, [r3, #0]
 8016148:	4950      	ldr	r1, [pc, #320]	; (801628c <GUI_SendNotification+0x670>)
 801614a:	0013      	movs	r3, r2
 801614c:	00db      	lsls	r3, r3, #3
 801614e:	1a9b      	subs	r3, r3, r2
 8016150:	011b      	lsls	r3, r3, #4
 8016152:	18cb      	adds	r3, r1, r3
 8016154:	333c      	adds	r3, #60	; 0x3c
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d030      	beq.n	80161be <GUI_SendNotification+0x5a2>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 801615c:	193b      	adds	r3, r7, r4
 801615e:	781a      	ldrb	r2, [r3, #0]
 8016160:	494a      	ldr	r1, [pc, #296]	; (801628c <GUI_SendNotification+0x670>)
 8016162:	0013      	movs	r3, r2
 8016164:	00db      	lsls	r3, r3, #3
 8016166:	1a9b      	subs	r3, r3, r2
 8016168:	011b      	lsls	r3, r3, #4
 801616a:	18cb      	adds	r3, r1, r3
 801616c:	333c      	adds	r3, #60	; 0x3c
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	b2da      	uxtb	r2, r3
 8016172:	2124      	movs	r1, #36	; 0x24
 8016174:	187b      	adds	r3, r7, r1
 8016176:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 8016178:	187b      	adds	r3, r7, r1
 801617a:	2584      	movs	r5, #132	; 0x84
 801617c:	1978      	adds	r0, r7, r5
 801617e:	2201      	movs	r2, #1
 8016180:	2100      	movs	r1, #0
 8016182:	f7fe fe73 	bl	8014e6c <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 8016186:	193b      	adds	r3, r7, r4
 8016188:	781a      	ldrb	r2, [r3, #0]
 801618a:	4940      	ldr	r1, [pc, #256]	; (801628c <GUI_SendNotification+0x670>)
 801618c:	0013      	movs	r3, r2
 801618e:	00db      	lsls	r3, r3, #3
 8016190:	1a9b      	subs	r3, r3, r2
 8016192:	011b      	lsls	r3, r3, #4
 8016194:	18cb      	adds	r3, r1, r3
 8016196:	333c      	adds	r3, #60	; 0x3c
 8016198:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801619a:	b29b      	uxth	r3, r3
 801619c:	009b      	lsls	r3, r3, #2
 801619e:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 80161a0:	193b      	adds	r3, r7, r4
 80161a2:	781a      	ldrb	r2, [r3, #0]
 80161a4:	0013      	movs	r3, r2
 80161a6:	00db      	lsls	r3, r3, #3
 80161a8:	1a9b      	subs	r3, r3, r2
 80161aa:	011b      	lsls	r3, r3, #4
 80161ac:	3320      	adds	r3, #32
 80161ae:	001a      	movs	r2, r3
 80161b0:	4b36      	ldr	r3, [pc, #216]	; (801628c <GUI_SendNotification+0x670>)
 80161b2:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80161b4:	1978      	adds	r0, r7, r5
 80161b6:	000a      	movs	r2, r1
 80161b8:	2104      	movs	r1, #4
 80161ba:	f7fe fe57 	bl	8014e6c <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 80161be:	240f      	movs	r4, #15
 80161c0:	193b      	adds	r3, r7, r4
 80161c2:	781a      	ldrb	r2, [r3, #0]
 80161c4:	4931      	ldr	r1, [pc, #196]	; (801628c <GUI_SendNotification+0x670>)
 80161c6:	0013      	movs	r3, r2
 80161c8:	00db      	lsls	r3, r3, #3
 80161ca:	1a9b      	subs	r3, r3, r2
 80161cc:	011b      	lsls	r3, r3, #4
 80161ce:	18cb      	adds	r3, r1, r3
 80161d0:	3340      	adds	r3, #64	; 0x40
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	b2da      	uxtb	r2, r3
 80161d6:	212c      	movs	r1, #44	; 0x2c
 80161d8:	187b      	adds	r3, r7, r1
 80161da:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 80161dc:	187b      	adds	r3, r7, r1
 80161de:	2584      	movs	r5, #132	; 0x84
 80161e0:	1978      	adds	r0, r7, r5
 80161e2:	2201      	movs	r2, #1
 80161e4:	2101      	movs	r1, #1
 80161e6:	f7fe fe41 	bl	8014e6c <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 80161ea:	193b      	adds	r3, r7, r4
 80161ec:	781a      	ldrb	r2, [r3, #0]
 80161ee:	4b26      	ldr	r3, [pc, #152]	; (8016288 <GUI_SendNotification+0x66c>)
 80161f0:	0092      	lsls	r2, r2, #2
 80161f2:	5cd3      	ldrb	r3, [r2, r3]
 80161f4:	075b      	lsls	r3, r3, #29
 80161f6:	0fdb      	lsrs	r3, r3, #31
 80161f8:	b2db      	uxtb	r3, r3
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d12d      	bne.n	801625a <GUI_SendNotification+0x63e>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 80161fe:	193b      	adds	r3, r7, r4
 8016200:	781a      	ldrb	r2, [r3, #0]
 8016202:	4922      	ldr	r1, [pc, #136]	; (801628c <GUI_SendNotification+0x670>)
 8016204:	0013      	movs	r3, r2
 8016206:	00db      	lsls	r3, r3, #3
 8016208:	1a9b      	subs	r3, r3, r2
 801620a:	011b      	lsls	r3, r3, #4
 801620c:	18cb      	adds	r3, r1, r3
 801620e:	331c      	adds	r3, #28
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	b2da      	uxtb	r2, r3
 8016214:	2120      	movs	r1, #32
 8016216:	187b      	adds	r3, r7, r1
 8016218:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801621a:	187b      	adds	r3, r7, r1
 801621c:	1978      	adds	r0, r7, r5
 801621e:	2201      	movs	r2, #1
 8016220:	2103      	movs	r1, #3
 8016222:	f7fe fe23 	bl	8014e6c <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 8016226:	193b      	adds	r3, r7, r4
 8016228:	781a      	ldrb	r2, [r3, #0]
 801622a:	4918      	ldr	r1, [pc, #96]	; (801628c <GUI_SendNotification+0x670>)
 801622c:	0013      	movs	r3, r2
 801622e:	00db      	lsls	r3, r3, #3
 8016230:	1a9b      	subs	r3, r3, r2
 8016232:	011b      	lsls	r3, r3, #4
 8016234:	18cb      	adds	r3, r1, r3
 8016236:	331c      	adds	r3, #28
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8016240:	193b      	adds	r3, r7, r4
 8016242:	781a      	ldrb	r2, [r3, #0]
 8016244:	0013      	movs	r3, r2
 8016246:	00db      	lsls	r3, r3, #3
 8016248:	1a9b      	subs	r3, r3, r2
 801624a:	011b      	lsls	r3, r3, #4
 801624c:	4a0f      	ldr	r2, [pc, #60]	; (801628c <GUI_SendNotification+0x670>)
 801624e:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8016250:	1978      	adds	r0, r7, r5
 8016252:	000a      	movs	r2, r1
 8016254:	2102      	movs	r1, #2
 8016256:	f7fe fe09 	bl	8014e6c <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801625a:	230f      	movs	r3, #15
 801625c:	18fb      	adds	r3, r7, r3
 801625e:	781a      	ldrb	r2, [r3, #0]
 8016260:	4b09      	ldr	r3, [pc, #36]	; (8016288 <GUI_SendNotification+0x66c>)
 8016262:	0092      	lsls	r2, r2, #2
 8016264:	5cd3      	ldrb	r3, [r2, r3]
 8016266:	079b      	lsls	r3, r3, #30
 8016268:	0f9b      	lsrs	r3, r3, #30
 801626a:	b2db      	uxtb	r3, r3
 801626c:	001a      	movs	r2, r3
 801626e:	2128      	movs	r1, #40	; 0x28
 8016270:	187b      	adds	r3, r7, r1
 8016272:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8016274:	187b      	adds	r3, r7, r1
 8016276:	2284      	movs	r2, #132	; 0x84
 8016278:	18b8      	adds	r0, r7, r2
 801627a:	2201      	movs	r2, #1
 801627c:	210d      	movs	r1, #13
 801627e:	f7fe fdf5 	bl	8014e6c <TLV_add>
 8016282:	e006      	b.n	8016292 <GUI_SendNotification+0x676>
            break;
 8016284:	46c0      	nop			; (mov r8, r8)
 8016286:	e004      	b.n	8016292 <GUI_SendNotification+0x676>
 8016288:	200027dc 	.word	0x200027dc
 801628c:	20002a5c 	.word	0x20002a5c
            break;
 8016290:	46c0      	nop			; (mov r8, r8)
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 8016292:	683a      	ldr	r2, [r7, #0]
 8016294:	2380      	movs	r3, #128	; 0x80
 8016296:	011b      	lsls	r3, r3, #4
 8016298:	4013      	ands	r3, r2
 801629a:	d043      	beq.n	8016324 <GUI_SendNotification+0x708>
    {
      uint32_t vsense = 0;
 801629c:	2300      	movs	r3, #0
 801629e:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 80162a0:	2300      	movs	r3, #0
 80162a2:	2290      	movs	r2, #144	; 0x90
 80162a4:	18ba      	adds	r2, r7, r2
 80162a6:	6013      	str	r3, [r2, #0]

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 80162a8:	2384      	movs	r3, #132	; 0x84
 80162aa:	18f8      	adds	r0, r7, r3
 80162ac:	23a0      	movs	r3, #160	; 0xa0
 80162ae:	2208      	movs	r2, #8
 80162b0:	189b      	adds	r3, r3, r2
 80162b2:	19db      	adds	r3, r3, r7
 80162b4:	2204      	movs	r2, #4
 80162b6:	2113      	movs	r1, #19
 80162b8:	f7fe fdd8 	bl	8014e6c <TLV_add>

      if (NULL != pCB_GetVoltage)
 80162bc:	4b57      	ldr	r3, [pc, #348]	; (801641c <GUI_SendNotification+0x800>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d008      	beq.n	80162d6 <GUI_SendNotification+0x6ba>
      {
        vsense = pCB_GetVoltage(PortNum);
 80162c4:	4b55      	ldr	r3, [pc, #340]	; (801641c <GUI_SendNotification+0x800>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	220f      	movs	r2, #15
 80162ca:	18ba      	adds	r2, r7, r2
 80162cc:	7812      	ldrb	r2, [r2, #0]
 80162ce:	0010      	movs	r0, r2
 80162d0:	4798      	blx	r3
 80162d2:	0003      	movs	r3, r0
 80162d4:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 80162d6:	4b51      	ldr	r3, [pc, #324]	; (801641c <GUI_SendNotification+0x800>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d013      	beq.n	8016306 <GUI_SendNotification+0x6ea>
      {
        isense = pCB_GetCurrent(PortNum);
 80162de:	4b50      	ldr	r3, [pc, #320]	; (8016420 <GUI_SendNotification+0x804>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	220f      	movs	r2, #15
 80162e4:	18ba      	adds	r2, r7, r2
 80162e6:	7812      	ldrb	r2, [r2, #0]
 80162e8:	0010      	movs	r0, r2
 80162ea:	4798      	blx	r3
 80162ec:	0003      	movs	r3, r0
 80162ee:	2290      	movs	r2, #144	; 0x90
 80162f0:	18b9      	adds	r1, r7, r2
 80162f2:	600b      	str	r3, [r1, #0]
        if (isense < 0)
 80162f4:	18bb      	adds	r3, r7, r2
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	da04      	bge.n	8016306 <GUI_SendNotification+0x6ea>
        {
          isense = -isense;
 80162fc:	18bb      	adds	r3, r7, r2
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	425b      	negs	r3, r3
 8016302:	18ba      	adds	r2, r7, r2
 8016304:	6013      	str	r3, [r2, #0]
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 8016306:	2390      	movs	r3, #144	; 0x90
 8016308:	18fb      	adds	r3, r7, r3
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	041a      	lsls	r2, r3, #16
 801630e:	69fb      	ldr	r3, [r7, #28]
 8016310:	4313      	orrs	r3, r2
 8016312:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 8016314:	231c      	movs	r3, #28
 8016316:	18fb      	adds	r3, r7, r3
 8016318:	2284      	movs	r2, #132	; 0x84
 801631a:	18b8      	adds	r0, r7, r2
 801631c:	2204      	movs	r2, #4
 801631e:	210c      	movs	r1, #12
 8016320:	f7fe fda4 	bl	8014e6c <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 8016324:	683a      	ldr	r2, [r7, #0]
 8016326:	2380      	movs	r3, #128	; 0x80
 8016328:	01db      	lsls	r3, r3, #7
 801632a:	4013      	ands	r3, r2
 801632c:	d009      	beq.n	8016342 <GUI_SendNotification+0x726>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 801632e:	2384      	movs	r3, #132	; 0x84
 8016330:	18f8      	adds	r0, r7, r3
 8016332:	23a0      	movs	r3, #160	; 0xa0
 8016334:	2208      	movs	r2, #8
 8016336:	189b      	adds	r3, r3, r2
 8016338:	19db      	adds	r3, r3, r7
 801633a:	2204      	movs	r2, #4
 801633c:	2113      	movs	r1, #19
 801633e:	f7fe fd95 	bl	8014e6c <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 8016342:	683a      	ldr	r2, [r7, #0]
 8016344:	2380      	movs	r3, #128	; 0x80
 8016346:	021b      	lsls	r3, r3, #8
 8016348:	4013      	ands	r3, r2
 801634a:	d043      	beq.n	80163d4 <GUI_SendNotification+0x7b8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 801634c:	240f      	movs	r4, #15
 801634e:	193b      	adds	r3, r7, r4
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	4a34      	ldr	r2, [pc, #208]	; (8016424 <GUI_SendNotification+0x808>)
 8016354:	009b      	lsls	r3, r3, #2
 8016356:	18d3      	adds	r3, r2, r3
 8016358:	785b      	ldrb	r3, [r3, #1]
 801635a:	075b      	lsls	r3, r3, #29
 801635c:	0f5b      	lsrs	r3, r3, #29
 801635e:	b2db      	uxtb	r3, r3
 8016360:	001a      	movs	r2, r3
 8016362:	2118      	movs	r1, #24
 8016364:	187b      	adds	r3, r7, r1
 8016366:	701a      	strb	r2, [r3, #0]
 8016368:	187b      	adds	r3, r7, r1
 801636a:	2584      	movs	r5, #132	; 0x84
 801636c:	1978      	adds	r0, r7, r5
 801636e:	2201      	movs	r2, #1
 8016370:	2105      	movs	r1, #5
 8016372:	f7fe fd7b 	bl	8014e6c <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8016376:	193b      	adds	r3, r7, r4
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	4a2a      	ldr	r2, [pc, #168]	; (8016424 <GUI_SendNotification+0x808>)
 801637c:	009b      	lsls	r3, r3, #2
 801637e:	18d3      	adds	r3, r2, r3
 8016380:	785b      	ldrb	r3, [r3, #1]
 8016382:	075b      	lsls	r3, r3, #29
 8016384:	0f5b      	lsrs	r3, r3, #29
 8016386:	b2db      	uxtb	r3, r3
 8016388:	2b00      	cmp	r3, #0
 801638a:	d123      	bne.n	80163d4 <GUI_SendNotification+0x7b8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801638c:	193b      	adds	r3, r7, r4
 801638e:	781a      	ldrb	r2, [r3, #0]
 8016390:	4b24      	ldr	r3, [pc, #144]	; (8016424 <GUI_SendNotification+0x808>)
 8016392:	0092      	lsls	r2, r2, #2
 8016394:	5cd3      	ldrb	r3, [r2, r3]
 8016396:	061b      	lsls	r3, r3, #24
 8016398:	0f9b      	lsrs	r3, r3, #30
 801639a:	b2db      	uxtb	r3, r3
 801639c:	001a      	movs	r2, r3
 801639e:	2114      	movs	r1, #20
 80163a0:	187b      	adds	r3, r7, r1
 80163a2:	701a      	strb	r2, [r3, #0]
 80163a4:	187b      	adds	r3, r7, r1
 80163a6:	1978      	adds	r0, r7, r5
 80163a8:	2201      	movs	r2, #1
 80163aa:	2106      	movs	r1, #6
 80163ac:	f7fe fd5e 	bl	8014e6c <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80163b0:	193b      	adds	r3, r7, r4
 80163b2:	781a      	ldrb	r2, [r3, #0]
 80163b4:	4b1b      	ldr	r3, [pc, #108]	; (8016424 <GUI_SendNotification+0x808>)
 80163b6:	0092      	lsls	r2, r2, #2
 80163b8:	5cd3      	ldrb	r3, [r2, r3]
 80163ba:	075b      	lsls	r3, r3, #29
 80163bc:	0fdb      	lsrs	r3, r3, #31
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	001a      	movs	r2, r3
 80163c2:	2110      	movs	r1, #16
 80163c4:	187b      	adds	r3, r7, r1
 80163c6:	701a      	strb	r2, [r3, #0]
 80163c8:	187b      	adds	r3, r7, r1
 80163ca:	1978      	adds	r0, r7, r5
 80163cc:	2201      	movs	r2, #1
 80163ce:	2108      	movs	r1, #8
 80163d0:	f7fe fd4c 	bl	8014e6c <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 80163d4:	2384      	movs	r3, #132	; 0x84
 80163d6:	18fb      	adds	r3, r7, r3
 80163d8:	0018      	movs	r0, r3
 80163da:	f7fe fea9 	bl	8015130 <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 80163de:	4b12      	ldr	r3, [pc, #72]	; (8016428 <GUI_SendNotification+0x80c>)
 80163e0:	0018      	movs	r0, r3
 80163e2:	f7fe ff4b 	bl	801527c <TLV_get_string_length>
 80163e6:	1e03      	subs	r3, r0, #0
 80163e8:	d010      	beq.n	801640c <GUI_SendNotification+0x7f0>
    {
      *pMsgToSend = Processed;
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	4a0e      	ldr	r2, [pc, #56]	; (8016428 <GUI_SendNotification+0x80c>)
 80163ee:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 80163f0:	4b0d      	ldr	r3, [pc, #52]	; (8016428 <GUI_SendNotification+0x80c>)
 80163f2:	0018      	movs	r0, r3
 80163f4:	f7fe ff42 	bl	801527c <TLV_get_string_length>
 80163f8:	0003      	movs	r3, r0
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	3308      	adds	r3, #8
 80163fe:	b2da      	uxtb	r2, r3
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 8016404:	2397      	movs	r3, #151	; 0x97
 8016406:	18fb      	adds	r3, r7, r3
 8016408:	2201      	movs	r2, #1
 801640a:	701a      	strb	r2, [r3, #0]

    }

  }

  return gui_state;
 801640c:	2397      	movs	r3, #151	; 0x97
 801640e:	18fb      	adds	r3, r7, r3
 8016410:	781b      	ldrb	r3, [r3, #0]
}
 8016412:	0018      	movs	r0, r3
 8016414:	46bd      	mov	sp, r7
 8016416:	b026      	add	sp, #152	; 0x98
 8016418:	bdb0      	pop	{r4, r5, r7, pc}
 801641a:	46c0      	nop			; (mov r8, r8)
 801641c:	20002a50 	.word	0x20002a50
 8016420:	20002a54 	.word	0x20002a54
 8016424:	200027dc 	.word	0x200027dc
 8016428:	2000293c 	.word	0x2000293c

0801642c <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b084      	sub	sp, #16
 8016430:	af00      	add	r7, sp, #0
 8016432:	0002      	movs	r2, r0
 8016434:	1dfb      	adds	r3, r7, #7
 8016436:	701a      	strb	r2, [r3, #0]
 8016438:	1d3b      	adds	r3, r7, #4
 801643a:	1c0a      	adds	r2, r1, #0
 801643c:	801a      	strh	r2, [r3, #0]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 801643e:	4b0c      	ldr	r3, [pc, #48]	; (8016470 <GUI_PostNotificationMessage+0x44>)
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	2b01      	cmp	r3, #1
 8016444:	d110      	bne.n	8016468 <GUI_PostNotificationMessage+0x3c>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 8016446:	1dfb      	adds	r3, r7, #7
 8016448:	781b      	ldrb	r3, [r3, #0]
 801644a:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 801644c:	1d3b      	adds	r3, r7, #4
 801644e:	881b      	ldrh	r3, [r3, #0]
 8016450:	011b      	lsls	r3, r3, #4
 8016452:	4313      	orrs	r3, r2
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 8016454:	2201      	movs	r2, #1
 8016456:	4313      	orrs	r3, r2
 8016458:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, event, 0U);
 801645a:	4b06      	ldr	r3, [pc, #24]	; (8016474 <GUI_PostNotificationMessage+0x48>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	68f9      	ldr	r1, [r7, #12]
 8016460:	2200      	movs	r2, #0
 8016462:	0018      	movs	r0, r3
 8016464:	f7fa f808 	bl	8010478 <osMessagePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8016468:	46c0      	nop			; (mov r8, r8)
 801646a:	46bd      	mov	sp, r7
 801646c:	b004      	add	sp, #16
 801646e:	bd80      	pop	{r7, pc}
 8016470:	20002a3c 	.word	0x20002a3c
 8016474:	20002a40 	.word	0x20002a40

08016478 <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 8016478:	b590      	push	{r4, r7, lr}
 801647a:	b08b      	sub	sp, #44	; 0x2c
 801647c:	af00      	add	r7, sp, #0
 801647e:	60ba      	str	r2, [r7, #8]
 8016480:	607b      	str	r3, [r7, #4]
 8016482:	230f      	movs	r3, #15
 8016484:	18fb      	adds	r3, r7, r3
 8016486:	1c02      	adds	r2, r0, #0
 8016488:	701a      	strb	r2, [r3, #0]
 801648a:	200e      	movs	r0, #14
 801648c:	183b      	adds	r3, r7, r0
 801648e:	1c0a      	adds	r2, r1, #0
 8016490:	701a      	strb	r2, [r3, #0]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 8016492:	183b      	adds	r3, r7, r0
 8016494:	781b      	ldrb	r3, [r3, #0]
 8016496:	2b13      	cmp	r3, #19
 8016498:	d900      	bls.n	801649c <GUI_SaveInfo+0x24>
 801649a:	e0ca      	b.n	8016632 <GUI_SaveInfo+0x1ba>
 801649c:	009a      	lsls	r2, r3, #2
 801649e:	4b6b      	ldr	r3, [pc, #428]	; (801664c <GUI_SaveInfo+0x1d4>)
 80164a0:	18d3      	adds	r3, r2, r3
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	469f      	mov	pc, r3
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	2b04      	cmp	r3, #4
 80164aa:	d000      	beq.n	80164ae <GUI_SaveInfo+0x36>
 80164ac:	e0c3      	b.n	8016636 <GUI_SaveInfo+0x1be>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 80164ae:	240f      	movs	r4, #15
 80164b0:	193b      	adds	r3, r7, r4
 80164b2:	781a      	ldrb	r2, [r3, #0]
 80164b4:	0013      	movs	r3, r2
 80164b6:	00db      	lsls	r3, r3, #3
 80164b8:	1a9b      	subs	r3, r3, r2
 80164ba:	011b      	lsls	r3, r3, #4
 80164bc:	3340      	adds	r3, #64	; 0x40
 80164be:	001a      	movs	r2, r3
 80164c0:	4b63      	ldr	r3, [pc, #396]	; (8016650 <GUI_SaveInfo+0x1d8>)
 80164c2:	18d3      	adds	r3, r2, r3
 80164c4:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 80164c6:	687a      	ldr	r2, [r7, #4]
 80164c8:	68b9      	ldr	r1, [r7, #8]
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	0018      	movs	r0, r3
 80164ce:	f002 ff99 	bl	8019404 <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	7819      	ldrb	r1, [r3, #0]
 80164d6:	193b      	adds	r3, r7, r4
 80164d8:	781a      	ldrb	r2, [r3, #0]
 80164da:	0008      	movs	r0, r1
 80164dc:	495c      	ldr	r1, [pc, #368]	; (8016650 <GUI_SaveInfo+0x1d8>)
 80164de:	0013      	movs	r3, r2
 80164e0:	00db      	lsls	r3, r3, #3
 80164e2:	1a9b      	subs	r3, r3, r2
 80164e4:	011b      	lsls	r3, r3, #4
 80164e6:	18cb      	adds	r3, r1, r3
 80164e8:	334c      	adds	r3, #76	; 0x4c
 80164ea:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 80164ec:	193b      	adds	r3, r7, r4
 80164ee:	781a      	ldrb	r2, [r3, #0]
 80164f0:	0013      	movs	r3, r2
 80164f2:	00db      	lsls	r3, r3, #3
 80164f4:	1a9b      	subs	r3, r3, r2
 80164f6:	011b      	lsls	r3, r3, #4
 80164f8:	3348      	adds	r3, #72	; 0x48
 80164fa:	001a      	movs	r2, r3
 80164fc:	4b54      	ldr	r3, [pc, #336]	; (8016650 <GUI_SaveInfo+0x1d8>)
 80164fe:	18d3      	adds	r3, r2, r3
 8016500:	3304      	adds	r3, #4
 8016502:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8016504:	687a      	ldr	r2, [r7, #4]
 8016506:	68b9      	ldr	r1, [r7, #8]
 8016508:	693b      	ldr	r3, [r7, #16]
 801650a:	0018      	movs	r0, r3
 801650c:	f002 ff7a 	bl	8019404 <memcpy>
      }
      break;
 8016510:	e091      	b.n	8016636 <GUI_SaveInfo+0x1be>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	2b1c      	cmp	r3, #28
 8016516:	d900      	bls.n	801651a <GUI_SaveInfo+0xa2>
 8016518:	e08f      	b.n	801663a <GUI_SaveInfo+0x1c2>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 801651a:	230f      	movs	r3, #15
 801651c:	18fb      	adds	r3, r7, r3
 801651e:	781a      	ldrb	r2, [r3, #0]
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	0899      	lsrs	r1, r3, #2
 8016524:	484a      	ldr	r0, [pc, #296]	; (8016650 <GUI_SaveInfo+0x1d8>)
 8016526:	0013      	movs	r3, r2
 8016528:	00db      	lsls	r3, r3, #3
 801652a:	1a9b      	subs	r3, r3, r2
 801652c:	011b      	lsls	r3, r3, #4
 801652e:	18c3      	adds	r3, r0, r3
 8016530:	331c      	adds	r3, #28
 8016532:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8016534:	2300      	movs	r3, #0
 8016536:	627b      	str	r3, [r7, #36]	; 0x24
 8016538:	e018      	b.n	801656c <GUI_SaveInfo+0xf4>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 801653a:	230f      	movs	r3, #15
 801653c:	18fb      	adds	r3, r7, r3
 801653e:	781a      	ldrb	r2, [r3, #0]
 8016540:	0013      	movs	r3, r2
 8016542:	00db      	lsls	r3, r3, #3
 8016544:	1a9b      	subs	r3, r3, r2
 8016546:	009b      	lsls	r3, r3, #2
 8016548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801654a:	189b      	adds	r3, r3, r2
 801654c:	009a      	lsls	r2, r3, #2
 801654e:	4b40      	ldr	r3, [pc, #256]	; (8016650 <GUI_SaveInfo+0x1d8>)
 8016550:	18d3      	adds	r3, r2, r3
 8016552:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8016554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016556:	009b      	lsls	r3, r3, #2
 8016558:	68ba      	ldr	r2, [r7, #8]
 801655a:	18d1      	adds	r1, r2, r3
 801655c:	697b      	ldr	r3, [r7, #20]
 801655e:	2204      	movs	r2, #4
 8016560:	0018      	movs	r0, r3
 8016562:	f002 ff4f 	bl	8019404 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 8016566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016568:	3301      	adds	r3, #1
 801656a:	627b      	str	r3, [r7, #36]	; 0x24
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	089b      	lsrs	r3, r3, #2
 8016570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016572:	429a      	cmp	r2, r3
 8016574:	d3e1      	bcc.n	801653a <GUI_SaveInfo+0xc2>
        }
      }
      break;
 8016576:	e060      	b.n	801663a <GUI_SaveInfo+0x1c2>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2b1c      	cmp	r3, #28
 801657c:	d85f      	bhi.n	801663e <GUI_SaveInfo+0x1c6>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 801657e:	230f      	movs	r3, #15
 8016580:	18fb      	adds	r3, r7, r3
 8016582:	781a      	ldrb	r2, [r3, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	0899      	lsrs	r1, r3, #2
 8016588:	4831      	ldr	r0, [pc, #196]	; (8016650 <GUI_SaveInfo+0x1d8>)
 801658a:	0013      	movs	r3, r2
 801658c:	00db      	lsls	r3, r3, #3
 801658e:	1a9b      	subs	r3, r3, r2
 8016590:	011b      	lsls	r3, r3, #4
 8016592:	18c3      	adds	r3, r0, r3
 8016594:	333c      	adds	r3, #60	; 0x3c
 8016596:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8016598:	2300      	movs	r3, #0
 801659a:	627b      	str	r3, [r7, #36]	; 0x24
 801659c:	e019      	b.n	80165d2 <GUI_SaveInfo+0x15a>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 801659e:	230f      	movs	r3, #15
 80165a0:	18fb      	adds	r3, r7, r3
 80165a2:	781a      	ldrb	r2, [r3, #0]
 80165a4:	0013      	movs	r3, r2
 80165a6:	00db      	lsls	r3, r3, #3
 80165a8:	1a9b      	subs	r3, r3, r2
 80165aa:	009b      	lsls	r3, r3, #2
 80165ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165ae:	189b      	adds	r3, r3, r2
 80165b0:	3308      	adds	r3, #8
 80165b2:	009a      	lsls	r2, r3, #2
 80165b4:	4b26      	ldr	r3, [pc, #152]	; (8016650 <GUI_SaveInfo+0x1d8>)
 80165b6:	18d3      	adds	r3, r2, r3
 80165b8:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 80165ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	68ba      	ldr	r2, [r7, #8]
 80165c0:	18d1      	adds	r1, r2, r3
 80165c2:	69bb      	ldr	r3, [r7, #24]
 80165c4:	2204      	movs	r2, #4
 80165c6:	0018      	movs	r0, r3
 80165c8:	f002 ff1c 	bl	8019404 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 80165cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ce:	3301      	adds	r3, #1
 80165d0:	627b      	str	r3, [r7, #36]	; 0x24
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	089b      	lsrs	r3, r3, #2
 80165d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165d8:	429a      	cmp	r2, r3
 80165da:	d3e0      	bcc.n	801659e <GUI_SaveInfo+0x126>
        }
      }
      break;
 80165dc:	e02f      	b.n	801663e <GUI_SaveInfo+0x1c6>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	2b04      	cmp	r3, #4
 80165e2:	d12e      	bne.n	8016642 <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 80165e4:	230f      	movs	r3, #15
 80165e6:	18fb      	adds	r3, r7, r3
 80165e8:	781a      	ldrb	r2, [r3, #0]
 80165ea:	0013      	movs	r3, r2
 80165ec:	00db      	lsls	r3, r3, #3
 80165ee:	1a9b      	subs	r3, r3, r2
 80165f0:	011b      	lsls	r3, r3, #4
 80165f2:	3350      	adds	r3, #80	; 0x50
 80165f4:	001a      	movs	r2, r3
 80165f6:	4b16      	ldr	r3, [pc, #88]	; (8016650 <GUI_SaveInfo+0x1d8>)
 80165f8:	18d3      	adds	r3, r2, r3
 80165fa:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 80165fc:	687a      	ldr	r2, [r7, #4]
 80165fe:	68b9      	ldr	r1, [r7, #8]
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	0018      	movs	r0, r3
 8016604:	f002 fefe 	bl	8019404 <memcpy>
      }
      break;
 8016608:	e01b      	b.n	8016642 <GUI_SaveInfo+0x1ca>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 801660a:	230f      	movs	r3, #15
 801660c:	18fb      	adds	r3, r7, r3
 801660e:	781a      	ldrb	r2, [r3, #0]
 8016610:	0013      	movs	r3, r2
 8016612:	00db      	lsls	r3, r3, #3
 8016614:	1a9b      	subs	r3, r3, r2
 8016616:	011b      	lsls	r3, r3, #4
 8016618:	3350      	adds	r3, #80	; 0x50
 801661a:	001a      	movs	r2, r3
 801661c:	4b0c      	ldr	r3, [pc, #48]	; (8016650 <GUI_SaveInfo+0x1d8>)
 801661e:	18d3      	adds	r3, r2, r3
 8016620:	3304      	adds	r3, #4
 8016622:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 8016624:	687a      	ldr	r2, [r7, #4]
 8016626:	68b9      	ldr	r1, [r7, #8]
 8016628:	6a3b      	ldr	r3, [r7, #32]
 801662a:	0018      	movs	r0, r3
 801662c:	f002 feea 	bl	8019404 <memcpy>
      break;
 8016630:	e008      	b.n	8016644 <GUI_SaveInfo+0x1cc>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 8016632:	46c0      	nop			; (mov r8, r8)
 8016634:	e006      	b.n	8016644 <GUI_SaveInfo+0x1cc>
      break;
 8016636:	46c0      	nop			; (mov r8, r8)
 8016638:	e004      	b.n	8016644 <GUI_SaveInfo+0x1cc>
      break;
 801663a:	46c0      	nop			; (mov r8, r8)
 801663c:	e002      	b.n	8016644 <GUI_SaveInfo+0x1cc>
      break;
 801663e:	46c0      	nop			; (mov r8, r8)
 8016640:	e000      	b.n	8016644 <GUI_SaveInfo+0x1cc>
      break;
 8016642:	46c0      	nop			; (mov r8, r8)
  }
}
 8016644:	46c0      	nop			; (mov r8, r8)
 8016646:	46bd      	mov	sp, r7
 8016648:	b00b      	add	sp, #44	; 0x2c
 801664a:	bd90      	pop	{r4, r7, pc}
 801664c:	0801a9a4 	.word	0x0801a9a4
 8016650:	20002a5c 	.word	0x20002a5c

08016654 <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 8016654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016656:	b091      	sub	sp, #68	; 0x44
 8016658:	af00      	add	r7, sp, #0
 801665a:	0002      	movs	r2, r0
 801665c:	6039      	str	r1, [r7, #0]
 801665e:	1dfb      	adds	r3, r7, #7
 8016660:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8016662:	1dfb      	adds	r3, r7, #7
 8016664:	781b      	ldrb	r3, [r3, #0]
 8016666:	015b      	lsls	r3, r3, #5
 8016668:	b25b      	sxtb	r3, r3
 801666a:	2203      	movs	r2, #3
 801666c:	4313      	orrs	r3, r2
 801666e:	b25b      	sxtb	r3, r3
 8016670:	b2d9      	uxtb	r1, r3
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	2280      	movs	r2, #128	; 0x80
 8016676:	0052      	lsls	r2, r2, #1
 8016678:	2028      	movs	r0, #40	; 0x28
 801667a:	1838      	adds	r0, r7, r0
 801667c:	f7fe fb93 	bl	8014da6 <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 8016680:	1dfb      	adds	r3, r7, #7
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d163      	bne.n	8016750 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 8016688:	4bca      	ldr	r3, [pc, #808]	; (80169b4 <Send_DpmInitCnf+0x360>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d005      	beq.n	801669c <Send_DpmInitCnf+0x48>
    {
      hwversion = pCB_HWBoardVersion();
 8016690:	4bc8      	ldr	r3, [pc, #800]	; (80169b4 <Send_DpmInitCnf+0x360>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	4798      	blx	r3
 8016696:	0003      	movs	r3, r0
 8016698:	63fb      	str	r3, [r7, #60]	; 0x3c
 801669a:	e001      	b.n	80166a0 <Send_DpmInitCnf+0x4c>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 801669c:	4bc6      	ldr	r3, [pc, #792]	; (80169b8 <Send_DpmInitCnf+0x364>)
 801669e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 80166a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166a2:	0018      	movs	r0, r3
 80166a4:	f7ef fe4c 	bl	8006340 <strlen>
 80166a8:	0003      	movs	r3, r0
 80166aa:	b29a      	uxth	r2, r3
 80166ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166ae:	2128      	movs	r1, #40	; 0x28
 80166b0:	1878      	adds	r0, r7, r1
 80166b2:	2100      	movs	r1, #0
 80166b4:	f7fe fbda 	bl	8014e6c <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 80166b8:	4bbe      	ldr	r3, [pc, #760]	; (80169b4 <Send_DpmInitCnf+0x360>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d005      	beq.n	80166cc <Send_DpmInitCnf+0x78>
    {
      hwpdtype  = pCB_HWPDType();
 80166c0:	4bbe      	ldr	r3, [pc, #760]	; (80169bc <Send_DpmInitCnf+0x368>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4798      	blx	r3
 80166c6:	0003      	movs	r3, r0
 80166c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80166ca:	e001      	b.n	80166d0 <Send_DpmInitCnf+0x7c>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 80166cc:	4bba      	ldr	r3, [pc, #744]	; (80169b8 <Send_DpmInitCnf+0x364>)
 80166ce:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 80166d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166d2:	0018      	movs	r0, r3
 80166d4:	f7ef fe34 	bl	8006340 <strlen>
 80166d8:	0003      	movs	r3, r0
 80166da:	b29a      	uxth	r2, r3
 80166dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166de:	2428      	movs	r4, #40	; 0x28
 80166e0:	1938      	adds	r0, r7, r4
 80166e2:	2101      	movs	r1, #1
 80166e4:	f7fe fbc2 	bl	8014e6c <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 80166e8:	2124      	movs	r1, #36	; 0x24
 80166ea:	187b      	adds	r3, r7, r1
 80166ec:	2201      	movs	r2, #1
 80166ee:	701a      	strb	r2, [r3, #0]
 80166f0:	187b      	adds	r3, r7, r1
 80166f2:	1938      	adds	r0, r7, r4
 80166f4:	2201      	movs	r2, #1
 80166f6:	2102      	movs	r1, #2
 80166f8:	f7fe fbb8 	bl	8014e6c <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 80166fc:	251c      	movs	r5, #28
 80166fe:	197b      	adds	r3, r7, r5
 8016700:	4aaf      	ldr	r2, [pc, #700]	; (80169c0 <Send_DpmInitCnf+0x36c>)
 8016702:	ca03      	ldmia	r2!, {r0, r1}
 8016704:	c303      	stmia	r3!, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 8016706:	197b      	adds	r3, r7, r5
 8016708:	1938      	adds	r0, r7, r4
 801670a:	2208      	movs	r2, #8
 801670c:	2103      	movs	r1, #3
 801670e:	f7fe fbad 	bl	8014e6c <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8016712:	2118      	movs	r1, #24
 8016714:	187b      	adds	r3, r7, r1
 8016716:	2200      	movs	r2, #0
 8016718:	701a      	strb	r2, [r3, #0]
 801671a:	187b      	adds	r3, r7, r1
 801671c:	1938      	adds	r0, r7, r4
 801671e:	2201      	movs	r2, #1
 8016720:	211e      	movs	r1, #30
 8016722:	f7fe fba3 	bl	8014e6c <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8016726:	2114      	movs	r1, #20
 8016728:	187b      	adds	r3, r7, r1
 801672a:	2200      	movs	r2, #0
 801672c:	701a      	strb	r2, [r3, #0]
 801672e:	187b      	adds	r3, r7, r1
 8016730:	1938      	adds	r0, r7, r4
 8016732:	2201      	movs	r2, #1
 8016734:	211e      	movs	r1, #30
 8016736:	f7fe fb99 	bl	8014e6c <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 801673a:	4ba2      	ldr	r3, [pc, #648]	; (80169c4 <Send_DpmInitCnf+0x370>)
 801673c:	1938      	adds	r0, r7, r4
 801673e:	2201      	movs	r2, #1
 8016740:	211f      	movs	r1, #31
 8016742:	f7fe fb93 	bl	8014e6c <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 8016746:	193b      	adds	r3, r7, r4
 8016748:	0018      	movs	r0, r3
 801674a:	f7fe fcf1 	bl	8015130 <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 801674e:	e12c      	b.n	80169aa <Send_DpmInitCnf+0x356>
    uint8_t port = PortNum - 1U;
 8016750:	2637      	movs	r6, #55	; 0x37
 8016752:	19bb      	adds	r3, r7, r6
 8016754:	1dfa      	adds	r2, r7, #7
 8016756:	7812      	ldrb	r2, [r2, #0]
 8016758:	3a01      	subs	r2, #1
 801675a:	701a      	strb	r2, [r3, #0]
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 801675c:	19bb      	adds	r3, r7, r6
 801675e:	781a      	ldrb	r2, [r3, #0]
 8016760:	4999      	ldr	r1, [pc, #612]	; (80169c8 <Send_DpmInitCnf+0x374>)
 8016762:	0013      	movs	r3, r2
 8016764:	005b      	lsls	r3, r3, #1
 8016766:	189b      	adds	r3, r3, r2
 8016768:	009b      	lsls	r3, r3, #2
 801676a:	18cb      	adds	r3, r1, r3
 801676c:	791b      	ldrb	r3, [r3, #4]
 801676e:	079b      	lsls	r3, r3, #30
 8016770:	0f9b      	lsrs	r3, r3, #30
 8016772:	b2db      	uxtb	r3, r3
 8016774:	b29a      	uxth	r2, r3
 8016776:	2412      	movs	r4, #18
 8016778:	193b      	adds	r3, r7, r4
 801677a:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 801677c:	2110      	movs	r1, #16
 801677e:	187b      	adds	r3, r7, r1
 8016780:	2212      	movs	r2, #18
 8016782:	701a      	strb	r2, [r3, #0]
 8016784:	193b      	adds	r3, r7, r4
 8016786:	881b      	ldrh	r3, [r3, #0]
 8016788:	b2da      	uxtb	r2, r3
 801678a:	187b      	adds	r3, r7, r1
 801678c:	705a      	strb	r2, [r3, #1]
 801678e:	187b      	adds	r3, r7, r1
 8016790:	2528      	movs	r5, #40	; 0x28
 8016792:	1978      	adds	r0, r7, r5
 8016794:	2202      	movs	r2, #2
 8016796:	2104      	movs	r1, #4
 8016798:	f7fe fb68 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 801679c:	19bb      	adds	r3, r7, r6
 801679e:	781a      	ldrb	r2, [r3, #0]
 80167a0:	4989      	ldr	r1, [pc, #548]	; (80169c8 <Send_DpmInitCnf+0x374>)
 80167a2:	2008      	movs	r0, #8
 80167a4:	0013      	movs	r3, r2
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	189b      	adds	r3, r3, r2
 80167aa:	009b      	lsls	r3, r3, #2
 80167ac:	18cb      	adds	r3, r1, r3
 80167ae:	181b      	adds	r3, r3, r0
 80167b0:	781b      	ldrb	r3, [r3, #0]
 80167b2:	07db      	lsls	r3, r3, #31
 80167b4:	0fdb      	lsrs	r3, r3, #31
 80167b6:	b2db      	uxtb	r3, r3
 80167b8:	b29a      	uxth	r2, r3
 80167ba:	193b      	adds	r3, r7, r4
 80167bc:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 80167be:	193b      	adds	r3, r7, r4
 80167c0:	1978      	adds	r0, r7, r5
 80167c2:	2201      	movs	r2, #1
 80167c4:	2106      	movs	r1, #6
 80167c6:	f7fe fb51 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 80167ca:	19bb      	adds	r3, r7, r6
 80167cc:	781a      	ldrb	r2, [r3, #0]
 80167ce:	497e      	ldr	r1, [pc, #504]	; (80169c8 <Send_DpmInitCnf+0x374>)
 80167d0:	0013      	movs	r3, r2
 80167d2:	005b      	lsls	r3, r3, #1
 80167d4:	189b      	adds	r3, r3, r2
 80167d6:	009b      	lsls	r3, r3, #2
 80167d8:	18cb      	adds	r3, r1, r3
 80167da:	795b      	ldrb	r3, [r3, #5]
 80167dc:	06db      	lsls	r3, r3, #27
 80167de:	0fdb      	lsrs	r3, r3, #31
 80167e0:	b2db      	uxtb	r3, r3
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	193b      	adds	r3, r7, r4
 80167e6:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 80167e8:	193b      	adds	r3, r7, r4
 80167ea:	1978      	adds	r0, r7, r5
 80167ec:	2201      	movs	r2, #1
 80167ee:	2107      	movs	r1, #7
 80167f0:	f7fe fb3c 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 80167f4:	19bb      	adds	r3, r7, r6
 80167f6:	781a      	ldrb	r2, [r3, #0]
 80167f8:	4974      	ldr	r1, [pc, #464]	; (80169cc <Send_DpmInitCnf+0x378>)
 80167fa:	2068      	movs	r0, #104	; 0x68
 80167fc:	0013      	movs	r3, r2
 80167fe:	00db      	lsls	r3, r3, #3
 8016800:	1a9b      	subs	r3, r3, r2
 8016802:	011b      	lsls	r3, r3, #4
 8016804:	18cb      	adds	r3, r1, r3
 8016806:	181b      	adds	r3, r3, r0
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	07db      	lsls	r3, r3, #31
 801680c:	0fdb      	lsrs	r3, r3, #31
 801680e:	b2db      	uxtb	r3, r3
 8016810:	b29a      	uxth	r2, r3
 8016812:	193b      	adds	r3, r7, r4
 8016814:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 8016816:	193b      	adds	r3, r7, r4
 8016818:	1978      	adds	r0, r7, r5
 801681a:	2201      	movs	r2, #1
 801681c:	2108      	movs	r1, #8
 801681e:	f7fe fb25 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 8016822:	19bb      	adds	r3, r7, r6
 8016824:	781a      	ldrb	r2, [r3, #0]
 8016826:	4969      	ldr	r1, [pc, #420]	; (80169cc <Send_DpmInitCnf+0x378>)
 8016828:	2068      	movs	r0, #104	; 0x68
 801682a:	0013      	movs	r3, r2
 801682c:	00db      	lsls	r3, r3, #3
 801682e:	1a9b      	subs	r3, r3, r2
 8016830:	011b      	lsls	r3, r3, #4
 8016832:	18cb      	adds	r3, r1, r3
 8016834:	181b      	adds	r3, r3, r0
 8016836:	781b      	ldrb	r3, [r3, #0]
 8016838:	079b      	lsls	r3, r3, #30
 801683a:	0fdb      	lsrs	r3, r3, #31
 801683c:	b2db      	uxtb	r3, r3
 801683e:	b29a      	uxth	r2, r3
 8016840:	193b      	adds	r3, r7, r4
 8016842:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 8016844:	193b      	adds	r3, r7, r4
 8016846:	1978      	adds	r0, r7, r5
 8016848:	2201      	movs	r2, #1
 801684a:	2109      	movs	r1, #9
 801684c:	f7fe fb0e 	bl	8014e6c <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 8016850:	210c      	movs	r1, #12
 8016852:	187b      	adds	r3, r7, r1
 8016854:	2200      	movs	r2, #0
 8016856:	701a      	strb	r2, [r3, #0]
 8016858:	187b      	adds	r3, r7, r1
 801685a:	1978      	adds	r0, r7, r5
 801685c:	2201      	movs	r2, #1
 801685e:	210b      	movs	r1, #11
 8016860:	f7fe fb04 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 8016864:	19bb      	adds	r3, r7, r6
 8016866:	781a      	ldrb	r2, [r3, #0]
 8016868:	4957      	ldr	r1, [pc, #348]	; (80169c8 <Send_DpmInitCnf+0x374>)
 801686a:	0013      	movs	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	189b      	adds	r3, r3, r2
 8016870:	009b      	lsls	r3, r3, #2
 8016872:	18cb      	adds	r3, r1, r3
 8016874:	795b      	ldrb	r3, [r3, #5]
 8016876:	071b      	lsls	r3, r3, #28
 8016878:	0f9b      	lsrs	r3, r3, #30
 801687a:	b2db      	uxtb	r3, r3
 801687c:	b29a      	uxth	r2, r3
 801687e:	193b      	adds	r3, r7, r4
 8016880:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 8016882:	193b      	adds	r3, r7, r4
 8016884:	1978      	adds	r0, r7, r5
 8016886:	2201      	movs	r2, #1
 8016888:	2110      	movs	r1, #16
 801688a:	f7fe faef 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 801688e:	19bb      	adds	r3, r7, r6
 8016890:	781a      	ldrb	r2, [r3, #0]
 8016892:	494e      	ldr	r1, [pc, #312]	; (80169cc <Send_DpmInitCnf+0x378>)
 8016894:	2068      	movs	r0, #104	; 0x68
 8016896:	0013      	movs	r3, r2
 8016898:	00db      	lsls	r3, r3, #3
 801689a:	1a9b      	subs	r3, r3, r2
 801689c:	011b      	lsls	r3, r3, #4
 801689e:	18cb      	adds	r3, r1, r3
 80168a0:	181b      	adds	r3, r3, r0
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	06db      	lsls	r3, r3, #27
 80168a6:	0f9b      	lsrs	r3, r3, #30
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	b29a      	uxth	r2, r3
 80168ac:	193b      	adds	r3, r7, r4
 80168ae:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 80168b0:	193b      	adds	r3, r7, r4
 80168b2:	1978      	adds	r0, r7, r5
 80168b4:	2201      	movs	r2, #1
 80168b6:	2112      	movs	r1, #18
 80168b8:	f7fe fad8 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 80168bc:	19bb      	adds	r3, r7, r6
 80168be:	781a      	ldrb	r2, [r3, #0]
 80168c0:	4942      	ldr	r1, [pc, #264]	; (80169cc <Send_DpmInitCnf+0x378>)
 80168c2:	2068      	movs	r0, #104	; 0x68
 80168c4:	0013      	movs	r3, r2
 80168c6:	00db      	lsls	r3, r3, #3
 80168c8:	1a9b      	subs	r3, r3, r2
 80168ca:	011b      	lsls	r3, r3, #4
 80168cc:	18cb      	adds	r3, r1, r3
 80168ce:	181b      	adds	r3, r3, r0
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	069b      	lsls	r3, r3, #26
 80168d4:	0fdb      	lsrs	r3, r3, #31
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	b29a      	uxth	r2, r3
 80168da:	193b      	adds	r3, r7, r4
 80168dc:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 80168de:	193b      	adds	r3, r7, r4
 80168e0:	1978      	adds	r0, r7, r5
 80168e2:	2201      	movs	r2, #1
 80168e4:	2113      	movs	r1, #19
 80168e6:	f7fe fac1 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 80168ea:	19bb      	adds	r3, r7, r6
 80168ec:	781a      	ldrb	r2, [r3, #0]
 80168ee:	4937      	ldr	r1, [pc, #220]	; (80169cc <Send_DpmInitCnf+0x378>)
 80168f0:	2068      	movs	r0, #104	; 0x68
 80168f2:	0013      	movs	r3, r2
 80168f4:	00db      	lsls	r3, r3, #3
 80168f6:	1a9b      	subs	r3, r3, r2
 80168f8:	011b      	lsls	r3, r3, #4
 80168fa:	18cb      	adds	r3, r1, r3
 80168fc:	181b      	adds	r3, r3, r0
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	065b      	lsls	r3, r3, #25
 8016902:	0fdb      	lsrs	r3, r3, #31
 8016904:	b2db      	uxtb	r3, r3
 8016906:	b29a      	uxth	r2, r3
 8016908:	193b      	adds	r3, r7, r4
 801690a:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 801690c:	193b      	adds	r3, r7, r4
 801690e:	1978      	adds	r0, r7, r5
 8016910:	2201      	movs	r2, #1
 8016912:	2114      	movs	r1, #20
 8016914:	f7fe faaa 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 8016918:	19bb      	adds	r3, r7, r6
 801691a:	781a      	ldrb	r2, [r3, #0]
 801691c:	492b      	ldr	r1, [pc, #172]	; (80169cc <Send_DpmInitCnf+0x378>)
 801691e:	2068      	movs	r0, #104	; 0x68
 8016920:	0013      	movs	r3, r2
 8016922:	00db      	lsls	r3, r3, #3
 8016924:	1a9b      	subs	r3, r3, r2
 8016926:	011b      	lsls	r3, r3, #4
 8016928:	18cb      	adds	r3, r1, r3
 801692a:	181b      	adds	r3, r3, r0
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	061b      	lsls	r3, r3, #24
 8016930:	0fdb      	lsrs	r3, r3, #31
 8016932:	b2db      	uxtb	r3, r3
 8016934:	b29a      	uxth	r2, r3
 8016936:	193b      	adds	r3, r7, r4
 8016938:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 801693a:	193b      	adds	r3, r7, r4
 801693c:	1978      	adds	r0, r7, r5
 801693e:	2201      	movs	r2, #1
 8016940:	2115      	movs	r1, #21
 8016942:	f7fe fa93 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 8016946:	19bb      	adds	r3, r7, r6
 8016948:	781a      	ldrb	r2, [r3, #0]
 801694a:	4920      	ldr	r1, [pc, #128]	; (80169cc <Send_DpmInitCnf+0x378>)
 801694c:	2068      	movs	r0, #104	; 0x68
 801694e:	0013      	movs	r3, r2
 8016950:	00db      	lsls	r3, r3, #3
 8016952:	1a9b      	subs	r3, r3, r2
 8016954:	011b      	lsls	r3, r3, #4
 8016956:	18cb      	adds	r3, r1, r3
 8016958:	181b      	adds	r3, r3, r0
 801695a:	781b      	ldrb	r3, [r3, #0]
 801695c:	075b      	lsls	r3, r3, #29
 801695e:	0fdb      	lsrs	r3, r3, #31
 8016960:	b2db      	uxtb	r3, r3
 8016962:	b29a      	uxth	r2, r3
 8016964:	193b      	adds	r3, r7, r4
 8016966:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 8016968:	193b      	adds	r3, r7, r4
 801696a:	1978      	adds	r0, r7, r5
 801696c:	2201      	movs	r2, #1
 801696e:	2116      	movs	r1, #22
 8016970:	f7fe fa7c 	bl	8014e6c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 8016974:	19bb      	adds	r3, r7, r6
 8016976:	781a      	ldrb	r2, [r3, #0]
 8016978:	4914      	ldr	r1, [pc, #80]	; (80169cc <Send_DpmInitCnf+0x378>)
 801697a:	2068      	movs	r0, #104	; 0x68
 801697c:	0013      	movs	r3, r2
 801697e:	00db      	lsls	r3, r3, #3
 8016980:	1a9b      	subs	r3, r3, r2
 8016982:	011b      	lsls	r3, r3, #4
 8016984:	18cb      	adds	r3, r1, r3
 8016986:	181b      	adds	r3, r3, r0
 8016988:	785b      	ldrb	r3, [r3, #1]
 801698a:	07db      	lsls	r3, r3, #31
 801698c:	0fdb      	lsrs	r3, r3, #31
 801698e:	b2db      	uxtb	r3, r3
 8016990:	b29a      	uxth	r2, r3
 8016992:	193b      	adds	r3, r7, r4
 8016994:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 8016996:	193b      	adds	r3, r7, r4
 8016998:	1978      	adds	r0, r7, r5
 801699a:	2201      	movs	r2, #1
 801699c:	2117      	movs	r1, #23
 801699e:	f7fe fa65 	bl	8014e6c <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 80169a2:	197b      	adds	r3, r7, r5
 80169a4:	0018      	movs	r0, r3
 80169a6:	f7fe fbc3 	bl	8015130 <TLV_deinit_encode>
}
 80169aa:	46c0      	nop			; (mov r8, r8)
 80169ac:	46bd      	mov	sp, r7
 80169ae:	b011      	add	sp, #68	; 0x44
 80169b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169b2:	46c0      	nop			; (mov r8, r8)
 80169b4:	20002a48 	.word	0x20002a48
 80169b8:	0801a5e0 	.word	0x0801a5e0
 80169bc:	20002a4c 	.word	0x20002a4c
 80169c0:	0801a5e8 	.word	0x0801a5e8
 80169c4:	20002a3d 	.word	0x20002a3d
 80169c8:	20000080 	.word	0x20000080
 80169cc:	20000094 	.word	0x20000094

080169d0 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 80169d0:	b5b0      	push	{r4, r5, r7, lr}
 80169d2:	b090      	sub	sp, #64	; 0x40
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60b9      	str	r1, [r7, #8]
 80169d8:	607a      	str	r2, [r7, #4]
 80169da:	240f      	movs	r4, #15
 80169dc:	193b      	adds	r3, r7, r4
 80169de:	1c02      	adds	r2, r0, #0
 80169e0:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 80169e2:	233f      	movs	r3, #63	; 0x3f
 80169e4:	18fb      	adds	r3, r7, r3
 80169e6:	2202      	movs	r2, #2
 80169e8:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 80169ea:	68ba      	ldr	r2, [r7, #8]
 80169ec:	252c      	movs	r5, #44	; 0x2c
 80169ee:	197b      	adds	r3, r7, r5
 80169f0:	0011      	movs	r1, r2
 80169f2:	0018      	movs	r0, r3
 80169f4:	f7fe fbae 	bl	8015154 <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80169f8:	193b      	adds	r3, r7, r4
 80169fa:	781b      	ldrb	r3, [r3, #0]
 80169fc:	3301      	adds	r3, #1
 80169fe:	015b      	lsls	r3, r3, #5
 8016a00:	b25b      	sxtb	r3, r3
 8016a02:	220a      	movs	r2, #10
 8016a04:	4313      	orrs	r3, r2
 8016a06:	b25b      	sxtb	r3, r3
 8016a08:	b2d9      	uxtb	r1, r3
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2280      	movs	r2, #128	; 0x80
 8016a0e:	0052      	lsls	r2, r2, #1
 8016a10:	2020      	movs	r0, #32
 8016a12:	1838      	adds	r0, r7, r0
 8016a14:	f7fe f9c7 	bl	8014da6 <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016a18:	2318      	movs	r3, #24
 8016a1a:	18fb      	adds	r3, r7, r3
 8016a1c:	221c      	movs	r2, #28
 8016a1e:	18ba      	adds	r2, r7, r2
 8016a20:	241e      	movs	r4, #30
 8016a22:	1939      	adds	r1, r7, r4
 8016a24:	1978      	adds	r0, r7, r5
 8016a26:	f7fe fbc1 	bl	80151ac <TLV_get>
  switch (tag)
 8016a2a:	193b      	adds	r3, r7, r4
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	2b2b      	cmp	r3, #43	; 0x2b
 8016a30:	d900      	bls.n	8016a34 <Request_MessageReq+0x64>
 8016a32:	e2a8      	b.n	8016f86 <Request_MessageReq+0x5b6>
 8016a34:	009a      	lsls	r2, r3, #2
 8016a36:	4bdb      	ldr	r3, [pc, #876]	; (8016da4 <Request_MessageReq+0x3d4>)
 8016a38:	18d3      	adds	r3, r2, r3
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	469f      	mov	pc, r3
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 8016a3e:	233f      	movs	r3, #63	; 0x3f
 8016a40:	18fc      	adds	r4, r7, r3
 8016a42:	230f      	movs	r3, #15
 8016a44:	18fb      	adds	r3, r7, r3
 8016a46:	781b      	ldrb	r3, [r3, #0]
 8016a48:	0018      	movs	r0, r3
 8016a4a:	f7fc fda3 	bl	8013594 <USBPD_DPM_RequestGotoMin>
 8016a4e:	0003      	movs	r3, r0
 8016a50:	7023      	strb	r3, [r4, #0]
      break;
 8016a52:	e2b7      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 8016a54:	233f      	movs	r3, #63	; 0x3f
 8016a56:	18fc      	adds	r4, r7, r3
 8016a58:	230f      	movs	r3, #15
 8016a5a:	18fb      	adds	r3, r7, r3
 8016a5c:	781b      	ldrb	r3, [r3, #0]
 8016a5e:	0018      	movs	r0, r3
 8016a60:	f7fc fdde 	bl	8013620 <USBPD_DPM_RequestPing>
 8016a64:	0003      	movs	r3, r0
 8016a66:	7023      	strb	r3, [r4, #0]
      break;
 8016a68:	e2ac      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 8016a6a:	233f      	movs	r3, #63	; 0x3f
 8016a6c:	18fc      	adds	r4, r7, r3
 8016a6e:	230f      	movs	r3, #15
 8016a70:	18fb      	adds	r3, r7, r3
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	0018      	movs	r0, r3
 8016a76:	f7fc fe8d 	bl	8013794 <USBPD_DPM_RequestGetSourceCapability>
 8016a7a:	0003      	movs	r3, r0
 8016a7c:	7023      	strb	r3, [r4, #0]
      break;
 8016a7e:	e2a1      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 8016a80:	233f      	movs	r3, #63	; 0x3f
 8016a82:	18fc      	adds	r4, r7, r3
 8016a84:	230f      	movs	r3, #15
 8016a86:	18fb      	adds	r3, r7, r3
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	0018      	movs	r0, r3
 8016a8c:	f7fc fec8 	bl	8013820 <USBPD_DPM_RequestGetSinkCapability>
 8016a90:	0003      	movs	r3, r0
 8016a92:	7023      	strb	r3, [r4, #0]
      break;
 8016a94:	e296      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 8016a96:	233f      	movs	r3, #63	; 0x3f
 8016a98:	18fc      	adds	r4, r7, r3
 8016a9a:	230f      	movs	r3, #15
 8016a9c:	18fb      	adds	r3, r7, r3
 8016a9e:	781b      	ldrb	r3, [r3, #0]
 8016aa0:	0018      	movs	r0, r3
 8016aa2:	f7fc ff03 	bl	80138ac <USBPD_DPM_RequestDataRoleSwap>
 8016aa6:	0003      	movs	r3, r0
 8016aa8:	7023      	strb	r3, [r4, #0]
      break;
 8016aaa:	e28b      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8016aac:	233f      	movs	r3, #63	; 0x3f
 8016aae:	18fc      	adds	r4, r7, r3
 8016ab0:	230f      	movs	r3, #15
 8016ab2:	18fb      	adds	r3, r7, r3
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	0018      	movs	r0, r3
 8016ab8:	f7fc ff3e 	bl	8013938 <USBPD_DPM_RequestPowerRoleSwap>
 8016abc:	0003      	movs	r3, r0
 8016abe:	7023      	strb	r3, [r4, #0]
      break;
 8016ac0:	e280      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 8016ac2:	233f      	movs	r3, #63	; 0x3f
 8016ac4:	18fc      	adds	r4, r7, r3
 8016ac6:	230f      	movs	r3, #15
 8016ac8:	18fb      	adds	r3, r7, r3
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	0018      	movs	r0, r3
 8016ace:	f7fc ff69 	bl	80139a4 <USBPD_DPM_RequestVconnSwap>
 8016ad2:	0003      	movs	r3, r0
 8016ad4:	7023      	strb	r3, [r4, #0]
      break;
 8016ad6:	e275      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 8016ad8:	233f      	movs	r3, #63	; 0x3f
 8016ada:	18fc      	adds	r4, r7, r3
 8016adc:	230f      	movs	r3, #15
 8016ade:	18fb      	adds	r3, r7, r3
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	0018      	movs	r0, r3
 8016ae4:	f7fc ffee 	bl	8013ac4 <USBPD_DPM_RequestSourceCapability>
 8016ae8:	0003      	movs	r3, r0
 8016aea:	7023      	strb	r3, [r4, #0]
      break;
 8016aec:	e26a      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 8016aee:	233c      	movs	r3, #60	; 0x3c
 8016af0:	18fb      	adds	r3, r7, r3
 8016af2:	2200      	movs	r2, #0
 8016af4:	801a      	strh	r2, [r3, #0]
      uint8_t nb_expected_tag = 0U;
 8016af6:	233b      	movs	r3, #59	; 0x3b
 8016af8:	18fb      	adds	r3, r7, r3
 8016afa:	2200      	movs	r2, #0
 8016afc:	701a      	strb	r2, [r3, #0]
      uint8_t index_pdo = 0;
 8016afe:	233a      	movs	r3, #58	; 0x3a
 8016b00:	18fb      	adds	r3, r7, r3
 8016b02:	2200      	movs	r2, #0
 8016b04:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8016b06:	211c      	movs	r1, #28
 8016b08:	187b      	adds	r3, r7, r1
 8016b0a:	881a      	ldrh	r2, [r3, #0]
 8016b0c:	2380      	movs	r3, #128	; 0x80
 8016b0e:	005b      	lsls	r3, r3, #1
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d900      	bls.n	8016b16 <Request_MessageReq+0x146>
 8016b14:	e239      	b.n	8016f8a <Request_MessageReq+0x5ba>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016b16:	2318      	movs	r3, #24
 8016b18:	18fb      	adds	r3, r7, r3
 8016b1a:	187a      	adds	r2, r7, r1
 8016b1c:	211e      	movs	r1, #30
 8016b1e:	1879      	adds	r1, r7, r1
 8016b20:	202c      	movs	r0, #44	; 0x2c
 8016b22:	1838      	adds	r0, r7, r0
 8016b24:	f7fe fb42 	bl	80151ac <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8016b28:	e02c      	b.n	8016b84 <Request_MessageReq+0x1b4>
      {
        nb_expected_tag++;
 8016b2a:	213b      	movs	r1, #59	; 0x3b
 8016b2c:	187b      	adds	r3, r7, r1
 8016b2e:	781a      	ldrb	r2, [r3, #0]
 8016b30:	187b      	adds	r3, r7, r1
 8016b32:	3201      	adds	r2, #1
 8016b34:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 8016b36:	231e      	movs	r3, #30
 8016b38:	18fb      	adds	r3, r7, r3
 8016b3a:	781b      	ldrb	r3, [r3, #0]
 8016b3c:	2b01      	cmp	r3, #1
 8016b3e:	d105      	bne.n	8016b4c <Request_MessageReq+0x17c>
        {
          index_pdo = value[0];
 8016b40:	69ba      	ldr	r2, [r7, #24]
 8016b42:	233a      	movs	r3, #58	; 0x3a
 8016b44:	18fb      	adds	r3, r7, r3
 8016b46:	7812      	ldrb	r2, [r2, #0]
 8016b48:	701a      	strb	r2, [r3, #0]
 8016b4a:	e011      	b.n	8016b70 <Request_MessageReq+0x1a0>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 8016b4c:	231e      	movs	r3, #30
 8016b4e:	18fb      	adds	r3, r7, r3
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	2b02      	cmp	r3, #2
 8016b54:	d10c      	bne.n	8016b70 <Request_MessageReq+0x1a0>
        {
          voltage = USBPD_LE16(&value[0]);
 8016b56:	69bb      	ldr	r3, [r7, #24]
 8016b58:	781b      	ldrb	r3, [r3, #0]
 8016b5a:	b299      	uxth	r1, r3
 8016b5c:	69bb      	ldr	r3, [r7, #24]
 8016b5e:	3301      	adds	r3, #1
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	b29b      	uxth	r3, r3
 8016b64:	021b      	lsls	r3, r3, #8
 8016b66:	b29a      	uxth	r2, r3
 8016b68:	233c      	movs	r3, #60	; 0x3c
 8016b6a:	18fb      	adds	r3, r7, r3
 8016b6c:	188a      	adds	r2, r1, r2
 8016b6e:	801a      	strh	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016b70:	2318      	movs	r3, #24
 8016b72:	18fb      	adds	r3, r7, r3
 8016b74:	221c      	movs	r2, #28
 8016b76:	18ba      	adds	r2, r7, r2
 8016b78:	211e      	movs	r1, #30
 8016b7a:	1879      	adds	r1, r7, r1
 8016b7c:	202c      	movs	r0, #44	; 0x2c
 8016b7e:	1838      	adds	r0, r7, r0
 8016b80:	f7fe fb14 	bl	80151ac <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8016b84:	221c      	movs	r2, #28
 8016b86:	18bb      	adds	r3, r7, r2
 8016b88:	881b      	ldrh	r3, [r3, #0]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d008      	beq.n	8016ba0 <Request_MessageReq+0x1d0>
 8016b8e:	18bb      	adds	r3, r7, r2
 8016b90:	881b      	ldrh	r3, [r3, #0]
 8016b92:	2bff      	cmp	r3, #255	; 0xff
 8016b94:	d804      	bhi.n	8016ba0 <Request_MessageReq+0x1d0>
 8016b96:	233b      	movs	r3, #59	; 0x3b
 8016b98:	18fb      	adds	r3, r7, r3
 8016b9a:	781b      	ldrb	r3, [r3, #0]
 8016b9c:	2b01      	cmp	r3, #1
 8016b9e:	d9c4      	bls.n	8016b2a <Request_MessageReq+0x15a>
      }
      if (2U == nb_expected_tag)
 8016ba0:	233b      	movs	r3, #59	; 0x3b
 8016ba2:	18fb      	adds	r3, r7, r3
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	2b02      	cmp	r3, #2
 8016ba8:	d000      	beq.n	8016bac <Request_MessageReq+0x1dc>
 8016baa:	e1f0      	b.n	8016f8e <Request_MessageReq+0x5be>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8016bac:	233f      	movs	r3, #63	; 0x3f
 8016bae:	18fc      	adds	r4, r7, r3
 8016bb0:	233c      	movs	r3, #60	; 0x3c
 8016bb2:	18fb      	adds	r3, r7, r3
 8016bb4:	881a      	ldrh	r2, [r3, #0]
 8016bb6:	233a      	movs	r3, #58	; 0x3a
 8016bb8:	18fb      	adds	r3, r7, r3
 8016bba:	7819      	ldrb	r1, [r3, #0]
 8016bbc:	230f      	movs	r3, #15
 8016bbe:	18fb      	adds	r3, r7, r3
 8016bc0:	781b      	ldrb	r3, [r3, #0]
 8016bc2:	0018      	movs	r0, r3
 8016bc4:	f7fc fd72 	bl	80136ac <USBPD_DPM_RequestMessageRequest>
 8016bc8:	0003      	movs	r3, r0
 8016bca:	7023      	strb	r3, [r4, #0]
      }
      break;
 8016bcc:	e1df      	b.n	8016f8e <Request_MessageReq+0x5be>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016bce:	2318      	movs	r3, #24
 8016bd0:	18fb      	adds	r3, r7, r3
 8016bd2:	221c      	movs	r2, #28
 8016bd4:	18ba      	adds	r2, r7, r2
 8016bd6:	241e      	movs	r4, #30
 8016bd8:	1939      	adds	r1, r7, r4
 8016bda:	202c      	movs	r0, #44	; 0x2c
 8016bdc:	1838      	adds	r0, r7, r0
 8016bde:	f7fe fae5 	bl	80151ac <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8016be2:	193b      	adds	r3, r7, r4
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d000      	beq.n	8016bec <Request_MessageReq+0x21c>
 8016bea:	e1d2      	b.n	8016f92 <Request_MessageReq+0x5c2>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 8016bec:	69bb      	ldr	r3, [r7, #24]
 8016bee:	781a      	ldrb	r2, [r3, #0]
 8016bf0:	233f      	movs	r3, #63	; 0x3f
 8016bf2:	18fc      	adds	r4, r7, r3
 8016bf4:	230f      	movs	r3, #15
 8016bf6:	18fb      	adds	r3, r7, r3
 8016bf8:	781b      	ldrb	r3, [r3, #0]
 8016bfa:	0011      	movs	r1, r2
 8016bfc:	0018      	movs	r0, r3
 8016bfe:	f7fc ff17 	bl	8013a30 <USBPD_DPM_RequestSoftReset>
 8016c02:	0003      	movs	r3, r0
 8016c04:	7023      	strb	r3, [r4, #0]
      }
      break;
 8016c06:	e1c4      	b.n	8016f92 <Request_MessageReq+0x5c2>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 8016c08:	233f      	movs	r3, #63	; 0x3f
 8016c0a:	18fc      	adds	r4, r7, r3
 8016c0c:	230f      	movs	r3, #15
 8016c0e:	18fb      	adds	r3, r7, r3
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	0018      	movs	r0, r3
 8016c14:	f7fc fc36 	bl	8013484 <USBPD_DPM_RequestHardReset>
 8016c18:	0003      	movs	r3, r0
 8016c1a:	7023      	strb	r3, [r4, #0]
      break;
 8016c1c:	e1d2      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 8016c1e:	233f      	movs	r3, #63	; 0x3f
 8016c20:	18fc      	adds	r4, r7, r3
 8016c22:	230f      	movs	r3, #15
 8016c24:	18fb      	adds	r3, r7, r3
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	0018      	movs	r0, r3
 8016c2a:	f7fc fc6f 	bl	801350c <USBPD_DPM_RequestCableReset>
 8016c2e:	0003      	movs	r3, r0
 8016c30:	7023      	strb	r3, [r4, #0]
      break;
 8016c32:	e1c7      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 8016c34:	2339      	movs	r3, #57	; 0x39
 8016c36:	18fb      	adds	r3, r7, r3
 8016c38:	2200      	movs	r2, #0
 8016c3a:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8016c3c:	211c      	movs	r1, #28
 8016c3e:	187b      	adds	r3, r7, r1
 8016c40:	881a      	ldrh	r2, [r3, #0]
 8016c42:	2380      	movs	r3, #128	; 0x80
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d900      	bls.n	8016c4c <Request_MessageReq+0x27c>
 8016c4a:	e1a4      	b.n	8016f96 <Request_MessageReq+0x5c6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016c4c:	2318      	movs	r3, #24
 8016c4e:	18fb      	adds	r3, r7, r3
 8016c50:	187a      	adds	r2, r7, r1
 8016c52:	211e      	movs	r1, #30
 8016c54:	1879      	adds	r1, r7, r1
 8016c56:	202c      	movs	r0, #44	; 0x2c
 8016c58:	1838      	adds	r0, r7, r0
 8016c5a:	f7fe faa7 	bl	80151ac <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8016c5e:	e005      	b.n	8016c6c <Request_MessageReq+0x29c>
      {
        nb_expected_tag++;
 8016c60:	2139      	movs	r1, #57	; 0x39
 8016c62:	187b      	adds	r3, r7, r1
 8016c64:	781a      	ldrb	r2, [r3, #0]
 8016c66:	187b      	adds	r3, r7, r1
 8016c68:	3201      	adds	r2, #1
 8016c6a:	701a      	strb	r2, [r3, #0]
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8016c6c:	221c      	movs	r2, #28
 8016c6e:	18bb      	adds	r3, r7, r2
 8016c70:	881b      	ldrh	r3, [r3, #0]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d008      	beq.n	8016c88 <Request_MessageReq+0x2b8>
 8016c76:	18bb      	adds	r3, r7, r2
 8016c78:	881b      	ldrh	r3, [r3, #0]
 8016c7a:	2bff      	cmp	r3, #255	; 0xff
 8016c7c:	d804      	bhi.n	8016c88 <Request_MessageReq+0x2b8>
 8016c7e:	2339      	movs	r3, #57	; 0x39
 8016c80:	18fb      	adds	r3, r7, r3
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d0eb      	beq.n	8016c60 <Request_MessageReq+0x290>
      }
      if (1U == nb_expected_tag)
 8016c88:	2339      	movs	r3, #57	; 0x39
 8016c8a:	18fb      	adds	r3, r7, r3
 8016c8c:	781b      	ldrb	r3, [r3, #0]
 8016c8e:	2b01      	cmp	r3, #1
 8016c90:	d000      	beq.n	8016c94 <Request_MessageReq+0x2c4>
 8016c92:	e182      	b.n	8016f9a <Request_MessageReq+0x5ca>
      {
        status = Manage_FreeText(PortNum, value, length);
 8016c94:	69b9      	ldr	r1, [r7, #24]
 8016c96:	231c      	movs	r3, #28
 8016c98:	18fb      	adds	r3, r7, r3
 8016c9a:	881a      	ldrh	r2, [r3, #0]
 8016c9c:	233f      	movs	r3, #63	; 0x3f
 8016c9e:	18fc      	adds	r4, r7, r3
 8016ca0:	230f      	movs	r3, #15
 8016ca2:	18fb      	adds	r3, r7, r3
 8016ca4:	781b      	ldrb	r3, [r3, #0]
 8016ca6:	0018      	movs	r0, r3
 8016ca8:	f001 f9e8 	bl	801807c <Manage_FreeText>
 8016cac:	0003      	movs	r3, r0
 8016cae:	7023      	strb	r3, [r4, #0]
      }
      break;
 8016cb0:	e173      	b.n	8016f9a <Request_MessageReq+0x5ca>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 8016cb2:	233f      	movs	r3, #63	; 0x3f
 8016cb4:	18fc      	adds	r4, r7, r3
 8016cb6:	230f      	movs	r3, #15
 8016cb8:	18fb      	adds	r3, r7, r3
 8016cba:	781b      	ldrb	r3, [r3, #0]
 8016cbc:	0018      	movs	r0, r3
 8016cbe:	f7fd f8ed 	bl	8013e9c <USBPD_DPM_RequestFastRoleSwap>
 8016cc2:	0003      	movs	r3, r0
 8016cc4:	7023      	strb	r3, [r4, #0]
      break;
 8016cc6:	e17d      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 8016cc8:	233f      	movs	r3, #63	; 0x3f
 8016cca:	18fc      	adds	r4, r7, r3
 8016ccc:	230f      	movs	r3, #15
 8016cce:	18fb      	adds	r3, r7, r3
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	0018      	movs	r0, r3
 8016cd4:	f7fd f856 	bl	8013d84 <USBPD_DPM_RequestGetPPS_Status>
 8016cd8:	0003      	movs	r3, r0
 8016cda:	7023      	strb	r3, [r4, #0]
      break;
 8016cdc:	e172      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 8016cde:	233f      	movs	r3, #63	; 0x3f
 8016ce0:	18fc      	adds	r4, r7, r3
 8016ce2:	230f      	movs	r3, #15
 8016ce4:	18fb      	adds	r3, r7, r3
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	0018      	movs	r0, r3
 8016cea:	f7fd f91d 	bl	8013f28 <USBPD_DPM_RequestGetCountryCodes>
 8016cee:	0003      	movs	r3, r0
 8016cf0:	7023      	strb	r3, [r4, #0]
      break;
 8016cf2:	e167      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 8016cf4:	233f      	movs	r3, #63	; 0x3f
 8016cf6:	18fc      	adds	r4, r7, r3
 8016cf8:	230f      	movs	r3, #15
 8016cfa:	18fb      	adds	r3, r7, r3
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	0018      	movs	r0, r3
 8016d00:	f7fd f886 	bl	8013e10 <USBPD_DPM_RequestGetStatus>
 8016d04:	0003      	movs	r3, r0
 8016d06:	7023      	strb	r3, [r4, #0]
      break;
 8016d08:	e15c      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 8016d0a:	233f      	movs	r3, #63	; 0x3f
 8016d0c:	18fc      	adds	r4, r7, r3
 8016d0e:	230f      	movs	r3, #15
 8016d10:	18fb      	adds	r3, r7, r3
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	0018      	movs	r0, r3
 8016d16:	f7fc ff63 	bl	8013be0 <USBPD_DPM_RequestGetSourceCapabilityExt>
 8016d1a:	0003      	movs	r3, r0
 8016d1c:	7023      	strb	r3, [r4, #0]
      break;
 8016d1e:	e151      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 8016d20:	233f      	movs	r3, #63	; 0x3f
 8016d22:	18fc      	adds	r4, r7, r3
 8016d24:	230f      	movs	r3, #15
 8016d26:	18fb      	adds	r3, r7, r3
 8016d28:	781b      	ldrb	r3, [r3, #0]
 8016d2a:	0018      	movs	r0, r3
 8016d2c:	f7fc ff9e 	bl	8013c6c <USBPD_DPM_RequestGetSinkCapabilityExt>
 8016d30:	0003      	movs	r3, r0
 8016d32:	7023      	strb	r3, [r4, #0]
      break;
 8016d34:	e146      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 8016d36:	211c      	movs	r1, #28
 8016d38:	187b      	adds	r3, r7, r1
 8016d3a:	881a      	ldrh	r2, [r3, #0]
 8016d3c:	2380      	movs	r3, #128	; 0x80
 8016d3e:	005b      	lsls	r3, r3, #1
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d900      	bls.n	8016d46 <Request_MessageReq+0x376>
 8016d44:	e12b      	b.n	8016f9e <Request_MessageReq+0x5ce>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016d46:	2318      	movs	r3, #24
 8016d48:	18fb      	adds	r3, r7, r3
 8016d4a:	187a      	adds	r2, r7, r1
 8016d4c:	241e      	movs	r4, #30
 8016d4e:	1939      	adds	r1, r7, r4
 8016d50:	202c      	movs	r0, #44	; 0x2c
 8016d52:	1838      	adds	r0, r7, r0
 8016d54:	f7fe fa2a 	bl	80151ac <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 8016d58:	193b      	adds	r3, r7, r4
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	2b04      	cmp	r3, #4
 8016d5e:	d000      	beq.n	8016d62 <Request_MessageReq+0x392>
 8016d60:	e11f      	b.n	8016fa2 <Request_MessageReq+0x5d2>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	001a      	movs	r2, r3
 8016d68:	69bb      	ldr	r3, [r7, #24]
 8016d6a:	3301      	adds	r3, #1
 8016d6c:	781b      	ldrb	r3, [r3, #0]
 8016d6e:	021b      	lsls	r3, r3, #8
 8016d70:	18d2      	adds	r2, r2, r3
 8016d72:	69bb      	ldr	r3, [r7, #24]
 8016d74:	3302      	adds	r3, #2
 8016d76:	781b      	ldrb	r3, [r3, #0]
 8016d78:	041b      	lsls	r3, r3, #16
 8016d7a:	18d2      	adds	r2, r2, r3
 8016d7c:	69bb      	ldr	r3, [r7, #24]
 8016d7e:	3303      	adds	r3, #3
 8016d80:	781b      	ldrb	r3, [r3, #0]
 8016d82:	061b      	lsls	r3, r3, #24
 8016d84:	18d3      	adds	r3, r2, r3
 8016d86:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 8016d88:	233f      	movs	r3, #63	; 0x3f
 8016d8a:	18fc      	adds	r4, r7, r3
 8016d8c:	697a      	ldr	r2, [r7, #20]
 8016d8e:	230f      	movs	r3, #15
 8016d90:	18fb      	adds	r3, r7, r3
 8016d92:	781b      	ldrb	r3, [r3, #0]
 8016d94:	0011      	movs	r1, r2
 8016d96:	0018      	movs	r0, r3
 8016d98:	f7fc feda 	bl	8013b50 <USBPD_DPM_RequestAlert>
 8016d9c:	0003      	movs	r3, r0
 8016d9e:	7023      	strb	r3, [r4, #0]
      }
      break;
 8016da0:	e0ff      	b.n	8016fa2 <Request_MessageReq+0x5d2>
 8016da2:	46c0      	nop			; (mov r8, r8)
 8016da4:	0801a9f4 	.word	0x0801a9f4
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 8016da8:	211c      	movs	r1, #28
 8016daa:	187b      	adds	r3, r7, r1
 8016dac:	881a      	ldrh	r2, [r3, #0]
 8016dae:	2380      	movs	r3, #128	; 0x80
 8016db0:	005b      	lsls	r3, r3, #1
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d900      	bls.n	8016db8 <Request_MessageReq+0x3e8>
 8016db6:	e0f6      	b.n	8016fa6 <Request_MessageReq+0x5d6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016db8:	2318      	movs	r3, #24
 8016dba:	18fb      	adds	r3, r7, r3
 8016dbc:	187a      	adds	r2, r7, r1
 8016dbe:	241e      	movs	r4, #30
 8016dc0:	1939      	adds	r1, r7, r4
 8016dc2:	202c      	movs	r0, #44	; 0x2c
 8016dc4:	1838      	adds	r0, r7, r0
 8016dc6:	f7fe f9f1 	bl	80151ac <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 8016dca:	193b      	adds	r3, r7, r4
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	2b05      	cmp	r3, #5
 8016dd0:	d000      	beq.n	8016dd4 <Request_MessageReq+0x404>
 8016dd2:	e0ea      	b.n	8016faa <Request_MessageReq+0x5da>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 8016dd4:	69bb      	ldr	r3, [r7, #24]
 8016dd6:	781b      	ldrb	r3, [r3, #0]
 8016dd8:	b299      	uxth	r1, r3
 8016dda:	69bb      	ldr	r3, [r7, #24]
 8016ddc:	3301      	adds	r3, #1
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	021b      	lsls	r3, r3, #8
 8016de4:	b29a      	uxth	r2, r3
 8016de6:	2034      	movs	r0, #52	; 0x34
 8016de8:	183b      	adds	r3, r7, r0
 8016dea:	188a      	adds	r2, r1, r2
 8016dec:	801a      	strh	r2, [r3, #0]
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 8016dee:	233f      	movs	r3, #63	; 0x3f
 8016df0:	18fc      	adds	r4, r7, r3
 8016df2:	183b      	adds	r3, r7, r0
 8016df4:	881a      	ldrh	r2, [r3, #0]
 8016df6:	230f      	movs	r3, #15
 8016df8:	18fb      	adds	r3, r7, r3
 8016dfa:	781b      	ldrb	r3, [r3, #0]
 8016dfc:	0011      	movs	r1, r2
 8016dfe:	0018      	movs	r0, r3
 8016e00:	f7fd f8d8 	bl	8013fb4 <USBPD_DPM_RequestGetCountryInfo>
 8016e04:	0003      	movs	r3, r0
 8016e06:	7023      	strb	r3, [r4, #0]
      }
      break;
 8016e08:	e0cf      	b.n	8016faa <Request_MessageReq+0x5da>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 8016e0a:	211c      	movs	r1, #28
 8016e0c:	187b      	adds	r3, r7, r1
 8016e0e:	881a      	ldrh	r2, [r3, #0]
 8016e10:	2380      	movs	r3, #128	; 0x80
 8016e12:	005b      	lsls	r3, r3, #1
 8016e14:	429a      	cmp	r2, r3
 8016e16:	d900      	bls.n	8016e1a <Request_MessageReq+0x44a>
 8016e18:	e0c9      	b.n	8016fae <Request_MessageReq+0x5de>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016e1a:	2318      	movs	r3, #24
 8016e1c:	18fb      	adds	r3, r7, r3
 8016e1e:	187a      	adds	r2, r7, r1
 8016e20:	241e      	movs	r4, #30
 8016e22:	1939      	adds	r1, r7, r4
 8016e24:	202c      	movs	r0, #44	; 0x2c
 8016e26:	1838      	adds	r0, r7, r0
 8016e28:	f7fe f9c0 	bl	80151ac <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8016e2c:	193b      	adds	r3, r7, r4
 8016e2e:	781b      	ldrb	r3, [r3, #0]
 8016e30:	2b0c      	cmp	r3, #12
 8016e32:	d000      	beq.n	8016e36 <Request_MessageReq+0x466>
 8016e34:	e0bd      	b.n	8016fb2 <Request_MessageReq+0x5e2>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 8016e36:	69ba      	ldr	r2, [r7, #24]
 8016e38:	233f      	movs	r3, #63	; 0x3f
 8016e3a:	18fc      	adds	r4, r7, r3
 8016e3c:	230f      	movs	r3, #15
 8016e3e:	18fb      	adds	r3, r7, r3
 8016e40:	781b      	ldrb	r3, [r3, #0]
 8016e42:	0011      	movs	r1, r2
 8016e44:	0018      	movs	r0, r3
 8016e46:	f7fd f8ff 	bl	8014048 <USBPD_DPM_RequestGetBatteryCapability>
 8016e4a:	0003      	movs	r3, r0
 8016e4c:	7023      	strb	r3, [r4, #0]
      }
      break;
 8016e4e:	e0b0      	b.n	8016fb2 <Request_MessageReq+0x5e2>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 8016e50:	211c      	movs	r1, #28
 8016e52:	187b      	adds	r3, r7, r1
 8016e54:	881a      	ldrh	r2, [r3, #0]
 8016e56:	2380      	movs	r3, #128	; 0x80
 8016e58:	005b      	lsls	r3, r3, #1
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d900      	bls.n	8016e60 <Request_MessageReq+0x490>
 8016e5e:	e0aa      	b.n	8016fb6 <Request_MessageReq+0x5e6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016e60:	2318      	movs	r3, #24
 8016e62:	18fb      	adds	r3, r7, r3
 8016e64:	187a      	adds	r2, r7, r1
 8016e66:	241e      	movs	r4, #30
 8016e68:	1939      	adds	r1, r7, r4
 8016e6a:	202c      	movs	r0, #44	; 0x2c
 8016e6c:	1838      	adds	r0, r7, r0
 8016e6e:	f7fe f99d 	bl	80151ac <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8016e72:	193b      	adds	r3, r7, r4
 8016e74:	781b      	ldrb	r3, [r3, #0]
 8016e76:	2b0c      	cmp	r3, #12
 8016e78:	d000      	beq.n	8016e7c <Request_MessageReq+0x4ac>
 8016e7a:	e09e      	b.n	8016fba <Request_MessageReq+0x5ea>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 8016e7c:	69ba      	ldr	r2, [r7, #24]
 8016e7e:	233f      	movs	r3, #63	; 0x3f
 8016e80:	18fc      	adds	r4, r7, r3
 8016e82:	230f      	movs	r3, #15
 8016e84:	18fb      	adds	r3, r7, r3
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	0011      	movs	r1, r2
 8016e8a:	0018      	movs	r0, r3
 8016e8c:	f7fd f926 	bl	80140dc <USBPD_DPM_RequestGetBatteryStatus>
 8016e90:	0003      	movs	r3, r0
 8016e92:	7023      	strb	r3, [r4, #0]
      }
      break;
 8016e94:	e091      	b.n	8016fba <Request_MessageReq+0x5ea>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint8_t manu_info[2];
      uint8_t nb_expected_tag = 0U;
 8016e96:	2338      	movs	r3, #56	; 0x38
 8016e98:	18fb      	adds	r3, r7, r3
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	701a      	strb	r2, [r3, #0]
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 8016e9e:	2337      	movs	r3, #55	; 0x37
 8016ea0:	18fb      	adds	r3, r7, r3
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8016ea6:	211c      	movs	r1, #28
 8016ea8:	187b      	adds	r3, r7, r1
 8016eaa:	881a      	ldrh	r2, [r3, #0]
 8016eac:	2380      	movs	r3, #128	; 0x80
 8016eae:	005b      	lsls	r3, r3, #1
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d900      	bls.n	8016eb6 <Request_MessageReq+0x4e6>
 8016eb4:	e083      	b.n	8016fbe <Request_MessageReq+0x5ee>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016eb6:	2318      	movs	r3, #24
 8016eb8:	18fb      	adds	r3, r7, r3
 8016eba:	187a      	adds	r2, r7, r1
 8016ebc:	211e      	movs	r1, #30
 8016ebe:	1879      	adds	r1, r7, r1
 8016ec0:	202c      	movs	r0, #44	; 0x2c
 8016ec2:	1838      	adds	r0, r7, r0
 8016ec4:	f7fe f972 	bl	80151ac <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8016ec8:	e02f      	b.n	8016f2a <Request_MessageReq+0x55a>
      {
        nb_expected_tag++;
 8016eca:	2138      	movs	r1, #56	; 0x38
 8016ecc:	187b      	adds	r3, r7, r1
 8016ece:	781a      	ldrb	r2, [r3, #0]
 8016ed0:	187b      	adds	r3, r7, r1
 8016ed2:	3201      	adds	r2, #1
 8016ed4:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8016ed6:	231e      	movs	r3, #30
 8016ed8:	18fb      	adds	r3, r7, r3
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d105      	bne.n	8016eec <Request_MessageReq+0x51c>
        {
          sop = value[0];
 8016ee0:	69ba      	ldr	r2, [r7, #24]
 8016ee2:	2337      	movs	r3, #55	; 0x37
 8016ee4:	18fb      	adds	r3, r7, r3
 8016ee6:	7812      	ldrb	r2, [r2, #0]
 8016ee8:	701a      	strb	r2, [r3, #0]
 8016eea:	e014      	b.n	8016f16 <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8016eec:	231e      	movs	r3, #30
 8016eee:	18fb      	adds	r3, r7, r3
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	2b0c      	cmp	r3, #12
 8016ef4:	d105      	bne.n	8016f02 <Request_MessageReq+0x532>
        {
          manu_info[1] = value[0];
 8016ef6:	69bb      	ldr	r3, [r7, #24]
 8016ef8:	781a      	ldrb	r2, [r3, #0]
 8016efa:	2310      	movs	r3, #16
 8016efc:	18fb      	adds	r3, r7, r3
 8016efe:	705a      	strb	r2, [r3, #1]
 8016f00:	e009      	b.n	8016f16 <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 8016f02:	231e      	movs	r3, #30
 8016f04:	18fb      	adds	r3, r7, r3
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	2b0d      	cmp	r3, #13
 8016f0a:	d104      	bne.n	8016f16 <Request_MessageReq+0x546>
        {
          manu_info[0] = value[0];
 8016f0c:	69bb      	ldr	r3, [r7, #24]
 8016f0e:	781a      	ldrb	r2, [r3, #0]
 8016f10:	2310      	movs	r3, #16
 8016f12:	18fb      	adds	r3, r7, r3
 8016f14:	701a      	strb	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8016f16:	2318      	movs	r3, #24
 8016f18:	18fb      	adds	r3, r7, r3
 8016f1a:	221c      	movs	r2, #28
 8016f1c:	18ba      	adds	r2, r7, r2
 8016f1e:	211e      	movs	r1, #30
 8016f20:	1879      	adds	r1, r7, r1
 8016f22:	202c      	movs	r0, #44	; 0x2c
 8016f24:	1838      	adds	r0, r7, r0
 8016f26:	f7fe f941 	bl	80151ac <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8016f2a:	221c      	movs	r2, #28
 8016f2c:	18bb      	adds	r3, r7, r2
 8016f2e:	881b      	ldrh	r3, [r3, #0]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d008      	beq.n	8016f46 <Request_MessageReq+0x576>
 8016f34:	18bb      	adds	r3, r7, r2
 8016f36:	881b      	ldrh	r3, [r3, #0]
 8016f38:	2bff      	cmp	r3, #255	; 0xff
 8016f3a:	d804      	bhi.n	8016f46 <Request_MessageReq+0x576>
 8016f3c:	2338      	movs	r3, #56	; 0x38
 8016f3e:	18fb      	adds	r3, r7, r3
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	2b02      	cmp	r3, #2
 8016f44:	d9c1      	bls.n	8016eca <Request_MessageReq+0x4fa>
      }
      if (3U == nb_expected_tag)
 8016f46:	2338      	movs	r3, #56	; 0x38
 8016f48:	18fb      	adds	r3, r7, r3
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	2b03      	cmp	r3, #3
 8016f4e:	d138      	bne.n	8016fc2 <Request_MessageReq+0x5f2>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 8016f50:	233f      	movs	r3, #63	; 0x3f
 8016f52:	18fc      	adds	r4, r7, r3
 8016f54:	2310      	movs	r3, #16
 8016f56:	18fa      	adds	r2, r7, r3
 8016f58:	2337      	movs	r3, #55	; 0x37
 8016f5a:	18fb      	adds	r3, r7, r3
 8016f5c:	7819      	ldrb	r1, [r3, #0]
 8016f5e:	230f      	movs	r3, #15
 8016f60:	18fb      	adds	r3, r7, r3
 8016f62:	781b      	ldrb	r3, [r3, #0]
 8016f64:	0018      	movs	r0, r3
 8016f66:	f7fc feb7 	bl	8013cd8 <USBPD_DPM_RequestGetManufacturerInfo>
 8016f6a:	0003      	movs	r3, r0
 8016f6c:	7023      	strb	r3, [r4, #0]
      }
      break;
 8016f6e:	e028      	b.n	8016fc2 <Request_MessageReq+0x5f2>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 8016f70:	233f      	movs	r3, #63	; 0x3f
 8016f72:	18fc      	adds	r4, r7, r3
 8016f74:	230f      	movs	r3, #15
 8016f76:	18fb      	adds	r3, r7, r3
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	0018      	movs	r0, r3
 8016f7c:	f7fd f8f8 	bl	8014170 <USBPD_DPM_RequestSecurityRequest>
 8016f80:	0003      	movs	r3, r0
 8016f82:	7023      	strb	r3, [r4, #0]
      break;
 8016f84:	e01e      	b.n	8016fc4 <Request_MessageReq+0x5f4>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 8016f86:	46c0      	nop			; (mov r8, r8)
 8016f88:	e01c      	b.n	8016fc4 <Request_MessageReq+0x5f4>
        break;
 8016f8a:	46c0      	nop			; (mov r8, r8)
 8016f8c:	e01a      	b.n	8016fc4 <Request_MessageReq+0x5f4>
      break;
 8016f8e:	46c0      	nop			; (mov r8, r8)
 8016f90:	e018      	b.n	8016fc4 <Request_MessageReq+0x5f4>
      break;
 8016f92:	46c0      	nop			; (mov r8, r8)
 8016f94:	e016      	b.n	8016fc4 <Request_MessageReq+0x5f4>
        break;
 8016f96:	46c0      	nop			; (mov r8, r8)
 8016f98:	e014      	b.n	8016fc4 <Request_MessageReq+0x5f4>
      break;
 8016f9a:	46c0      	nop			; (mov r8, r8)
 8016f9c:	e012      	b.n	8016fc4 <Request_MessageReq+0x5f4>
        break;
 8016f9e:	46c0      	nop			; (mov r8, r8)
 8016fa0:	e010      	b.n	8016fc4 <Request_MessageReq+0x5f4>
      break;
 8016fa2:	46c0      	nop			; (mov r8, r8)
 8016fa4:	e00e      	b.n	8016fc4 <Request_MessageReq+0x5f4>
        break;
 8016fa6:	46c0      	nop			; (mov r8, r8)
 8016fa8:	e00c      	b.n	8016fc4 <Request_MessageReq+0x5f4>
      break;
 8016faa:	46c0      	nop			; (mov r8, r8)
 8016fac:	e00a      	b.n	8016fc4 <Request_MessageReq+0x5f4>
        break;
 8016fae:	46c0      	nop			; (mov r8, r8)
 8016fb0:	e008      	b.n	8016fc4 <Request_MessageReq+0x5f4>
      break;
 8016fb2:	46c0      	nop			; (mov r8, r8)
 8016fb4:	e006      	b.n	8016fc4 <Request_MessageReq+0x5f4>
        break;
 8016fb6:	46c0      	nop			; (mov r8, r8)
 8016fb8:	e004      	b.n	8016fc4 <Request_MessageReq+0x5f4>
      break;
 8016fba:	46c0      	nop			; (mov r8, r8)
 8016fbc:	e002      	b.n	8016fc4 <Request_MessageReq+0x5f4>
        break;
 8016fbe:	46c0      	nop			; (mov r8, r8)
 8016fc0:	e000      	b.n	8016fc4 <Request_MessageReq+0x5f4>
      break;
 8016fc2:	46c0      	nop			; (mov r8, r8)
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 8016fc4:	223f      	movs	r2, #63	; 0x3f
 8016fc6:	18bb      	adds	r3, r7, r2
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d031      	beq.n	8017032 <Request_MessageReq+0x662>
  {
    switch (status)
 8016fce:	18bb      	adds	r3, r7, r2
 8016fd0:	781b      	ldrb	r3, [r3, #0]
 8016fd2:	2b03      	cmp	r3, #3
 8016fd4:	d002      	beq.n	8016fdc <Request_MessageReq+0x60c>
 8016fd6:	2b04      	cmp	r3, #4
 8016fd8:	d005      	beq.n	8016fe6 <Request_MessageReq+0x616>
 8016fda:	e009      	b.n	8016ff0 <Request_MessageReq+0x620>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 8016fdc:	231f      	movs	r3, #31
 8016fde:	18fb      	adds	r3, r7, r3
 8016fe0:	2206      	movs	r2, #6
 8016fe2:	701a      	strb	r2, [r3, #0]
        break;
 8016fe4:	e009      	b.n	8016ffa <Request_MessageReq+0x62a>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 8016fe6:	231f      	movs	r3, #31
 8016fe8:	18fb      	adds	r3, r7, r3
 8016fea:	2202      	movs	r2, #2
 8016fec:	701a      	strb	r2, [r3, #0]
        break;
 8016fee:	e004      	b.n	8016ffa <Request_MessageReq+0x62a>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 8016ff0:	231f      	movs	r3, #31
 8016ff2:	18fb      	adds	r3, r7, r3
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	701a      	strb	r2, [r3, #0]
        break;
 8016ff8:	46c0      	nop			; (mov r8, r8)
    }
    TLV_deinit_encode(&send_tlv);
 8016ffa:	2420      	movs	r4, #32
 8016ffc:	193b      	adds	r3, r7, r4
 8016ffe:	0018      	movs	r0, r3
 8017000:	f7fe f896 	bl	8015130 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 8017004:	230f      	movs	r3, #15
 8017006:	18fb      	adds	r3, r7, r3
 8017008:	781b      	ldrb	r3, [r3, #0]
 801700a:	3301      	adds	r3, #1
 801700c:	015b      	lsls	r3, r3, #5
 801700e:	b25b      	sxtb	r3, r3
 8017010:	220b      	movs	r2, #11
 8017012:	4313      	orrs	r3, r2
 8017014:	b25b      	sxtb	r3, r3
 8017016:	b2d9      	uxtb	r1, r3
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2280      	movs	r2, #128	; 0x80
 801701c:	0052      	lsls	r2, r2, #1
 801701e:	1938      	adds	r0, r7, r4
 8017020:	f7fd fec1 	bl	8014da6 <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 8017024:	231f      	movs	r3, #31
 8017026:	18f9      	adds	r1, r7, r3
 8017028:	193b      	adds	r3, r7, r4
 801702a:	2201      	movs	r2, #1
 801702c:	0018      	movs	r0, r3
 801702e:	f7fd ffeb 	bl	8015008 <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 8017032:	2320      	movs	r3, #32
 8017034:	18fb      	adds	r3, r7, r3
 8017036:	0018      	movs	r0, r3
 8017038:	f7fe f87a 	bl	8015130 <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 801703c:	232c      	movs	r3, #44	; 0x2c
 801703e:	18fb      	adds	r3, r7, r3
 8017040:	0018      	movs	r0, r3
 8017042:	f7fe f90d 	bl	8015260 <TLV_deinit_decode>
}
 8017046:	46c0      	nop			; (mov r8, r8)
 8017048:	46bd      	mov	sp, r7
 801704a:	b010      	add	sp, #64	; 0x40
 801704c:	bdb0      	pop	{r4, r5, r7, pc}
 801704e:	46c0      	nop			; (mov r8, r8)

08017050 <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8017050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017052:	b0d5      	sub	sp, #340	; 0x154
 8017054:	af00      	add	r7, sp, #0
 8017056:	60b9      	str	r1, [r7, #8]
 8017058:	607a      	str	r2, [r7, #4]
 801705a:	4bd0      	ldr	r3, [pc, #832]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 801705c:	24a8      	movs	r4, #168	; 0xa8
 801705e:	0064      	lsls	r4, r4, #1
 8017060:	191b      	adds	r3, r3, r4
 8017062:	19db      	adds	r3, r3, r7
 8017064:	1c02      	adds	r2, r0, #0
 8017066:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 8017068:	23a7      	movs	r3, #167	; 0xa7
 801706a:	005b      	lsls	r3, r3, #1
 801706c:	18fb      	adds	r3, r7, r3
 801706e:	2200      	movs	r2, #0
 8017070:	801a      	strh	r2, [r3, #0]
  uint8_t error = 0xFF;
 8017072:	231a      	movs	r3, #26
 8017074:	33ff      	adds	r3, #255	; 0xff
 8017076:	18fb      	adds	r3, r7, r3
 8017078:	22ff      	movs	r2, #255	; 0xff
 801707a:	701a      	strb	r2, [r3, #0]
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 801707c:	234e      	movs	r3, #78	; 0x4e
 801707e:	33ff      	adds	r3, #255	; 0xff
 8017080:	18fb      	adds	r3, r7, r3
 8017082:	2200      	movs	r2, #0
 8017084:	701a      	strb	r2, [r3, #0]
  uint8_t tag;
  uint8_t flag_drp = 0;
 8017086:	23a6      	movs	r3, #166	; 0xa6
 8017088:	005b      	lsls	r3, r3, #1
 801708a:	18fb      	adds	r3, r7, r3
 801708c:	2200      	movs	r2, #0
 801708e:	701a      	strb	r2, [r3, #0]
  uint8_t tdrp = 0;
 8017090:	234c      	movs	r3, #76	; 0x4c
 8017092:	33ff      	adds	r3, #255	; 0xff
 8017094:	18fb      	adds	r3, r7, r3
 8017096:	2200      	movs	r2, #0
 8017098:	701a      	strb	r2, [r3, #0]

  (void)TLV_init_decode(&process_tlv, instruction);
 801709a:	68ba      	ldr	r2, [r7, #8]
 801709c:	2390      	movs	r3, #144	; 0x90
 801709e:	005b      	lsls	r3, r3, #1
 80170a0:	18fb      	adds	r3, r7, r3
 80170a2:	0011      	movs	r1, r2
 80170a4:	0018      	movs	r0, r3
 80170a6:	f7fe f855 	bl	8015154 <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80170aa:	4bbc      	ldr	r3, [pc, #752]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 80170ac:	191b      	adds	r3, r3, r4
 80170ae:	19db      	adds	r3, r3, r7
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	3301      	adds	r3, #1
 80170b4:	015b      	lsls	r3, r3, #5
 80170b6:	b25b      	sxtb	r3, r3
 80170b8:	2207      	movs	r2, #7
 80170ba:	4313      	orrs	r3, r2
 80170bc:	b25b      	sxtb	r3, r3
 80170be:	b2d9      	uxtb	r1, r3
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	2280      	movs	r2, #128	; 0x80
 80170c4:	0052      	lsls	r2, r2, #1
 80170c6:	2094      	movs	r0, #148	; 0x94
 80170c8:	0040      	lsls	r0, r0, #1
 80170ca:	1838      	adds	r0, r7, r0
 80170cc:	f7fd fe6b 	bl	8014da6 <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 80170d0:	e2ed      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 80170d2:	4bb3      	ldr	r3, [pc, #716]	; (80173a0 <Send_DpmConfigSetCnf+0x350>)
 80170d4:	22a8      	movs	r2, #168	; 0xa8
 80170d6:	0052      	lsls	r2, r2, #1
 80170d8:	189b      	adds	r3, r3, r2
 80170da:	19db      	adds	r3, r3, r7
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	2b1c      	cmp	r3, #28
 80170e0:	d900      	bls.n	80170e4 <Send_DpmConfigSetCnf+0x94>
 80170e2:	e2cb      	b.n	801767c <Send_DpmConfigSetCnf+0x62c>
 80170e4:	009a      	lsls	r2, r3, #2
 80170e6:	4baf      	ldr	r3, [pc, #700]	; (80173a4 <Send_DpmConfigSetCnf+0x354>)
 80170e8:	18d3      	adds	r3, r2, r3
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	469f      	mov	pc, r3
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 80170ee:	238e      	movs	r3, #142	; 0x8e
 80170f0:	005b      	lsls	r3, r3, #1
 80170f2:	18fb      	adds	r3, r7, r3
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	7819      	ldrb	r1, [r3, #0]
 80170f8:	4ba8      	ldr	r3, [pc, #672]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 80170fa:	22a8      	movs	r2, #168	; 0xa8
 80170fc:	0052      	lsls	r2, r2, #1
 80170fe:	189b      	adds	r3, r3, r2
 8017100:	19db      	adds	r3, r3, r7
 8017102:	781a      	ldrb	r2, [r3, #0]
 8017104:	0008      	movs	r0, r1
 8017106:	49a8      	ldr	r1, [pc, #672]	; (80173a8 <Send_DpmConfigSetCnf+0x358>)
 8017108:	0013      	movs	r3, r2
 801710a:	005b      	lsls	r3, r3, #1
 801710c:	189b      	adds	r3, r3, r2
 801710e:	009b      	lsls	r3, r3, #2
 8017110:	5058      	str	r0, [r3, r1]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 8017112:	e2cc      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 8017114:	238e      	movs	r3, #142	; 0x8e
 8017116:	005b      	lsls	r3, r3, #1
 8017118:	18fb      	adds	r3, r7, r3
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	7819      	ldrb	r1, [r3, #0]
 801711e:	4b9f      	ldr	r3, [pc, #636]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 8017120:	22a8      	movs	r2, #168	; 0xa8
 8017122:	0052      	lsls	r2, r2, #1
 8017124:	189b      	adds	r3, r3, r2
 8017126:	19db      	adds	r3, r3, r7
 8017128:	781a      	ldrb	r2, [r3, #0]
 801712a:	2301      	movs	r3, #1
 801712c:	400b      	ands	r3, r1
 801712e:	b2d9      	uxtb	r1, r3
 8017130:	489d      	ldr	r0, [pc, #628]	; (80173a8 <Send_DpmConfigSetCnf+0x358>)
 8017132:	2408      	movs	r4, #8
 8017134:	0013      	movs	r3, r2
 8017136:	005b      	lsls	r3, r3, #1
 8017138:	189b      	adds	r3, r3, r2
 801713a:	009b      	lsls	r3, r3, #2
 801713c:	18c3      	adds	r3, r0, r3
 801713e:	191b      	adds	r3, r3, r4
 8017140:	2201      	movs	r2, #1
 8017142:	400a      	ands	r2, r1
 8017144:	1890      	adds	r0, r2, r2
 8017146:	781a      	ldrb	r2, [r3, #0]
 8017148:	2102      	movs	r1, #2
 801714a:	438a      	bics	r2, r1
 801714c:	1c11      	adds	r1, r2, #0
 801714e:	1c02      	adds	r2, r0, #0
 8017150:	430a      	orrs	r2, r1
 8017152:	701a      	strb	r2, [r3, #0]
        break;
 8017154:	e2ab      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 8017156:	238e      	movs	r3, #142	; 0x8e
 8017158:	005b      	lsls	r3, r3, #1
 801715a:	18fb      	adds	r3, r7, r3
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	781a      	ldrb	r2, [r3, #0]
 8017160:	4b8e      	ldr	r3, [pc, #568]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 8017162:	21a8      	movs	r1, #168	; 0xa8
 8017164:	0049      	lsls	r1, r1, #1
 8017166:	185b      	adds	r3, r3, r1
 8017168:	19db      	adds	r3, r3, r7
 801716a:	7819      	ldrb	r1, [r3, #0]
 801716c:	2301      	movs	r3, #1
 801716e:	4013      	ands	r3, r2
 8017170:	b2d8      	uxtb	r0, r3
 8017172:	4a8e      	ldr	r2, [pc, #568]	; (80173ac <Send_DpmConfigSetCnf+0x35c>)
 8017174:	000b      	movs	r3, r1
 8017176:	00db      	lsls	r3, r3, #3
 8017178:	1a5b      	subs	r3, r3, r1
 801717a:	011b      	lsls	r3, r3, #4
 801717c:	2101      	movs	r1, #1
 801717e:	4001      	ands	r1, r0
 8017180:	00cc      	lsls	r4, r1, #3
 8017182:	5c99      	ldrb	r1, [r3, r2]
 8017184:	2008      	movs	r0, #8
 8017186:	4381      	bics	r1, r0
 8017188:	1c08      	adds	r0, r1, #0
 801718a:	1c21      	adds	r1, r4, #0
 801718c:	4301      	orrs	r1, r0
 801718e:	5499      	strb	r1, [r3, r2]
        break;
 8017190:	e28d      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 8017192:	238e      	movs	r3, #142	; 0x8e
 8017194:	005b      	lsls	r3, r3, #1
 8017196:	18fb      	adds	r3, r7, r3
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	781a      	ldrb	r2, [r3, #0]
 801719c:	4b7f      	ldr	r3, [pc, #508]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 801719e:	21a8      	movs	r1, #168	; 0xa8
 80171a0:	0049      	lsls	r1, r1, #1
 80171a2:	185b      	adds	r3, r3, r1
 80171a4:	19db      	adds	r3, r3, r7
 80171a6:	7819      	ldrb	r1, [r3, #0]
 80171a8:	2301      	movs	r3, #1
 80171aa:	4013      	ands	r3, r2
 80171ac:	b2d8      	uxtb	r0, r3
 80171ae:	4a7f      	ldr	r2, [pc, #508]	; (80173ac <Send_DpmConfigSetCnf+0x35c>)
 80171b0:	000b      	movs	r3, r1
 80171b2:	00db      	lsls	r3, r3, #3
 80171b4:	1a5b      	subs	r3, r3, r1
 80171b6:	011b      	lsls	r3, r3, #4
 80171b8:	2101      	movs	r1, #1
 80171ba:	4001      	ands	r1, r0
 80171bc:	008c      	lsls	r4, r1, #2
 80171be:	5c99      	ldrb	r1, [r3, r2]
 80171c0:	2004      	movs	r0, #4
 80171c2:	4381      	bics	r1, r0
 80171c4:	1c08      	adds	r0, r1, #0
 80171c6:	1c21      	adds	r1, r4, #0
 80171c8:	4301      	orrs	r1, r0
 80171ca:	5499      	strb	r1, [r3, r2]
        break;
 80171cc:	e26f      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 80171ce:	238e      	movs	r3, #142	; 0x8e
 80171d0:	005b      	lsls	r3, r3, #1
 80171d2:	18fb      	adds	r3, r7, r3
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	7819      	ldrb	r1, [r3, #0]
 80171d8:	4b70      	ldr	r3, [pc, #448]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 80171da:	22a8      	movs	r2, #168	; 0xa8
 80171dc:	0052      	lsls	r2, r2, #1
 80171de:	189b      	adds	r3, r3, r2
 80171e0:	19db      	adds	r3, r3, r7
 80171e2:	781a      	ldrb	r2, [r3, #0]
 80171e4:	2301      	movs	r3, #1
 80171e6:	400b      	ands	r3, r1
 80171e8:	b2d9      	uxtb	r1, r3
 80171ea:	486f      	ldr	r0, [pc, #444]	; (80173a8 <Send_DpmConfigSetCnf+0x358>)
 80171ec:	0013      	movs	r3, r2
 80171ee:	005b      	lsls	r3, r3, #1
 80171f0:	189b      	adds	r3, r3, r2
 80171f2:	009b      	lsls	r3, r3, #2
 80171f4:	18c3      	adds	r3, r0, r3
 80171f6:	2201      	movs	r2, #1
 80171f8:	400a      	ands	r2, r1
 80171fa:	0090      	lsls	r0, r2, #2
 80171fc:	791a      	ldrb	r2, [r3, #4]
 80171fe:	2104      	movs	r1, #4
 8017200:	438a      	bics	r2, r1
 8017202:	1c11      	adds	r1, r2, #0
 8017204:	1c02      	adds	r2, r0, #0
 8017206:	430a      	orrs	r2, r1
 8017208:	711a      	strb	r2, [r3, #4]
        break;
 801720a:	e250      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 801720c:	238e      	movs	r3, #142	; 0x8e
 801720e:	005b      	lsls	r3, r3, #1
 8017210:	18fb      	adds	r3, r7, r3
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	7819      	ldrb	r1, [r3, #0]
 8017216:	4b61      	ldr	r3, [pc, #388]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 8017218:	22a8      	movs	r2, #168	; 0xa8
 801721a:	0052      	lsls	r2, r2, #1
 801721c:	189b      	adds	r3, r3, r2
 801721e:	19db      	adds	r3, r3, r7
 8017220:	781a      	ldrb	r2, [r3, #0]
 8017222:	2301      	movs	r3, #1
 8017224:	400b      	ands	r3, r1
 8017226:	b2d9      	uxtb	r1, r3
 8017228:	485f      	ldr	r0, [pc, #380]	; (80173a8 <Send_DpmConfigSetCnf+0x358>)
 801722a:	0013      	movs	r3, r2
 801722c:	005b      	lsls	r3, r3, #1
 801722e:	189b      	adds	r3, r3, r2
 8017230:	009b      	lsls	r3, r3, #2
 8017232:	18c3      	adds	r3, r0, r3
 8017234:	2201      	movs	r2, #1
 8017236:	400a      	ands	r2, r1
 8017238:	00d0      	lsls	r0, r2, #3
 801723a:	791a      	ldrb	r2, [r3, #4]
 801723c:	2108      	movs	r1, #8
 801723e:	438a      	bics	r2, r1
 8017240:	1c11      	adds	r1, r2, #0
 8017242:	1c02      	adds	r2, r0, #0
 8017244:	430a      	orrs	r2, r1
 8017246:	711a      	strb	r2, [r3, #4]
        break;
 8017248:	e231      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 801724a:	238e      	movs	r3, #142	; 0x8e
 801724c:	005b      	lsls	r3, r3, #1
 801724e:	18fb      	adds	r3, r7, r3
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	7819      	ldrb	r1, [r3, #0]
 8017254:	4b51      	ldr	r3, [pc, #324]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 8017256:	22a8      	movs	r2, #168	; 0xa8
 8017258:	0052      	lsls	r2, r2, #1
 801725a:	189b      	adds	r3, r3, r2
 801725c:	19db      	adds	r3, r3, r7
 801725e:	781a      	ldrb	r2, [r3, #0]
 8017260:	2301      	movs	r3, #1
 8017262:	400b      	ands	r3, r1
 8017264:	b2d9      	uxtb	r1, r3
 8017266:	4850      	ldr	r0, [pc, #320]	; (80173a8 <Send_DpmConfigSetCnf+0x358>)
 8017268:	0013      	movs	r3, r2
 801726a:	005b      	lsls	r3, r3, #1
 801726c:	189b      	adds	r3, r3, r2
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	18c3      	adds	r3, r0, r3
 8017272:	2201      	movs	r2, #1
 8017274:	400a      	ands	r2, r1
 8017276:	0150      	lsls	r0, r2, #5
 8017278:	795a      	ldrb	r2, [r3, #5]
 801727a:	2120      	movs	r1, #32
 801727c:	438a      	bics	r2, r1
 801727e:	1c11      	adds	r1, r2, #0
 8017280:	1c02      	adds	r2, r0, #0
 8017282:	430a      	orrs	r2, r1
 8017284:	715a      	strb	r2, [r3, #5]
        break;
 8017286:	e212      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 8017288:	238e      	movs	r3, #142	; 0x8e
 801728a:	005b      	lsls	r3, r3, #1
 801728c:	18fb      	adds	r3, r7, r3
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	7819      	ldrb	r1, [r3, #0]
 8017292:	4b42      	ldr	r3, [pc, #264]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 8017294:	22a8      	movs	r2, #168	; 0xa8
 8017296:	0052      	lsls	r2, r2, #1
 8017298:	189b      	adds	r3, r3, r2
 801729a:	19db      	adds	r3, r3, r7
 801729c:	781a      	ldrb	r2, [r3, #0]
 801729e:	2301      	movs	r3, #1
 80172a0:	400b      	ands	r3, r1
 80172a2:	b2d9      	uxtb	r1, r3
 80172a4:	4840      	ldr	r0, [pc, #256]	; (80173a8 <Send_DpmConfigSetCnf+0x358>)
 80172a6:	0013      	movs	r3, r2
 80172a8:	005b      	lsls	r3, r3, #1
 80172aa:	189b      	adds	r3, r3, r2
 80172ac:	009b      	lsls	r3, r3, #2
 80172ae:	18c3      	adds	r3, r0, r3
 80172b0:	01c8      	lsls	r0, r1, #7
 80172b2:	791a      	ldrb	r2, [r3, #4]
 80172b4:	217f      	movs	r1, #127	; 0x7f
 80172b6:	400a      	ands	r2, r1
 80172b8:	1c11      	adds	r1, r2, #0
 80172ba:	1c02      	adds	r2, r0, #0
 80172bc:	430a      	orrs	r2, r1
 80172be:	711a      	strb	r2, [r3, #4]
        break;
 80172c0:	e1f5      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 80172c2:	238e      	movs	r3, #142	; 0x8e
 80172c4:	005b      	lsls	r3, r3, #1
 80172c6:	18fb      	adds	r3, r7, r3
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	781a      	ldrb	r2, [r3, #0]
 80172cc:	4b33      	ldr	r3, [pc, #204]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 80172ce:	21a8      	movs	r1, #168	; 0xa8
 80172d0:	0049      	lsls	r1, r1, #1
 80172d2:	185b      	adds	r3, r3, r1
 80172d4:	19db      	adds	r3, r3, r7
 80172d6:	7819      	ldrb	r1, [r3, #0]
 80172d8:	2301      	movs	r3, #1
 80172da:	4013      	ands	r3, r2
 80172dc:	b2d8      	uxtb	r0, r3
 80172de:	4a33      	ldr	r2, [pc, #204]	; (80173ac <Send_DpmConfigSetCnf+0x35c>)
 80172e0:	000b      	movs	r3, r1
 80172e2:	00db      	lsls	r3, r3, #3
 80172e4:	1a5b      	subs	r3, r3, r1
 80172e6:	011b      	lsls	r3, r3, #4
 80172e8:	2101      	movs	r1, #1
 80172ea:	4001      	ands	r1, r0
 80172ec:	184c      	adds	r4, r1, r1
 80172ee:	5c99      	ldrb	r1, [r3, r2]
 80172f0:	2002      	movs	r0, #2
 80172f2:	4381      	bics	r1, r0
 80172f4:	1c08      	adds	r0, r1, #0
 80172f6:	1c21      	adds	r1, r4, #0
 80172f8:	4301      	orrs	r1, r0
 80172fa:	5499      	strb	r1, [r3, r2]
        break;
 80172fc:	e1d7      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 80172fe:	238e      	movs	r3, #142	; 0x8e
 8017300:	005b      	lsls	r3, r3, #1
 8017302:	18fb      	adds	r3, r7, r3
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	7819      	ldrb	r1, [r3, #0]
 8017308:	4b24      	ldr	r3, [pc, #144]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 801730a:	22a8      	movs	r2, #168	; 0xa8
 801730c:	0052      	lsls	r2, r2, #1
 801730e:	189b      	adds	r3, r3, r2
 8017310:	19db      	adds	r3, r3, r7
 8017312:	781a      	ldrb	r2, [r3, #0]
 8017314:	2301      	movs	r3, #1
 8017316:	400b      	ands	r3, r1
 8017318:	b2d9      	uxtb	r1, r3
 801731a:	4823      	ldr	r0, [pc, #140]	; (80173a8 <Send_DpmConfigSetCnf+0x358>)
 801731c:	0013      	movs	r3, r2
 801731e:	005b      	lsls	r3, r3, #1
 8017320:	189b      	adds	r3, r3, r2
 8017322:	009b      	lsls	r3, r3, #2
 8017324:	18c3      	adds	r3, r0, r3
 8017326:	2201      	movs	r2, #1
 8017328:	400a      	ands	r2, r1
 801732a:	0190      	lsls	r0, r2, #6
 801732c:	791a      	ldrb	r2, [r3, #4]
 801732e:	2140      	movs	r1, #64	; 0x40
 8017330:	438a      	bics	r2, r1
 8017332:	1c11      	adds	r1, r2, #0
 8017334:	1c02      	adds	r2, r0, #0
 8017336:	430a      	orrs	r2, r1
 8017338:	711a      	strb	r2, [r3, #4]
        break;
 801733a:	e1b8      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 801733c:	228e      	movs	r2, #142	; 0x8e
 801733e:	0052      	lsls	r2, r2, #1
 8017340:	18bb      	adds	r3, r7, r2
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	781b      	ldrb	r3, [r3, #0]
 8017346:	b299      	uxth	r1, r3
 8017348:	18bb      	adds	r3, r7, r2
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	3301      	adds	r3, #1
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	b29b      	uxth	r3, r3
 8017352:	021b      	lsls	r3, r3, #8
 8017354:	b29b      	uxth	r3, r3
 8017356:	4a11      	ldr	r2, [pc, #68]	; (801739c <Send_DpmConfigSetCnf+0x34c>)
 8017358:	20a8      	movs	r0, #168	; 0xa8
 801735a:	0040      	lsls	r0, r0, #1
 801735c:	1812      	adds	r2, r2, r0
 801735e:	19d2      	adds	r2, r2, r7
 8017360:	7812      	ldrb	r2, [r2, #0]
 8017362:	18cb      	adds	r3, r1, r3
 8017364:	b298      	uxth	r0, r3
 8017366:	4910      	ldr	r1, [pc, #64]	; (80173a8 <Send_DpmConfigSetCnf+0x358>)
 8017368:	0013      	movs	r3, r2
 801736a:	005b      	lsls	r3, r3, #1
 801736c:	189b      	adds	r3, r3, r2
 801736e:	009b      	lsls	r3, r3, #2
 8017370:	18cb      	adds	r3, r1, r3
 8017372:	3308      	adds	r3, #8
 8017374:	1c02      	adds	r2, r0, #0
 8017376:	801a      	strh	r2, [r3, #0]
        break;
 8017378:	e199      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSRC, 0, sizeof(PORT0_PDO_ListSRC));
 801737a:	4b0d      	ldr	r3, [pc, #52]	; (80173b0 <Send_DpmConfigSetCnf+0x360>)
 801737c:	221c      	movs	r2, #28
 801737e:	2100      	movs	r1, #0
 8017380:	0018      	movs	r0, r3
 8017382:	f001 ffe9 	bl	8019358 <memset>
          index_pdo = 0;
 8017386:	2300      	movs	r3, #0
 8017388:	22a2      	movs	r2, #162	; 0xa2
 801738a:	0052      	lsls	r2, r2, #1
 801738c:	18ba      	adds	r2, r7, r2
 801738e:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8017390:	2300      	movs	r3, #0
 8017392:	22a0      	movs	r2, #160	; 0xa0
 8017394:	0052      	lsls	r2, r2, #1
 8017396:	18ba      	adds	r2, r7, r2
 8017398:	6013      	str	r3, [r2, #0]
 801739a:	e048      	b.n	801742e <Send_DpmConfigSetCnf+0x3de>
 801739c:	fffffebf 	.word	0xfffffebf
 80173a0:	fffffec7 	.word	0xfffffec7
 80173a4:	0801aaa4 	.word	0x0801aaa4
 80173a8:	20000080 	.word	0x20000080
 80173ac:	20000094 	.word	0x20000094
 80173b0:	20000108 	.word	0x20000108
          {
            pdo = USBPD_LE32(&value[index_gui]);
 80173b4:	248e      	movs	r4, #142	; 0x8e
 80173b6:	0064      	lsls	r4, r4, #1
 80173b8:	193b      	adds	r3, r7, r4
 80173ba:	681a      	ldr	r2, [r3, #0]
 80173bc:	20a0      	movs	r0, #160	; 0xa0
 80173be:	0040      	lsls	r0, r0, #1
 80173c0:	183b      	adds	r3, r7, r0
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	18d3      	adds	r3, r2, r3
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	0019      	movs	r1, r3
 80173ca:	193b      	adds	r3, r7, r4
 80173cc:	681a      	ldr	r2, [r3, #0]
 80173ce:	183b      	adds	r3, r7, r0
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	3301      	adds	r3, #1
 80173d4:	18d3      	adds	r3, r2, r3
 80173d6:	781b      	ldrb	r3, [r3, #0]
 80173d8:	021b      	lsls	r3, r3, #8
 80173da:	18ca      	adds	r2, r1, r3
 80173dc:	193b      	adds	r3, r7, r4
 80173de:	6819      	ldr	r1, [r3, #0]
 80173e0:	183b      	adds	r3, r7, r0
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	3302      	adds	r3, #2
 80173e6:	18cb      	adds	r3, r1, r3
 80173e8:	781b      	ldrb	r3, [r3, #0]
 80173ea:	041b      	lsls	r3, r3, #16
 80173ec:	18d2      	adds	r2, r2, r3
 80173ee:	193b      	adds	r3, r7, r4
 80173f0:	6819      	ldr	r1, [r3, #0]
 80173f2:	183b      	adds	r3, r7, r0
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	3303      	adds	r3, #3
 80173f8:	18cb      	adds	r3, r1, r3
 80173fa:	781b      	ldrb	r3, [r3, #0]
 80173fc:	061b      	lsls	r3, r3, #24
 80173fe:	18d3      	adds	r3, r2, r3
 8017400:	219a      	movs	r1, #154	; 0x9a
 8017402:	0049      	lsls	r1, r1, #1
 8017404:	187a      	adds	r2, r7, r1
 8017406:	6013      	str	r3, [r2, #0]
            PORT0_PDO_ListSRC[index_pdo] = pdo;
 8017408:	4b95      	ldr	r3, [pc, #596]	; (8017660 <Send_DpmConfigSetCnf+0x610>)
 801740a:	24a2      	movs	r4, #162	; 0xa2
 801740c:	0064      	lsls	r4, r4, #1
 801740e:	193a      	adds	r2, r7, r4
 8017410:	6812      	ldr	r2, [r2, #0]
 8017412:	0092      	lsls	r2, r2, #2
 8017414:	1879      	adds	r1, r7, r1
 8017416:	6809      	ldr	r1, [r1, #0]
 8017418:	50d1      	str	r1, [r2, r3]
            index_pdo++;
 801741a:	193b      	adds	r3, r7, r4
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	3301      	adds	r3, #1
 8017420:	193a      	adds	r2, r7, r4
 8017422:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8017424:	183b      	adds	r3, r7, r0
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	3304      	adds	r3, #4
 801742a:	183a      	adds	r2, r7, r0
 801742c:	6013      	str	r3, [r2, #0]
 801742e:	218d      	movs	r1, #141	; 0x8d
 8017430:	0049      	lsls	r1, r1, #1
 8017432:	187b      	adds	r3, r7, r1
 8017434:	881b      	ldrh	r3, [r3, #0]
 8017436:	001a      	movs	r2, r3
 8017438:	23a0      	movs	r3, #160	; 0xa0
 801743a:	005b      	lsls	r3, r3, #1
 801743c:	18fb      	adds	r3, r7, r3
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	4293      	cmp	r3, r2
 8017442:	d3b7      	bcc.n	80173b4 <Send_DpmConfigSetCnf+0x364>
          }
          USBPD_NbPDO[1] = (uint8_t)(size / 4U);
 8017444:	187b      	adds	r3, r7, r1
 8017446:	881b      	ldrh	r3, [r3, #0]
 8017448:	089b      	lsrs	r3, r3, #2
 801744a:	b29b      	uxth	r3, r3
 801744c:	b2da      	uxtb	r2, r3
 801744e:	4b85      	ldr	r3, [pc, #532]	; (8017664 <Send_DpmConfigSetCnf+0x614>)
 8017450:	705a      	strb	r2, [r3, #1]
            index_pdo++;
          }
          USBPD_NbPDO[3] = (uint8_t)(size / 4U);
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 8017452:	e12c      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 8017454:	238e      	movs	r3, #142	; 0x8e
 8017456:	005b      	lsls	r3, r3, #1
 8017458:	18fb      	adds	r3, r7, r3
 801745a:	681a      	ldr	r2, [r3, #0]
 801745c:	214c      	movs	r1, #76	; 0x4c
 801745e:	31ff      	adds	r1, #255	; 0xff
 8017460:	187b      	adds	r3, r7, r1
 8017462:	7812      	ldrb	r2, [r2, #0]
 8017464:	701a      	strb	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 8017466:	4b80      	ldr	r3, [pc, #512]	; (8017668 <Send_DpmConfigSetCnf+0x618>)
 8017468:	22a8      	movs	r2, #168	; 0xa8
 801746a:	0052      	lsls	r2, r2, #1
 801746c:	189b      	adds	r3, r3, r2
 801746e:	19db      	adds	r3, r3, r7
 8017470:	781a      	ldrb	r2, [r3, #0]
 8017472:	187b      	adds	r3, r7, r1
 8017474:	781b      	ldrb	r3, [r3, #0]
 8017476:	217f      	movs	r1, #127	; 0x7f
 8017478:	400b      	ands	r3, r1
 801747a:	b2dc      	uxtb	r4, r3
 801747c:	497b      	ldr	r1, [pc, #492]	; (801766c <Send_DpmConfigSetCnf+0x61c>)
 801747e:	2068      	movs	r0, #104	; 0x68
 8017480:	0013      	movs	r3, r2
 8017482:	00db      	lsls	r3, r3, #3
 8017484:	1a9b      	subs	r3, r3, r2
 8017486:	011b      	lsls	r3, r3, #4
 8017488:	18cb      	adds	r3, r1, r3
 801748a:	181b      	adds	r3, r3, r0
 801748c:	1c22      	adds	r2, r4, #0
 801748e:	1890      	adds	r0, r2, r2
 8017490:	785a      	ldrb	r2, [r3, #1]
 8017492:	2101      	movs	r1, #1
 8017494:	400a      	ands	r2, r1
 8017496:	1c11      	adds	r1, r2, #0
 8017498:	1c02      	adds	r2, r0, #0
 801749a:	430a      	orrs	r2, r1
 801749c:	705a      	strb	r2, [r3, #1]
        flag_drp = 1;
 801749e:	23a6      	movs	r3, #166	; 0xa6
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	18fb      	adds	r3, r7, r3
 80174a4:	2201      	movs	r2, #1
 80174a6:	701a      	strb	r2, [r3, #0]
        break;
 80174a8:	e101      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 80174aa:	238e      	movs	r3, #142	; 0x8e
 80174ac:	005b      	lsls	r3, r3, #1
 80174ae:	18fb      	adds	r3, r7, r3
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	781a      	ldrb	r2, [r3, #0]
 80174b4:	21a7      	movs	r1, #167	; 0xa7
 80174b6:	0049      	lsls	r1, r1, #1
 80174b8:	187b      	adds	r3, r7, r1
 80174ba:	801a      	strh	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 80174bc:	4b6a      	ldr	r3, [pc, #424]	; (8017668 <Send_DpmConfigSetCnf+0x618>)
 80174be:	22a8      	movs	r2, #168	; 0xa8
 80174c0:	0052      	lsls	r2, r2, #1
 80174c2:	189b      	adds	r3, r3, r2
 80174c4:	19db      	adds	r3, r3, r7
 80174c6:	781a      	ldrb	r2, [r3, #0]
 80174c8:	187b      	adds	r3, r7, r1
 80174ca:	881b      	ldrh	r3, [r3, #0]
 80174cc:	1c19      	adds	r1, r3, #0
 80174ce:	237f      	movs	r3, #127	; 0x7f
 80174d0:	400b      	ands	r3, r1
 80174d2:	b2d9      	uxtb	r1, r3
 80174d4:	4865      	ldr	r0, [pc, #404]	; (801766c <Send_DpmConfigSetCnf+0x61c>)
 80174d6:	2468      	movs	r4, #104	; 0x68
 80174d8:	0013      	movs	r3, r2
 80174da:	00db      	lsls	r3, r3, #3
 80174dc:	1a9b      	subs	r3, r3, r2
 80174de:	011b      	lsls	r3, r3, #4
 80174e0:	18c3      	adds	r3, r0, r3
 80174e2:	191b      	adds	r3, r3, r4
 80174e4:	227f      	movs	r2, #127	; 0x7f
 80174e6:	4011      	ands	r1, r2
 80174e8:	0008      	movs	r0, r1
 80174ea:	789a      	ldrb	r2, [r3, #2]
 80174ec:	217f      	movs	r1, #127	; 0x7f
 80174ee:	438a      	bics	r2, r1
 80174f0:	1c11      	adds	r1, r2, #0
 80174f2:	1c02      	adds	r2, r0, #0
 80174f4:	430a      	orrs	r2, r1
 80174f6:	709a      	strb	r2, [r3, #2]
        flag_drp = 1;
 80174f8:	23a6      	movs	r3, #166	; 0xa6
 80174fa:	005b      	lsls	r3, r3, #1
 80174fc:	18fb      	adds	r3, r7, r3
 80174fe:	2201      	movs	r2, #1
 8017500:	701a      	strb	r2, [r3, #0]
        break;
 8017502:	e0d4      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 8017504:	238e      	movs	r3, #142	; 0x8e
 8017506:	005b      	lsls	r3, r3, #1
 8017508:	18fb      	adds	r3, r7, r3
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	7819      	ldrb	r1, [r3, #0]
 801750e:	4b56      	ldr	r3, [pc, #344]	; (8017668 <Send_DpmConfigSetCnf+0x618>)
 8017510:	22a8      	movs	r2, #168	; 0xa8
 8017512:	0052      	lsls	r2, r2, #1
 8017514:	189b      	adds	r3, r3, r2
 8017516:	19db      	adds	r3, r3, r7
 8017518:	781a      	ldrb	r2, [r3, #0]
 801751a:	2301      	movs	r3, #1
 801751c:	400b      	ands	r3, r1
 801751e:	b2d9      	uxtb	r1, r3
 8017520:	4853      	ldr	r0, [pc, #332]	; (8017670 <Send_DpmConfigSetCnf+0x620>)
 8017522:	0013      	movs	r3, r2
 8017524:	005b      	lsls	r3, r3, #1
 8017526:	189b      	adds	r3, r3, r2
 8017528:	009b      	lsls	r3, r3, #2
 801752a:	18c3      	adds	r3, r0, r3
 801752c:	2201      	movs	r2, #1
 801752e:	4011      	ands	r1, r2
 8017530:	0008      	movs	r0, r1
 8017532:	795a      	ldrb	r2, [r3, #5]
 8017534:	2101      	movs	r1, #1
 8017536:	438a      	bics	r2, r1
 8017538:	1c11      	adds	r1, r2, #0
 801753a:	1c02      	adds	r2, r0, #0
 801753c:	430a      	orrs	r2, r1
 801753e:	715a      	strb	r2, [r3, #5]
        break;
 8017540:	e0b5      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 8017542:	238e      	movs	r3, #142	; 0x8e
 8017544:	005b      	lsls	r3, r3, #1
 8017546:	18fb      	adds	r3, r7, r3
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	7819      	ldrb	r1, [r3, #0]
 801754c:	4b46      	ldr	r3, [pc, #280]	; (8017668 <Send_DpmConfigSetCnf+0x618>)
 801754e:	22a8      	movs	r2, #168	; 0xa8
 8017550:	0052      	lsls	r2, r2, #1
 8017552:	189b      	adds	r3, r3, r2
 8017554:	19db      	adds	r3, r3, r7
 8017556:	781a      	ldrb	r2, [r3, #0]
 8017558:	2301      	movs	r3, #1
 801755a:	400b      	ands	r3, r1
 801755c:	b2d9      	uxtb	r1, r3
 801755e:	4844      	ldr	r0, [pc, #272]	; (8017670 <Send_DpmConfigSetCnf+0x620>)
 8017560:	0013      	movs	r3, r2
 8017562:	005b      	lsls	r3, r3, #1
 8017564:	189b      	adds	r3, r3, r2
 8017566:	009b      	lsls	r3, r3, #2
 8017568:	18c3      	adds	r3, r0, r3
 801756a:	2201      	movs	r2, #1
 801756c:	400a      	ands	r2, r1
 801756e:	1890      	adds	r0, r2, r2
 8017570:	795a      	ldrb	r2, [r3, #5]
 8017572:	2102      	movs	r1, #2
 8017574:	438a      	bics	r2, r1
 8017576:	1c11      	adds	r1, r2, #0
 8017578:	1c02      	adds	r2, r0, #0
 801757a:	430a      	orrs	r2, r1
 801757c:	715a      	strb	r2, [r3, #5]
        break;
 801757e:	e096      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 8017580:	208e      	movs	r0, #142	; 0x8e
 8017582:	0040      	lsls	r0, r0, #1
 8017584:	183b      	adds	r3, r7, r0
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	001a      	movs	r2, r3
 801758c:	183b      	adds	r3, r7, r0
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	3301      	adds	r3, #1
 8017592:	781b      	ldrb	r3, [r3, #0]
 8017594:	021b      	lsls	r3, r3, #8
 8017596:	18d2      	adds	r2, r2, r3
 8017598:	183b      	adds	r3, r7, r0
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	3302      	adds	r3, #2
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	041b      	lsls	r3, r3, #16
 80175a2:	18d1      	adds	r1, r2, r3
 80175a4:	183b      	adds	r3, r7, r0
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	3303      	adds	r3, #3
 80175aa:	781b      	ldrb	r3, [r3, #0]
 80175ac:	061b      	lsls	r3, r3, #24
 80175ae:	4a2e      	ldr	r2, [pc, #184]	; (8017668 <Send_DpmConfigSetCnf+0x618>)
 80175b0:	20a8      	movs	r0, #168	; 0xa8
 80175b2:	0040      	lsls	r0, r0, #1
 80175b4:	1812      	adds	r2, r2, r0
 80175b6:	19d2      	adds	r2, r2, r7
 80175b8:	7812      	ldrb	r2, [r2, #0]
 80175ba:	18c9      	adds	r1, r1, r3
 80175bc:	4b2d      	ldr	r3, [pc, #180]	; (8017674 <Send_DpmConfigSetCnf+0x624>)
 80175be:	00d2      	lsls	r2, r2, #3
 80175c0:	50d1      	str	r1, [r2, r3]
        break;
 80175c2:	e074      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 80175c4:	228e      	movs	r2, #142	; 0x8e
 80175c6:	0052      	lsls	r2, r2, #1
 80175c8:	18bb      	adds	r3, r7, r2
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	b299      	uxth	r1, r3
 80175d0:	18bb      	adds	r3, r7, r2
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	3301      	adds	r3, #1
 80175d6:	781b      	ldrb	r3, [r3, #0]
 80175d8:	b29b      	uxth	r3, r3
 80175da:	021b      	lsls	r3, r3, #8
 80175dc:	b29a      	uxth	r2, r3
 80175de:	4b22      	ldr	r3, [pc, #136]	; (8017668 <Send_DpmConfigSetCnf+0x618>)
 80175e0:	20a8      	movs	r0, #168	; 0xa8
 80175e2:	0040      	lsls	r0, r0, #1
 80175e4:	181b      	adds	r3, r3, r0
 80175e6:	19db      	adds	r3, r3, r7
 80175e8:	781b      	ldrb	r3, [r3, #0]
 80175ea:	188a      	adds	r2, r1, r2
 80175ec:	b291      	uxth	r1, r2
 80175ee:	4a21      	ldr	r2, [pc, #132]	; (8017674 <Send_DpmConfigSetCnf+0x624>)
 80175f0:	00db      	lsls	r3, r3, #3
 80175f2:	18d3      	adds	r3, r2, r3
 80175f4:	3304      	adds	r3, #4
 80175f6:	1c0a      	adds	r2, r1, #0
 80175f8:	801a      	strh	r2, [r3, #0]
        break;
 80175fa:	e058      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 80175fc:	228e      	movs	r2, #142	; 0x8e
 80175fe:	0052      	lsls	r2, r2, #1
 8017600:	18bb      	adds	r3, r7, r2
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	781b      	ldrb	r3, [r3, #0]
 8017606:	b299      	uxth	r1, r3
 8017608:	18bb      	adds	r3, r7, r2
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	3301      	adds	r3, #1
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	b29b      	uxth	r3, r3
 8017612:	021b      	lsls	r3, r3, #8
 8017614:	b29a      	uxth	r2, r3
 8017616:	4b14      	ldr	r3, [pc, #80]	; (8017668 <Send_DpmConfigSetCnf+0x618>)
 8017618:	20a8      	movs	r0, #168	; 0xa8
 801761a:	0040      	lsls	r0, r0, #1
 801761c:	181b      	adds	r3, r3, r0
 801761e:	19db      	adds	r3, r3, r7
 8017620:	781b      	ldrb	r3, [r3, #0]
 8017622:	188a      	adds	r2, r1, r2
 8017624:	b291      	uxth	r1, r2
 8017626:	4a13      	ldr	r2, [pc, #76]	; (8017674 <Send_DpmConfigSetCnf+0x624>)
 8017628:	00db      	lsls	r3, r3, #3
 801762a:	18d3      	adds	r3, r2, r3
 801762c:	3306      	adds	r3, #6
 801762e:	1c0a      	adds	r2, r1, #0
 8017630:	801a      	strh	r2, [r3, #0]
        break;
 8017632:	e03c      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 8017634:	238e      	movs	r3, #142	; 0x8e
 8017636:	005b      	lsls	r3, r3, #1
 8017638:	18fb      	adds	r3, r7, r3
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	4a0a      	ldr	r2, [pc, #40]	; (8017668 <Send_DpmConfigSetCnf+0x618>)
 801763e:	21a8      	movs	r1, #168	; 0xa8
 8017640:	0049      	lsls	r1, r1, #1
 8017642:	1852      	adds	r2, r2, r1
 8017644:	19d2      	adds	r2, r2, r7
 8017646:	7812      	ldrb	r2, [r2, #0]
 8017648:	7818      	ldrb	r0, [r3, #0]
 801764a:	490b      	ldr	r1, [pc, #44]	; (8017678 <Send_DpmConfigSetCnf+0x628>)
 801764c:	0013      	movs	r3, r2
 801764e:	005b      	lsls	r3, r3, #1
 8017650:	189b      	adds	r3, r3, r2
 8017652:	005b      	lsls	r3, r3, #1
 8017654:	18cb      	adds	r3, r1, r3
 8017656:	3304      	adds	r3, #4
 8017658:	1c02      	adds	r2, r0, #0
 801765a:	701a      	strb	r2, [r3, #0]
        break;
 801765c:	e027      	b.n	80176ae <Send_DpmConfigSetCnf+0x65e>
 801765e:	46c0      	nop			; (mov r8, r8)
 8017660:	20000108 	.word	0x20000108
 8017664:	20000104 	.word	0x20000104
 8017668:	fffffebf 	.word	0xfffffebf
 801766c:	20000094 	.word	0x20000094
 8017670:	20000080 	.word	0x20000080
 8017674:	2000008c 	.word	0x2000008c
 8017678:	20002834 	.word	0x20002834
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 801767c:	231a      	movs	r3, #26
 801767e:	33ff      	adds	r3, #255	; 0xff
 8017680:	18fb      	adds	r3, r7, r3
 8017682:	2200      	movs	r2, #0
 8017684:	701a      	strb	r2, [r3, #0]
        param_not_applicated[counter_param_not_applicated] = tag;
 8017686:	204e      	movs	r0, #78	; 0x4e
 8017688:	30ff      	adds	r0, #255	; 0xff
 801768a:	183b      	adds	r3, r7, r0
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	4a90      	ldr	r2, [pc, #576]	; (80178d0 <Send_DpmConfigSetCnf+0x880>)
 8017690:	24a8      	movs	r4, #168	; 0xa8
 8017692:	0064      	lsls	r4, r4, #1
 8017694:	1912      	adds	r2, r2, r4
 8017696:	19d2      	adds	r2, r2, r7
 8017698:	7811      	ldrb	r1, [r2, #0]
 801769a:	4a8e      	ldr	r2, [pc, #568]	; (80178d4 <Send_DpmConfigSetCnf+0x884>)
 801769c:	1912      	adds	r2, r2, r4
 801769e:	19d2      	adds	r2, r2, r7
 80176a0:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 80176a2:	183b      	adds	r3, r7, r0
 80176a4:	781a      	ldrb	r2, [r3, #0]
 80176a6:	183b      	adds	r3, r7, r0
 80176a8:	3201      	adds	r2, #1
 80176aa:	701a      	strb	r2, [r3, #0]
        break;
 80176ac:	46c0      	nop			; (mov r8, r8)
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 80176ae:	238e      	movs	r3, #142	; 0x8e
 80176b0:	005b      	lsls	r3, r3, #1
 80176b2:	18fb      	adds	r3, r7, r3
 80176b4:	228d      	movs	r2, #141	; 0x8d
 80176b6:	0052      	lsls	r2, r2, #1
 80176b8:	18ba      	adds	r2, r7, r2
 80176ba:	2117      	movs	r1, #23
 80176bc:	1879      	adds	r1, r7, r1
 80176be:	2090      	movs	r0, #144	; 0x90
 80176c0:	0040      	lsls	r0, r0, #1
 80176c2:	1838      	adds	r0, r7, r0
 80176c4:	f7fd fd72 	bl	80151ac <TLV_get>
 80176c8:	0003      	movs	r3, r0
 80176ca:	2bff      	cmp	r3, #255	; 0xff
 80176cc:	d000      	beq.n	80176d0 <Send_DpmConfigSetCnf+0x680>
 80176ce:	e500      	b.n	80170d2 <Send_DpmConfigSetCnf+0x82>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 80176d0:	23a6      	movs	r3, #166	; 0xa6
 80176d2:	005b      	lsls	r3, r3, #1
 80176d4:	18fb      	adds	r3, r7, r3
 80176d6:	781b      	ldrb	r3, [r3, #0]
 80176d8:	2b01      	cmp	r3, #1
 80176da:	d000      	beq.n	80176de <Send_DpmConfigSetCnf+0x68e>
 80176dc:	e0a2      	b.n	8017824 <Send_DpmConfigSetCnf+0x7d4>
  {
    uint16_t calcul;
    if (0U == tdrp)
 80176de:	244c      	movs	r4, #76	; 0x4c
 80176e0:	34ff      	adds	r4, #255	; 0xff
 80176e2:	193b      	adds	r3, r7, r4
 80176e4:	781b      	ldrb	r3, [r3, #0]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d11c      	bne.n	8017724 <Send_DpmConfigSetCnf+0x6d4>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 80176ea:	4b7b      	ldr	r3, [pc, #492]	; (80178d8 <Send_DpmConfigSetCnf+0x888>)
 80176ec:	20a8      	movs	r0, #168	; 0xa8
 80176ee:	0040      	lsls	r0, r0, #1
 80176f0:	181b      	adds	r3, r3, r0
 80176f2:	19db      	adds	r3, r3, r7
 80176f4:	781a      	ldrb	r2, [r3, #0]
 80176f6:	4979      	ldr	r1, [pc, #484]	; (80178dc <Send_DpmConfigSetCnf+0x88c>)
 80176f8:	0013      	movs	r3, r2
 80176fa:	005b      	lsls	r3, r3, #1
 80176fc:	189b      	adds	r3, r3, r2
 80176fe:	009b      	lsls	r3, r3, #2
 8017700:	18cb      	adds	r3, r1, r3
 8017702:	3306      	adds	r3, #6
 8017704:	7819      	ldrb	r1, [r3, #0]
 8017706:	4b74      	ldr	r3, [pc, #464]	; (80178d8 <Send_DpmConfigSetCnf+0x888>)
 8017708:	181b      	adds	r3, r3, r0
 801770a:	19db      	adds	r3, r3, r7
 801770c:	781a      	ldrb	r2, [r3, #0]
 801770e:	4873      	ldr	r0, [pc, #460]	; (80178dc <Send_DpmConfigSetCnf+0x88c>)
 8017710:	0013      	movs	r3, r2
 8017712:	005b      	lsls	r3, r3, #1
 8017714:	189b      	adds	r3, r3, r2
 8017716:	009b      	lsls	r3, r3, #2
 8017718:	18c3      	adds	r3, r0, r3
 801771a:	3307      	adds	r3, #7
 801771c:	781a      	ldrb	r2, [r3, #0]
 801771e:	193b      	adds	r3, r7, r4
 8017720:	188a      	adds	r2, r1, r2
 8017722:	701a      	strb	r2, [r3, #0]
    }
    if (0U == dcdrp)
 8017724:	26a7      	movs	r6, #167	; 0xa7
 8017726:	0076      	lsls	r6, r6, #1
 8017728:	19bb      	adds	r3, r7, r6
 801772a:	881b      	ldrh	r3, [r3, #0]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d133      	bne.n	8017798 <Send_DpmConfigSetCnf+0x748>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 8017730:	4b69      	ldr	r3, [pc, #420]	; (80178d8 <Send_DpmConfigSetCnf+0x888>)
 8017732:	24a8      	movs	r4, #168	; 0xa8
 8017734:	0064      	lsls	r4, r4, #1
 8017736:	191b      	adds	r3, r3, r4
 8017738:	19db      	adds	r3, r3, r7
 801773a:	781a      	ldrb	r2, [r3, #0]
 801773c:	4967      	ldr	r1, [pc, #412]	; (80178dc <Send_DpmConfigSetCnf+0x88c>)
 801773e:	0013      	movs	r3, r2
 8017740:	005b      	lsls	r3, r3, #1
 8017742:	189b      	adds	r3, r3, r2
 8017744:	009b      	lsls	r3, r3, #2
 8017746:	18cb      	adds	r3, r1, r3
 8017748:	3307      	adds	r3, #7
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	001a      	movs	r2, r3
 801774e:	2364      	movs	r3, #100	; 0x64
 8017750:	4353      	muls	r3, r2
 8017752:	0018      	movs	r0, r3
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 8017754:	4b60      	ldr	r3, [pc, #384]	; (80178d8 <Send_DpmConfigSetCnf+0x888>)
 8017756:	0025      	movs	r5, r4
 8017758:	191b      	adds	r3, r3, r4
 801775a:	19db      	adds	r3, r3, r7
 801775c:	781a      	ldrb	r2, [r3, #0]
 801775e:	495f      	ldr	r1, [pc, #380]	; (80178dc <Send_DpmConfigSetCnf+0x88c>)
 8017760:	0013      	movs	r3, r2
 8017762:	005b      	lsls	r3, r3, #1
 8017764:	189b      	adds	r3, r3, r2
 8017766:	009b      	lsls	r3, r3, #2
 8017768:	18cb      	adds	r3, r1, r3
 801776a:	3306      	adds	r3, #6
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	001c      	movs	r4, r3
 8017770:	4b59      	ldr	r3, [pc, #356]	; (80178d8 <Send_DpmConfigSetCnf+0x888>)
 8017772:	195b      	adds	r3, r3, r5
 8017774:	19db      	adds	r3, r3, r7
 8017776:	781a      	ldrb	r2, [r3, #0]
 8017778:	4958      	ldr	r1, [pc, #352]	; (80178dc <Send_DpmConfigSetCnf+0x88c>)
 801777a:	0013      	movs	r3, r2
 801777c:	005b      	lsls	r3, r3, #1
 801777e:	189b      	adds	r3, r3, r2
 8017780:	009b      	lsls	r3, r3, #2
 8017782:	18cb      	adds	r3, r1, r3
 8017784:	3307      	adds	r3, #7
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	18e3      	adds	r3, r4, r3
 801778a:	0019      	movs	r1, r3
 801778c:	f7ee fdea 	bl	8006364 <__udivsi3>
 8017790:	0003      	movs	r3, r0
 8017792:	001a      	movs	r2, r3
      dcdrp = (uint16_t)
 8017794:	19bb      	adds	r3, r7, r6
 8017796:	801a      	strh	r2, [r3, #0]
    }
    calcul = (tdrp * dcdrp) / 100U;
 8017798:	254c      	movs	r5, #76	; 0x4c
 801779a:	35ff      	adds	r5, #255	; 0xff
 801779c:	197b      	adds	r3, r7, r5
 801779e:	781b      	ldrb	r3, [r3, #0]
 80177a0:	26a7      	movs	r6, #167	; 0xa7
 80177a2:	0076      	lsls	r6, r6, #1
 80177a4:	19ba      	adds	r2, r7, r6
 80177a6:	8812      	ldrh	r2, [r2, #0]
 80177a8:	4353      	muls	r3, r2
 80177aa:	2164      	movs	r1, #100	; 0x64
 80177ac:	0018      	movs	r0, r3
 80177ae:	f7ee fdd9 	bl	8006364 <__udivsi3>
 80177b2:	0003      	movs	r3, r0
 80177b4:	001a      	movs	r2, r3
 80177b6:	249d      	movs	r4, #157	; 0x9d
 80177b8:	0064      	lsls	r4, r4, #1
 80177ba:	193b      	adds	r3, r7, r4
 80177bc:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 80177be:	4b46      	ldr	r3, [pc, #280]	; (80178d8 <Send_DpmConfigSetCnf+0x888>)
 80177c0:	22a8      	movs	r2, #168	; 0xa8
 80177c2:	0052      	lsls	r2, r2, #1
 80177c4:	189b      	adds	r3, r3, r2
 80177c6:	19db      	adds	r3, r3, r7
 80177c8:	781a      	ldrb	r2, [r3, #0]
 80177ca:	193b      	adds	r3, r7, r4
 80177cc:	881b      	ldrh	r3, [r3, #0]
 80177ce:	b2d8      	uxtb	r0, r3
 80177d0:	4942      	ldr	r1, [pc, #264]	; (80178dc <Send_DpmConfigSetCnf+0x88c>)
 80177d2:	0013      	movs	r3, r2
 80177d4:	005b      	lsls	r3, r3, #1
 80177d6:	189b      	adds	r3, r3, r2
 80177d8:	009b      	lsls	r3, r3, #2
 80177da:	18cb      	adds	r3, r1, r3
 80177dc:	3307      	adds	r3, #7
 80177de:	1c02      	adds	r2, r0, #0
 80177e0:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 80177e2:	197b      	adds	r3, r7, r5
 80177e4:	781b      	ldrb	r3, [r3, #0]
 80177e6:	19ba      	adds	r2, r7, r6
 80177e8:	8812      	ldrh	r2, [r2, #0]
 80177ea:	2164      	movs	r1, #100	; 0x64
 80177ec:	1a8a      	subs	r2, r1, r2
 80177ee:	4353      	muls	r3, r2
 80177f0:	2164      	movs	r1, #100	; 0x64
 80177f2:	0018      	movs	r0, r3
 80177f4:	f7ee fdb6 	bl	8006364 <__udivsi3>
 80177f8:	0003      	movs	r3, r0
 80177fa:	001a      	movs	r2, r3
 80177fc:	193b      	adds	r3, r7, r4
 80177fe:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 8017800:	4b35      	ldr	r3, [pc, #212]	; (80178d8 <Send_DpmConfigSetCnf+0x888>)
 8017802:	22a8      	movs	r2, #168	; 0xa8
 8017804:	0052      	lsls	r2, r2, #1
 8017806:	189b      	adds	r3, r3, r2
 8017808:	19db      	adds	r3, r3, r7
 801780a:	781a      	ldrb	r2, [r3, #0]
 801780c:	193b      	adds	r3, r7, r4
 801780e:	881b      	ldrh	r3, [r3, #0]
 8017810:	b2d8      	uxtb	r0, r3
 8017812:	4932      	ldr	r1, [pc, #200]	; (80178dc <Send_DpmConfigSetCnf+0x88c>)
 8017814:	0013      	movs	r3, r2
 8017816:	005b      	lsls	r3, r3, #1
 8017818:	189b      	adds	r3, r3, r2
 801781a:	009b      	lsls	r3, r3, #2
 801781c:	18cb      	adds	r3, r1, r3
 801781e:	3306      	adds	r3, #6
 8017820:	1c02      	adds	r2, r0, #0
 8017822:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 8017824:	241a      	movs	r4, #26
 8017826:	34ff      	adds	r4, #255	; 0xff
 8017828:	193b      	adds	r3, r7, r4
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	2bff      	cmp	r3, #255	; 0xff
 801782e:	d04b      	beq.n	80178c8 <Send_DpmConfigSetCnf+0x878>
  {
    TLV_deinit_encode(&send_tlv);
 8017830:	2594      	movs	r5, #148	; 0x94
 8017832:	006d      	lsls	r5, r5, #1
 8017834:	197b      	adds	r3, r7, r5
 8017836:	0018      	movs	r0, r3
 8017838:	f7fd fc7a 	bl	8015130 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 801783c:	4b26      	ldr	r3, [pc, #152]	; (80178d8 <Send_DpmConfigSetCnf+0x888>)
 801783e:	22a8      	movs	r2, #168	; 0xa8
 8017840:	0052      	lsls	r2, r2, #1
 8017842:	189b      	adds	r3, r3, r2
 8017844:	19db      	adds	r3, r3, r7
 8017846:	781b      	ldrb	r3, [r3, #0]
 8017848:	3301      	adds	r3, #1
 801784a:	015b      	lsls	r3, r3, #5
 801784c:	b25b      	sxtb	r3, r3
 801784e:	2208      	movs	r2, #8
 8017850:	4313      	orrs	r3, r2
 8017852:	b25b      	sxtb	r3, r3
 8017854:	b2d9      	uxtb	r1, r3
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	2280      	movs	r2, #128	; 0x80
 801785a:	0052      	lsls	r2, r2, #1
 801785c:	1978      	adds	r0, r7, r5
 801785e:	f7fd faa2 	bl	8014da6 <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 8017862:	1939      	adds	r1, r7, r4
 8017864:	197b      	adds	r3, r7, r5
 8017866:	2201      	movs	r2, #1
 8017868:	0018      	movs	r0, r3
 801786a:	f7fd fbcd 	bl	8015008 <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 801786e:	193b      	adds	r3, r7, r4
 8017870:	781b      	ldrb	r3, [r3, #0]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d022      	beq.n	80178bc <Send_DpmConfigSetCnf+0x86c>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 8017876:	2300      	movs	r3, #0
 8017878:	229e      	movs	r2, #158	; 0x9e
 801787a:	0052      	lsls	r2, r2, #1
 801787c:	18ba      	adds	r2, r7, r2
 801787e:	6013      	str	r3, [r2, #0]
 8017880:	e012      	b.n	80178a8 <Send_DpmConfigSetCnf+0x858>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 8017882:	2318      	movs	r3, #24
 8017884:	18fa      	adds	r2, r7, r3
 8017886:	249e      	movs	r4, #158	; 0x9e
 8017888:	0064      	lsls	r4, r4, #1
 801788a:	193b      	adds	r3, r7, r4
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	18d1      	adds	r1, r2, r3
 8017890:	2394      	movs	r3, #148	; 0x94
 8017892:	005b      	lsls	r3, r3, #1
 8017894:	18fb      	adds	r3, r7, r3
 8017896:	2201      	movs	r2, #1
 8017898:	0018      	movs	r0, r3
 801789a:	f7fd fbb5 	bl	8015008 <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 801789e:	193b      	adds	r3, r7, r4
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	3301      	adds	r3, #1
 80178a4:	193a      	adds	r2, r7, r4
 80178a6:	6013      	str	r3, [r2, #0]
 80178a8:	234e      	movs	r3, #78	; 0x4e
 80178aa:	33ff      	adds	r3, #255	; 0xff
 80178ac:	18fb      	adds	r3, r7, r3
 80178ae:	781b      	ldrb	r3, [r3, #0]
 80178b0:	229e      	movs	r2, #158	; 0x9e
 80178b2:	0052      	lsls	r2, r2, #1
 80178b4:	18ba      	adds	r2, r7, r2
 80178b6:	6812      	ldr	r2, [r2, #0]
 80178b8:	429a      	cmp	r2, r3
 80178ba:	d3e2      	bcc.n	8017882 <Send_DpmConfigSetCnf+0x832>
      }
    }
    TLV_deinit_encode(&send_tlv);
 80178bc:	2394      	movs	r3, #148	; 0x94
 80178be:	005b      	lsls	r3, r3, #1
 80178c0:	18fb      	adds	r3, r7, r3
 80178c2:	0018      	movs	r0, r3
 80178c4:	f7fd fc34 	bl	8015130 <TLV_deinit_encode>
  }
}
 80178c8:	46c0      	nop			; (mov r8, r8)
 80178ca:	46bd      	mov	sp, r7
 80178cc:	b055      	add	sp, #340	; 0x154
 80178ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178d0:	fffffec7 	.word	0xfffffec7
 80178d4:	fffffec8 	.word	0xfffffec8
 80178d8:	fffffebf 	.word	0xfffffebf
 80178dc:	20000080 	.word	0x20000080

080178e0 <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b092      	sub	sp, #72	; 0x48
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	60b9      	str	r1, [r7, #8]
 80178e8:	607a      	str	r2, [r7, #4]
 80178ea:	210f      	movs	r1, #15
 80178ec:	187b      	adds	r3, r7, r1
 80178ee:	1c02      	adds	r2, r0, #0
 80178f0:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80178f2:	187b      	adds	r3, r7, r1
 80178f4:	781b      	ldrb	r3, [r3, #0]
 80178f6:	3301      	adds	r3, #1
 80178f8:	015b      	lsls	r3, r3, #5
 80178fa:	b25b      	sxtb	r3, r3
 80178fc:	2205      	movs	r2, #5
 80178fe:	4313      	orrs	r3, r2
 8017900:	b25b      	sxtb	r3, r3
 8017902:	b2d9      	uxtb	r1, r3
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	2280      	movs	r2, #128	; 0x80
 8017908:	0052      	lsls	r2, r2, #1
 801790a:	2030      	movs	r0, #48	; 0x30
 801790c:	1838      	adds	r0, r7, r0
 801790e:	f7fd fa4a 	bl	8014da6 <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 8017912:	68bb      	ldr	r3, [r7, #8]
 8017914:	0018      	movs	r0, r3
 8017916:	f7fd fcb1 	bl	801527c <TLV_get_string_length>
 801791a:	0003      	movs	r3, r0
 801791c:	001a      	movs	r2, r3
 801791e:	2344      	movs	r3, #68	; 0x44
 8017920:	18fb      	adds	r3, r7, r3
 8017922:	3a03      	subs	r2, #3
 8017924:	801a      	strh	r2, [r3, #0]
  uint8_t index = 0;
 8017926:	2347      	movs	r3, #71	; 0x47
 8017928:	18fb      	adds	r3, r7, r3
 801792a:	2200      	movs	r2, #0
 801792c:	701a      	strb	r2, [r3, #0]

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditional breaks) */
    if (0U == length)
 801792e:	2344      	movs	r3, #68	; 0x44
 8017930:	18fb      	adds	r3, r7, r3
 8017932:	881b      	ldrh	r3, [r3, #0]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d104      	bne.n	8017942 <Send_DpmConfigGetCnf+0x62>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 8017938:	2346      	movs	r3, #70	; 0x46
 801793a:	18fb      	adds	r3, r7, r3
 801793c:	22ff      	movs	r2, #255	; 0xff
 801793e:	701a      	strb	r2, [r3, #0]
 8017940:	e009      	b.n	8017956 <Send_DpmConfigGetCnf+0x76>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 8017942:	2347      	movs	r3, #71	; 0x47
 8017944:	18fb      	adds	r3, r7, r3
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	3307      	adds	r3, #7
 801794a:	68ba      	ldr	r2, [r7, #8]
 801794c:	18d2      	adds	r2, r2, r3
 801794e:	2346      	movs	r3, #70	; 0x46
 8017950:	18fb      	adds	r3, r7, r3
 8017952:	7812      	ldrb	r2, [r2, #0]
 8017954:	701a      	strb	r2, [r3, #0]

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 8017956:	2346      	movs	r3, #70	; 0x46
 8017958:	18fb      	adds	r3, r7, r3
 801795a:	781b      	ldrb	r3, [r3, #0]
 801795c:	2b1c      	cmp	r3, #28
 801795e:	dc0d      	bgt.n	801797c <Send_DpmConfigGetCnf+0x9c>
 8017960:	2b00      	cmp	r3, #0
 8017962:	da00      	bge.n	8017966 <Send_DpmConfigGetCnf+0x86>
 8017964:	e24c      	b.n	8017e00 <Send_DpmConfigGetCnf+0x520>
 8017966:	2b1c      	cmp	r3, #28
 8017968:	d900      	bls.n	801796c <Send_DpmConfigGetCnf+0x8c>
 801796a:	e249      	b.n	8017e00 <Send_DpmConfigGetCnf+0x520>
 801796c:	009a      	lsls	r2, r3, #2
 801796e:	4b02      	ldr	r3, [pc, #8]	; (8017978 <Send_DpmConfigGetCnf+0x98>)
 8017970:	18d3      	adds	r3, r2, r3
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	469f      	mov	pc, r3
 8017976:	46c0      	nop			; (mov r8, r8)
 8017978:	0801ab18 	.word	0x0801ab18
 801797c:	2bff      	cmp	r3, #255	; 0xff
 801797e:	d000      	beq.n	8017982 <Send_DpmConfigGetCnf+0xa2>
 8017980:	e23e      	b.n	8017e00 <Send_DpmConfigGetCnf+0x520>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 8017982:	230f      	movs	r3, #15
 8017984:	18fb      	adds	r3, r7, r3
 8017986:	781a      	ldrb	r2, [r3, #0]
 8017988:	49ed      	ldr	r1, [pc, #948]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 801798a:	0013      	movs	r3, r2
 801798c:	005b      	lsls	r3, r3, #1
 801798e:	189b      	adds	r3, r3, r2
 8017990:	009b      	lsls	r3, r3, #2
 8017992:	585b      	ldr	r3, [r3, r1]
 8017994:	b2da      	uxtb	r2, r3
 8017996:	212f      	movs	r1, #47	; 0x2f
 8017998:	187b      	adds	r3, r7, r1
 801799a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 801799c:	187b      	adds	r3, r7, r1
 801799e:	2230      	movs	r2, #48	; 0x30
 80179a0:	18b8      	adds	r0, r7, r2
 80179a2:	2201      	movs	r2, #1
 80179a4:	2100      	movs	r1, #0
 80179a6:	f7fd fa61 	bl	8014e6c <TLV_add>
        if (0U != length)
 80179aa:	2344      	movs	r3, #68	; 0x44
 80179ac:	18fb      	adds	r3, r7, r3
 80179ae:	881b      	ldrh	r3, [r3, #0]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d000      	beq.n	80179b6 <Send_DpmConfigGetCnf+0xd6>
 80179b4:	e237      	b.n	8017e26 <Send_DpmConfigGetCnf+0x546>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 80179b6:	230f      	movs	r3, #15
 80179b8:	18fb      	adds	r3, r7, r3
 80179ba:	781a      	ldrb	r2, [r3, #0]
 80179bc:	49e0      	ldr	r1, [pc, #896]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 80179be:	2008      	movs	r0, #8
 80179c0:	0013      	movs	r3, r2
 80179c2:	005b      	lsls	r3, r3, #1
 80179c4:	189b      	adds	r3, r3, r2
 80179c6:	009b      	lsls	r3, r3, #2
 80179c8:	18cb      	adds	r3, r1, r3
 80179ca:	181b      	adds	r3, r3, r0
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	079b      	lsls	r3, r3, #30
 80179d0:	0fdb      	lsrs	r3, r3, #31
 80179d2:	b2db      	uxtb	r3, r3
 80179d4:	001a      	movs	r2, r3
 80179d6:	212e      	movs	r1, #46	; 0x2e
 80179d8:	187b      	adds	r3, r7, r1
 80179da:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 80179dc:	187b      	adds	r3, r7, r1
 80179de:	2230      	movs	r2, #48	; 0x30
 80179e0:	18b8      	adds	r0, r7, r2
 80179e2:	2201      	movs	r2, #1
 80179e4:	2102      	movs	r1, #2
 80179e6:	f7fd fa41 	bl	8014e6c <TLV_add>
        if (0U != length)
 80179ea:	2344      	movs	r3, #68	; 0x44
 80179ec:	18fb      	adds	r3, r7, r3
 80179ee:	881b      	ldrh	r3, [r3, #0]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d000      	beq.n	80179f6 <Send_DpmConfigGetCnf+0x116>
 80179f4:	e219      	b.n	8017e2a <Send_DpmConfigGetCnf+0x54a>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 80179f6:	230f      	movs	r3, #15
 80179f8:	18fb      	adds	r3, r7, r3
 80179fa:	781a      	ldrb	r2, [r3, #0]
 80179fc:	49d1      	ldr	r1, [pc, #836]	; (8017d44 <Send_DpmConfigGetCnf+0x464>)
 80179fe:	0013      	movs	r3, r2
 8017a00:	00db      	lsls	r3, r3, #3
 8017a02:	1a9b      	subs	r3, r3, r2
 8017a04:	011b      	lsls	r3, r3, #4
 8017a06:	5c5b      	ldrb	r3, [r3, r1]
 8017a08:	071b      	lsls	r3, r3, #28
 8017a0a:	0fdb      	lsrs	r3, r3, #31
 8017a0c:	b2db      	uxtb	r3, r3
 8017a0e:	001a      	movs	r2, r3
 8017a10:	212d      	movs	r1, #45	; 0x2d
 8017a12:	187b      	adds	r3, r7, r1
 8017a14:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 8017a16:	187b      	adds	r3, r7, r1
 8017a18:	2230      	movs	r2, #48	; 0x30
 8017a1a:	18b8      	adds	r0, r7, r2
 8017a1c:	2201      	movs	r2, #1
 8017a1e:	2103      	movs	r1, #3
 8017a20:	f7fd fa24 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017a24:	2344      	movs	r3, #68	; 0x44
 8017a26:	18fb      	adds	r3, r7, r3
 8017a28:	881b      	ldrh	r3, [r3, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d000      	beq.n	8017a30 <Send_DpmConfigGetCnf+0x150>
 8017a2e:	e1fe      	b.n	8017e2e <Send_DpmConfigGetCnf+0x54e>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 8017a30:	230f      	movs	r3, #15
 8017a32:	18fb      	adds	r3, r7, r3
 8017a34:	781a      	ldrb	r2, [r3, #0]
 8017a36:	49c3      	ldr	r1, [pc, #780]	; (8017d44 <Send_DpmConfigGetCnf+0x464>)
 8017a38:	0013      	movs	r3, r2
 8017a3a:	00db      	lsls	r3, r3, #3
 8017a3c:	1a9b      	subs	r3, r3, r2
 8017a3e:	011b      	lsls	r3, r3, #4
 8017a40:	5c5b      	ldrb	r3, [r3, r1]
 8017a42:	075b      	lsls	r3, r3, #29
 8017a44:	0fdb      	lsrs	r3, r3, #31
 8017a46:	b2db      	uxtb	r3, r3
 8017a48:	001a      	movs	r2, r3
 8017a4a:	212c      	movs	r1, #44	; 0x2c
 8017a4c:	187b      	adds	r3, r7, r1
 8017a4e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8017a50:	187b      	adds	r3, r7, r1
 8017a52:	2230      	movs	r2, #48	; 0x30
 8017a54:	18b8      	adds	r0, r7, r2
 8017a56:	2201      	movs	r2, #1
 8017a58:	211c      	movs	r1, #28
 8017a5a:	f7fd fa07 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017a5e:	2344      	movs	r3, #68	; 0x44
 8017a60:	18fb      	adds	r3, r7, r3
 8017a62:	881b      	ldrh	r3, [r3, #0]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d000      	beq.n	8017a6a <Send_DpmConfigGetCnf+0x18a>
 8017a68:	e1e3      	b.n	8017e32 <Send_DpmConfigGetCnf+0x552>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 8017a6a:	230f      	movs	r3, #15
 8017a6c:	18fb      	adds	r3, r7, r3
 8017a6e:	781a      	ldrb	r2, [r3, #0]
 8017a70:	49b3      	ldr	r1, [pc, #716]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 8017a72:	0013      	movs	r3, r2
 8017a74:	005b      	lsls	r3, r3, #1
 8017a76:	189b      	adds	r3, r3, r2
 8017a78:	009b      	lsls	r3, r3, #2
 8017a7a:	18cb      	adds	r3, r1, r3
 8017a7c:	791b      	ldrb	r3, [r3, #4]
 8017a7e:	075b      	lsls	r3, r3, #29
 8017a80:	0fdb      	lsrs	r3, r3, #31
 8017a82:	b2db      	uxtb	r3, r3
 8017a84:	001a      	movs	r2, r3
 8017a86:	212b      	movs	r1, #43	; 0x2b
 8017a88:	187b      	adds	r3, r7, r1
 8017a8a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 8017a8c:	187b      	adds	r3, r7, r1
 8017a8e:	2230      	movs	r2, #48	; 0x30
 8017a90:	18b8      	adds	r0, r7, r2
 8017a92:	2201      	movs	r2, #1
 8017a94:	2104      	movs	r1, #4
 8017a96:	f7fd f9e9 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017a9a:	2344      	movs	r3, #68	; 0x44
 8017a9c:	18fb      	adds	r3, r7, r3
 8017a9e:	881b      	ldrh	r3, [r3, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d000      	beq.n	8017aa6 <Send_DpmConfigGetCnf+0x1c6>
 8017aa4:	e1c7      	b.n	8017e36 <Send_DpmConfigGetCnf+0x556>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 8017aa6:	230f      	movs	r3, #15
 8017aa8:	18fb      	adds	r3, r7, r3
 8017aaa:	781a      	ldrb	r2, [r3, #0]
 8017aac:	49a4      	ldr	r1, [pc, #656]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 8017aae:	0013      	movs	r3, r2
 8017ab0:	005b      	lsls	r3, r3, #1
 8017ab2:	189b      	adds	r3, r3, r2
 8017ab4:	009b      	lsls	r3, r3, #2
 8017ab6:	18cb      	adds	r3, r1, r3
 8017ab8:	791b      	ldrb	r3, [r3, #4]
 8017aba:	071b      	lsls	r3, r3, #28
 8017abc:	0fdb      	lsrs	r3, r3, #31
 8017abe:	b2db      	uxtb	r3, r3
 8017ac0:	001a      	movs	r2, r3
 8017ac2:	212a      	movs	r1, #42	; 0x2a
 8017ac4:	187b      	adds	r3, r7, r1
 8017ac6:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 8017ac8:	187b      	adds	r3, r7, r1
 8017aca:	2230      	movs	r2, #48	; 0x30
 8017acc:	18b8      	adds	r0, r7, r2
 8017ace:	2201      	movs	r2, #1
 8017ad0:	2105      	movs	r1, #5
 8017ad2:	f7fd f9cb 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017ad6:	2344      	movs	r3, #68	; 0x44
 8017ad8:	18fb      	adds	r3, r7, r3
 8017ada:	881b      	ldrh	r3, [r3, #0]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d000      	beq.n	8017ae2 <Send_DpmConfigGetCnf+0x202>
 8017ae0:	e1ab      	b.n	8017e3a <Send_DpmConfigGetCnf+0x55a>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 8017ae2:	230f      	movs	r3, #15
 8017ae4:	18fb      	adds	r3, r7, r3
 8017ae6:	781a      	ldrb	r2, [r3, #0]
 8017ae8:	4995      	ldr	r1, [pc, #596]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 8017aea:	0013      	movs	r3, r2
 8017aec:	005b      	lsls	r3, r3, #1
 8017aee:	189b      	adds	r3, r3, r2
 8017af0:	009b      	lsls	r3, r3, #2
 8017af2:	18cb      	adds	r3, r1, r3
 8017af4:	795b      	ldrb	r3, [r3, #5]
 8017af6:	069b      	lsls	r3, r3, #26
 8017af8:	0fdb      	lsrs	r3, r3, #31
 8017afa:	b2db      	uxtb	r3, r3
 8017afc:	001a      	movs	r2, r3
 8017afe:	2129      	movs	r1, #41	; 0x29
 8017b00:	187b      	adds	r3, r7, r1
 8017b02:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 8017b04:	187b      	adds	r3, r7, r1
 8017b06:	2230      	movs	r2, #48	; 0x30
 8017b08:	18b8      	adds	r0, r7, r2
 8017b0a:	2201      	movs	r2, #1
 8017b0c:	2106      	movs	r1, #6
 8017b0e:	f7fd f9ad 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017b12:	2344      	movs	r3, #68	; 0x44
 8017b14:	18fb      	adds	r3, r7, r3
 8017b16:	881b      	ldrh	r3, [r3, #0]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d000      	beq.n	8017b1e <Send_DpmConfigGetCnf+0x23e>
 8017b1c:	e18f      	b.n	8017e3e <Send_DpmConfigGetCnf+0x55e>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 8017b1e:	230f      	movs	r3, #15
 8017b20:	18fb      	adds	r3, r7, r3
 8017b22:	781a      	ldrb	r2, [r3, #0]
 8017b24:	4986      	ldr	r1, [pc, #536]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 8017b26:	0013      	movs	r3, r2
 8017b28:	005b      	lsls	r3, r3, #1
 8017b2a:	189b      	adds	r3, r3, r2
 8017b2c:	009b      	lsls	r3, r3, #2
 8017b2e:	18cb      	adds	r3, r1, r3
 8017b30:	791b      	ldrb	r3, [r3, #4]
 8017b32:	061b      	lsls	r3, r3, #24
 8017b34:	0fdb      	lsrs	r3, r3, #31
 8017b36:	b2db      	uxtb	r3, r3
 8017b38:	001a      	movs	r2, r3
 8017b3a:	2128      	movs	r1, #40	; 0x28
 8017b3c:	187b      	adds	r3, r7, r1
 8017b3e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8017b40:	187b      	adds	r3, r7, r1
 8017b42:	2230      	movs	r2, #48	; 0x30
 8017b44:	18b8      	adds	r0, r7, r2
 8017b46:	2201      	movs	r2, #1
 8017b48:	2107      	movs	r1, #7
 8017b4a:	f7fd f98f 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017b4e:	2344      	movs	r3, #68	; 0x44
 8017b50:	18fb      	adds	r3, r7, r3
 8017b52:	881b      	ldrh	r3, [r3, #0]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d000      	beq.n	8017b5a <Send_DpmConfigGetCnf+0x27a>
 8017b58:	e173      	b.n	8017e42 <Send_DpmConfigGetCnf+0x562>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 8017b5a:	230f      	movs	r3, #15
 8017b5c:	18fb      	adds	r3, r7, r3
 8017b5e:	781a      	ldrb	r2, [r3, #0]
 8017b60:	4977      	ldr	r1, [pc, #476]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 8017b62:	0013      	movs	r3, r2
 8017b64:	005b      	lsls	r3, r3, #1
 8017b66:	189b      	adds	r3, r3, r2
 8017b68:	009b      	lsls	r3, r3, #2
 8017b6a:	18cb      	adds	r3, r1, r3
 8017b6c:	791b      	ldrb	r3, [r3, #4]
 8017b6e:	065b      	lsls	r3, r3, #25
 8017b70:	0fdb      	lsrs	r3, r3, #31
 8017b72:	b2db      	uxtb	r3, r3
 8017b74:	001a      	movs	r2, r3
 8017b76:	2127      	movs	r1, #39	; 0x27
 8017b78:	187b      	adds	r3, r7, r1
 8017b7a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 8017b7c:	187b      	adds	r3, r7, r1
 8017b7e:	2230      	movs	r2, #48	; 0x30
 8017b80:	18b8      	adds	r0, r7, r2
 8017b82:	2201      	movs	r2, #1
 8017b84:	210a      	movs	r1, #10
 8017b86:	f7fd f971 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017b8a:	2344      	movs	r3, #68	; 0x44
 8017b8c:	18fb      	adds	r3, r7, r3
 8017b8e:	881b      	ldrh	r3, [r3, #0]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d000      	beq.n	8017b96 <Send_DpmConfigGetCnf+0x2b6>
 8017b94:	e157      	b.n	8017e46 <Send_DpmConfigGetCnf+0x566>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 8017b96:	230f      	movs	r3, #15
 8017b98:	18fb      	adds	r3, r7, r3
 8017b9a:	781a      	ldrb	r2, [r3, #0]
 8017b9c:	4968      	ldr	r1, [pc, #416]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 8017b9e:	0013      	movs	r3, r2
 8017ba0:	005b      	lsls	r3, r3, #1
 8017ba2:	189b      	adds	r3, r3, r2
 8017ba4:	009b      	lsls	r3, r3, #2
 8017ba6:	18cb      	adds	r3, r1, r3
 8017ba8:	3308      	adds	r3, #8
 8017baa:	881a      	ldrh	r2, [r3, #0]
 8017bac:	2124      	movs	r1, #36	; 0x24
 8017bae:	187b      	adds	r3, r7, r1
 8017bb0:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 8017bb2:	187b      	adds	r3, r7, r1
 8017bb4:	2230      	movs	r2, #48	; 0x30
 8017bb6:	18b8      	adds	r0, r7, r2
 8017bb8:	2202      	movs	r2, #2
 8017bba:	210b      	movs	r1, #11
 8017bbc:	f7fd f956 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017bc0:	2344      	movs	r3, #68	; 0x44
 8017bc2:	18fb      	adds	r3, r7, r3
 8017bc4:	881b      	ldrh	r3, [r3, #0]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d000      	beq.n	8017bcc <Send_DpmConfigGetCnf+0x2ec>
 8017bca:	e13e      	b.n	8017e4a <Send_DpmConfigGetCnf+0x56a>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 8017bcc:	230f      	movs	r3, #15
 8017bce:	18fb      	adds	r3, r7, r3
 8017bd0:	781a      	ldrb	r2, [r3, #0]
 8017bd2:	495c      	ldr	r1, [pc, #368]	; (8017d44 <Send_DpmConfigGetCnf+0x464>)
 8017bd4:	0013      	movs	r3, r2
 8017bd6:	00db      	lsls	r3, r3, #3
 8017bd8:	1a9b      	subs	r3, r3, r2
 8017bda:	011b      	lsls	r3, r3, #4
 8017bdc:	5c5b      	ldrb	r3, [r3, r1]
 8017bde:	079b      	lsls	r3, r3, #30
 8017be0:	0fdb      	lsrs	r3, r3, #31
 8017be2:	b2db      	uxtb	r3, r3
 8017be4:	001a      	movs	r2, r3
 8017be6:	2123      	movs	r1, #35	; 0x23
 8017be8:	187b      	adds	r3, r7, r1
 8017bea:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 8017bec:	187b      	adds	r3, r7, r1
 8017bee:	2230      	movs	r2, #48	; 0x30
 8017bf0:	18b8      	adds	r0, r7, r2
 8017bf2:	2201      	movs	r2, #1
 8017bf4:	2108      	movs	r1, #8
 8017bf6:	f7fd f939 	bl	8014e6c <TLV_add>
        if (0U != length)
 8017bfa:	2344      	movs	r3, #68	; 0x44
 8017bfc:	18fb      	adds	r3, r7, r3
 8017bfe:	881b      	ldrh	r3, [r3, #0]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d000      	beq.n	8017c06 <Send_DpmConfigGetCnf+0x326>
 8017c04:	e123      	b.n	8017e4e <Send_DpmConfigGetCnf+0x56e>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[1];
 8017c06:	2143      	movs	r1, #67	; 0x43
 8017c08:	187b      	adds	r3, r7, r1
 8017c0a:	4a4f      	ldr	r2, [pc, #316]	; (8017d48 <Send_DpmConfigGetCnf+0x468>)
 8017c0c:	7852      	ldrb	r2, [r2, #1]
 8017c0e:	701a      	strb	r2, [r3, #0]
          list_pdo  = (uint8_t *)PORT0_PDO_ListSRC;
 8017c10:	4b4e      	ldr	r3, [pc, #312]	; (8017d4c <Send_DpmConfigGetCnf+0x46c>)
 8017c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[3];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSRC;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SRC_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 8017c14:	187b      	adds	r3, r7, r1
 8017c16:	781b      	ldrb	r3, [r3, #0]
 8017c18:	b29b      	uxth	r3, r3
 8017c1a:	009b      	lsls	r3, r3, #2
 8017c1c:	b29a      	uxth	r2, r3
 8017c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c20:	2130      	movs	r1, #48	; 0x30
 8017c22:	1878      	adds	r0, r7, r1
 8017c24:	210d      	movs	r1, #13
 8017c26:	f7fd f921 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017c2a:	2344      	movs	r3, #68	; 0x44
 8017c2c:	18fb      	adds	r3, r7, r3
 8017c2e:	881b      	ldrh	r3, [r3, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d000      	beq.n	8017c36 <Send_DpmConfigGetCnf+0x356>
 8017c34:	e10d      	b.n	8017e52 <Send_DpmConfigGetCnf+0x572>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 8017c36:	230f      	movs	r3, #15
 8017c38:	18fb      	adds	r3, r7, r3
 8017c3a:	781a      	ldrb	r2, [r3, #0]
 8017c3c:	4941      	ldr	r1, [pc, #260]	; (8017d44 <Send_DpmConfigGetCnf+0x464>)
 8017c3e:	2068      	movs	r0, #104	; 0x68
 8017c40:	0013      	movs	r3, r2
 8017c42:	00db      	lsls	r3, r3, #3
 8017c44:	1a9b      	subs	r3, r3, r2
 8017c46:	011b      	lsls	r3, r3, #4
 8017c48:	18cb      	adds	r3, r1, r3
 8017c4a:	181b      	adds	r3, r3, r0
 8017c4c:	785b      	ldrb	r3, [r3, #1]
 8017c4e:	061b      	lsls	r3, r3, #24
 8017c50:	0e5b      	lsrs	r3, r3, #25
 8017c52:	b2db      	uxtb	r3, r3
 8017c54:	001a      	movs	r2, r3
 8017c56:	2122      	movs	r1, #34	; 0x22
 8017c58:	187b      	adds	r3, r7, r1
 8017c5a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8017c5c:	187b      	adds	r3, r7, r1
 8017c5e:	2230      	movs	r2, #48	; 0x30
 8017c60:	18b8      	adds	r0, r7, r2
 8017c62:	2201      	movs	r2, #1
 8017c64:	210e      	movs	r1, #14
 8017c66:	f7fd f901 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017c6a:	2344      	movs	r3, #68	; 0x44
 8017c6c:	18fb      	adds	r3, r7, r3
 8017c6e:	881b      	ldrh	r3, [r3, #0]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d000      	beq.n	8017c76 <Send_DpmConfigGetCnf+0x396>
 8017c74:	e0ef      	b.n	8017e56 <Send_DpmConfigGetCnf+0x576>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 8017c76:	230f      	movs	r3, #15
 8017c78:	18fb      	adds	r3, r7, r3
 8017c7a:	781a      	ldrb	r2, [r3, #0]
 8017c7c:	4931      	ldr	r1, [pc, #196]	; (8017d44 <Send_DpmConfigGetCnf+0x464>)
 8017c7e:	2068      	movs	r0, #104	; 0x68
 8017c80:	0013      	movs	r3, r2
 8017c82:	00db      	lsls	r3, r3, #3
 8017c84:	1a9b      	subs	r3, r3, r2
 8017c86:	011b      	lsls	r3, r3, #4
 8017c88:	18cb      	adds	r3, r1, r3
 8017c8a:	181b      	adds	r3, r3, r0
 8017c8c:	789b      	ldrb	r3, [r3, #2]
 8017c8e:	065b      	lsls	r3, r3, #25
 8017c90:	0e5b      	lsrs	r3, r3, #25
 8017c92:	b2db      	uxtb	r3, r3
 8017c94:	001a      	movs	r2, r3
 8017c96:	2121      	movs	r1, #33	; 0x21
 8017c98:	187b      	adds	r3, r7, r1
 8017c9a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 8017c9c:	187b      	adds	r3, r7, r1
 8017c9e:	2230      	movs	r2, #48	; 0x30
 8017ca0:	18b8      	adds	r0, r7, r2
 8017ca2:	2201      	movs	r2, #1
 8017ca4:	210f      	movs	r1, #15
 8017ca6:	f7fd f8e1 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017caa:	2344      	movs	r3, #68	; 0x44
 8017cac:	18fb      	adds	r3, r7, r3
 8017cae:	881b      	ldrh	r3, [r3, #0]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d000      	beq.n	8017cb6 <Send_DpmConfigGetCnf+0x3d6>
 8017cb4:	e0d1      	b.n	8017e5a <Send_DpmConfigGetCnf+0x57a>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 8017cb6:	230f      	movs	r3, #15
 8017cb8:	18fb      	adds	r3, r7, r3
 8017cba:	781a      	ldrb	r2, [r3, #0]
 8017cbc:	4920      	ldr	r1, [pc, #128]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 8017cbe:	0013      	movs	r3, r2
 8017cc0:	005b      	lsls	r3, r3, #1
 8017cc2:	189b      	adds	r3, r3, r2
 8017cc4:	009b      	lsls	r3, r3, #2
 8017cc6:	18cb      	adds	r3, r1, r3
 8017cc8:	795b      	ldrb	r3, [r3, #5]
 8017cca:	07db      	lsls	r3, r3, #31
 8017ccc:	0fdb      	lsrs	r3, r3, #31
 8017cce:	b2db      	uxtb	r3, r3
 8017cd0:	001a      	movs	r2, r3
 8017cd2:	2120      	movs	r1, #32
 8017cd4:	187b      	adds	r3, r7, r1
 8017cd6:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 8017cd8:	187b      	adds	r3, r7, r1
 8017cda:	2230      	movs	r2, #48	; 0x30
 8017cdc:	18b8      	adds	r0, r7, r2
 8017cde:	2201      	movs	r2, #1
 8017ce0:	2110      	movs	r1, #16
 8017ce2:	f7fd f8c3 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017ce6:	2344      	movs	r3, #68	; 0x44
 8017ce8:	18fb      	adds	r3, r7, r3
 8017cea:	881b      	ldrh	r3, [r3, #0]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d000      	beq.n	8017cf2 <Send_DpmConfigGetCnf+0x412>
 8017cf0:	e0b5      	b.n	8017e5e <Send_DpmConfigGetCnf+0x57e>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8017cf2:	230f      	movs	r3, #15
 8017cf4:	18fb      	adds	r3, r7, r3
 8017cf6:	781a      	ldrb	r2, [r3, #0]
 8017cf8:	4911      	ldr	r1, [pc, #68]	; (8017d40 <Send_DpmConfigGetCnf+0x460>)
 8017cfa:	0013      	movs	r3, r2
 8017cfc:	005b      	lsls	r3, r3, #1
 8017cfe:	189b      	adds	r3, r3, r2
 8017d00:	009b      	lsls	r3, r3, #2
 8017d02:	18cb      	adds	r3, r1, r3
 8017d04:	795b      	ldrb	r3, [r3, #5]
 8017d06:	079b      	lsls	r3, r3, #30
 8017d08:	0fdb      	lsrs	r3, r3, #31
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	001a      	movs	r2, r3
 8017d0e:	211f      	movs	r1, #31
 8017d10:	187b      	adds	r3, r7, r1
 8017d12:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8017d14:	187b      	adds	r3, r7, r1
 8017d16:	2230      	movs	r2, #48	; 0x30
 8017d18:	18b8      	adds	r0, r7, r2
 8017d1a:	2201      	movs	r2, #1
 8017d1c:	2111      	movs	r1, #17
 8017d1e:	f7fd f8a5 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017d22:	2344      	movs	r3, #68	; 0x44
 8017d24:	18fb      	adds	r3, r7, r3
 8017d26:	881b      	ldrh	r3, [r3, #0]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d000      	beq.n	8017d2e <Send_DpmConfigGetCnf+0x44e>
 8017d2c:	e099      	b.n	8017e62 <Send_DpmConfigGetCnf+0x582>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 8017d2e:	230f      	movs	r3, #15
 8017d30:	18fb      	adds	r3, r7, r3
 8017d32:	781a      	ldrb	r2, [r3, #0]
 8017d34:	4b06      	ldr	r3, [pc, #24]	; (8017d50 <Send_DpmConfigGetCnf+0x470>)
 8017d36:	00d2      	lsls	r2, r2, #3
 8017d38:	58d3      	ldr	r3, [r2, r3]
 8017d3a:	61bb      	str	r3, [r7, #24]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 8017d3c:	2318      	movs	r3, #24
 8017d3e:	e009      	b.n	8017d54 <Send_DpmConfigGetCnf+0x474>
 8017d40:	20000080 	.word	0x20000080
 8017d44:	20000094 	.word	0x20000094
 8017d48:	20000104 	.word	0x20000104
 8017d4c:	20000108 	.word	0x20000108
 8017d50:	2000008c 	.word	0x2000008c
 8017d54:	18fb      	adds	r3, r7, r3
 8017d56:	2230      	movs	r2, #48	; 0x30
 8017d58:	18b8      	adds	r0, r7, r2
 8017d5a:	2204      	movs	r2, #4
 8017d5c:	2112      	movs	r1, #18
 8017d5e:	f7fd f885 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017d62:	2344      	movs	r3, #68	; 0x44
 8017d64:	18fb      	adds	r3, r7, r3
 8017d66:	881b      	ldrh	r3, [r3, #0]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d000      	beq.n	8017d6e <Send_DpmConfigGetCnf+0x48e>
 8017d6c:	e07b      	b.n	8017e66 <Send_DpmConfigGetCnf+0x586>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 8017d6e:	230f      	movs	r3, #15
 8017d70:	18fb      	adds	r3, r7, r3
 8017d72:	781b      	ldrb	r3, [r3, #0]
 8017d74:	4a4d      	ldr	r2, [pc, #308]	; (8017eac <Send_DpmConfigGetCnf+0x5cc>)
 8017d76:	00db      	lsls	r3, r3, #3
 8017d78:	18d3      	adds	r3, r2, r3
 8017d7a:	3304      	adds	r3, #4
 8017d7c:	881a      	ldrh	r2, [r3, #0]
 8017d7e:	2116      	movs	r1, #22
 8017d80:	187b      	adds	r3, r7, r1
 8017d82:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 8017d84:	187b      	adds	r3, r7, r1
 8017d86:	2230      	movs	r2, #48	; 0x30
 8017d88:	18b8      	adds	r0, r7, r2
 8017d8a:	2202      	movs	r2, #2
 8017d8c:	2117      	movs	r1, #23
 8017d8e:	f7fd f86d 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017d92:	2344      	movs	r3, #68	; 0x44
 8017d94:	18fb      	adds	r3, r7, r3
 8017d96:	881b      	ldrh	r3, [r3, #0]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d000      	beq.n	8017d9e <Send_DpmConfigGetCnf+0x4be>
 8017d9c:	e065      	b.n	8017e6a <Send_DpmConfigGetCnf+0x58a>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 8017d9e:	230f      	movs	r3, #15
 8017da0:	18fb      	adds	r3, r7, r3
 8017da2:	781b      	ldrb	r3, [r3, #0]
 8017da4:	4a41      	ldr	r2, [pc, #260]	; (8017eac <Send_DpmConfigGetCnf+0x5cc>)
 8017da6:	00db      	lsls	r3, r3, #3
 8017da8:	18d3      	adds	r3, r2, r3
 8017daa:	3306      	adds	r3, #6
 8017dac:	881a      	ldrh	r2, [r3, #0]
 8017dae:	2114      	movs	r1, #20
 8017db0:	187b      	adds	r3, r7, r1
 8017db2:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 8017db4:	187b      	adds	r3, r7, r1
 8017db6:	2230      	movs	r2, #48	; 0x30
 8017db8:	18b8      	adds	r0, r7, r2
 8017dba:	2202      	movs	r2, #2
 8017dbc:	2118      	movs	r1, #24
 8017dbe:	f7fd f855 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017dc2:	2344      	movs	r3, #68	; 0x44
 8017dc4:	18fb      	adds	r3, r7, r3
 8017dc6:	881b      	ldrh	r3, [r3, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d150      	bne.n	8017e6e <Send_DpmConfigGetCnf+0x58e>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 8017dcc:	230f      	movs	r3, #15
 8017dce:	18fb      	adds	r3, r7, r3
 8017dd0:	781a      	ldrb	r2, [r3, #0]
 8017dd2:	4937      	ldr	r1, [pc, #220]	; (8017eb0 <Send_DpmConfigGetCnf+0x5d0>)
 8017dd4:	0013      	movs	r3, r2
 8017dd6:	005b      	lsls	r3, r3, #1
 8017dd8:	189b      	adds	r3, r3, r2
 8017dda:	005b      	lsls	r3, r3, #1
 8017ddc:	18cb      	adds	r3, r1, r3
 8017dde:	3304      	adds	r3, #4
 8017de0:	781a      	ldrb	r2, [r3, #0]
 8017de2:	2113      	movs	r1, #19
 8017de4:	187b      	adds	r3, r7, r1
 8017de6:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 8017de8:	187b      	adds	r3, r7, r1
 8017dea:	2230      	movs	r2, #48	; 0x30
 8017dec:	18b8      	adds	r0, r7, r2
 8017dee:	2201      	movs	r2, #1
 8017df0:	211a      	movs	r1, #26
 8017df2:	f7fd f83b 	bl	8014e6c <TLV_add>
      }
      if (0U != length)
 8017df6:	2344      	movs	r3, #68	; 0x44
 8017df8:	18fb      	adds	r3, r7, r3
 8017dfa:	881b      	ldrh	r3, [r3, #0]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d138      	bne.n	8017e72 <Send_DpmConfigGetCnf+0x592>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 8017e00:	2344      	movs	r3, #68	; 0x44
 8017e02:	18fb      	adds	r3, r7, r3
 8017e04:	881b      	ldrh	r3, [r3, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d035      	beq.n	8017e76 <Send_DpmConfigGetCnf+0x596>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 8017e0a:	2330      	movs	r3, #48	; 0x30
 8017e0c:	18fb      	adds	r3, r7, r3
 8017e0e:	0018      	movs	r0, r3
 8017e10:	f7fd f98e 	bl	8015130 <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 8017e14:	6879      	ldr	r1, [r7, #4]
 8017e16:	230f      	movs	r3, #15
 8017e18:	18fb      	adds	r3, r7, r3
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	2203      	movs	r2, #3
 8017e1e:	0018      	movs	r0, r3
 8017e20:	f000 f848 	bl	8017eb4 <Send_DpmConfigGetRej>
          goto __end;
 8017e24:	e038      	b.n	8017e98 <Send_DpmConfigGetCnf+0x5b8>
          break;
 8017e26:	46c0      	nop			; (mov r8, r8)
 8017e28:	e026      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e2a:	46c0      	nop			; (mov r8, r8)
 8017e2c:	e024      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e2e:	46c0      	nop			; (mov r8, r8)
 8017e30:	e022      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e32:	46c0      	nop			; (mov r8, r8)
 8017e34:	e020      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e36:	46c0      	nop			; (mov r8, r8)
 8017e38:	e01e      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e3a:	46c0      	nop			; (mov r8, r8)
 8017e3c:	e01c      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e3e:	46c0      	nop			; (mov r8, r8)
 8017e40:	e01a      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e42:	46c0      	nop			; (mov r8, r8)
 8017e44:	e018      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e46:	46c0      	nop			; (mov r8, r8)
 8017e48:	e016      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e4a:	46c0      	nop			; (mov r8, r8)
 8017e4c:	e014      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
          break;
 8017e4e:	46c0      	nop			; (mov r8, r8)
 8017e50:	e012      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e52:	46c0      	nop			; (mov r8, r8)
 8017e54:	e010      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e56:	46c0      	nop			; (mov r8, r8)
 8017e58:	e00e      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e5a:	46c0      	nop			; (mov r8, r8)
 8017e5c:	e00c      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e5e:	46c0      	nop			; (mov r8, r8)
 8017e60:	e00a      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e62:	46c0      	nop			; (mov r8, r8)
 8017e64:	e008      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e66:	46c0      	nop			; (mov r8, r8)
 8017e68:	e006      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e6a:	46c0      	nop			; (mov r8, r8)
 8017e6c:	e004      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e6e:	46c0      	nop			; (mov r8, r8)
 8017e70:	e002      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        break;
 8017e72:	46c0      	nop			; (mov r8, r8)
 8017e74:	e000      	b.n	8017e78 <Send_DpmConfigGetCnf+0x598>
        }
        break;
 8017e76:	46c0      	nop			; (mov r8, r8)
    }
    index++;
 8017e78:	2147      	movs	r1, #71	; 0x47
 8017e7a:	187b      	adds	r3, r7, r1
 8017e7c:	781a      	ldrb	r2, [r3, #0]
 8017e7e:	187b      	adds	r3, r7, r1
 8017e80:	3201      	adds	r2, #1
 8017e82:	701a      	strb	r2, [r3, #0]
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 8017e84:	187b      	adds	r3, r7, r1
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	b29b      	uxth	r3, r3
 8017e8a:	2244      	movs	r2, #68	; 0x44
 8017e8c:	18ba      	adds	r2, r7, r2
 8017e8e:	8812      	ldrh	r2, [r2, #0]
 8017e90:	429a      	cmp	r2, r3
 8017e92:	d900      	bls.n	8017e96 <Send_DpmConfigGetCnf+0x5b6>
 8017e94:	e54b      	b.n	801792e <Send_DpmConfigGetCnf+0x4e>

__end:
 8017e96:	46c0      	nop			; (mov r8, r8)
  TLV_deinit_encode(&send_tlv);
 8017e98:	2330      	movs	r3, #48	; 0x30
 8017e9a:	18fb      	adds	r3, r7, r3
 8017e9c:	0018      	movs	r0, r3
 8017e9e:	f7fd f947 	bl	8015130 <TLV_deinit_encode>
}
 8017ea2:	46c0      	nop			; (mov r8, r8)
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	b012      	add	sp, #72	; 0x48
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	46c0      	nop			; (mov r8, r8)
 8017eac:	2000008c 	.word	0x2000008c
 8017eb0:	20002834 	.word	0x20002834

08017eb4 <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8017eb4:	b590      	push	{r4, r7, lr}
 8017eb6:	b087      	sub	sp, #28
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6039      	str	r1, [r7, #0]
 8017ebc:	0011      	movs	r1, r2
 8017ebe:	1dfb      	adds	r3, r7, #7
 8017ec0:	1c02      	adds	r2, r0, #0
 8017ec2:	701a      	strb	r2, [r3, #0]
 8017ec4:	1dbb      	adds	r3, r7, #6
 8017ec6:	1c0a      	adds	r2, r1, #0
 8017ec8:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8017eca:	683b      	ldr	r3, [r7, #0]
 8017ecc:	2280      	movs	r2, #128	; 0x80
 8017ece:	0052      	lsls	r2, r2, #1
 8017ed0:	240c      	movs	r4, #12
 8017ed2:	1938      	adds	r0, r7, r4
 8017ed4:	2108      	movs	r1, #8
 8017ed6:	f7fc ff66 	bl	8014da6 <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8017eda:	1dbb      	adds	r3, r7, #6
 8017edc:	7819      	ldrb	r1, [r3, #0]
 8017ede:	1938      	adds	r0, r7, r4
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	f7fc ffc2 	bl	8014e6c <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8017ee8:	193b      	adds	r3, r7, r4
 8017eea:	0018      	movs	r0, r3
 8017eec:	f7fd f920 	bl	8015130 <TLV_deinit_encode>
}
 8017ef0:	46c0      	nop			; (mov r8, r8)
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	b007      	add	sp, #28
 8017ef6:	bd90      	pop	{r4, r7, pc}

08017ef8 <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8017ef8:	b590      	push	{r4, r7, lr}
 8017efa:	b087      	sub	sp, #28
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6039      	str	r1, [r7, #0]
 8017f00:	0011      	movs	r1, r2
 8017f02:	1dfb      	adds	r3, r7, #7
 8017f04:	1c02      	adds	r2, r0, #0
 8017f06:	701a      	strb	r2, [r3, #0]
 8017f08:	1dbb      	adds	r3, r7, #6
 8017f0a:	1c0a      	adds	r2, r1, #0
 8017f0c:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	2280      	movs	r2, #128	; 0x80
 8017f12:	0052      	lsls	r2, r2, #1
 8017f14:	240c      	movs	r4, #12
 8017f16:	1938      	adds	r0, r7, r4
 8017f18:	210b      	movs	r1, #11
 8017f1a:	f7fc ff44 	bl	8014da6 <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8017f1e:	1dbb      	adds	r3, r7, #6
 8017f20:	7819      	ldrb	r1, [r3, #0]
 8017f22:	1938      	adds	r0, r7, r4
 8017f24:	2300      	movs	r3, #0
 8017f26:	2200      	movs	r2, #0
 8017f28:	f7fc ffa0 	bl	8014e6c <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8017f2c:	193b      	adds	r3, r7, r4
 8017f2e:	0018      	movs	r0, r3
 8017f30:	f7fd f8fe 	bl	8015130 <TLV_deinit_encode>
}
 8017f34:	46c0      	nop			; (mov r8, r8)
 8017f36:	46bd      	mov	sp, r7
 8017f38:	b007      	add	sp, #28
 8017f3a:	bd90      	pop	{r4, r7, pc}

08017f3c <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 8017f3c:	b5b0      	push	{r4, r5, r7, lr}
 8017f3e:	b090      	sub	sp, #64	; 0x40
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6039      	str	r1, [r7, #0]
 8017f44:	0011      	movs	r1, r2
 8017f46:	1dfb      	adds	r3, r7, #7
 8017f48:	1c02      	adds	r2, r0, #0
 8017f4a:	701a      	strb	r2, [r3, #0]
 8017f4c:	1dbb      	adds	r3, r7, #6
 8017f4e:	1c0a      	adds	r2, r1, #0
 8017f50:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8017f52:	1dfb      	adds	r3, r7, #7
 8017f54:	781b      	ldrb	r3, [r3, #0]
 8017f56:	3301      	adds	r3, #1
 8017f58:	015b      	lsls	r3, r3, #5
 8017f5a:	b25b      	sxtb	r3, r3
 8017f5c:	220f      	movs	r2, #15
 8017f5e:	4313      	orrs	r3, r2
 8017f60:	b25b      	sxtb	r3, r3
 8017f62:	b2d9      	uxtb	r1, r3
 8017f64:	683b      	ldr	r3, [r7, #0]
 8017f66:	2280      	movs	r2, #128	; 0x80
 8017f68:	0052      	lsls	r2, r2, #1
 8017f6a:	2030      	movs	r0, #48	; 0x30
 8017f6c:	1838      	adds	r0, r7, r0
 8017f6e:	f7fc ff1a 	bl	8014da6 <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 8017f72:	2508      	movs	r5, #8
 8017f74:	197b      	adds	r3, r7, r5
 8017f76:	4a1e      	ldr	r2, [pc, #120]	; (8017ff0 <Send_DpmRegisterReadCnf+0xb4>)
 8017f78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017f7a:	c313      	stmia	r3!, {r0, r1, r4}
 8017f7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017f7e:	c313      	stmia	r3!, {r0, r1, r4}
 8017f80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017f82:	c313      	stmia	r3!, {r0, r1, r4}
 8017f84:	8811      	ldrh	r1, [r2, #0]
 8017f86:	8019      	strh	r1, [r3, #0]
 8017f88:	7892      	ldrb	r2, [r2, #2]
 8017f8a:	709a      	strb	r2, [r3, #2]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 8017f8c:	233f      	movs	r3, #63	; 0x3f
 8017f8e:	18fb      	adds	r3, r7, r3
 8017f90:	2200      	movs	r2, #0
 8017f92:	701a      	strb	r2, [r3, #0]

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 8017f94:	1dbb      	adds	r3, r7, #6
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	2bff      	cmp	r3, #255	; 0xff
 8017f9a:	d003      	beq.n	8017fa4 <Send_DpmRegisterReadCnf+0x68>
  {
    *stateMachineArray = param;
 8017f9c:	197b      	adds	r3, r7, r5
 8017f9e:	1dba      	adds	r2, r7, #6
 8017fa0:	7812      	ldrb	r2, [r2, #0]
 8017fa2:	701a      	strb	r2, [r3, #0]
  }

  do
  {
    switch (stateMachineArray[counter])
 8017fa4:	233f      	movs	r3, #63	; 0x3f
 8017fa6:	18fb      	adds	r3, r7, r3
 8017fa8:	781b      	ldrb	r3, [r3, #0]
 8017faa:	2208      	movs	r2, #8
 8017fac:	18ba      	adds	r2, r7, r2
 8017fae:	5cd3      	ldrb	r3, [r2, r3]
 8017fb0:	2b80      	cmp	r3, #128	; 0x80
 8017fb2:	d804      	bhi.n	8017fbe <Send_DpmRegisterReadCnf+0x82>
 8017fb4:	009a      	lsls	r2, r3, #2
 8017fb6:	4b0f      	ldr	r3, [pc, #60]	; (8017ff4 <Send_DpmRegisterReadCnf+0xb8>)
 8017fb8:	18d3      	adds	r3, r2, r3
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	469f      	mov	pc, r3
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 8017fbe:	46c0      	nop			; (mov r8, r8)
    }
    counter++;
 8017fc0:	213f      	movs	r1, #63	; 0x3f
 8017fc2:	187b      	adds	r3, r7, r1
 8017fc4:	781a      	ldrb	r2, [r3, #0]
 8017fc6:	187b      	adds	r3, r7, r1
 8017fc8:	3201      	adds	r2, #1
 8017fca:	701a      	strb	r2, [r3, #0]
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 8017fcc:	187b      	adds	r3, r7, r1
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	2b26      	cmp	r3, #38	; 0x26
 8017fd2:	d803      	bhi.n	8017fdc <Send_DpmRegisterReadCnf+0xa0>
 8017fd4:	1dbb      	adds	r3, r7, #6
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	2bff      	cmp	r3, #255	; 0xff
 8017fda:	d1e3      	bne.n	8017fa4 <Send_DpmRegisterReadCnf+0x68>

  TLV_deinit_encode(&ToSendTLV);
 8017fdc:	2330      	movs	r3, #48	; 0x30
 8017fde:	18fb      	adds	r3, r7, r3
 8017fe0:	0018      	movs	r0, r3
 8017fe2:	f7fd f8a5 	bl	8015130 <TLV_deinit_encode>
}
 8017fe6:	46c0      	nop			; (mov r8, r8)
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	b010      	add	sp, #64	; 0x40
 8017fec:	bdb0      	pop	{r4, r5, r7, pc}
 8017fee:	46c0      	nop			; (mov r8, r8)
 8017ff0:	0801a5f0 	.word	0x0801a5f0
 8017ff4:	0801ab8c 	.word	0x0801ab8c

08017ff8 <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 8017ff8:	b5b0      	push	{r4, r5, r7, lr}
 8017ffa:	b08c      	sub	sp, #48	; 0x30
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	60b9      	str	r1, [r7, #8]
 8018000:	607a      	str	r2, [r7, #4]
 8018002:	230f      	movs	r3, #15
 8018004:	18fb      	adds	r3, r7, r3
 8018006:	1c02      	adds	r2, r0, #0
 8018008:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 801800a:	687a      	ldr	r2, [r7, #4]
 801800c:	2428      	movs	r4, #40	; 0x28
 801800e:	193b      	adds	r3, r7, r4
 8018010:	0011      	movs	r1, r2
 8018012:	0018      	movs	r0, r3
 8018014:	f7fd f89e 	bl	8015154 <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 8018018:	2320      	movs	r3, #32
 801801a:	18fb      	adds	r3, r7, r3
 801801c:	2224      	movs	r2, #36	; 0x24
 801801e:	18ba      	adds	r2, r7, r2
 8018020:	2527      	movs	r5, #39	; 0x27
 8018022:	1979      	adds	r1, r7, r5
 8018024:	1938      	adds	r0, r7, r4
 8018026:	f7fd f8c1 	bl	80151ac <TLV_get>

  switch (registerName)
 801802a:	197b      	adds	r3, r7, r5
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	2b80      	cmp	r3, #128	; 0x80
 8018030:	d804      	bhi.n	801803c <Send_DpmRegisterWriteCnf+0x44>
 8018032:	009a      	lsls	r2, r3, #2
 8018034:	4b10      	ldr	r3, [pc, #64]	; (8018078 <Send_DpmRegisterWriteCnf+0x80>)
 8018036:	18d3      	adds	r3, r2, r3
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	469f      	mov	pc, r3
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 801803c:	46c0      	nop			; (mov r8, r8)
  }
  TLV_deinit_decode(&ToProcessTLV);
 801803e:	2328      	movs	r3, #40	; 0x28
 8018040:	18fb      	adds	r3, r7, r3
 8018042:	0018      	movs	r0, r3
 8018044:	f7fd f90c 	bl	8015260 <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 8018048:	230f      	movs	r3, #15
 801804a:	18fb      	adds	r3, r7, r3
 801804c:	781b      	ldrb	r3, [r3, #0]
 801804e:	3301      	adds	r3, #1
 8018050:	015b      	lsls	r3, r3, #5
 8018052:	b25b      	sxtb	r3, r3
 8018054:	2211      	movs	r2, #17
 8018056:	4313      	orrs	r3, r2
 8018058:	b25b      	sxtb	r3, r3
 801805a:	b2d9      	uxtb	r1, r3
 801805c:	68bb      	ldr	r3, [r7, #8]
 801805e:	2414      	movs	r4, #20
 8018060:	1938      	adds	r0, r7, r4
 8018062:	220c      	movs	r2, #12
 8018064:	f7fc fe9f 	bl	8014da6 <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 8018068:	193b      	adds	r3, r7, r4
 801806a:	0018      	movs	r0, r3
 801806c:	f7fd f860 	bl	8015130 <TLV_deinit_encode>
}
 8018070:	46c0      	nop			; (mov r8, r8)
 8018072:	46bd      	mov	sp, r7
 8018074:	b00c      	add	sp, #48	; 0x30
 8018076:	bdb0      	pop	{r4, r5, r7, pc}
 8018078:	0801ad90 	.word	0x0801ad90

0801807c <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 801807c:	b5b0      	push	{r4, r5, r7, lr}
 801807e:	b084      	sub	sp, #16
 8018080:	af00      	add	r7, sp, #0
 8018082:	6039      	str	r1, [r7, #0]
 8018084:	0011      	movs	r1, r2
 8018086:	1dfb      	adds	r3, r7, #7
 8018088:	1c02      	adds	r2, r0, #0
 801808a:	701a      	strb	r2, [r3, #0]
 801808c:	1d3b      	adds	r3, r7, #4
 801808e:	1c0a      	adds	r2, r1, #0
 8018090:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 8018092:	250f      	movs	r5, #15
 8018094:	197b      	adds	r3, r7, r5
 8018096:	2210      	movs	r2, #16
 8018098:	701a      	strb	r2, [r3, #0]

  if (NULL != pCB_FreeText)
 801809a:	4b0b      	ldr	r3, [pc, #44]	; (80180c8 <Manage_FreeText+0x4c>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d00b      	beq.n	80180ba <Manage_FreeText+0x3e>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 80180a2:	4b09      	ldr	r3, [pc, #36]	; (80180c8 <Manage_FreeText+0x4c>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	1d3a      	adds	r2, r7, #4
 80180a8:	8814      	ldrh	r4, [r2, #0]
 80180aa:	6839      	ldr	r1, [r7, #0]
 80180ac:	1dfa      	adds	r2, r7, #7
 80180ae:	7810      	ldrb	r0, [r2, #0]
 80180b0:	0022      	movs	r2, r4
 80180b2:	4798      	blx	r3
    _status = USBPD_OK;
 80180b4:	197b      	adds	r3, r7, r5
 80180b6:	2200      	movs	r2, #0
 80180b8:	701a      	strb	r2, [r3, #0]
  }

  return _status;
 80180ba:	230f      	movs	r3, #15
 80180bc:	18fb      	adds	r3, r7, r3
 80180be:	781b      	ldrb	r3, [r3, #0]
}
 80180c0:	0018      	movs	r0, r3
 80180c2:	46bd      	mov	sp, r7
 80180c4:	b004      	add	sp, #16
 80180c6:	bdb0      	pop	{r4, r5, r7, pc}
 80180c8:	20002a58 	.word	0x20002a58

080180cc <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 80180d0:	4a06      	ldr	r2, [pc, #24]	; (80180ec <TRACER_EMB_Init+0x20>)
 80180d2:	4b07      	ldr	r3, [pc, #28]	; (80180f0 <TRACER_EMB_Init+0x24>)
 80180d4:	2100      	movs	r1, #0
 80180d6:	0018      	movs	r0, r3
 80180d8:	f001 f93e 	bl	8019358 <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 80180dc:	f000 fe22 	bl	8018d24 <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 80180e0:	f000 f9d8 	bl	8018494 <TRACER_EMB_LowPowerInit>
}
 80180e4:	46c0      	nop			; (mov r8, r8)
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}
 80180ea:	46c0      	nop			; (mov r8, r8)
 80180ec:	0000041c 	.word	0x0000041c
 80180f0:	20002ad8 	.word	0x20002ad8

080180f4 <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b086      	sub	sp, #24
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
 80180fc:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 8018102:	f000 f8d3 	bl	80182ac <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 8018106:	683b      	ldr	r3, [r7, #0]
 8018108:	0018      	movs	r0, r3
 801810a:	f000 f969 	bl	80183e0 <TRACER_EMB_AllocateBufer>
 801810e:	0003      	movs	r3, r0
 8018110:	617b      	str	r3, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	3301      	adds	r3, #1
 8018116:	d023      	beq.n	8018160 <TRACER_EMB_Add+0x6c>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 8018118:	2300      	movs	r3, #0
 801811a:	613b      	str	r3, [r7, #16]
 801811c:	e01c      	b.n	8018158 <TRACER_EMB_Add+0x64>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 801811e:	68fa      	ldr	r2, [r7, #12]
 8018120:	693b      	ldr	r3, [r7, #16]
 8018122:	18d2      	adds	r2, r2, r3
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	4912      	ldr	r1, [pc, #72]	; (8018170 <TRACER_EMB_Add+0x7c>)
 8018128:	400b      	ands	r3, r1
 801812a:	d503      	bpl.n	8018134 <TRACER_EMB_Add+0x40>
 801812c:	3b01      	subs	r3, #1
 801812e:	4911      	ldr	r1, [pc, #68]	; (8018174 <TRACER_EMB_Add+0x80>)
 8018130:	430b      	orrs	r3, r1
 8018132:	3301      	adds	r3, #1
 8018134:	0019      	movs	r1, r3
 8018136:	7812      	ldrb	r2, [r2, #0]
 8018138:	4b0f      	ldr	r3, [pc, #60]	; (8018178 <TRACER_EMB_Add+0x84>)
 801813a:	185b      	adds	r3, r3, r1
 801813c:	76da      	strb	r2, [r3, #27]
 801813e:	697b      	ldr	r3, [r7, #20]
 8018140:	3301      	adds	r3, #1
 8018142:	4a0b      	ldr	r2, [pc, #44]	; (8018170 <TRACER_EMB_Add+0x7c>)
 8018144:	4013      	ands	r3, r2
 8018146:	d503      	bpl.n	8018150 <TRACER_EMB_Add+0x5c>
 8018148:	3b01      	subs	r3, #1
 801814a:	4a0a      	ldr	r2, [pc, #40]	; (8018174 <TRACER_EMB_Add+0x80>)
 801814c:	4313      	orrs	r3, r2
 801814e:	3301      	adds	r3, #1
 8018150:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 8018152:	693b      	ldr	r3, [r7, #16]
 8018154:	3301      	adds	r3, #1
 8018156:	613b      	str	r3, [r7, #16]
 8018158:	693a      	ldr	r2, [r7, #16]
 801815a:	683b      	ldr	r3, [r7, #0]
 801815c:	429a      	cmp	r2, r3
 801815e:	d3de      	bcc.n	801811e <TRACER_EMB_Add+0x2a>
    }
  }
  TRACER_EMB_UnLock();
 8018160:	f000 f8c2 	bl	80182e8 <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 8018164:	f000 f8de 	bl	8018324 <TRACER_EMB_SendData>
}
 8018168:	46c0      	nop			; (mov r8, r8)
 801816a:	46bd      	mov	sp, r7
 801816c:	b006      	add	sp, #24
 801816e:	bd80      	pop	{r7, pc}
 8018170:	800003ff 	.word	0x800003ff
 8018174:	fffffc00 	.word	0xfffffc00
 8018178:	20002ad8 	.word	0x20002ad8

0801817c <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 8018180:	f000 febc 	bl	8018efc <HW_TRACER_EMB_IRQHandlerDMA>
}
 8018184:	46c0      	nop			; (mov r8, r8)
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}

0801818a <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 801818a:	b580      	push	{r7, lr}
 801818c:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 801818e:	f000 fecd 	bl	8018f2c <HW_TRACER_EMB_IRQHandlerUSART>
}
 8018192:	46c0      	nop			; (mov r8, r8)
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}

08018198 <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b082      	sub	sp, #8
 801819c:	af00      	add	r7, sp, #0
 801819e:	0002      	movs	r2, r0
 80181a0:	1dbb      	adds	r3, r7, #6
 80181a2:	801a      	strh	r2, [r3, #0]
 80181a4:	1d7b      	adds	r3, r7, #5
 80181a6:	1c0a      	adds	r2, r1, #0
 80181a8:	701a      	strb	r2, [r3, #0]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 80181aa:	1dbb      	adds	r3, r7, #6
 80181ac:	881b      	ldrh	r3, [r3, #0]
 80181ae:	059b      	lsls	r3, r3, #22
 80181b0:	0d9b      	lsrs	r3, r3, #22
 80181b2:	4a04      	ldr	r2, [pc, #16]	; (80181c4 <TRACER_EMB_WriteData+0x2c>)
 80181b4:	18d3      	adds	r3, r2, r3
 80181b6:	1d7a      	adds	r2, r7, #5
 80181b8:	7812      	ldrb	r2, [r2, #0]
 80181ba:	76da      	strb	r2, [r3, #27]
}
 80181bc:	46c0      	nop			; (mov r8, r8)
 80181be:	46bd      	mov	sp, r7
 80181c0:	b002      	add	sp, #8
 80181c2:	bd80      	pop	{r7, pc}
 80181c4:	20002ad8 	.word	0x20002ad8

080181c8 <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b082      	sub	sp, #8
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	0018      	movs	r0, r3
 80181d4:	f000 fe66 	bl	8018ea4 <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 80181d8:	f000 fe76 	bl	8018ec8 <HW_TRACER_EMB_StartRX>
}
 80181dc:	46c0      	nop			; (mov r8, r8)
 80181de:	46bd      	mov	sp, r7
 80181e0:	b002      	add	sp, #8
 80181e2:	bd80      	pop	{r7, pc}

080181e4 <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b082      	sub	sp, #8
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
 80181ec:	000a      	movs	r2, r1
 80181ee:	1cfb      	adds	r3, r7, #3
 80181f0:	701a      	strb	r2, [r3, #0]
  if (Size != 0U)
 80181f2:	1cfb      	adds	r3, r7, #3
 80181f4:	781b      	ldrb	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d008      	beq.n	801820c <TRACER_EMB_EnableOverFlow+0x28>
  {
    TracerContext.OverFlow_Data = Data;
 80181fa:	4b07      	ldr	r3, [pc, #28]	; (8018218 <TRACER_EMB_EnableOverFlow+0x34>)
 80181fc:	687a      	ldr	r2, [r7, #4]
 80181fe:	615a      	str	r2, [r3, #20]
    TracerContext.OverFlow_Size = Size;
 8018200:	4b05      	ldr	r3, [pc, #20]	; (8018218 <TRACER_EMB_EnableOverFlow+0x34>)
 8018202:	1cfa      	adds	r2, r7, #3
 8018204:	7812      	ldrb	r2, [r2, #0]
 8018206:	761a      	strb	r2, [r3, #24]
    return 0;
 8018208:	2300      	movs	r3, #0
 801820a:	e001      	b.n	8018210 <TRACER_EMB_EnableOverFlow+0x2c>
  }
  return -1;
 801820c:	2301      	movs	r3, #1
 801820e:	425b      	negs	r3, r3
}
 8018210:	0018      	movs	r0, r3
 8018212:	46bd      	mov	sp, r7
 8018214:	b002      	add	sp, #8
 8018216:	bd80      	pop	{r7, pc}
 8018218:	20002ad8 	.word	0x20002ad8

0801821c <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b084      	sub	sp, #16
 8018220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018222:	f3ef 8310 	mrs	r3, PRIMASK
 8018226:	60bb      	str	r3, [r7, #8]
  return(result);
 8018228:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 801822a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801822c:	b672      	cpsid	i
}
 801822e:	46c0      	nop			; (mov r8, r8)
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 8018230:	4b1d      	ldr	r3, [pc, #116]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018232:	681a      	ldr	r2, [r3, #0]
 8018234:	4b1c      	ldr	r3, [pc, #112]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018236:	689b      	ldr	r3, [r3, #8]
 8018238:	18d3      	adds	r3, r2, r3
 801823a:	059b      	lsls	r3, r3, #22
 801823c:	0d9a      	lsrs	r2, r3, #22
 801823e:	4b1a      	ldr	r3, [pc, #104]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018240:	601a      	str	r2, [r3, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 8018242:	4b19      	ldr	r3, [pc, #100]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018244:	695b      	ldr	r3, [r3, #20]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d019      	beq.n	801827e <TRACER_EMB_CALLBACK_TX+0x62>
 801824a:	4b17      	ldr	r3, [pc, #92]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 801824c:	7e9b      	ldrb	r3, [r3, #26]
 801824e:	2b01      	cmp	r3, #1
 8018250:	d115      	bne.n	801827e <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 8018252:	4b15      	ldr	r3, [pc, #84]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018254:	7e5b      	ldrb	r3, [r3, #25]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d111      	bne.n	801827e <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 801825a:	4b13      	ldr	r3, [pc, #76]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 801825c:	2202      	movs	r2, #2
 801825e:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 8018260:	4b11      	ldr	r3, [pc, #68]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018262:	695a      	ldr	r2, [r3, #20]
 8018264:	4b10      	ldr	r3, [pc, #64]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018266:	7e1b      	ldrb	r3, [r3, #24]
 8018268:	0019      	movs	r1, r3
 801826a:	0010      	movs	r0, r2
 801826c:	f000 ff2c 	bl	80190c8 <HW_TRACER_EMB_SendData>
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f383 8810 	msr	PRIMASK, r3
}
 801827a:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
 801827c:	e00f      	b.n	801829e <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 801827e:	4b0a      	ldr	r3, [pc, #40]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018280:	68db      	ldr	r3, [r3, #12]
 8018282:	1e5a      	subs	r2, r3, #1
 8018284:	4b08      	ldr	r3, [pc, #32]	; (80182a8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8018286:	60da      	str	r2, [r3, #12]
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	f383 8810 	msr	PRIMASK, r3
}
 8018292:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 8018294:	f000 f828 	bl	80182e8 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 8018298:	f000 f844 	bl	8018324 <TRACER_EMB_SendData>
  }
}
 801829c:	46c0      	nop			; (mov r8, r8)
 801829e:	46c0      	nop			; (mov r8, r8)
 80182a0:	46bd      	mov	sp, r7
 80182a2:	b004      	add	sp, #16
 80182a4:	bd80      	pop	{r7, pc}
 80182a6:	46c0      	nop			; (mov r8, r8)
 80182a8:	20002ad8 	.word	0x20002ad8

080182ac <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b084      	sub	sp, #16
 80182b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182b2:	f3ef 8310 	mrs	r3, PRIMASK
 80182b6:	607b      	str	r3, [r7, #4]
  return(result);
 80182b8:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 80182ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80182bc:	b672      	cpsid	i
}
 80182be:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter++;
 80182c0:	4b08      	ldr	r3, [pc, #32]	; (80182e4 <TRACER_EMB_Lock+0x38>)
 80182c2:	7c1b      	ldrb	r3, [r3, #16]
 80182c4:	b2db      	uxtb	r3, r3
 80182c6:	3301      	adds	r3, #1
 80182c8:	b2da      	uxtb	r2, r3
 80182ca:	4b06      	ldr	r3, [pc, #24]	; (80182e4 <TRACER_EMB_Lock+0x38>)
 80182cc:	741a      	strb	r2, [r3, #16]
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182d2:	68bb      	ldr	r3, [r7, #8]
 80182d4:	f383 8810 	msr	PRIMASK, r3
}
 80182d8:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 80182da:	46c0      	nop			; (mov r8, r8)
 80182dc:	46bd      	mov	sp, r7
 80182de:	b004      	add	sp, #16
 80182e0:	bd80      	pop	{r7, pc}
 80182e2:	46c0      	nop			; (mov r8, r8)
 80182e4:	20002ad8 	.word	0x20002ad8

080182e8 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b084      	sub	sp, #16
 80182ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182ee:	f3ef 8310 	mrs	r3, PRIMASK
 80182f2:	607b      	str	r3, [r7, #4]
  return(result);
 80182f4:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 80182f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80182f8:	b672      	cpsid	i
}
 80182fa:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter--;
 80182fc:	4b08      	ldr	r3, [pc, #32]	; (8018320 <TRACER_EMB_UnLock+0x38>)
 80182fe:	7c1b      	ldrb	r3, [r3, #16]
 8018300:	b2db      	uxtb	r3, r3
 8018302:	3b01      	subs	r3, #1
 8018304:	b2da      	uxtb	r2, r3
 8018306:	4b06      	ldr	r3, [pc, #24]	; (8018320 <TRACER_EMB_UnLock+0x38>)
 8018308:	741a      	strb	r2, [r3, #16]
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801830e:	68bb      	ldr	r3, [r7, #8]
 8018310:	f383 8810 	msr	PRIMASK, r3
}
 8018314:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8018316:	46c0      	nop			; (mov r8, r8)
 8018318:	46bd      	mov	sp, r7
 801831a:	b004      	add	sp, #16
 801831c:	bd80      	pop	{r7, pc}
 801831e:	46c0      	nop			; (mov r8, r8)
 8018320:	20002ad8 	.word	0x20002ad8

08018324 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b086      	sub	sp, #24
 8018328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801832a:	f3ef 8310 	mrs	r3, PRIMASK
 801832e:	60bb      	str	r3, [r7, #8]
  return(result);
 8018330:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 8018332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018334:	b672      	cpsid	i
}
 8018336:	46c0      	nop			; (mov r8, r8)

  if (0u == TracerContext.Counter)
 8018338:	4b28      	ldr	r3, [pc, #160]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 801833a:	7c1b      	ldrb	r3, [r3, #16]
 801833c:	b2db      	uxtb	r3, r3
 801833e:	2b00      	cmp	r3, #0
 8018340:	d134      	bne.n	80183ac <TRACER_EMB_SendData+0x88>
  {
    _begin = TracerContext.PtrTx_Read;
 8018342:	4b26      	ldr	r3, [pc, #152]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 8018348:	4b24      	ldr	r3, [pc, #144]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 801834a:	685b      	ldr	r3, [r3, #4]
 801834c:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 801834e:	693a      	ldr	r2, [r7, #16]
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	429a      	cmp	r2, r3
 8018354:	d02a      	beq.n	80183ac <TRACER_EMB_SendData+0x88>
    {
      TRACER_EMB_Lock();
 8018356:	f7ff ffa9 	bl	80182ac <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 801835a:	68fa      	ldr	r2, [r7, #12]
 801835c:	693b      	ldr	r3, [r7, #16]
 801835e:	429a      	cmp	r2, r3
 8018360:	d908      	bls.n	8018374 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 8018362:	68fa      	ldr	r2, [r7, #12]
 8018364:	693b      	ldr	r3, [r7, #16]
 8018366:	1ad2      	subs	r2, r2, r3
 8018368:	4b1c      	ldr	r3, [pc, #112]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 801836a:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 0;
 801836c:	4b1b      	ldr	r3, [pc, #108]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 801836e:	2200      	movs	r2, #0
 8018370:	765a      	strb	r2, [r3, #25]
 8018372:	e008      	b.n	8018386 <TRACER_EMB_SendData+0x62>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 8018374:	693b      	ldr	r3, [r7, #16]
 8018376:	2280      	movs	r2, #128	; 0x80
 8018378:	00d2      	lsls	r2, r2, #3
 801837a:	1ad2      	subs	r2, r2, r3
 801837c:	4b17      	ldr	r3, [pc, #92]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 801837e:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 1;
 8018380:	4b16      	ldr	r3, [pc, #88]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 8018382:	2201      	movs	r2, #1
 8018384:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 8018386:	f000 f88a 	bl	801849e <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 801838a:	4b14      	ldr	r3, [pc, #80]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 801838c:	68db      	ldr	r3, [r3, #12]
 801838e:	1c5a      	adds	r2, r3, #1
 8018390:	4b12      	ldr	r3, [pc, #72]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 8018392:	60da      	str	r2, [r3, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 8018394:	693b      	ldr	r3, [r7, #16]
 8018396:	3318      	adds	r3, #24
 8018398:	001a      	movs	r2, r3
 801839a:	4b10      	ldr	r3, [pc, #64]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 801839c:	18d3      	adds	r3, r2, r3
 801839e:	1cda      	adds	r2, r3, #3
 80183a0:	4b0e      	ldr	r3, [pc, #56]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 80183a2:	689b      	ldr	r3, [r3, #8]
 80183a4:	0019      	movs	r1, r3
 80183a6:	0010      	movs	r0, r2
 80183a8:	f000 fe8e 	bl	80190c8 <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 80183ac:	4b0b      	ldr	r3, [pc, #44]	; (80183dc <TRACER_EMB_SendData+0xb8>)
 80183ae:	68db      	ldr	r3, [r3, #12]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d004      	beq.n	80183be <TRACER_EMB_SendData+0x9a>
 80183b4:	2b01      	cmp	r3, #1
 80183b6:	d105      	bne.n	80183c4 <TRACER_EMB_SendData+0xa0>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 80183b8:	f000 f871 	bl	801849e <TRACER_EMB_LowPowerSendData>
      break;
 80183bc:	e003      	b.n	80183c6 <TRACER_EMB_SendData+0xa2>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 80183be:	f000 f873 	bl	80184a8 <TRACER_EMB_LowPowerSendDataComplete>
      break;
 80183c2:	e000      	b.n	80183c6 <TRACER_EMB_SendData+0xa2>
    default:
      break;
 80183c4:	46c0      	nop			; (mov r8, r8)
 80183c6:	697b      	ldr	r3, [r7, #20]
 80183c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	f383 8810 	msr	PRIMASK, r3
}
 80183d0:	46c0      	nop			; (mov r8, r8)
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 80183d2:	46c0      	nop			; (mov r8, r8)
 80183d4:	46bd      	mov	sp, r7
 80183d6:	b006      	add	sp, #24
 80183d8:	bd80      	pop	{r7, pc}
 80183da:	46c0      	nop			; (mov r8, r8)
 80183dc:	20002ad8 	.word	0x20002ad8

080183e0 <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b088      	sub	sp, #32
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 80183e8:	2301      	movs	r3, #1
 80183ea:	425b      	negs	r3, r3
 80183ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183ee:	f3ef 8310 	mrs	r3, PRIMASK
 80183f2:	613b      	str	r3, [r7, #16]
  return(result);
 80183f4:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 80183f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80183f8:	b672      	cpsid	i
}
 80183fa:	46c0      	nop			; (mov r8, r8)

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 80183fc:	4b24      	ldr	r3, [pc, #144]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 80183fe:	685a      	ldr	r2, [r3, #4]
 8018400:	4b23      	ldr	r3, [pc, #140]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	429a      	cmp	r2, r3
 8018406:	d103      	bne.n	8018410 <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 8018408:	2380      	movs	r3, #128	; 0x80
 801840a:	00db      	lsls	r3, r3, #3
 801840c:	61fb      	str	r3, [r7, #28]
 801840e:	e016      	b.n	801843e <TRACER_EMB_AllocateBufer+0x5e>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 8018410:	4b1f      	ldr	r3, [pc, #124]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018412:	685a      	ldr	r2, [r3, #4]
 8018414:	4b1e      	ldr	r3, [pc, #120]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	429a      	cmp	r2, r3
 801841a:	d90a      	bls.n	8018432 <TRACER_EMB_AllocateBufer+0x52>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 801841c:	4b1c      	ldr	r3, [pc, #112]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	4b1b      	ldr	r3, [pc, #108]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018422:	685b      	ldr	r3, [r3, #4]
 8018424:	1ad3      	subs	r3, r2, r3
 8018426:	2280      	movs	r2, #128	; 0x80
 8018428:	00d2      	lsls	r2, r2, #3
 801842a:	4694      	mov	ip, r2
 801842c:	4463      	add	r3, ip
 801842e:	61fb      	str	r3, [r7, #28]
 8018430:	e005      	b.n	801843e <TRACER_EMB_AllocateBufer+0x5e>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 8018432:	4b17      	ldr	r3, [pc, #92]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018434:	681a      	ldr	r2, [r3, #0]
 8018436:	4b16      	ldr	r3, [pc, #88]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018438:	685b      	ldr	r3, [r3, #4]
 801843a:	1ad3      	subs	r3, r2, r3
 801843c:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 801843e:	69fa      	ldr	r2, [r7, #28]
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	429a      	cmp	r2, r3
 8018444:	d912      	bls.n	801846c <TRACER_EMB_AllocateBufer+0x8c>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 8018446:	4b12      	ldr	r3, [pc, #72]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018448:	685b      	ldr	r3, [r3, #4]
 801844a:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 801844c:	4b10      	ldr	r3, [pc, #64]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 801844e:	685a      	ldr	r2, [r3, #4]
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	18d3      	adds	r3, r2, r3
 8018454:	059b      	lsls	r3, r3, #22
 8018456:	0d9a      	lsrs	r2, r3, #22
 8018458:	4b0d      	ldr	r3, [pc, #52]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 801845a:	605a      	str	r2, [r3, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 801845c:	4b0c      	ldr	r3, [pc, #48]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 801845e:	7e9b      	ldrb	r3, [r3, #26]
 8018460:	2b02      	cmp	r3, #2
 8018462:	d10a      	bne.n	801847a <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 8018464:	4b0a      	ldr	r3, [pc, #40]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018466:	2200      	movs	r2, #0
 8018468:	769a      	strb	r2, [r3, #26]
 801846a:	e006      	b.n	801847a <TRACER_EMB_AllocateBufer+0x9a>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 801846c:	4b08      	ldr	r3, [pc, #32]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 801846e:	7e9b      	ldrb	r3, [r3, #26]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d102      	bne.n	801847a <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 8018474:	4b06      	ldr	r3, [pc, #24]	; (8018490 <TRACER_EMB_AllocateBufer+0xb0>)
 8018476:	2201      	movs	r2, #1
 8018478:	769a      	strb	r2, [r3, #26]
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	f383 8810 	msr	PRIMASK, r3
}
 8018484:	46c0      	nop			; (mov r8, r8)
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 8018486:	69bb      	ldr	r3, [r7, #24]
}
 8018488:	0018      	movs	r0, r3
 801848a:	46bd      	mov	sp, r7
 801848c:	b008      	add	sp, #32
 801848e:	bd80      	pop	{r7, pc}
 8018490:	20002ad8 	.word	0x20002ad8

08018494 <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	af00      	add	r7, sp, #0
}
 8018498:	46c0      	nop			; (mov r8, r8)
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}

0801849e <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 801849e:	b580      	push	{r7, lr}
 80184a0:	af00      	add	r7, sp, #0
}
 80184a2:	46c0      	nop			; (mov r8, r8)
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}

080184a8 <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	af00      	add	r7, sp, #0
}
 80184ac:	46c0      	nop			; (mov r8, r8)
 80184ae:	46bd      	mov	sp, r7
 80184b0:	bd80      	pop	{r7, pc}
	...

080184b4 <__NVIC_EnableIRQ>:
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b082      	sub	sp, #8
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	0002      	movs	r2, r0
 80184bc:	1dfb      	adds	r3, r7, #7
 80184be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80184c0:	1dfb      	adds	r3, r7, #7
 80184c2:	781b      	ldrb	r3, [r3, #0]
 80184c4:	2b7f      	cmp	r3, #127	; 0x7f
 80184c6:	d809      	bhi.n	80184dc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80184c8:	1dfb      	adds	r3, r7, #7
 80184ca:	781b      	ldrb	r3, [r3, #0]
 80184cc:	001a      	movs	r2, r3
 80184ce:	231f      	movs	r3, #31
 80184d0:	401a      	ands	r2, r3
 80184d2:	4b04      	ldr	r3, [pc, #16]	; (80184e4 <__NVIC_EnableIRQ+0x30>)
 80184d4:	2101      	movs	r1, #1
 80184d6:	4091      	lsls	r1, r2
 80184d8:	000a      	movs	r2, r1
 80184da:	601a      	str	r2, [r3, #0]
}
 80184dc:	46c0      	nop			; (mov r8, r8)
 80184de:	46bd      	mov	sp, r7
 80184e0:	b002      	add	sp, #8
 80184e2:	bd80      	pop	{r7, pc}
 80184e4:	e000e100 	.word	0xe000e100

080184e8 <__NVIC_SetPriority>:
{
 80184e8:	b590      	push	{r4, r7, lr}
 80184ea:	b083      	sub	sp, #12
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	0002      	movs	r2, r0
 80184f0:	6039      	str	r1, [r7, #0]
 80184f2:	1dfb      	adds	r3, r7, #7
 80184f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80184f6:	1dfb      	adds	r3, r7, #7
 80184f8:	781b      	ldrb	r3, [r3, #0]
 80184fa:	2b7f      	cmp	r3, #127	; 0x7f
 80184fc:	d828      	bhi.n	8018550 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80184fe:	4a2f      	ldr	r2, [pc, #188]	; (80185bc <__NVIC_SetPriority+0xd4>)
 8018500:	1dfb      	adds	r3, r7, #7
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	b25b      	sxtb	r3, r3
 8018506:	089b      	lsrs	r3, r3, #2
 8018508:	33c0      	adds	r3, #192	; 0xc0
 801850a:	009b      	lsls	r3, r3, #2
 801850c:	589b      	ldr	r3, [r3, r2]
 801850e:	1dfa      	adds	r2, r7, #7
 8018510:	7812      	ldrb	r2, [r2, #0]
 8018512:	0011      	movs	r1, r2
 8018514:	2203      	movs	r2, #3
 8018516:	400a      	ands	r2, r1
 8018518:	00d2      	lsls	r2, r2, #3
 801851a:	21ff      	movs	r1, #255	; 0xff
 801851c:	4091      	lsls	r1, r2
 801851e:	000a      	movs	r2, r1
 8018520:	43d2      	mvns	r2, r2
 8018522:	401a      	ands	r2, r3
 8018524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8018526:	683b      	ldr	r3, [r7, #0]
 8018528:	019b      	lsls	r3, r3, #6
 801852a:	22ff      	movs	r2, #255	; 0xff
 801852c:	401a      	ands	r2, r3
 801852e:	1dfb      	adds	r3, r7, #7
 8018530:	781b      	ldrb	r3, [r3, #0]
 8018532:	0018      	movs	r0, r3
 8018534:	2303      	movs	r3, #3
 8018536:	4003      	ands	r3, r0
 8018538:	00db      	lsls	r3, r3, #3
 801853a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801853c:	481f      	ldr	r0, [pc, #124]	; (80185bc <__NVIC_SetPriority+0xd4>)
 801853e:	1dfb      	adds	r3, r7, #7
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	b25b      	sxtb	r3, r3
 8018544:	089b      	lsrs	r3, r3, #2
 8018546:	430a      	orrs	r2, r1
 8018548:	33c0      	adds	r3, #192	; 0xc0
 801854a:	009b      	lsls	r3, r3, #2
 801854c:	501a      	str	r2, [r3, r0]
}
 801854e:	e031      	b.n	80185b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018550:	4a1b      	ldr	r2, [pc, #108]	; (80185c0 <__NVIC_SetPriority+0xd8>)
 8018552:	1dfb      	adds	r3, r7, #7
 8018554:	781b      	ldrb	r3, [r3, #0]
 8018556:	0019      	movs	r1, r3
 8018558:	230f      	movs	r3, #15
 801855a:	400b      	ands	r3, r1
 801855c:	3b08      	subs	r3, #8
 801855e:	089b      	lsrs	r3, r3, #2
 8018560:	3306      	adds	r3, #6
 8018562:	009b      	lsls	r3, r3, #2
 8018564:	18d3      	adds	r3, r2, r3
 8018566:	3304      	adds	r3, #4
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	1dfa      	adds	r2, r7, #7
 801856c:	7812      	ldrb	r2, [r2, #0]
 801856e:	0011      	movs	r1, r2
 8018570:	2203      	movs	r2, #3
 8018572:	400a      	ands	r2, r1
 8018574:	00d2      	lsls	r2, r2, #3
 8018576:	21ff      	movs	r1, #255	; 0xff
 8018578:	4091      	lsls	r1, r2
 801857a:	000a      	movs	r2, r1
 801857c:	43d2      	mvns	r2, r2
 801857e:	401a      	ands	r2, r3
 8018580:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8018582:	683b      	ldr	r3, [r7, #0]
 8018584:	019b      	lsls	r3, r3, #6
 8018586:	22ff      	movs	r2, #255	; 0xff
 8018588:	401a      	ands	r2, r3
 801858a:	1dfb      	adds	r3, r7, #7
 801858c:	781b      	ldrb	r3, [r3, #0]
 801858e:	0018      	movs	r0, r3
 8018590:	2303      	movs	r3, #3
 8018592:	4003      	ands	r3, r0
 8018594:	00db      	lsls	r3, r3, #3
 8018596:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018598:	4809      	ldr	r0, [pc, #36]	; (80185c0 <__NVIC_SetPriority+0xd8>)
 801859a:	1dfb      	adds	r3, r7, #7
 801859c:	781b      	ldrb	r3, [r3, #0]
 801859e:	001c      	movs	r4, r3
 80185a0:	230f      	movs	r3, #15
 80185a2:	4023      	ands	r3, r4
 80185a4:	3b08      	subs	r3, #8
 80185a6:	089b      	lsrs	r3, r3, #2
 80185a8:	430a      	orrs	r2, r1
 80185aa:	3306      	adds	r3, #6
 80185ac:	009b      	lsls	r3, r3, #2
 80185ae:	18c3      	adds	r3, r0, r3
 80185b0:	3304      	adds	r3, #4
 80185b2:	601a      	str	r2, [r3, #0]
}
 80185b4:	46c0      	nop			; (mov r8, r8)
 80185b6:	46bd      	mov	sp, r7
 80185b8:	b003      	add	sp, #12
 80185ba:	bd90      	pop	{r4, r7, pc}
 80185bc:	e000e100 	.word	0xe000e100
 80185c0:	e000ed00 	.word	0xe000ed00

080185c4 <LL_DMA_EnableChannel>:
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b084      	sub	sp, #16
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
 80185cc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80185d2:	4a0b      	ldr	r2, [pc, #44]	; (8018600 <LL_DMA_EnableChannel+0x3c>)
 80185d4:	683b      	ldr	r3, [r7, #0]
 80185d6:	18d3      	adds	r3, r2, r3
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	001a      	movs	r2, r3
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	18d3      	adds	r3, r2, r3
 80185e0:	681a      	ldr	r2, [r3, #0]
 80185e2:	4907      	ldr	r1, [pc, #28]	; (8018600 <LL_DMA_EnableChannel+0x3c>)
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	18cb      	adds	r3, r1, r3
 80185e8:	781b      	ldrb	r3, [r3, #0]
 80185ea:	0019      	movs	r1, r3
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	18cb      	adds	r3, r1, r3
 80185f0:	2101      	movs	r1, #1
 80185f2:	430a      	orrs	r2, r1
 80185f4:	601a      	str	r2, [r3, #0]
}
 80185f6:	46c0      	nop			; (mov r8, r8)
 80185f8:	46bd      	mov	sp, r7
 80185fa:	b004      	add	sp, #16
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	46c0      	nop			; (mov r8, r8)
 8018600:	0801af94 	.word	0x0801af94

08018604 <LL_DMA_DisableChannel>:
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b084      	sub	sp, #16
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8018612:	4a0b      	ldr	r2, [pc, #44]	; (8018640 <LL_DMA_DisableChannel+0x3c>)
 8018614:	683b      	ldr	r3, [r7, #0]
 8018616:	18d3      	adds	r3, r2, r3
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	001a      	movs	r2, r3
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	18d3      	adds	r3, r2, r3
 8018620:	681a      	ldr	r2, [r3, #0]
 8018622:	4907      	ldr	r1, [pc, #28]	; (8018640 <LL_DMA_DisableChannel+0x3c>)
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	18cb      	adds	r3, r1, r3
 8018628:	781b      	ldrb	r3, [r3, #0]
 801862a:	0019      	movs	r1, r3
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	18cb      	adds	r3, r1, r3
 8018630:	2101      	movs	r1, #1
 8018632:	438a      	bics	r2, r1
 8018634:	601a      	str	r2, [r3, #0]
}
 8018636:	46c0      	nop			; (mov r8, r8)
 8018638:	46bd      	mov	sp, r7
 801863a:	b004      	add	sp, #16
 801863c:	bd80      	pop	{r7, pc}
 801863e:	46c0      	nop			; (mov r8, r8)
 8018640:	0801af94 	.word	0x0801af94

08018644 <LL_DMA_ConfigTransfer>:
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b086      	sub	sp, #24
 8018648:	af00      	add	r7, sp, #0
 801864a:	60f8      	str	r0, [r7, #12]
 801864c:	60b9      	str	r1, [r7, #8]
 801864e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8018654:	4a0c      	ldr	r2, [pc, #48]	; (8018688 <LL_DMA_ConfigTransfer+0x44>)
 8018656:	68bb      	ldr	r3, [r7, #8]
 8018658:	18d3      	adds	r3, r2, r3
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	001a      	movs	r2, r3
 801865e:	697b      	ldr	r3, [r7, #20]
 8018660:	18d3      	adds	r3, r2, r3
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	4a09      	ldr	r2, [pc, #36]	; (801868c <LL_DMA_ConfigTransfer+0x48>)
 8018666:	4013      	ands	r3, r2
 8018668:	0019      	movs	r1, r3
 801866a:	4a07      	ldr	r2, [pc, #28]	; (8018688 <LL_DMA_ConfigTransfer+0x44>)
 801866c:	68bb      	ldr	r3, [r7, #8]
 801866e:	18d3      	adds	r3, r2, r3
 8018670:	781b      	ldrb	r3, [r3, #0]
 8018672:	001a      	movs	r2, r3
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	18d3      	adds	r3, r2, r3
 8018678:	687a      	ldr	r2, [r7, #4]
 801867a:	430a      	orrs	r2, r1
 801867c:	601a      	str	r2, [r3, #0]
}
 801867e:	46c0      	nop			; (mov r8, r8)
 8018680:	46bd      	mov	sp, r7
 8018682:	b006      	add	sp, #24
 8018684:	bd80      	pop	{r7, pc}
 8018686:	46c0      	nop			; (mov r8, r8)
 8018688:	0801af94 	.word	0x0801af94
 801868c:	ffff800f 	.word	0xffff800f

08018690 <LL_DMA_GetDataTransferDirection>:
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b084      	sub	sp, #16
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
 8018698:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 801869e:	4a07      	ldr	r2, [pc, #28]	; (80186bc <LL_DMA_GetDataTransferDirection+0x2c>)
 80186a0:	683b      	ldr	r3, [r7, #0]
 80186a2:	18d3      	adds	r3, r2, r3
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	001a      	movs	r2, r3
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	18d3      	adds	r3, r2, r3
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	4a04      	ldr	r2, [pc, #16]	; (80186c0 <LL_DMA_GetDataTransferDirection+0x30>)
 80186b0:	4013      	ands	r3, r2
}
 80186b2:	0018      	movs	r0, r3
 80186b4:	46bd      	mov	sp, r7
 80186b6:	b004      	add	sp, #16
 80186b8:	bd80      	pop	{r7, pc}
 80186ba:	46c0      	nop			; (mov r8, r8)
 80186bc:	0801af94 	.word	0x0801af94
 80186c0:	00004010 	.word	0x00004010

080186c4 <LL_DMA_SetDataLength>:
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b086      	sub	sp, #24
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	60f8      	str	r0, [r7, #12]
 80186cc:	60b9      	str	r1, [r7, #8]
 80186ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80186d4:	4a0b      	ldr	r2, [pc, #44]	; (8018704 <LL_DMA_SetDataLength+0x40>)
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	18d3      	adds	r3, r2, r3
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	001a      	movs	r2, r3
 80186de:	697b      	ldr	r3, [r7, #20]
 80186e0:	18d3      	adds	r3, r2, r3
 80186e2:	685b      	ldr	r3, [r3, #4]
 80186e4:	0c1b      	lsrs	r3, r3, #16
 80186e6:	0419      	lsls	r1, r3, #16
 80186e8:	4a06      	ldr	r2, [pc, #24]	; (8018704 <LL_DMA_SetDataLength+0x40>)
 80186ea:	68bb      	ldr	r3, [r7, #8]
 80186ec:	18d3      	adds	r3, r2, r3
 80186ee:	781b      	ldrb	r3, [r3, #0]
 80186f0:	001a      	movs	r2, r3
 80186f2:	697b      	ldr	r3, [r7, #20]
 80186f4:	18d3      	adds	r3, r2, r3
 80186f6:	687a      	ldr	r2, [r7, #4]
 80186f8:	430a      	orrs	r2, r1
 80186fa:	605a      	str	r2, [r3, #4]
}
 80186fc:	46c0      	nop			; (mov r8, r8)
 80186fe:	46bd      	mov	sp, r7
 8018700:	b006      	add	sp, #24
 8018702:	bd80      	pop	{r7, pc}
 8018704:	0801af94 	.word	0x0801af94

08018708 <LL_DMA_ConfigAddresses>:
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b086      	sub	sp, #24
 801870c:	af00      	add	r7, sp, #0
 801870e:	60f8      	str	r0, [r7, #12]
 8018710:	60b9      	str	r1, [r7, #8]
 8018712:	607a      	str	r2, [r7, #4]
 8018714:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 801871a:	6a3b      	ldr	r3, [r7, #32]
 801871c:	2b10      	cmp	r3, #16
 801871e:	d112      	bne.n	8018746 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8018720:	4a14      	ldr	r2, [pc, #80]	; (8018774 <LL_DMA_ConfigAddresses+0x6c>)
 8018722:	68bb      	ldr	r3, [r7, #8]
 8018724:	18d3      	adds	r3, r2, r3
 8018726:	781b      	ldrb	r3, [r3, #0]
 8018728:	001a      	movs	r2, r3
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	18d3      	adds	r3, r2, r3
 801872e:	687a      	ldr	r2, [r7, #4]
 8018730:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8018732:	4a10      	ldr	r2, [pc, #64]	; (8018774 <LL_DMA_ConfigAddresses+0x6c>)
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	18d3      	adds	r3, r2, r3
 8018738:	781b      	ldrb	r3, [r3, #0]
 801873a:	001a      	movs	r2, r3
 801873c:	697b      	ldr	r3, [r7, #20]
 801873e:	18d3      	adds	r3, r2, r3
 8018740:	683a      	ldr	r2, [r7, #0]
 8018742:	609a      	str	r2, [r3, #8]
}
 8018744:	e011      	b.n	801876a <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8018746:	4a0b      	ldr	r2, [pc, #44]	; (8018774 <LL_DMA_ConfigAddresses+0x6c>)
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	18d3      	adds	r3, r2, r3
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	001a      	movs	r2, r3
 8018750:	697b      	ldr	r3, [r7, #20]
 8018752:	18d3      	adds	r3, r2, r3
 8018754:	687a      	ldr	r2, [r7, #4]
 8018756:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8018758:	4a06      	ldr	r2, [pc, #24]	; (8018774 <LL_DMA_ConfigAddresses+0x6c>)
 801875a:	68bb      	ldr	r3, [r7, #8]
 801875c:	18d3      	adds	r3, r2, r3
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	001a      	movs	r2, r3
 8018762:	697b      	ldr	r3, [r7, #20]
 8018764:	18d3      	adds	r3, r2, r3
 8018766:	683a      	ldr	r2, [r7, #0]
 8018768:	60da      	str	r2, [r3, #12]
}
 801876a:	46c0      	nop			; (mov r8, r8)
 801876c:	46bd      	mov	sp, r7
 801876e:	b006      	add	sp, #24
 8018770:	bd80      	pop	{r7, pc}
 8018772:	46c0      	nop			; (mov r8, r8)
 8018774:	0801af94 	.word	0x0801af94

08018778 <LL_DMA_SetPeriphRequest>:
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b086      	sub	sp, #24
 801877c:	af00      	add	r7, sp, #0
 801877e:	60f8      	str	r0, [r7, #12]
 8018780:	60b9      	str	r1, [r7, #8]
 8018782:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	0a9b      	lsrs	r3, r3, #10
 8018788:	4a0f      	ldr	r2, [pc, #60]	; (80187c8 <LL_DMA_SetPeriphRequest+0x50>)
 801878a:	405a      	eors	r2, r3
 801878c:	0013      	movs	r3, r2
 801878e:	00db      	lsls	r3, r3, #3
 8018790:	1a9b      	subs	r3, r3, r2
 8018792:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8018794:	68ba      	ldr	r2, [r7, #8]
 8018796:	697b      	ldr	r3, [r7, #20]
 8018798:	18d3      	adds	r3, r2, r3
 801879a:	009b      	lsls	r3, r3, #2
 801879c:	4a0b      	ldr	r2, [pc, #44]	; (80187cc <LL_DMA_SetPeriphRequest+0x54>)
 801879e:	4694      	mov	ip, r2
 80187a0:	4463      	add	r3, ip
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	227f      	movs	r2, #127	; 0x7f
 80187a6:	4393      	bics	r3, r2
 80187a8:	0019      	movs	r1, r3
 80187aa:	68ba      	ldr	r2, [r7, #8]
 80187ac:	697b      	ldr	r3, [r7, #20]
 80187ae:	18d3      	adds	r3, r2, r3
 80187b0:	009b      	lsls	r3, r3, #2
 80187b2:	4a06      	ldr	r2, [pc, #24]	; (80187cc <LL_DMA_SetPeriphRequest+0x54>)
 80187b4:	4694      	mov	ip, r2
 80187b6:	4463      	add	r3, ip
 80187b8:	687a      	ldr	r2, [r7, #4]
 80187ba:	430a      	orrs	r2, r1
 80187bc:	601a      	str	r2, [r3, #0]
}
 80187be:	46c0      	nop			; (mov r8, r8)
 80187c0:	46bd      	mov	sp, r7
 80187c2:	b006      	add	sp, #24
 80187c4:	bd80      	pop	{r7, pc}
 80187c6:	46c0      	nop			; (mov r8, r8)
 80187c8:	00100080 	.word	0x00100080
 80187cc:	40020800 	.word	0x40020800

080187d0 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b082      	sub	sp, #8
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681a      	ldr	r2, [r3, #0]
 80187dc:	2380      	movs	r3, #128	; 0x80
 80187de:	009b      	lsls	r3, r3, #2
 80187e0:	401a      	ands	r2, r3
 80187e2:	2380      	movs	r3, #128	; 0x80
 80187e4:	009b      	lsls	r3, r3, #2
 80187e6:	429a      	cmp	r2, r3
 80187e8:	d101      	bne.n	80187ee <LL_DMA_IsActiveFlag_TC3+0x1e>
 80187ea:	2301      	movs	r3, #1
 80187ec:	e000      	b.n	80187f0 <LL_DMA_IsActiveFlag_TC3+0x20>
 80187ee:	2300      	movs	r3, #0
}
 80187f0:	0018      	movs	r0, r3
 80187f2:	46bd      	mov	sp, r7
 80187f4:	b002      	add	sp, #8
 80187f6:	bd80      	pop	{r7, pc}

080187f8 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	2280      	movs	r2, #128	; 0x80
 8018804:	0052      	lsls	r2, r2, #1
 8018806:	605a      	str	r2, [r3, #4]
}
 8018808:	46c0      	nop			; (mov r8, r8)
 801880a:	46bd      	mov	sp, r7
 801880c:	b002      	add	sp, #8
 801880e:	bd80      	pop	{r7, pc}

08018810 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
 8018818:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 801881e:	4a0b      	ldr	r2, [pc, #44]	; (801884c <LL_DMA_EnableIT_TC+0x3c>)
 8018820:	683b      	ldr	r3, [r7, #0]
 8018822:	18d3      	adds	r3, r2, r3
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	001a      	movs	r2, r3
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	18d3      	adds	r3, r2, r3
 801882c:	681a      	ldr	r2, [r3, #0]
 801882e:	4907      	ldr	r1, [pc, #28]	; (801884c <LL_DMA_EnableIT_TC+0x3c>)
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	18cb      	adds	r3, r1, r3
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	0019      	movs	r1, r3
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	18cb      	adds	r3, r1, r3
 801883c:	2102      	movs	r1, #2
 801883e:	430a      	orrs	r2, r1
 8018840:	601a      	str	r2, [r3, #0]
}
 8018842:	46c0      	nop			; (mov r8, r8)
 8018844:	46bd      	mov	sp, r7
 8018846:	b004      	add	sp, #16
 8018848:	bd80      	pop	{r7, pc}
 801884a:	46c0      	nop			; (mov r8, r8)
 801884c:	0801af94 	.word	0x0801af94

08018850 <LL_AHB1_GRP1_EnableClock>:
{
 8018850:	b580      	push	{r7, lr}
 8018852:	b084      	sub	sp, #16
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8018858:	4b07      	ldr	r3, [pc, #28]	; (8018878 <LL_AHB1_GRP1_EnableClock+0x28>)
 801885a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801885c:	4b06      	ldr	r3, [pc, #24]	; (8018878 <LL_AHB1_GRP1_EnableClock+0x28>)
 801885e:	687a      	ldr	r2, [r7, #4]
 8018860:	430a      	orrs	r2, r1
 8018862:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8018864:	4b04      	ldr	r3, [pc, #16]	; (8018878 <LL_AHB1_GRP1_EnableClock+0x28>)
 8018866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018868:	687a      	ldr	r2, [r7, #4]
 801886a:	4013      	ands	r3, r2
 801886c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801886e:	68fb      	ldr	r3, [r7, #12]
}
 8018870:	46c0      	nop			; (mov r8, r8)
 8018872:	46bd      	mov	sp, r7
 8018874:	b004      	add	sp, #16
 8018876:	bd80      	pop	{r7, pc}
 8018878:	40021000 	.word	0x40021000

0801887c <LL_APB1_GRP1_EnableClock>:
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b084      	sub	sp, #16
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8018884:	4b07      	ldr	r3, [pc, #28]	; (80188a4 <LL_APB1_GRP1_EnableClock+0x28>)
 8018886:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8018888:	4b06      	ldr	r3, [pc, #24]	; (80188a4 <LL_APB1_GRP1_EnableClock+0x28>)
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	430a      	orrs	r2, r1
 801888e:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8018890:	4b04      	ldr	r3, [pc, #16]	; (80188a4 <LL_APB1_GRP1_EnableClock+0x28>)
 8018892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018894:	687a      	ldr	r2, [r7, #4]
 8018896:	4013      	ands	r3, r2
 8018898:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801889a:	68fb      	ldr	r3, [r7, #12]
}
 801889c:	46c0      	nop			; (mov r8, r8)
 801889e:	46bd      	mov	sp, r7
 80188a0:	b004      	add	sp, #16
 80188a2:	bd80      	pop	{r7, pc}
 80188a4:	40021000 	.word	0x40021000

080188a8 <LL_APB1_GRP1_DisableClock>:
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 80188b0:	4b05      	ldr	r3, [pc, #20]	; (80188c8 <LL_APB1_GRP1_DisableClock+0x20>)
 80188b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	43d9      	mvns	r1, r3
 80188b8:	4b03      	ldr	r3, [pc, #12]	; (80188c8 <LL_APB1_GRP1_DisableClock+0x20>)
 80188ba:	400a      	ands	r2, r1
 80188bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80188be:	46c0      	nop			; (mov r8, r8)
 80188c0:	46bd      	mov	sp, r7
 80188c2:	b002      	add	sp, #8
 80188c4:	bd80      	pop	{r7, pc}
 80188c6:	46c0      	nop			; (mov r8, r8)
 80188c8:	40021000 	.word	0x40021000

080188cc <LL_IOP_GRP1_EnableClock>:
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b084      	sub	sp, #16
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80188d4:	4b07      	ldr	r3, [pc, #28]	; (80188f4 <LL_IOP_GRP1_EnableClock+0x28>)
 80188d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80188d8:	4b06      	ldr	r3, [pc, #24]	; (80188f4 <LL_IOP_GRP1_EnableClock+0x28>)
 80188da:	687a      	ldr	r2, [r7, #4]
 80188dc:	430a      	orrs	r2, r1
 80188de:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80188e0:	4b04      	ldr	r3, [pc, #16]	; (80188f4 <LL_IOP_GRP1_EnableClock+0x28>)
 80188e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188e4:	687a      	ldr	r2, [r7, #4]
 80188e6:	4013      	ands	r3, r2
 80188e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80188ea:	68fb      	ldr	r3, [r7, #12]
}
 80188ec:	46c0      	nop			; (mov r8, r8)
 80188ee:	46bd      	mov	sp, r7
 80188f0:	b004      	add	sp, #16
 80188f2:	bd80      	pop	{r7, pc}
 80188f4:	40021000 	.word	0x40021000

080188f8 <LL_GPIO_SetPinMode>:
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b084      	sub	sp, #16
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	60f8      	str	r0, [r7, #12]
 8018900:	60b9      	str	r1, [r7, #8]
 8018902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	6819      	ldr	r1, [r3, #0]
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	435b      	muls	r3, r3
 801890c:	001a      	movs	r2, r3
 801890e:	0013      	movs	r3, r2
 8018910:	005b      	lsls	r3, r3, #1
 8018912:	189b      	adds	r3, r3, r2
 8018914:	43db      	mvns	r3, r3
 8018916:	400b      	ands	r3, r1
 8018918:	001a      	movs	r2, r3
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	435b      	muls	r3, r3
 801891e:	6879      	ldr	r1, [r7, #4]
 8018920:	434b      	muls	r3, r1
 8018922:	431a      	orrs	r2, r3
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	601a      	str	r2, [r3, #0]
}
 8018928:	46c0      	nop			; (mov r8, r8)
 801892a:	46bd      	mov	sp, r7
 801892c:	b004      	add	sp, #16
 801892e:	bd80      	pop	{r7, pc}

08018930 <LL_GPIO_SetPinOutputType>:
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b084      	sub	sp, #16
 8018934:	af00      	add	r7, sp, #0
 8018936:	60f8      	str	r0, [r7, #12]
 8018938:	60b9      	str	r1, [r7, #8]
 801893a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	68ba      	ldr	r2, [r7, #8]
 8018942:	43d2      	mvns	r2, r2
 8018944:	401a      	ands	r2, r3
 8018946:	68bb      	ldr	r3, [r7, #8]
 8018948:	6879      	ldr	r1, [r7, #4]
 801894a:	434b      	muls	r3, r1
 801894c:	431a      	orrs	r2, r3
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	605a      	str	r2, [r3, #4]
}
 8018952:	46c0      	nop			; (mov r8, r8)
 8018954:	46bd      	mov	sp, r7
 8018956:	b004      	add	sp, #16
 8018958:	bd80      	pop	{r7, pc}

0801895a <LL_GPIO_SetPinSpeed>:
{
 801895a:	b580      	push	{r7, lr}
 801895c:	b084      	sub	sp, #16
 801895e:	af00      	add	r7, sp, #0
 8018960:	60f8      	str	r0, [r7, #12]
 8018962:	60b9      	str	r1, [r7, #8]
 8018964:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	6899      	ldr	r1, [r3, #8]
 801896a:	68bb      	ldr	r3, [r7, #8]
 801896c:	435b      	muls	r3, r3
 801896e:	001a      	movs	r2, r3
 8018970:	0013      	movs	r3, r2
 8018972:	005b      	lsls	r3, r3, #1
 8018974:	189b      	adds	r3, r3, r2
 8018976:	43db      	mvns	r3, r3
 8018978:	400b      	ands	r3, r1
 801897a:	001a      	movs	r2, r3
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	435b      	muls	r3, r3
 8018980:	6879      	ldr	r1, [r7, #4]
 8018982:	434b      	muls	r3, r1
 8018984:	431a      	orrs	r2, r3
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	609a      	str	r2, [r3, #8]
}
 801898a:	46c0      	nop			; (mov r8, r8)
 801898c:	46bd      	mov	sp, r7
 801898e:	b004      	add	sp, #16
 8018990:	bd80      	pop	{r7, pc}

08018992 <LL_GPIO_SetPinPull>:
{
 8018992:	b580      	push	{r7, lr}
 8018994:	b084      	sub	sp, #16
 8018996:	af00      	add	r7, sp, #0
 8018998:	60f8      	str	r0, [r7, #12]
 801899a:	60b9      	str	r1, [r7, #8]
 801899c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	68d9      	ldr	r1, [r3, #12]
 80189a2:	68bb      	ldr	r3, [r7, #8]
 80189a4:	435b      	muls	r3, r3
 80189a6:	001a      	movs	r2, r3
 80189a8:	0013      	movs	r3, r2
 80189aa:	005b      	lsls	r3, r3, #1
 80189ac:	189b      	adds	r3, r3, r2
 80189ae:	43db      	mvns	r3, r3
 80189b0:	400b      	ands	r3, r1
 80189b2:	001a      	movs	r2, r3
 80189b4:	68bb      	ldr	r3, [r7, #8]
 80189b6:	435b      	muls	r3, r3
 80189b8:	6879      	ldr	r1, [r7, #4]
 80189ba:	434b      	muls	r3, r1
 80189bc:	431a      	orrs	r2, r3
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	60da      	str	r2, [r3, #12]
}
 80189c2:	46c0      	nop			; (mov r8, r8)
 80189c4:	46bd      	mov	sp, r7
 80189c6:	b004      	add	sp, #16
 80189c8:	bd80      	pop	{r7, pc}

080189ca <LL_GPIO_SetAFPin_0_7>:
{
 80189ca:	b580      	push	{r7, lr}
 80189cc:	b084      	sub	sp, #16
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	60f8      	str	r0, [r7, #12]
 80189d2:	60b9      	str	r1, [r7, #8]
 80189d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	6a19      	ldr	r1, [r3, #32]
 80189da:	68bb      	ldr	r3, [r7, #8]
 80189dc:	435b      	muls	r3, r3
 80189de:	68ba      	ldr	r2, [r7, #8]
 80189e0:	4353      	muls	r3, r2
 80189e2:	68ba      	ldr	r2, [r7, #8]
 80189e4:	435a      	muls	r2, r3
 80189e6:	0013      	movs	r3, r2
 80189e8:	011b      	lsls	r3, r3, #4
 80189ea:	1a9b      	subs	r3, r3, r2
 80189ec:	43db      	mvns	r3, r3
 80189ee:	400b      	ands	r3, r1
 80189f0:	001a      	movs	r2, r3
 80189f2:	68bb      	ldr	r3, [r7, #8]
 80189f4:	435b      	muls	r3, r3
 80189f6:	68b9      	ldr	r1, [r7, #8]
 80189f8:	434b      	muls	r3, r1
 80189fa:	68b9      	ldr	r1, [r7, #8]
 80189fc:	434b      	muls	r3, r1
 80189fe:	6879      	ldr	r1, [r7, #4]
 8018a00:	434b      	muls	r3, r1
 8018a02:	431a      	orrs	r2, r3
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	621a      	str	r2, [r3, #32]
}
 8018a08:	46c0      	nop			; (mov r8, r8)
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	b004      	add	sp, #16
 8018a0e:	bd80      	pop	{r7, pc}

08018a10 <LL_LPUART_Enable>:
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	2201      	movs	r2, #1
 8018a1e:	431a      	orrs	r2, r3
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	601a      	str	r2, [r3, #0]
}
 8018a24:	46c0      	nop			; (mov r8, r8)
 8018a26:	46bd      	mov	sp, r7
 8018a28:	b002      	add	sp, #8
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <LL_LPUART_Disable>:
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b082      	sub	sp, #8
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	2201      	movs	r2, #1
 8018a3a:	4393      	bics	r3, r2
 8018a3c:	001a      	movs	r2, r3
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	601a      	str	r2, [r3, #0]
}
 8018a42:	46c0      	nop			; (mov r8, r8)
 8018a44:	46bd      	mov	sp, r7
 8018a46:	b002      	add	sp, #8
 8018a48:	bd80      	pop	{r7, pc}

08018a4a <LL_LPUART_EnableDirectionRx>:
{
 8018a4a:	b580      	push	{r7, lr}
 8018a4c:	b086      	sub	sp, #24
 8018a4e:	af00      	add	r7, sp, #0
 8018a50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a52:	f3ef 8310 	mrs	r3, PRIMASK
 8018a56:	60bb      	str	r3, [r7, #8]
  return(result);
 8018a58:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8018a5a:	617b      	str	r3, [r7, #20]
 8018a5c:	2301      	movs	r3, #1
 8018a5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	f383 8810 	msr	PRIMASK, r3
}
 8018a66:	46c0      	nop			; (mov r8, r8)
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	2204      	movs	r2, #4
 8018a6e:	431a      	orrs	r2, r3
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	601a      	str	r2, [r3, #0]
 8018a74:	697b      	ldr	r3, [r7, #20]
 8018a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a78:	693b      	ldr	r3, [r7, #16]
 8018a7a:	f383 8810 	msr	PRIMASK, r3
}
 8018a7e:	46c0      	nop			; (mov r8, r8)
}
 8018a80:	46c0      	nop			; (mov r8, r8)
 8018a82:	46bd      	mov	sp, r7
 8018a84:	b006      	add	sp, #24
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <LL_LPUART_IsActiveFlag_TEACK>:
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	69da      	ldr	r2, [r3, #28]
 8018a94:	2380      	movs	r3, #128	; 0x80
 8018a96:	039b      	lsls	r3, r3, #14
 8018a98:	401a      	ands	r2, r3
 8018a9a:	2380      	movs	r3, #128	; 0x80
 8018a9c:	039b      	lsls	r3, r3, #14
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	d101      	bne.n	8018aa6 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	e000      	b.n	8018aa8 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8018aa6:	2300      	movs	r3, #0
}
 8018aa8:	0018      	movs	r0, r3
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	b002      	add	sp, #8
 8018aae:	bd80      	pop	{r7, pc}

08018ab0 <LL_LPUART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_LPUART_ClearFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	2201      	movs	r2, #1
 8018abc:	621a      	str	r2, [r3, #32]
}
 8018abe:	46c0      	nop			; (mov r8, r8)
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	b002      	add	sp, #8
 8018ac4:	bd80      	pop	{r7, pc}

08018ac6 <LL_LPUART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_LPUART_ClearFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
 8018ac6:	b580      	push	{r7, lr}
 8018ac8:	b082      	sub	sp, #8
 8018aca:	af00      	add	r7, sp, #0
 8018acc:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	2202      	movs	r2, #2
 8018ad2:	621a      	str	r2, [r3, #32]
}
 8018ad4:	46c0      	nop			; (mov r8, r8)
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	b002      	add	sp, #8
 8018ada:	bd80      	pop	{r7, pc}

08018adc <LL_LPUART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_LPUART_ClearFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b082      	sub	sp, #8
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	2204      	movs	r2, #4
 8018ae8:	621a      	str	r2, [r3, #32]
}
 8018aea:	46c0      	nop			; (mov r8, r8)
 8018aec:	46bd      	mov	sp, r7
 8018aee:	b002      	add	sp, #8
 8018af0:	bd80      	pop	{r7, pc}

08018af2 <LL_LPUART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_LPUART_ClearFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
 8018af2:	b580      	push	{r7, lr}
 8018af4:	b082      	sub	sp, #8
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	2208      	movs	r2, #8
 8018afe:	621a      	str	r2, [r3, #32]
}
 8018b00:	46c0      	nop			; (mov r8, r8)
 8018b02:	46bd      	mov	sp, r7
 8018b04:	b002      	add	sp, #8
 8018b06:	bd80      	pop	{r7, pc}

08018b08 <LL_LPUART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_LPUART_ClearFlag_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_TC(USART_TypeDef *LPUARTx)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b082      	sub	sp, #8
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	2240      	movs	r2, #64	; 0x40
 8018b14:	621a      	str	r2, [r3, #32]
}
 8018b16:	46c0      	nop			; (mov r8, r8)
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	b002      	add	sp, #8
 8018b1c:	bd80      	pop	{r7, pc}

08018b1e <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8018b1e:	b580      	push	{r7, lr}
 8018b20:	b086      	sub	sp, #24
 8018b22:	af00      	add	r7, sp, #0
 8018b24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b26:	f3ef 8310 	mrs	r3, PRIMASK
 8018b2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8018b2c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8018b2e:	617b      	str	r3, [r7, #20]
 8018b30:	2301      	movs	r3, #1
 8018b32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	f383 8810 	msr	PRIMASK, r3
}
 8018b3a:	46c0      	nop			; (mov r8, r8)
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	2220      	movs	r2, #32
 8018b42:	431a      	orrs	r2, r3
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	601a      	str	r2, [r3, #0]
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b4c:	693b      	ldr	r3, [r7, #16]
 8018b4e:	f383 8810 	msr	PRIMASK, r3
}
 8018b52:	46c0      	nop			; (mov r8, r8)
}
 8018b54:	46c0      	nop			; (mov r8, r8)
 8018b56:	46bd      	mov	sp, r7
 8018b58:	b006      	add	sp, #24
 8018b5a:	bd80      	pop	{r7, pc}

08018b5c <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b086      	sub	sp, #24
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b64:	f3ef 8310 	mrs	r3, PRIMASK
 8018b68:	60bb      	str	r3, [r7, #8]
  return(result);
 8018b6a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8018b6c:	617b      	str	r3, [r7, #20]
 8018b6e:	2301      	movs	r3, #1
 8018b70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	f383 8810 	msr	PRIMASK, r3
}
 8018b78:	46c0      	nop			; (mov r8, r8)
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	2240      	movs	r2, #64	; 0x40
 8018b80:	431a      	orrs	r2, r3
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	601a      	str	r2, [r3, #0]
 8018b86:	697b      	ldr	r3, [r7, #20]
 8018b88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	f383 8810 	msr	PRIMASK, r3
}
 8018b90:	46c0      	nop			; (mov r8, r8)
}
 8018b92:	46c0      	nop			; (mov r8, r8)
 8018b94:	46bd      	mov	sp, r7
 8018b96:	b006      	add	sp, #24
 8018b98:	bd80      	pop	{r7, pc}

08018b9a <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 8018b9a:	b580      	push	{r7, lr}
 8018b9c:	b086      	sub	sp, #24
 8018b9e:	af00      	add	r7, sp, #0
 8018ba0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8018ba6:	60bb      	str	r3, [r7, #8]
  return(result);
 8018ba8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8018baa:	617b      	str	r3, [r7, #20]
 8018bac:	2301      	movs	r3, #1
 8018bae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	f383 8810 	msr	PRIMASK, r3
}
 8018bb6:	46c0      	nop			; (mov r8, r8)
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	689b      	ldr	r3, [r3, #8]
 8018bbc:	2201      	movs	r2, #1
 8018bbe:	431a      	orrs	r2, r3
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	609a      	str	r2, [r3, #8]
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bc8:	693b      	ldr	r3, [r7, #16]
 8018bca:	f383 8810 	msr	PRIMASK, r3
}
 8018bce:	46c0      	nop			; (mov r8, r8)
}
 8018bd0:	46c0      	nop			; (mov r8, r8)
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	b006      	add	sp, #24
 8018bd6:	bd80      	pop	{r7, pc}

08018bd8 <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b086      	sub	sp, #24
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018be0:	f3ef 8310 	mrs	r3, PRIMASK
 8018be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8018be6:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8018be8:	617b      	str	r3, [r7, #20]
 8018bea:	2301      	movs	r3, #1
 8018bec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	f383 8810 	msr	PRIMASK, r3
}
 8018bf4:	46c0      	nop			; (mov r8, r8)
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	2240      	movs	r2, #64	; 0x40
 8018bfc:	4393      	bics	r3, r2
 8018bfe:	001a      	movs	r2, r3
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	601a      	str	r2, [r3, #0]
 8018c04:	697b      	ldr	r3, [r7, #20]
 8018c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c08:	693b      	ldr	r3, [r7, #16]
 8018c0a:	f383 8810 	msr	PRIMASK, r3
}
 8018c0e:	46c0      	nop			; (mov r8, r8)
}
 8018c10:	46c0      	nop			; (mov r8, r8)
 8018c12:	46bd      	mov	sp, r7
 8018c14:	b006      	add	sp, #24
 8018c16:	bd80      	pop	{r7, pc}

08018c18 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *LPUARTx)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b082      	sub	sp, #8
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	2220      	movs	r2, #32
 8018c26:	4013      	ands	r3, r2
 8018c28:	2b20      	cmp	r3, #32
 8018c2a:	d101      	bne.n	8018c30 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	e000      	b.n	8018c32 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8018c30:	2300      	movs	r3, #0
}
 8018c32:	0018      	movs	r0, r3
 8018c34:	46bd      	mov	sp, r7
 8018c36:	b002      	add	sp, #8
 8018c38:	bd80      	pop	{r7, pc}

08018c3a <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(const USART_TypeDef *LPUARTx)
{
 8018c3a:	b580      	push	{r7, lr}
 8018c3c:	b082      	sub	sp, #8
 8018c3e:	af00      	add	r7, sp, #0
 8018c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	2240      	movs	r2, #64	; 0x40
 8018c48:	4013      	ands	r3, r2
 8018c4a:	2b40      	cmp	r3, #64	; 0x40
 8018c4c:	d101      	bne.n	8018c52 <LL_LPUART_IsEnabledIT_TC+0x18>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	e000      	b.n	8018c54 <LL_LPUART_IsEnabledIT_TC+0x1a>
 8018c52:	2300      	movs	r3, #0
}
 8018c54:	0018      	movs	r0, r3
 8018c56:	46bd      	mov	sp, r7
 8018c58:	b002      	add	sp, #8
 8018c5a:	bd80      	pop	{r7, pc}

08018c5c <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(const USART_TypeDef *LPUARTx)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b082      	sub	sp, #8
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681a      	ldr	r2, [r3, #0]
 8018c68:	2380      	movs	r3, #128	; 0x80
 8018c6a:	005b      	lsls	r3, r3, #1
 8018c6c:	401a      	ands	r2, r3
 8018c6e:	2380      	movs	r3, #128	; 0x80
 8018c70:	005b      	lsls	r3, r3, #1
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d101      	bne.n	8018c7a <LL_LPUART_IsEnabledIT_PE+0x1e>
 8018c76:	2301      	movs	r3, #1
 8018c78:	e000      	b.n	8018c7c <LL_LPUART_IsEnabledIT_PE+0x20>
 8018c7a:	2300      	movs	r3, #0
}
 8018c7c:	0018      	movs	r0, r3
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	b002      	add	sp, #8
 8018c82:	bd80      	pop	{r7, pc}

08018c84 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(const USART_TypeDef *LPUARTx)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b082      	sub	sp, #8
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	689b      	ldr	r3, [r3, #8]
 8018c90:	2201      	movs	r2, #1
 8018c92:	4013      	ands	r3, r2
 8018c94:	2b01      	cmp	r3, #1
 8018c96:	d101      	bne.n	8018c9c <LL_LPUART_IsEnabledIT_ERROR+0x18>
 8018c98:	2301      	movs	r3, #1
 8018c9a:	e000      	b.n	8018c9e <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 8018c9c:	2300      	movs	r3, #0
}
 8018c9e:	0018      	movs	r0, r3
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	b002      	add	sp, #8
 8018ca4:	bd80      	pop	{r7, pc}

08018ca6 <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 8018ca6:	b580      	push	{r7, lr}
 8018ca8:	b086      	sub	sp, #24
 8018caa:	af00      	add	r7, sp, #0
 8018cac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cae:	f3ef 8310 	mrs	r3, PRIMASK
 8018cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8018cb4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 8018cb6:	617b      	str	r3, [r7, #20]
 8018cb8:	2301      	movs	r3, #1
 8018cba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	f383 8810 	msr	PRIMASK, r3
}
 8018cc2:	46c0      	nop			; (mov r8, r8)
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	689b      	ldr	r3, [r3, #8]
 8018cc8:	2280      	movs	r2, #128	; 0x80
 8018cca:	431a      	orrs	r2, r3
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	609a      	str	r2, [r3, #8]
 8018cd0:	697b      	ldr	r3, [r7, #20]
 8018cd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	f383 8810 	msr	PRIMASK, r3
}
 8018cda:	46c0      	nop			; (mov r8, r8)
}
 8018cdc:	46c0      	nop			; (mov r8, r8)
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	b006      	add	sp, #24
 8018ce2:	bd80      	pop	{r7, pc}

08018ce4 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b084      	sub	sp, #16
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
 8018cec:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d103      	bne.n	8018cfc <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	3328      	adds	r3, #40	; 0x28
 8018cf8:	60fb      	str	r3, [r7, #12]
 8018cfa:	e002      	b.n	8018d02 <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	3324      	adds	r3, #36	; 0x24
 8018d00:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8018d02:	68fb      	ldr	r3, [r7, #12]
}
 8018d04:	0018      	movs	r0, r3
 8018d06:	46bd      	mov	sp, r7
 8018d08:	b004      	add	sp, #16
 8018d0a:	bd80      	pop	{r7, pc}

08018d0c <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b082      	sub	sp, #8
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d18:	b2db      	uxtb	r3, r3
}
 8018d1a:	0018      	movs	r0, r3
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	b002      	add	sp, #8
 8018d20:	bd80      	pop	{r7, pc}
	...

08018d24 <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b088      	sub	sp, #32
 8018d28:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 8018d2a:	2001      	movs	r0, #1
 8018d2c:	f7ff fdce 	bl	80188cc <LL_IOP_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 8018d30:	2001      	movs	r0, #1
 8018d32:	f7ff fdcb 	bl	80188cc <LL_IOP_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 8018d36:	23a0      	movs	r3, #160	; 0xa0
 8018d38:	05db      	lsls	r3, r3, #23
 8018d3a:	2206      	movs	r2, #6
 8018d3c:	2104      	movs	r1, #4
 8018d3e:	0018      	movs	r0, r3
 8018d40:	f7ff fe43 	bl	80189ca <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 8018d44:	23a0      	movs	r3, #160	; 0xa0
 8018d46:	05db      	lsls	r3, r3, #23
 8018d48:	2202      	movs	r2, #2
 8018d4a:	2104      	movs	r1, #4
 8018d4c:	0018      	movs	r0, r3
 8018d4e:	f7ff fdd3 	bl	80188f8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8018d52:	23a0      	movs	r3, #160	; 0xa0
 8018d54:	05db      	lsls	r3, r3, #23
 8018d56:	2202      	movs	r2, #2
 8018d58:	2104      	movs	r1, #4
 8018d5a:	0018      	movs	r0, r3
 8018d5c:	f7ff fdfd 	bl	801895a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8018d60:	23a0      	movs	r3, #160	; 0xa0
 8018d62:	05db      	lsls	r3, r3, #23
 8018d64:	2200      	movs	r2, #0
 8018d66:	2104      	movs	r1, #4
 8018d68:	0018      	movs	r0, r3
 8018d6a:	f7ff fde1 	bl	8018930 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 8018d6e:	23a0      	movs	r3, #160	; 0xa0
 8018d70:	05db      	lsls	r3, r3, #23
 8018d72:	2201      	movs	r2, #1
 8018d74:	2104      	movs	r1, #4
 8018d76:	0018      	movs	r0, r3
 8018d78:	f7ff fe0b 	bl	8018992 <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 8018d7c:	23a0      	movs	r3, #160	; 0xa0
 8018d7e:	05db      	lsls	r3, r3, #23
 8018d80:	2206      	movs	r2, #6
 8018d82:	2108      	movs	r1, #8
 8018d84:	0018      	movs	r0, r3
 8018d86:	f7ff fe20 	bl	80189ca <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 8018d8a:	23a0      	movs	r3, #160	; 0xa0
 8018d8c:	05db      	lsls	r3, r3, #23
 8018d8e:	2202      	movs	r2, #2
 8018d90:	2108      	movs	r1, #8
 8018d92:	0018      	movs	r0, r3
 8018d94:	f7ff fdb0 	bl	80188f8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8018d98:	23a0      	movs	r3, #160	; 0xa0
 8018d9a:	05db      	lsls	r3, r3, #23
 8018d9c:	2202      	movs	r2, #2
 8018d9e:	2108      	movs	r1, #8
 8018da0:	0018      	movs	r0, r3
 8018da2:	f7ff fdda 	bl	801895a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8018da6:	23a0      	movs	r3, #160	; 0xa0
 8018da8:	05db      	lsls	r3, r3, #23
 8018daa:	2200      	movs	r2, #0
 8018dac:	2108      	movs	r1, #8
 8018dae:	0018      	movs	r0, r3
 8018db0:	f7ff fdbe 	bl	8018930 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 8018db4:	23a0      	movs	r3, #160	; 0xa0
 8018db6:	05db      	lsls	r3, r3, #23
 8018db8:	2201      	movs	r2, #1
 8018dba:	2108      	movs	r1, #8
 8018dbc:	0018      	movs	r0, r3
 8018dbe:	f7ff fde8 	bl	8018992 <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 8018dc2:	2380      	movs	r3, #128	; 0x80
 8018dc4:	035b      	lsls	r3, r3, #13
 8018dc6:	0018      	movs	r0, r3
 8018dc8:	f7ff fd58 	bl	801887c <LL_APB1_GRP1_EnableClock>
  {
    /* Configure LPUART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 8018dcc:	4b31      	ldr	r3, [pc, #196]	; (8018e94 <HW_TRACER_EMB_Init+0x170>)
 8018dce:	0018      	movs	r0, r3
 8018dd0:	f7ff fe2c 	bl	8018a2c <LL_LPUART_Disable>
    /*  - Parity              : LL_LPUART_PARITY_NONE           */
    /*  - TransferDirection   : LL_LPUART_DIRECTION_TX          */
    /*  - HardwareFlowControl : LL_LPUART_HWCONTROL_NONE        */
    /*  - OverSampling        : LL_LPUART_OVERSAMPLING_16       */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_LPUART_PRESCALER_DIV1;
 8018dd4:	003b      	movs	r3, r7
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	601a      	str	r2, [r3, #0]
#endif
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 8018dda:	003b      	movs	r3, r7
 8018ddc:	22e1      	movs	r2, #225	; 0xe1
 8018dde:	0312      	lsls	r2, r2, #12
 8018de0:	605a      	str	r2, [r3, #4]
    lpuart_initstruct.DataWidth           = LL_LPUART_DATAWIDTH_8B;
 8018de2:	003b      	movs	r3, r7
 8018de4:	2200      	movs	r2, #0
 8018de6:	609a      	str	r2, [r3, #8]
    lpuart_initstruct.StopBits            = LL_LPUART_STOPBITS_1;
 8018de8:	003b      	movs	r3, r7
 8018dea:	2200      	movs	r2, #0
 8018dec:	60da      	str	r2, [r3, #12]
    lpuart_initstruct.Parity              = LL_LPUART_PARITY_NONE;
 8018dee:	003b      	movs	r3, r7
 8018df0:	2200      	movs	r2, #0
 8018df2:	611a      	str	r2, [r3, #16]
    lpuart_initstruct.TransferDirection   = LL_LPUART_DIRECTION_TX;
 8018df4:	003b      	movs	r3, r7
 8018df6:	2208      	movs	r2, #8
 8018df8:	615a      	str	r2, [r3, #20]
#if defined(USART_CR3_RTSE)
    lpuart_initstruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8018dfa:	003b      	movs	r3, r7
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	619a      	str	r2, [r3, #24]
#endif

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 8018e00:	003b      	movs	r3, r7
 8018e02:	4a24      	ldr	r2, [pc, #144]	; (8018e94 <HW_TRACER_EMB_Init+0x170>)
 8018e04:	0019      	movs	r1, r3
 8018e06:	0010      	movs	r0, r2
 8018e08:	f7f3 ff3e 	bl	800cc88 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 8018e0c:	4b21      	ldr	r3, [pc, #132]	; (8018e94 <HW_TRACER_EMB_Init+0x170>)
 8018e0e:	0018      	movs	r0, r3
 8018e10:	f7ff fdfe 	bl	8018a10 <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 8018e14:	4b1f      	ldr	r3, [pc, #124]	; (8018e94 <HW_TRACER_EMB_Init+0x170>)
 8018e16:	0018      	movs	r0, r3
 8018e18:	f7ff fe36 	bl	8018a88 <LL_LPUART_IsActiveFlag_TEACK>
 8018e1c:	0003      	movs	r3, r0
 8018e1e:	61fb      	str	r3, [r7, #28]
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 8018e20:	e005      	b.n	8018e2e <HW_TRACER_EMB_Init+0x10a>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 8018e22:	4b1c      	ldr	r3, [pc, #112]	; (8018e94 <HW_TRACER_EMB_Init+0x170>)
 8018e24:	0018      	movs	r0, r3
 8018e26:	f7ff fe2f 	bl	8018a88 <LL_LPUART_IsActiveFlag_TEACK>
 8018e2a:	0003      	movs	r3, r0
 8018e2c:	61fb      	str	r3, [r7, #28]
    while (_temp1 == 0U)
 8018e2e:	69fb      	ldr	r3, [r7, #28]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d0f6      	beq.n	8018e22 <HW_TRACER_EMB_Init+0xfe>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE == 0UL */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 8018e34:	2001      	movs	r0, #1
 8018e36:	f7ff fd0b 	bl	8018850 <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 8018e3a:	4a17      	ldr	r2, [pc, #92]	; (8018e98 <HW_TRACER_EMB_Init+0x174>)
 8018e3c:	4b17      	ldr	r3, [pc, #92]	; (8018e9c <HW_TRACER_EMB_Init+0x178>)
 8018e3e:	2102      	movs	r1, #2
 8018e40:	0018      	movs	r0, r3
 8018e42:	f7ff fbff 	bl	8018644 <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID) || defined(DMA_CSELR_C1S)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 8018e46:	4b15      	ldr	r3, [pc, #84]	; (8018e9c <HW_TRACER_EMB_Init+0x178>)
 8018e48:	220f      	movs	r2, #15
 8018e4a:	2102      	movs	r1, #2
 8018e4c:	0018      	movs	r0, r3
 8018e4e:	f7ff fc93 	bl	8018778 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 8018e52:	4b12      	ldr	r3, [pc, #72]	; (8018e9c <HW_TRACER_EMB_Init+0x178>)
 8018e54:	2102      	movs	r1, #2
 8018e56:	0018      	movs	r0, r3
 8018e58:	f7ff fcda 	bl	8018810 <LL_DMA_EnableIT_TC>
#endif /* TRACER_EMB_DMA_MODE == 1*/

  /* Configure the interrupt for TX */
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
 8018e5c:	2100      	movs	r1, #0
 8018e5e:	200a      	movs	r0, #10
 8018e60:	f7ff fb42 	bl	80184e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 8018e64:	200a      	movs	r0, #10
 8018e66:	f7ff fb25 	bl	80184b4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#endif /* TRACER_EMB_TX_DMA_PRIORITY */
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
 8018e6a:	2103      	movs	r1, #3
 8018e6c:	201d      	movs	r0, #29
 8018e6e:	f7ff fb3b 	bl	80184e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 8018e72:	201d      	movs	r0, #29
 8018e74:	f7ff fb1e 	bl	80184b4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 8018e78:	4b09      	ldr	r3, [pc, #36]	; (8018ea0 <HW_TRACER_EMB_Init+0x17c>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d105      	bne.n	8018e8c <HW_TRACER_EMB_Init+0x168>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 8018e80:	2380      	movs	r3, #128	; 0x80
 8018e82:	035b      	lsls	r3, r3, #13
 8018e84:	0018      	movs	r0, r3
 8018e86:	f7ff fd0f 	bl	80188a8 <LL_APB1_GRP1_DisableClock>
  }
  return;
 8018e8a:	46c0      	nop			; (mov r8, r8)
 8018e8c:	46c0      	nop			; (mov r8, r8)
}
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	b008      	add	sp, #32
 8018e92:	bd80      	pop	{r7, pc}
 8018e94:	40008000 	.word	0x40008000
 8018e98:	00002090 	.word	0x00002090
 8018e9c:	40020000 	.word	0x40020000
 8018ea0:	20002ef4 	.word	0x20002ef4

08018ea4 <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b082      	sub	sp, #8
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 8018eac:	4b05      	ldr	r3, [pc, #20]	; (8018ec4 <HW_TRACER_EMB_RegisterRxCallback+0x20>)
 8018eae:	687a      	ldr	r2, [r7, #4]
 8018eb0:	601a      	str	r2, [r3, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 8018eb2:	2380      	movs	r3, #128	; 0x80
 8018eb4:	035b      	lsls	r3, r3, #13
 8018eb6:	0018      	movs	r0, r3
 8018eb8:	f7ff fce0 	bl	801887c <LL_APB1_GRP1_EnableClock>
}
 8018ebc:	46c0      	nop			; (mov r8, r8)
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	b002      	add	sp, #8
 8018ec2:	bd80      	pop	{r7, pc}
 8018ec4:	20002ef4 	.word	0x20002ef4

08018ec8 <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 8018ecc:	4b0a      	ldr	r3, [pc, #40]	; (8018ef8 <HW_TRACER_EMB_StartRX+0x30>)
 8018ece:	0018      	movs	r0, r3
 8018ed0:	f7ff fe25 	bl	8018b1e <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 8018ed4:	4b08      	ldr	r3, [pc, #32]	; (8018ef8 <HW_TRACER_EMB_StartRX+0x30>)
 8018ed6:	0018      	movs	r0, r3
 8018ed8:	f7ff fe5f 	bl	8018b9a <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 8018edc:	4b06      	ldr	r3, [pc, #24]	; (8018ef8 <HW_TRACER_EMB_StartRX+0x30>)
 8018ede:	0018      	movs	r0, r3
 8018ee0:	f7ff fdb3 	bl	8018a4a <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 8018ee4:	2103      	movs	r1, #3
 8018ee6:	201d      	movs	r0, #29
 8018ee8:	f7ff fafe 	bl	80184e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 8018eec:	201d      	movs	r0, #29
 8018eee:	f7ff fae1 	bl	80184b4 <__NVIC_EnableIRQ>
}
 8018ef2:	46c0      	nop			; (mov r8, r8)
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}
 8018ef8:	40008000 	.word	0x40008000

08018efc <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 8018f00:	4b08      	ldr	r3, [pc, #32]	; (8018f24 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 8018f02:	0018      	movs	r0, r3
 8018f04:	f7ff fc64 	bl	80187d0 <LL_DMA_IsActiveFlag_TC3>
 8018f08:	0003      	movs	r3, r0
 8018f0a:	2b01      	cmp	r3, #1
 8018f0c:	d107      	bne.n	8018f1e <HW_TRACER_EMB_IRQHandlerDMA+0x22>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 8018f0e:	4b06      	ldr	r3, [pc, #24]	; (8018f28 <HW_TRACER_EMB_IRQHandlerDMA+0x2c>)
 8018f10:	0018      	movs	r0, r3
 8018f12:	f7ff fe23 	bl	8018b5c <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 8018f16:	4b03      	ldr	r3, [pc, #12]	; (8018f24 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 8018f18:	0018      	movs	r0, r3
 8018f1a:	f7ff fc6d 	bl	80187f8 <LL_DMA_ClearFlag_GI3>
  }
}
 8018f1e:	46c0      	nop			; (mov r8, r8)
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}
 8018f24:	40020000 	.word	0x40020000
 8018f28:	40008000 	.word	0x40008000

08018f2c <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b086      	sub	sp, #24
 8018f30:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 8018f32:	2317      	movs	r3, #23
 8018f34:	18fb      	adds	r3, r7, r3
 8018f36:	2200      	movs	r2, #0
 8018f38:	701a      	strb	r2, [r3, #0]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 8018f3a:	4b60      	ldr	r3, [pc, #384]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8018f3c:	69db      	ldr	r3, [r3, #28]
 8018f3e:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 8018f40:	4b5e      	ldr	r3, [pc, #376]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8018f42:	0018      	movs	r0, r3
 8018f44:	f7ff fe68 	bl	8018c18 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 8018f48:	0003      	movs	r3, r0
 8018f4a:	60fb      	str	r3, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	2b01      	cmp	r3, #1
 8018f50:	d000      	beq.n	8018f54 <HW_TRACER_EMB_IRQHandlerUSART+0x28>
 8018f52:	e087      	b.n	8019064 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 8018f54:	693b      	ldr	r3, [r7, #16]
 8018f56:	220f      	movs	r2, #15
 8018f58:	4013      	ands	r3, r2
 8018f5a:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 8018f5c:	693b      	ldr	r3, [r7, #16]
 8018f5e:	2220      	movs	r2, #32
 8018f60:	4013      	ands	r3, r2
 8018f62:	d015      	beq.n	8018f90 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
        && (_errorflags == 0UL))
 8018f64:	68bb      	ldr	r3, [r7, #8]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d112      	bne.n	8018f90 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 8018f6a:	4b54      	ldr	r3, [pc, #336]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8018f6c:	0018      	movs	r0, r3
 8018f6e:	f7ff fecd 	bl	8018d0c <LL_LPUART_ReceiveData8>
 8018f72:	0003      	movs	r3, r0
 8018f74:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 8018f76:	4b52      	ldr	r3, [pc, #328]	; (80190c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d100      	bne.n	8018f80 <HW_TRACER_EMB_IRQHandlerUSART+0x54>
 8018f7e:	e097      	b.n	80190b0 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
      {
        fptr_rx(received_char, 0U);
 8018f80:	4b4f      	ldr	r3, [pc, #316]	; (80190c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	683a      	ldr	r2, [r7, #0]
 8018f86:	b2d2      	uxtb	r2, r2
 8018f88:	2100      	movs	r1, #0
 8018f8a:	0010      	movs	r0, r2
 8018f8c:	4798      	blx	r3
      }
      return;
 8018f8e:	e08f      	b.n	80190b0 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
    }
    else if (_errorflags != 0UL)
 8018f90:	68bb      	ldr	r3, [r7, #8]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d066      	beq.n	8019064 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	2220      	movs	r2, #32
 8018f9a:	4013      	ands	r3, r2
 8018f9c:	d012      	beq.n	8018fc4 <HW_TRACER_EMB_IRQHandlerUSART+0x98>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 8018f9e:	4b47      	ldr	r3, [pc, #284]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8018fa0:	0018      	movs	r0, r3
 8018fa2:	f7ff feb3 	bl	8018d0c <LL_LPUART_ReceiveData8>
 8018fa6:	0003      	movs	r3, r0
 8018fa8:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 8018faa:	4b45      	ldr	r3, [pc, #276]	; (80190c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d100      	bne.n	8018fb4 <HW_TRACER_EMB_IRQHandlerUSART+0x88>
 8018fb2:	e07f      	b.n	80190b4 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
        {
          fptr_rx(received_char, 0U);
 8018fb4:	4b42      	ldr	r3, [pc, #264]	; (80190c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	683a      	ldr	r2, [r7, #0]
 8018fba:	b2d2      	uxtb	r2, r2
 8018fbc:	2100      	movs	r1, #0
 8018fbe:	0010      	movs	r0, r2
 8018fc0:	4798      	blx	r3
        }
        return;
 8018fc2:	e077      	b.n	80190b4 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 8018fc4:	4b3d      	ldr	r3, [pc, #244]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8018fc6:	0018      	movs	r0, r3
 8018fc8:	f7ff fe48 	bl	8018c5c <LL_LPUART_IsEnabledIT_PE>
 8018fcc:	0003      	movs	r3, r0
 8018fce:	607b      	str	r3, [r7, #4]
      if ((_temp2 == 1U)
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2b01      	cmp	r3, #1
 8018fd4:	d10b      	bne.n	8018fee <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 8018fd6:	68bb      	ldr	r3, [r7, #8]
 8018fd8:	2201      	movs	r2, #1
 8018fda:	4013      	ands	r3, r2
 8018fdc:	d007      	beq.n	8018fee <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 8018fde:	4b37      	ldr	r3, [pc, #220]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8018fe0:	0018      	movs	r0, r3
 8018fe2:	f7ff fd65 	bl	8018ab0 <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 8018fe6:	2317      	movs	r3, #23
 8018fe8:	18fb      	adds	r3, r7, r3
 8018fea:	2201      	movs	r2, #1
 8018fec:	701a      	strb	r2, [r3, #0]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 8018fee:	4b33      	ldr	r3, [pc, #204]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8018ff0:	0018      	movs	r0, r3
 8018ff2:	f7ff fe47 	bl	8018c84 <LL_LPUART_IsEnabledIT_ERROR>
 8018ff6:	0003      	movs	r3, r0
 8018ff8:	607b      	str	r3, [r7, #4]
      if (_temp2 == 1U)
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	2b01      	cmp	r3, #1
 8018ffe:	d123      	bne.n	8019048 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	2202      	movs	r2, #2
 8019004:	4013      	ands	r3, r2
 8019006:	d007      	beq.n	8019018 <HW_TRACER_EMB_IRQHandlerUSART+0xec>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 8019008:	4b2c      	ldr	r3, [pc, #176]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801900a:	0018      	movs	r0, r3
 801900c:	f7ff fd5b 	bl	8018ac6 <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 8019010:	2317      	movs	r3, #23
 8019012:	18fb      	adds	r3, r7, r3
 8019014:	2201      	movs	r2, #1
 8019016:	701a      	strb	r2, [r3, #0]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	2208      	movs	r2, #8
 801901c:	4013      	ands	r3, r2
 801901e:	d007      	beq.n	8019030 <HW_TRACER_EMB_IRQHandlerUSART+0x104>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 8019020:	4b26      	ldr	r3, [pc, #152]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8019022:	0018      	movs	r0, r3
 8019024:	f7ff fd65 	bl	8018af2 <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 8019028:	2317      	movs	r3, #23
 801902a:	18fb      	adds	r3, r7, r3
 801902c:	2201      	movs	r2, #1
 801902e:	701a      	strb	r2, [r3, #0]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	2204      	movs	r2, #4
 8019034:	4013      	ands	r3, r2
 8019036:	d007      	beq.n	8019048 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 8019038:	4b20      	ldr	r3, [pc, #128]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801903a:	0018      	movs	r0, r3
 801903c:	f7ff fd4e 	bl	8018adc <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 8019040:	2317      	movs	r3, #23
 8019042:	18fb      	adds	r3, r7, r3
 8019044:	2201      	movs	r2, #1
 8019046:	701a      	strb	r2, [r3, #0]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 8019048:	2317      	movs	r3, #23
 801904a:	18fb      	adds	r3, r7, r3
 801904c:	781b      	ldrb	r3, [r3, #0]
 801904e:	2b01      	cmp	r3, #1
 8019050:	d108      	bne.n	8019064 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
 8019052:	4b1b      	ldr	r3, [pc, #108]	; (80190c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d004      	beq.n	8019064 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 801905a:	4b19      	ldr	r3, [pc, #100]	; (80190c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	2101      	movs	r1, #1
 8019060:	2001      	movs	r0, #1
 8019062:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 8019064:	4b15      	ldr	r3, [pc, #84]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8019066:	0018      	movs	r0, r3
 8019068:	f7ff fde7 	bl	8018c3a <LL_LPUART_IsEnabledIT_TC>
 801906c:	0003      	movs	r3, r0
 801906e:	607b      	str	r3, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 8019070:	693b      	ldr	r3, [r7, #16]
 8019072:	2240      	movs	r2, #64	; 0x40
 8019074:	4013      	ands	r3, r2
 8019076:	d01e      	beq.n	80190b6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	2b01      	cmp	r3, #1
 801907c:	d11b      	bne.n	80190b6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 801907e:	4b0f      	ldr	r3, [pc, #60]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8019080:	0018      	movs	r0, r3
 8019082:	f7ff fda9 	bl	8018bd8 <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 8019086:	4b0d      	ldr	r3, [pc, #52]	; (80190bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8019088:	0018      	movs	r0, r3
 801908a:	f7ff fd3d 	bl	8018b08 <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801908e:	4b0d      	ldr	r3, [pc, #52]	; (80190c4 <HW_TRACER_EMB_IRQHandlerUSART+0x198>)
 8019090:	2102      	movs	r1, #2
 8019092:	0018      	movs	r0, r3
 8019094:	f7ff fab6 	bl	8018604 <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 8019098:	4b09      	ldr	r3, [pc, #36]	; (80190c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d104      	bne.n	80190aa <HW_TRACER_EMB_IRQHandlerUSART+0x17e>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 80190a0:	2380      	movs	r3, #128	; 0x80
 80190a2:	035b      	lsls	r3, r3, #13
 80190a4:	0018      	movs	r0, r3
 80190a6:	f7ff fbff 	bl	80188a8 <LL_APB1_GRP1_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 80190aa:	f7ff f8b7 	bl	801821c <TRACER_EMB_CALLBACK_TX>
 80190ae:	e002      	b.n	80190b6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
      return;
 80190b0:	46c0      	nop			; (mov r8, r8)
 80190b2:	e000      	b.n	80190b6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
        return;
 80190b4:	46c0      	nop			; (mov r8, r8)
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 80190b6:	46bd      	mov	sp, r7
 80190b8:	b006      	add	sp, #24
 80190ba:	bd80      	pop	{r7, pc}
 80190bc:	40008000 	.word	0x40008000
 80190c0:	20002ef4 	.word	0x20002ef4
 80190c4:	40020000 	.word	0x40020000

080190c8 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 80190c8:	b5b0      	push	{r4, r5, r7, lr}
 80190ca:	b084      	sub	sp, #16
 80190cc:	af02      	add	r7, sp, #8
 80190ce:	6078      	str	r0, [r7, #4]
 80190d0:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 80190d2:	2380      	movs	r3, #128	; 0x80
 80190d4:	035b      	lsls	r3, r3, #13
 80190d6:	0018      	movs	r0, r3
 80190d8:	f7ff fbd0 	bl	801887c <LL_APB1_GRP1_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 80190dc:	687c      	ldr	r4, [r7, #4]
 80190de:	4b13      	ldr	r3, [pc, #76]	; (801912c <HW_TRACER_EMB_SendData+0x64>)
 80190e0:	2100      	movs	r1, #0
 80190e2:	0018      	movs	r0, r3
 80190e4:	f7ff fdfe 	bl	8018ce4 <LL_LPUART_DMA_GetRegAddr>
 80190e8:	0005      	movs	r5, r0
 80190ea:	4b11      	ldr	r3, [pc, #68]	; (8019130 <HW_TRACER_EMB_SendData+0x68>)
 80190ec:	2102      	movs	r1, #2
 80190ee:	0018      	movs	r0, r3
 80190f0:	f7ff face 	bl	8018690 <LL_DMA_GetDataTransferDirection>
 80190f4:	0003      	movs	r3, r0
 80190f6:	480e      	ldr	r0, [pc, #56]	; (8019130 <HW_TRACER_EMB_SendData+0x68>)
 80190f8:	9300      	str	r3, [sp, #0]
 80190fa:	002b      	movs	r3, r5
 80190fc:	0022      	movs	r2, r4
 80190fe:	2102      	movs	r1, #2
 8019100:	f7ff fb02 	bl	8018708 <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, TRACER_EMB_DMA_DIRECTION),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 8019104:	683b      	ldr	r3, [r7, #0]
 8019106:	480a      	ldr	r0, [pc, #40]	; (8019130 <HW_TRACER_EMB_SendData+0x68>)
 8019108:	001a      	movs	r2, r3
 801910a:	2102      	movs	r1, #2
 801910c:	f7ff fada 	bl	80186c4 <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 8019110:	4b06      	ldr	r3, [pc, #24]	; (801912c <HW_TRACER_EMB_SendData+0x64>)
 8019112:	0018      	movs	r0, r3
 8019114:	f7ff fdc7 	bl	8018ca6 <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 8019118:	4b05      	ldr	r3, [pc, #20]	; (8019130 <HW_TRACER_EMB_SendData+0x68>)
 801911a:	2102      	movs	r1, #2
 801911c:	0018      	movs	r0, r3
 801911e:	f7ff fa51 	bl	80185c4 <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 8019122:	46c0      	nop			; (mov r8, r8)
 8019124:	46bd      	mov	sp, r7
 8019126:	b002      	add	sp, #8
 8019128:	bdb0      	pop	{r4, r5, r7, pc}
 801912a:	46c0      	nop			; (mov r8, r8)
 801912c:	40008000 	.word	0x40008000
 8019130:	40020000 	.word	0x40020000

08019134 <malloc>:
 8019134:	b510      	push	{r4, lr}
 8019136:	4b03      	ldr	r3, [pc, #12]	; (8019144 <malloc+0x10>)
 8019138:	0001      	movs	r1, r0
 801913a:	6818      	ldr	r0, [r3, #0]
 801913c:	f000 f826 	bl	801918c <_malloc_r>
 8019140:	bd10      	pop	{r4, pc}
 8019142:	46c0      	nop			; (mov r8, r8)
 8019144:	20000170 	.word	0x20000170

08019148 <sbrk_aligned>:
 8019148:	b570      	push	{r4, r5, r6, lr}
 801914a:	4e0f      	ldr	r6, [pc, #60]	; (8019188 <sbrk_aligned+0x40>)
 801914c:	000d      	movs	r5, r1
 801914e:	6831      	ldr	r1, [r6, #0]
 8019150:	0004      	movs	r4, r0
 8019152:	2900      	cmp	r1, #0
 8019154:	d102      	bne.n	801915c <sbrk_aligned+0x14>
 8019156:	f000 f907 	bl	8019368 <_sbrk_r>
 801915a:	6030      	str	r0, [r6, #0]
 801915c:	0029      	movs	r1, r5
 801915e:	0020      	movs	r0, r4
 8019160:	f000 f902 	bl	8019368 <_sbrk_r>
 8019164:	1c43      	adds	r3, r0, #1
 8019166:	d00a      	beq.n	801917e <sbrk_aligned+0x36>
 8019168:	2303      	movs	r3, #3
 801916a:	1cc5      	adds	r5, r0, #3
 801916c:	439d      	bics	r5, r3
 801916e:	42a8      	cmp	r0, r5
 8019170:	d007      	beq.n	8019182 <sbrk_aligned+0x3a>
 8019172:	1a29      	subs	r1, r5, r0
 8019174:	0020      	movs	r0, r4
 8019176:	f000 f8f7 	bl	8019368 <_sbrk_r>
 801917a:	3001      	adds	r0, #1
 801917c:	d101      	bne.n	8019182 <sbrk_aligned+0x3a>
 801917e:	2501      	movs	r5, #1
 8019180:	426d      	negs	r5, r5
 8019182:	0028      	movs	r0, r5
 8019184:	bd70      	pop	{r4, r5, r6, pc}
 8019186:	46c0      	nop			; (mov r8, r8)
 8019188:	20002efc 	.word	0x20002efc

0801918c <_malloc_r>:
 801918c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801918e:	2203      	movs	r2, #3
 8019190:	1ccb      	adds	r3, r1, #3
 8019192:	4393      	bics	r3, r2
 8019194:	3308      	adds	r3, #8
 8019196:	0006      	movs	r6, r0
 8019198:	001f      	movs	r7, r3
 801919a:	2b0c      	cmp	r3, #12
 801919c:	d238      	bcs.n	8019210 <_malloc_r+0x84>
 801919e:	270c      	movs	r7, #12
 80191a0:	42b9      	cmp	r1, r7
 80191a2:	d837      	bhi.n	8019214 <_malloc_r+0x88>
 80191a4:	0030      	movs	r0, r6
 80191a6:	f000 f873 	bl	8019290 <__malloc_lock>
 80191aa:	4b38      	ldr	r3, [pc, #224]	; (801928c <_malloc_r+0x100>)
 80191ac:	9300      	str	r3, [sp, #0]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	001c      	movs	r4, r3
 80191b2:	2c00      	cmp	r4, #0
 80191b4:	d133      	bne.n	801921e <_malloc_r+0x92>
 80191b6:	0039      	movs	r1, r7
 80191b8:	0030      	movs	r0, r6
 80191ba:	f7ff ffc5 	bl	8019148 <sbrk_aligned>
 80191be:	0004      	movs	r4, r0
 80191c0:	1c43      	adds	r3, r0, #1
 80191c2:	d15e      	bne.n	8019282 <_malloc_r+0xf6>
 80191c4:	9b00      	ldr	r3, [sp, #0]
 80191c6:	681c      	ldr	r4, [r3, #0]
 80191c8:	0025      	movs	r5, r4
 80191ca:	2d00      	cmp	r5, #0
 80191cc:	d14e      	bne.n	801926c <_malloc_r+0xe0>
 80191ce:	2c00      	cmp	r4, #0
 80191d0:	d051      	beq.n	8019276 <_malloc_r+0xea>
 80191d2:	6823      	ldr	r3, [r4, #0]
 80191d4:	0029      	movs	r1, r5
 80191d6:	18e3      	adds	r3, r4, r3
 80191d8:	0030      	movs	r0, r6
 80191da:	9301      	str	r3, [sp, #4]
 80191dc:	f000 f8c4 	bl	8019368 <_sbrk_r>
 80191e0:	9b01      	ldr	r3, [sp, #4]
 80191e2:	4283      	cmp	r3, r0
 80191e4:	d147      	bne.n	8019276 <_malloc_r+0xea>
 80191e6:	6823      	ldr	r3, [r4, #0]
 80191e8:	0030      	movs	r0, r6
 80191ea:	1aff      	subs	r7, r7, r3
 80191ec:	0039      	movs	r1, r7
 80191ee:	f7ff ffab 	bl	8019148 <sbrk_aligned>
 80191f2:	3001      	adds	r0, #1
 80191f4:	d03f      	beq.n	8019276 <_malloc_r+0xea>
 80191f6:	6823      	ldr	r3, [r4, #0]
 80191f8:	19db      	adds	r3, r3, r7
 80191fa:	6023      	str	r3, [r4, #0]
 80191fc:	9b00      	ldr	r3, [sp, #0]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d040      	beq.n	8019286 <_malloc_r+0xfa>
 8019204:	685a      	ldr	r2, [r3, #4]
 8019206:	42a2      	cmp	r2, r4
 8019208:	d133      	bne.n	8019272 <_malloc_r+0xe6>
 801920a:	2200      	movs	r2, #0
 801920c:	605a      	str	r2, [r3, #4]
 801920e:	e014      	b.n	801923a <_malloc_r+0xae>
 8019210:	2b00      	cmp	r3, #0
 8019212:	dac5      	bge.n	80191a0 <_malloc_r+0x14>
 8019214:	230c      	movs	r3, #12
 8019216:	2500      	movs	r5, #0
 8019218:	6033      	str	r3, [r6, #0]
 801921a:	0028      	movs	r0, r5
 801921c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801921e:	6821      	ldr	r1, [r4, #0]
 8019220:	1bc9      	subs	r1, r1, r7
 8019222:	d420      	bmi.n	8019266 <_malloc_r+0xda>
 8019224:	290b      	cmp	r1, #11
 8019226:	d918      	bls.n	801925a <_malloc_r+0xce>
 8019228:	19e2      	adds	r2, r4, r7
 801922a:	6027      	str	r7, [r4, #0]
 801922c:	42a3      	cmp	r3, r4
 801922e:	d112      	bne.n	8019256 <_malloc_r+0xca>
 8019230:	9b00      	ldr	r3, [sp, #0]
 8019232:	601a      	str	r2, [r3, #0]
 8019234:	6863      	ldr	r3, [r4, #4]
 8019236:	6011      	str	r1, [r2, #0]
 8019238:	6053      	str	r3, [r2, #4]
 801923a:	0030      	movs	r0, r6
 801923c:	0025      	movs	r5, r4
 801923e:	f000 f82f 	bl	80192a0 <__malloc_unlock>
 8019242:	2207      	movs	r2, #7
 8019244:	350b      	adds	r5, #11
 8019246:	1d23      	adds	r3, r4, #4
 8019248:	4395      	bics	r5, r2
 801924a:	1aea      	subs	r2, r5, r3
 801924c:	429d      	cmp	r5, r3
 801924e:	d0e4      	beq.n	801921a <_malloc_r+0x8e>
 8019250:	1b5b      	subs	r3, r3, r5
 8019252:	50a3      	str	r3, [r4, r2]
 8019254:	e7e1      	b.n	801921a <_malloc_r+0x8e>
 8019256:	605a      	str	r2, [r3, #4]
 8019258:	e7ec      	b.n	8019234 <_malloc_r+0xa8>
 801925a:	6862      	ldr	r2, [r4, #4]
 801925c:	42a3      	cmp	r3, r4
 801925e:	d1d5      	bne.n	801920c <_malloc_r+0x80>
 8019260:	9b00      	ldr	r3, [sp, #0]
 8019262:	601a      	str	r2, [r3, #0]
 8019264:	e7e9      	b.n	801923a <_malloc_r+0xae>
 8019266:	0023      	movs	r3, r4
 8019268:	6864      	ldr	r4, [r4, #4]
 801926a:	e7a2      	b.n	80191b2 <_malloc_r+0x26>
 801926c:	002c      	movs	r4, r5
 801926e:	686d      	ldr	r5, [r5, #4]
 8019270:	e7ab      	b.n	80191ca <_malloc_r+0x3e>
 8019272:	0013      	movs	r3, r2
 8019274:	e7c4      	b.n	8019200 <_malloc_r+0x74>
 8019276:	230c      	movs	r3, #12
 8019278:	0030      	movs	r0, r6
 801927a:	6033      	str	r3, [r6, #0]
 801927c:	f000 f810 	bl	80192a0 <__malloc_unlock>
 8019280:	e7cb      	b.n	801921a <_malloc_r+0x8e>
 8019282:	6027      	str	r7, [r4, #0]
 8019284:	e7d9      	b.n	801923a <_malloc_r+0xae>
 8019286:	605b      	str	r3, [r3, #4]
 8019288:	deff      	udf	#255	; 0xff
 801928a:	46c0      	nop			; (mov r8, r8)
 801928c:	20002ef8 	.word	0x20002ef8

08019290 <__malloc_lock>:
 8019290:	b510      	push	{r4, lr}
 8019292:	4802      	ldr	r0, [pc, #8]	; (801929c <__malloc_lock+0xc>)
 8019294:	f000 f8a4 	bl	80193e0 <__retarget_lock_acquire_recursive>
 8019298:	bd10      	pop	{r4, pc}
 801929a:	46c0      	nop			; (mov r8, r8)
 801929c:	2000303c 	.word	0x2000303c

080192a0 <__malloc_unlock>:
 80192a0:	b510      	push	{r4, lr}
 80192a2:	4802      	ldr	r0, [pc, #8]	; (80192ac <__malloc_unlock+0xc>)
 80192a4:	f000 f89d 	bl	80193e2 <__retarget_lock_release_recursive>
 80192a8:	bd10      	pop	{r4, pc}
 80192aa:	46c0      	nop			; (mov r8, r8)
 80192ac:	2000303c 	.word	0x2000303c

080192b0 <sniprintf>:
 80192b0:	b40c      	push	{r2, r3}
 80192b2:	b530      	push	{r4, r5, lr}
 80192b4:	4b17      	ldr	r3, [pc, #92]	; (8019314 <sniprintf+0x64>)
 80192b6:	000c      	movs	r4, r1
 80192b8:	681d      	ldr	r5, [r3, #0]
 80192ba:	b09d      	sub	sp, #116	; 0x74
 80192bc:	2900      	cmp	r1, #0
 80192be:	da08      	bge.n	80192d2 <sniprintf+0x22>
 80192c0:	238b      	movs	r3, #139	; 0x8b
 80192c2:	2001      	movs	r0, #1
 80192c4:	602b      	str	r3, [r5, #0]
 80192c6:	4240      	negs	r0, r0
 80192c8:	b01d      	add	sp, #116	; 0x74
 80192ca:	bc30      	pop	{r4, r5}
 80192cc:	bc08      	pop	{r3}
 80192ce:	b002      	add	sp, #8
 80192d0:	4718      	bx	r3
 80192d2:	2382      	movs	r3, #130	; 0x82
 80192d4:	466a      	mov	r2, sp
 80192d6:	009b      	lsls	r3, r3, #2
 80192d8:	8293      	strh	r3, [r2, #20]
 80192da:	2300      	movs	r3, #0
 80192dc:	9002      	str	r0, [sp, #8]
 80192de:	9006      	str	r0, [sp, #24]
 80192e0:	4299      	cmp	r1, r3
 80192e2:	d000      	beq.n	80192e6 <sniprintf+0x36>
 80192e4:	1e4b      	subs	r3, r1, #1
 80192e6:	9304      	str	r3, [sp, #16]
 80192e8:	9307      	str	r3, [sp, #28]
 80192ea:	2301      	movs	r3, #1
 80192ec:	466a      	mov	r2, sp
 80192ee:	425b      	negs	r3, r3
 80192f0:	82d3      	strh	r3, [r2, #22]
 80192f2:	0028      	movs	r0, r5
 80192f4:	ab21      	add	r3, sp, #132	; 0x84
 80192f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80192f8:	a902      	add	r1, sp, #8
 80192fa:	9301      	str	r3, [sp, #4]
 80192fc:	f000 f938 	bl	8019570 <_svfiprintf_r>
 8019300:	1c43      	adds	r3, r0, #1
 8019302:	da01      	bge.n	8019308 <sniprintf+0x58>
 8019304:	238b      	movs	r3, #139	; 0x8b
 8019306:	602b      	str	r3, [r5, #0]
 8019308:	2c00      	cmp	r4, #0
 801930a:	d0dd      	beq.n	80192c8 <sniprintf+0x18>
 801930c:	2200      	movs	r2, #0
 801930e:	9b02      	ldr	r3, [sp, #8]
 8019310:	701a      	strb	r2, [r3, #0]
 8019312:	e7d9      	b.n	80192c8 <sniprintf+0x18>
 8019314:	20000170 	.word	0x20000170

08019318 <siprintf>:
 8019318:	b40e      	push	{r1, r2, r3}
 801931a:	b500      	push	{lr}
 801931c:	490b      	ldr	r1, [pc, #44]	; (801934c <siprintf+0x34>)
 801931e:	b09c      	sub	sp, #112	; 0x70
 8019320:	ab1d      	add	r3, sp, #116	; 0x74
 8019322:	9002      	str	r0, [sp, #8]
 8019324:	9006      	str	r0, [sp, #24]
 8019326:	9107      	str	r1, [sp, #28]
 8019328:	9104      	str	r1, [sp, #16]
 801932a:	4809      	ldr	r0, [pc, #36]	; (8019350 <siprintf+0x38>)
 801932c:	4909      	ldr	r1, [pc, #36]	; (8019354 <siprintf+0x3c>)
 801932e:	cb04      	ldmia	r3!, {r2}
 8019330:	9105      	str	r1, [sp, #20]
 8019332:	6800      	ldr	r0, [r0, #0]
 8019334:	a902      	add	r1, sp, #8
 8019336:	9301      	str	r3, [sp, #4]
 8019338:	f000 f91a 	bl	8019570 <_svfiprintf_r>
 801933c:	2200      	movs	r2, #0
 801933e:	9b02      	ldr	r3, [sp, #8]
 8019340:	701a      	strb	r2, [r3, #0]
 8019342:	b01c      	add	sp, #112	; 0x70
 8019344:	bc08      	pop	{r3}
 8019346:	b003      	add	sp, #12
 8019348:	4718      	bx	r3
 801934a:	46c0      	nop			; (mov r8, r8)
 801934c:	7fffffff 	.word	0x7fffffff
 8019350:	20000170 	.word	0x20000170
 8019354:	ffff0208 	.word	0xffff0208

08019358 <memset>:
 8019358:	0003      	movs	r3, r0
 801935a:	1882      	adds	r2, r0, r2
 801935c:	4293      	cmp	r3, r2
 801935e:	d100      	bne.n	8019362 <memset+0xa>
 8019360:	4770      	bx	lr
 8019362:	7019      	strb	r1, [r3, #0]
 8019364:	3301      	adds	r3, #1
 8019366:	e7f9      	b.n	801935c <memset+0x4>

08019368 <_sbrk_r>:
 8019368:	2300      	movs	r3, #0
 801936a:	b570      	push	{r4, r5, r6, lr}
 801936c:	4d06      	ldr	r5, [pc, #24]	; (8019388 <_sbrk_r+0x20>)
 801936e:	0004      	movs	r4, r0
 8019370:	0008      	movs	r0, r1
 8019372:	602b      	str	r3, [r5, #0]
 8019374:	f7ed ff00 	bl	8007178 <_sbrk>
 8019378:	1c43      	adds	r3, r0, #1
 801937a:	d103      	bne.n	8019384 <_sbrk_r+0x1c>
 801937c:	682b      	ldr	r3, [r5, #0]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d000      	beq.n	8019384 <_sbrk_r+0x1c>
 8019382:	6023      	str	r3, [r4, #0]
 8019384:	bd70      	pop	{r4, r5, r6, pc}
 8019386:	46c0      	nop			; (mov r8, r8)
 8019388:	20003038 	.word	0x20003038

0801938c <__errno>:
 801938c:	4b01      	ldr	r3, [pc, #4]	; (8019394 <__errno+0x8>)
 801938e:	6818      	ldr	r0, [r3, #0]
 8019390:	4770      	bx	lr
 8019392:	46c0      	nop			; (mov r8, r8)
 8019394:	20000170 	.word	0x20000170

08019398 <__libc_init_array>:
 8019398:	b570      	push	{r4, r5, r6, lr}
 801939a:	2600      	movs	r6, #0
 801939c:	4c0c      	ldr	r4, [pc, #48]	; (80193d0 <__libc_init_array+0x38>)
 801939e:	4d0d      	ldr	r5, [pc, #52]	; (80193d4 <__libc_init_array+0x3c>)
 80193a0:	1b64      	subs	r4, r4, r5
 80193a2:	10a4      	asrs	r4, r4, #2
 80193a4:	42a6      	cmp	r6, r4
 80193a6:	d109      	bne.n	80193bc <__libc_init_array+0x24>
 80193a8:	2600      	movs	r6, #0
 80193aa:	f000 fbb7 	bl	8019b1c <_init>
 80193ae:	4c0a      	ldr	r4, [pc, #40]	; (80193d8 <__libc_init_array+0x40>)
 80193b0:	4d0a      	ldr	r5, [pc, #40]	; (80193dc <__libc_init_array+0x44>)
 80193b2:	1b64      	subs	r4, r4, r5
 80193b4:	10a4      	asrs	r4, r4, #2
 80193b6:	42a6      	cmp	r6, r4
 80193b8:	d105      	bne.n	80193c6 <__libc_init_array+0x2e>
 80193ba:	bd70      	pop	{r4, r5, r6, pc}
 80193bc:	00b3      	lsls	r3, r6, #2
 80193be:	58eb      	ldr	r3, [r5, r3]
 80193c0:	4798      	blx	r3
 80193c2:	3601      	adds	r6, #1
 80193c4:	e7ee      	b.n	80193a4 <__libc_init_array+0xc>
 80193c6:	00b3      	lsls	r3, r6, #2
 80193c8:	58eb      	ldr	r3, [r5, r3]
 80193ca:	4798      	blx	r3
 80193cc:	3601      	adds	r6, #1
 80193ce:	e7f2      	b.n	80193b6 <__libc_init_array+0x1e>
 80193d0:	0801afd8 	.word	0x0801afd8
 80193d4:	0801afd8 	.word	0x0801afd8
 80193d8:	0801afdc 	.word	0x0801afdc
 80193dc:	0801afd8 	.word	0x0801afd8

080193e0 <__retarget_lock_acquire_recursive>:
 80193e0:	4770      	bx	lr

080193e2 <__retarget_lock_release_recursive>:
 80193e2:	4770      	bx	lr

080193e4 <__aeabi_memcpy>:
 80193e4:	b510      	push	{r4, lr}
 80193e6:	f000 f80d 	bl	8019404 <memcpy>
 80193ea:	bd10      	pop	{r4, pc}

080193ec <__aeabi_memset>:
 80193ec:	000b      	movs	r3, r1
 80193ee:	b510      	push	{r4, lr}
 80193f0:	0011      	movs	r1, r2
 80193f2:	001a      	movs	r2, r3
 80193f4:	f7ff ffb0 	bl	8019358 <memset>
 80193f8:	bd10      	pop	{r4, pc}

080193fa <__aeabi_memclr>:
 80193fa:	b510      	push	{r4, lr}
 80193fc:	2200      	movs	r2, #0
 80193fe:	f7ff fff5 	bl	80193ec <__aeabi_memset>
 8019402:	bd10      	pop	{r4, pc}

08019404 <memcpy>:
 8019404:	2300      	movs	r3, #0
 8019406:	b510      	push	{r4, lr}
 8019408:	429a      	cmp	r2, r3
 801940a:	d100      	bne.n	801940e <memcpy+0xa>
 801940c:	bd10      	pop	{r4, pc}
 801940e:	5ccc      	ldrb	r4, [r1, r3]
 8019410:	54c4      	strb	r4, [r0, r3]
 8019412:	3301      	adds	r3, #1
 8019414:	e7f8      	b.n	8019408 <memcpy+0x4>
	...

08019418 <_free_r>:
 8019418:	b570      	push	{r4, r5, r6, lr}
 801941a:	0005      	movs	r5, r0
 801941c:	2900      	cmp	r1, #0
 801941e:	d010      	beq.n	8019442 <_free_r+0x2a>
 8019420:	1f0c      	subs	r4, r1, #4
 8019422:	6823      	ldr	r3, [r4, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	da00      	bge.n	801942a <_free_r+0x12>
 8019428:	18e4      	adds	r4, r4, r3
 801942a:	0028      	movs	r0, r5
 801942c:	f7ff ff30 	bl	8019290 <__malloc_lock>
 8019430:	4a1d      	ldr	r2, [pc, #116]	; (80194a8 <_free_r+0x90>)
 8019432:	6813      	ldr	r3, [r2, #0]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d105      	bne.n	8019444 <_free_r+0x2c>
 8019438:	6063      	str	r3, [r4, #4]
 801943a:	6014      	str	r4, [r2, #0]
 801943c:	0028      	movs	r0, r5
 801943e:	f7ff ff2f 	bl	80192a0 <__malloc_unlock>
 8019442:	bd70      	pop	{r4, r5, r6, pc}
 8019444:	42a3      	cmp	r3, r4
 8019446:	d908      	bls.n	801945a <_free_r+0x42>
 8019448:	6820      	ldr	r0, [r4, #0]
 801944a:	1821      	adds	r1, r4, r0
 801944c:	428b      	cmp	r3, r1
 801944e:	d1f3      	bne.n	8019438 <_free_r+0x20>
 8019450:	6819      	ldr	r1, [r3, #0]
 8019452:	685b      	ldr	r3, [r3, #4]
 8019454:	1809      	adds	r1, r1, r0
 8019456:	6021      	str	r1, [r4, #0]
 8019458:	e7ee      	b.n	8019438 <_free_r+0x20>
 801945a:	001a      	movs	r2, r3
 801945c:	685b      	ldr	r3, [r3, #4]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d001      	beq.n	8019466 <_free_r+0x4e>
 8019462:	42a3      	cmp	r3, r4
 8019464:	d9f9      	bls.n	801945a <_free_r+0x42>
 8019466:	6811      	ldr	r1, [r2, #0]
 8019468:	1850      	adds	r0, r2, r1
 801946a:	42a0      	cmp	r0, r4
 801946c:	d10b      	bne.n	8019486 <_free_r+0x6e>
 801946e:	6820      	ldr	r0, [r4, #0]
 8019470:	1809      	adds	r1, r1, r0
 8019472:	1850      	adds	r0, r2, r1
 8019474:	6011      	str	r1, [r2, #0]
 8019476:	4283      	cmp	r3, r0
 8019478:	d1e0      	bne.n	801943c <_free_r+0x24>
 801947a:	6818      	ldr	r0, [r3, #0]
 801947c:	685b      	ldr	r3, [r3, #4]
 801947e:	1841      	adds	r1, r0, r1
 8019480:	6011      	str	r1, [r2, #0]
 8019482:	6053      	str	r3, [r2, #4]
 8019484:	e7da      	b.n	801943c <_free_r+0x24>
 8019486:	42a0      	cmp	r0, r4
 8019488:	d902      	bls.n	8019490 <_free_r+0x78>
 801948a:	230c      	movs	r3, #12
 801948c:	602b      	str	r3, [r5, #0]
 801948e:	e7d5      	b.n	801943c <_free_r+0x24>
 8019490:	6820      	ldr	r0, [r4, #0]
 8019492:	1821      	adds	r1, r4, r0
 8019494:	428b      	cmp	r3, r1
 8019496:	d103      	bne.n	80194a0 <_free_r+0x88>
 8019498:	6819      	ldr	r1, [r3, #0]
 801949a:	685b      	ldr	r3, [r3, #4]
 801949c:	1809      	adds	r1, r1, r0
 801949e:	6021      	str	r1, [r4, #0]
 80194a0:	6063      	str	r3, [r4, #4]
 80194a2:	6054      	str	r4, [r2, #4]
 80194a4:	e7ca      	b.n	801943c <_free_r+0x24>
 80194a6:	46c0      	nop			; (mov r8, r8)
 80194a8:	20002ef8 	.word	0x20002ef8

080194ac <__ssputs_r>:
 80194ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194ae:	b085      	sub	sp, #20
 80194b0:	9301      	str	r3, [sp, #4]
 80194b2:	9203      	str	r2, [sp, #12]
 80194b4:	688e      	ldr	r6, [r1, #8]
 80194b6:	9a01      	ldr	r2, [sp, #4]
 80194b8:	0007      	movs	r7, r0
 80194ba:	000c      	movs	r4, r1
 80194bc:	680b      	ldr	r3, [r1, #0]
 80194be:	4296      	cmp	r6, r2
 80194c0:	d831      	bhi.n	8019526 <__ssputs_r+0x7a>
 80194c2:	898a      	ldrh	r2, [r1, #12]
 80194c4:	2190      	movs	r1, #144	; 0x90
 80194c6:	00c9      	lsls	r1, r1, #3
 80194c8:	420a      	tst	r2, r1
 80194ca:	d029      	beq.n	8019520 <__ssputs_r+0x74>
 80194cc:	2003      	movs	r0, #3
 80194ce:	6921      	ldr	r1, [r4, #16]
 80194d0:	1a5b      	subs	r3, r3, r1
 80194d2:	9302      	str	r3, [sp, #8]
 80194d4:	6963      	ldr	r3, [r4, #20]
 80194d6:	4343      	muls	r3, r0
 80194d8:	0fdd      	lsrs	r5, r3, #31
 80194da:	18ed      	adds	r5, r5, r3
 80194dc:	9b01      	ldr	r3, [sp, #4]
 80194de:	9802      	ldr	r0, [sp, #8]
 80194e0:	3301      	adds	r3, #1
 80194e2:	181b      	adds	r3, r3, r0
 80194e4:	106d      	asrs	r5, r5, #1
 80194e6:	42ab      	cmp	r3, r5
 80194e8:	d900      	bls.n	80194ec <__ssputs_r+0x40>
 80194ea:	001d      	movs	r5, r3
 80194ec:	0552      	lsls	r2, r2, #21
 80194ee:	d529      	bpl.n	8019544 <__ssputs_r+0x98>
 80194f0:	0029      	movs	r1, r5
 80194f2:	0038      	movs	r0, r7
 80194f4:	f7ff fe4a 	bl	801918c <_malloc_r>
 80194f8:	1e06      	subs	r6, r0, #0
 80194fa:	d02d      	beq.n	8019558 <__ssputs_r+0xac>
 80194fc:	9a02      	ldr	r2, [sp, #8]
 80194fe:	6921      	ldr	r1, [r4, #16]
 8019500:	f7ff ff80 	bl	8019404 <memcpy>
 8019504:	89a2      	ldrh	r2, [r4, #12]
 8019506:	4b19      	ldr	r3, [pc, #100]	; (801956c <__ssputs_r+0xc0>)
 8019508:	401a      	ands	r2, r3
 801950a:	2380      	movs	r3, #128	; 0x80
 801950c:	4313      	orrs	r3, r2
 801950e:	81a3      	strh	r3, [r4, #12]
 8019510:	9b02      	ldr	r3, [sp, #8]
 8019512:	6126      	str	r6, [r4, #16]
 8019514:	18f6      	adds	r6, r6, r3
 8019516:	6026      	str	r6, [r4, #0]
 8019518:	6165      	str	r5, [r4, #20]
 801951a:	9e01      	ldr	r6, [sp, #4]
 801951c:	1aed      	subs	r5, r5, r3
 801951e:	60a5      	str	r5, [r4, #8]
 8019520:	9b01      	ldr	r3, [sp, #4]
 8019522:	429e      	cmp	r6, r3
 8019524:	d900      	bls.n	8019528 <__ssputs_r+0x7c>
 8019526:	9e01      	ldr	r6, [sp, #4]
 8019528:	0032      	movs	r2, r6
 801952a:	9903      	ldr	r1, [sp, #12]
 801952c:	6820      	ldr	r0, [r4, #0]
 801952e:	f000 fa9f 	bl	8019a70 <memmove>
 8019532:	2000      	movs	r0, #0
 8019534:	68a3      	ldr	r3, [r4, #8]
 8019536:	1b9b      	subs	r3, r3, r6
 8019538:	60a3      	str	r3, [r4, #8]
 801953a:	6823      	ldr	r3, [r4, #0]
 801953c:	199b      	adds	r3, r3, r6
 801953e:	6023      	str	r3, [r4, #0]
 8019540:	b005      	add	sp, #20
 8019542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019544:	002a      	movs	r2, r5
 8019546:	0038      	movs	r0, r7
 8019548:	f000 fab0 	bl	8019aac <_realloc_r>
 801954c:	1e06      	subs	r6, r0, #0
 801954e:	d1df      	bne.n	8019510 <__ssputs_r+0x64>
 8019550:	0038      	movs	r0, r7
 8019552:	6921      	ldr	r1, [r4, #16]
 8019554:	f7ff ff60 	bl	8019418 <_free_r>
 8019558:	230c      	movs	r3, #12
 801955a:	2001      	movs	r0, #1
 801955c:	603b      	str	r3, [r7, #0]
 801955e:	89a2      	ldrh	r2, [r4, #12]
 8019560:	3334      	adds	r3, #52	; 0x34
 8019562:	4313      	orrs	r3, r2
 8019564:	81a3      	strh	r3, [r4, #12]
 8019566:	4240      	negs	r0, r0
 8019568:	e7ea      	b.n	8019540 <__ssputs_r+0x94>
 801956a:	46c0      	nop			; (mov r8, r8)
 801956c:	fffffb7f 	.word	0xfffffb7f

08019570 <_svfiprintf_r>:
 8019570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019572:	b0a1      	sub	sp, #132	; 0x84
 8019574:	9003      	str	r0, [sp, #12]
 8019576:	001d      	movs	r5, r3
 8019578:	898b      	ldrh	r3, [r1, #12]
 801957a:	000f      	movs	r7, r1
 801957c:	0016      	movs	r6, r2
 801957e:	061b      	lsls	r3, r3, #24
 8019580:	d511      	bpl.n	80195a6 <_svfiprintf_r+0x36>
 8019582:	690b      	ldr	r3, [r1, #16]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d10e      	bne.n	80195a6 <_svfiprintf_r+0x36>
 8019588:	2140      	movs	r1, #64	; 0x40
 801958a:	f7ff fdff 	bl	801918c <_malloc_r>
 801958e:	6038      	str	r0, [r7, #0]
 8019590:	6138      	str	r0, [r7, #16]
 8019592:	2800      	cmp	r0, #0
 8019594:	d105      	bne.n	80195a2 <_svfiprintf_r+0x32>
 8019596:	230c      	movs	r3, #12
 8019598:	9a03      	ldr	r2, [sp, #12]
 801959a:	3801      	subs	r0, #1
 801959c:	6013      	str	r3, [r2, #0]
 801959e:	b021      	add	sp, #132	; 0x84
 80195a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195a2:	2340      	movs	r3, #64	; 0x40
 80195a4:	617b      	str	r3, [r7, #20]
 80195a6:	2300      	movs	r3, #0
 80195a8:	ac08      	add	r4, sp, #32
 80195aa:	6163      	str	r3, [r4, #20]
 80195ac:	3320      	adds	r3, #32
 80195ae:	7663      	strb	r3, [r4, #25]
 80195b0:	3310      	adds	r3, #16
 80195b2:	76a3      	strb	r3, [r4, #26]
 80195b4:	9507      	str	r5, [sp, #28]
 80195b6:	0035      	movs	r5, r6
 80195b8:	782b      	ldrb	r3, [r5, #0]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d001      	beq.n	80195c2 <_svfiprintf_r+0x52>
 80195be:	2b25      	cmp	r3, #37	; 0x25
 80195c0:	d148      	bne.n	8019654 <_svfiprintf_r+0xe4>
 80195c2:	1bab      	subs	r3, r5, r6
 80195c4:	9305      	str	r3, [sp, #20]
 80195c6:	42b5      	cmp	r5, r6
 80195c8:	d00b      	beq.n	80195e2 <_svfiprintf_r+0x72>
 80195ca:	0032      	movs	r2, r6
 80195cc:	0039      	movs	r1, r7
 80195ce:	9803      	ldr	r0, [sp, #12]
 80195d0:	f7ff ff6c 	bl	80194ac <__ssputs_r>
 80195d4:	3001      	adds	r0, #1
 80195d6:	d100      	bne.n	80195da <_svfiprintf_r+0x6a>
 80195d8:	e0af      	b.n	801973a <_svfiprintf_r+0x1ca>
 80195da:	6963      	ldr	r3, [r4, #20]
 80195dc:	9a05      	ldr	r2, [sp, #20]
 80195de:	189b      	adds	r3, r3, r2
 80195e0:	6163      	str	r3, [r4, #20]
 80195e2:	782b      	ldrb	r3, [r5, #0]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d100      	bne.n	80195ea <_svfiprintf_r+0x7a>
 80195e8:	e0a7      	b.n	801973a <_svfiprintf_r+0x1ca>
 80195ea:	2201      	movs	r2, #1
 80195ec:	2300      	movs	r3, #0
 80195ee:	4252      	negs	r2, r2
 80195f0:	6062      	str	r2, [r4, #4]
 80195f2:	a904      	add	r1, sp, #16
 80195f4:	3254      	adds	r2, #84	; 0x54
 80195f6:	1852      	adds	r2, r2, r1
 80195f8:	1c6e      	adds	r6, r5, #1
 80195fa:	6023      	str	r3, [r4, #0]
 80195fc:	60e3      	str	r3, [r4, #12]
 80195fe:	60a3      	str	r3, [r4, #8]
 8019600:	7013      	strb	r3, [r2, #0]
 8019602:	65a3      	str	r3, [r4, #88]	; 0x58
 8019604:	4b55      	ldr	r3, [pc, #340]	; (801975c <_svfiprintf_r+0x1ec>)
 8019606:	2205      	movs	r2, #5
 8019608:	0018      	movs	r0, r3
 801960a:	7831      	ldrb	r1, [r6, #0]
 801960c:	9305      	str	r3, [sp, #20]
 801960e:	f000 fa42 	bl	8019a96 <memchr>
 8019612:	1c75      	adds	r5, r6, #1
 8019614:	2800      	cmp	r0, #0
 8019616:	d11f      	bne.n	8019658 <_svfiprintf_r+0xe8>
 8019618:	6822      	ldr	r2, [r4, #0]
 801961a:	06d3      	lsls	r3, r2, #27
 801961c:	d504      	bpl.n	8019628 <_svfiprintf_r+0xb8>
 801961e:	2353      	movs	r3, #83	; 0x53
 8019620:	a904      	add	r1, sp, #16
 8019622:	185b      	adds	r3, r3, r1
 8019624:	2120      	movs	r1, #32
 8019626:	7019      	strb	r1, [r3, #0]
 8019628:	0713      	lsls	r3, r2, #28
 801962a:	d504      	bpl.n	8019636 <_svfiprintf_r+0xc6>
 801962c:	2353      	movs	r3, #83	; 0x53
 801962e:	a904      	add	r1, sp, #16
 8019630:	185b      	adds	r3, r3, r1
 8019632:	212b      	movs	r1, #43	; 0x2b
 8019634:	7019      	strb	r1, [r3, #0]
 8019636:	7833      	ldrb	r3, [r6, #0]
 8019638:	2b2a      	cmp	r3, #42	; 0x2a
 801963a:	d016      	beq.n	801966a <_svfiprintf_r+0xfa>
 801963c:	0035      	movs	r5, r6
 801963e:	2100      	movs	r1, #0
 8019640:	200a      	movs	r0, #10
 8019642:	68e3      	ldr	r3, [r4, #12]
 8019644:	782a      	ldrb	r2, [r5, #0]
 8019646:	1c6e      	adds	r6, r5, #1
 8019648:	3a30      	subs	r2, #48	; 0x30
 801964a:	2a09      	cmp	r2, #9
 801964c:	d94e      	bls.n	80196ec <_svfiprintf_r+0x17c>
 801964e:	2900      	cmp	r1, #0
 8019650:	d111      	bne.n	8019676 <_svfiprintf_r+0x106>
 8019652:	e017      	b.n	8019684 <_svfiprintf_r+0x114>
 8019654:	3501      	adds	r5, #1
 8019656:	e7af      	b.n	80195b8 <_svfiprintf_r+0x48>
 8019658:	9b05      	ldr	r3, [sp, #20]
 801965a:	6822      	ldr	r2, [r4, #0]
 801965c:	1ac0      	subs	r0, r0, r3
 801965e:	2301      	movs	r3, #1
 8019660:	4083      	lsls	r3, r0
 8019662:	4313      	orrs	r3, r2
 8019664:	002e      	movs	r6, r5
 8019666:	6023      	str	r3, [r4, #0]
 8019668:	e7cc      	b.n	8019604 <_svfiprintf_r+0x94>
 801966a:	9b07      	ldr	r3, [sp, #28]
 801966c:	1d19      	adds	r1, r3, #4
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	9107      	str	r1, [sp, #28]
 8019672:	2b00      	cmp	r3, #0
 8019674:	db01      	blt.n	801967a <_svfiprintf_r+0x10a>
 8019676:	930b      	str	r3, [sp, #44]	; 0x2c
 8019678:	e004      	b.n	8019684 <_svfiprintf_r+0x114>
 801967a:	425b      	negs	r3, r3
 801967c:	60e3      	str	r3, [r4, #12]
 801967e:	2302      	movs	r3, #2
 8019680:	4313      	orrs	r3, r2
 8019682:	6023      	str	r3, [r4, #0]
 8019684:	782b      	ldrb	r3, [r5, #0]
 8019686:	2b2e      	cmp	r3, #46	; 0x2e
 8019688:	d10a      	bne.n	80196a0 <_svfiprintf_r+0x130>
 801968a:	786b      	ldrb	r3, [r5, #1]
 801968c:	2b2a      	cmp	r3, #42	; 0x2a
 801968e:	d135      	bne.n	80196fc <_svfiprintf_r+0x18c>
 8019690:	9b07      	ldr	r3, [sp, #28]
 8019692:	3502      	adds	r5, #2
 8019694:	1d1a      	adds	r2, r3, #4
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	9207      	str	r2, [sp, #28]
 801969a:	2b00      	cmp	r3, #0
 801969c:	db2b      	blt.n	80196f6 <_svfiprintf_r+0x186>
 801969e:	9309      	str	r3, [sp, #36]	; 0x24
 80196a0:	4e2f      	ldr	r6, [pc, #188]	; (8019760 <_svfiprintf_r+0x1f0>)
 80196a2:	2203      	movs	r2, #3
 80196a4:	0030      	movs	r0, r6
 80196a6:	7829      	ldrb	r1, [r5, #0]
 80196a8:	f000 f9f5 	bl	8019a96 <memchr>
 80196ac:	2800      	cmp	r0, #0
 80196ae:	d006      	beq.n	80196be <_svfiprintf_r+0x14e>
 80196b0:	2340      	movs	r3, #64	; 0x40
 80196b2:	1b80      	subs	r0, r0, r6
 80196b4:	4083      	lsls	r3, r0
 80196b6:	6822      	ldr	r2, [r4, #0]
 80196b8:	3501      	adds	r5, #1
 80196ba:	4313      	orrs	r3, r2
 80196bc:	6023      	str	r3, [r4, #0]
 80196be:	7829      	ldrb	r1, [r5, #0]
 80196c0:	2206      	movs	r2, #6
 80196c2:	4828      	ldr	r0, [pc, #160]	; (8019764 <_svfiprintf_r+0x1f4>)
 80196c4:	1c6e      	adds	r6, r5, #1
 80196c6:	7621      	strb	r1, [r4, #24]
 80196c8:	f000 f9e5 	bl	8019a96 <memchr>
 80196cc:	2800      	cmp	r0, #0
 80196ce:	d03c      	beq.n	801974a <_svfiprintf_r+0x1da>
 80196d0:	4b25      	ldr	r3, [pc, #148]	; (8019768 <_svfiprintf_r+0x1f8>)
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d125      	bne.n	8019722 <_svfiprintf_r+0x1b2>
 80196d6:	2207      	movs	r2, #7
 80196d8:	9b07      	ldr	r3, [sp, #28]
 80196da:	3307      	adds	r3, #7
 80196dc:	4393      	bics	r3, r2
 80196de:	3308      	adds	r3, #8
 80196e0:	9307      	str	r3, [sp, #28]
 80196e2:	6963      	ldr	r3, [r4, #20]
 80196e4:	9a04      	ldr	r2, [sp, #16]
 80196e6:	189b      	adds	r3, r3, r2
 80196e8:	6163      	str	r3, [r4, #20]
 80196ea:	e764      	b.n	80195b6 <_svfiprintf_r+0x46>
 80196ec:	4343      	muls	r3, r0
 80196ee:	0035      	movs	r5, r6
 80196f0:	2101      	movs	r1, #1
 80196f2:	189b      	adds	r3, r3, r2
 80196f4:	e7a6      	b.n	8019644 <_svfiprintf_r+0xd4>
 80196f6:	2301      	movs	r3, #1
 80196f8:	425b      	negs	r3, r3
 80196fa:	e7d0      	b.n	801969e <_svfiprintf_r+0x12e>
 80196fc:	2300      	movs	r3, #0
 80196fe:	200a      	movs	r0, #10
 8019700:	001a      	movs	r2, r3
 8019702:	3501      	adds	r5, #1
 8019704:	6063      	str	r3, [r4, #4]
 8019706:	7829      	ldrb	r1, [r5, #0]
 8019708:	1c6e      	adds	r6, r5, #1
 801970a:	3930      	subs	r1, #48	; 0x30
 801970c:	2909      	cmp	r1, #9
 801970e:	d903      	bls.n	8019718 <_svfiprintf_r+0x1a8>
 8019710:	2b00      	cmp	r3, #0
 8019712:	d0c5      	beq.n	80196a0 <_svfiprintf_r+0x130>
 8019714:	9209      	str	r2, [sp, #36]	; 0x24
 8019716:	e7c3      	b.n	80196a0 <_svfiprintf_r+0x130>
 8019718:	4342      	muls	r2, r0
 801971a:	0035      	movs	r5, r6
 801971c:	2301      	movs	r3, #1
 801971e:	1852      	adds	r2, r2, r1
 8019720:	e7f1      	b.n	8019706 <_svfiprintf_r+0x196>
 8019722:	aa07      	add	r2, sp, #28
 8019724:	9200      	str	r2, [sp, #0]
 8019726:	0021      	movs	r1, r4
 8019728:	003a      	movs	r2, r7
 801972a:	4b10      	ldr	r3, [pc, #64]	; (801976c <_svfiprintf_r+0x1fc>)
 801972c:	9803      	ldr	r0, [sp, #12]
 801972e:	e000      	b.n	8019732 <_svfiprintf_r+0x1c2>
 8019730:	bf00      	nop
 8019732:	9004      	str	r0, [sp, #16]
 8019734:	9b04      	ldr	r3, [sp, #16]
 8019736:	3301      	adds	r3, #1
 8019738:	d1d3      	bne.n	80196e2 <_svfiprintf_r+0x172>
 801973a:	89bb      	ldrh	r3, [r7, #12]
 801973c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801973e:	065b      	lsls	r3, r3, #25
 8019740:	d400      	bmi.n	8019744 <_svfiprintf_r+0x1d4>
 8019742:	e72c      	b.n	801959e <_svfiprintf_r+0x2e>
 8019744:	2001      	movs	r0, #1
 8019746:	4240      	negs	r0, r0
 8019748:	e729      	b.n	801959e <_svfiprintf_r+0x2e>
 801974a:	aa07      	add	r2, sp, #28
 801974c:	9200      	str	r2, [sp, #0]
 801974e:	0021      	movs	r1, r4
 8019750:	003a      	movs	r2, r7
 8019752:	4b06      	ldr	r3, [pc, #24]	; (801976c <_svfiprintf_r+0x1fc>)
 8019754:	9803      	ldr	r0, [sp, #12]
 8019756:	f000 f87b 	bl	8019850 <_printf_i>
 801975a:	e7ea      	b.n	8019732 <_svfiprintf_r+0x1c2>
 801975c:	0801af9b 	.word	0x0801af9b
 8019760:	0801afa1 	.word	0x0801afa1
 8019764:	0801afa5 	.word	0x0801afa5
 8019768:	00000000 	.word	0x00000000
 801976c:	080194ad 	.word	0x080194ad

08019770 <_printf_common>:
 8019770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019772:	0016      	movs	r6, r2
 8019774:	9301      	str	r3, [sp, #4]
 8019776:	688a      	ldr	r2, [r1, #8]
 8019778:	690b      	ldr	r3, [r1, #16]
 801977a:	000c      	movs	r4, r1
 801977c:	9000      	str	r0, [sp, #0]
 801977e:	4293      	cmp	r3, r2
 8019780:	da00      	bge.n	8019784 <_printf_common+0x14>
 8019782:	0013      	movs	r3, r2
 8019784:	0022      	movs	r2, r4
 8019786:	6033      	str	r3, [r6, #0]
 8019788:	3243      	adds	r2, #67	; 0x43
 801978a:	7812      	ldrb	r2, [r2, #0]
 801978c:	2a00      	cmp	r2, #0
 801978e:	d001      	beq.n	8019794 <_printf_common+0x24>
 8019790:	3301      	adds	r3, #1
 8019792:	6033      	str	r3, [r6, #0]
 8019794:	6823      	ldr	r3, [r4, #0]
 8019796:	069b      	lsls	r3, r3, #26
 8019798:	d502      	bpl.n	80197a0 <_printf_common+0x30>
 801979a:	6833      	ldr	r3, [r6, #0]
 801979c:	3302      	adds	r3, #2
 801979e:	6033      	str	r3, [r6, #0]
 80197a0:	6822      	ldr	r2, [r4, #0]
 80197a2:	2306      	movs	r3, #6
 80197a4:	0015      	movs	r5, r2
 80197a6:	401d      	ands	r5, r3
 80197a8:	421a      	tst	r2, r3
 80197aa:	d027      	beq.n	80197fc <_printf_common+0x8c>
 80197ac:	0023      	movs	r3, r4
 80197ae:	3343      	adds	r3, #67	; 0x43
 80197b0:	781b      	ldrb	r3, [r3, #0]
 80197b2:	1e5a      	subs	r2, r3, #1
 80197b4:	4193      	sbcs	r3, r2
 80197b6:	6822      	ldr	r2, [r4, #0]
 80197b8:	0692      	lsls	r2, r2, #26
 80197ba:	d430      	bmi.n	801981e <_printf_common+0xae>
 80197bc:	0022      	movs	r2, r4
 80197be:	9901      	ldr	r1, [sp, #4]
 80197c0:	9800      	ldr	r0, [sp, #0]
 80197c2:	9d08      	ldr	r5, [sp, #32]
 80197c4:	3243      	adds	r2, #67	; 0x43
 80197c6:	47a8      	blx	r5
 80197c8:	3001      	adds	r0, #1
 80197ca:	d025      	beq.n	8019818 <_printf_common+0xa8>
 80197cc:	2206      	movs	r2, #6
 80197ce:	6823      	ldr	r3, [r4, #0]
 80197d0:	2500      	movs	r5, #0
 80197d2:	4013      	ands	r3, r2
 80197d4:	2b04      	cmp	r3, #4
 80197d6:	d105      	bne.n	80197e4 <_printf_common+0x74>
 80197d8:	6833      	ldr	r3, [r6, #0]
 80197da:	68e5      	ldr	r5, [r4, #12]
 80197dc:	1aed      	subs	r5, r5, r3
 80197de:	43eb      	mvns	r3, r5
 80197e0:	17db      	asrs	r3, r3, #31
 80197e2:	401d      	ands	r5, r3
 80197e4:	68a3      	ldr	r3, [r4, #8]
 80197e6:	6922      	ldr	r2, [r4, #16]
 80197e8:	4293      	cmp	r3, r2
 80197ea:	dd01      	ble.n	80197f0 <_printf_common+0x80>
 80197ec:	1a9b      	subs	r3, r3, r2
 80197ee:	18ed      	adds	r5, r5, r3
 80197f0:	2600      	movs	r6, #0
 80197f2:	42b5      	cmp	r5, r6
 80197f4:	d120      	bne.n	8019838 <_printf_common+0xc8>
 80197f6:	2000      	movs	r0, #0
 80197f8:	e010      	b.n	801981c <_printf_common+0xac>
 80197fa:	3501      	adds	r5, #1
 80197fc:	68e3      	ldr	r3, [r4, #12]
 80197fe:	6832      	ldr	r2, [r6, #0]
 8019800:	1a9b      	subs	r3, r3, r2
 8019802:	42ab      	cmp	r3, r5
 8019804:	ddd2      	ble.n	80197ac <_printf_common+0x3c>
 8019806:	0022      	movs	r2, r4
 8019808:	2301      	movs	r3, #1
 801980a:	9901      	ldr	r1, [sp, #4]
 801980c:	9800      	ldr	r0, [sp, #0]
 801980e:	9f08      	ldr	r7, [sp, #32]
 8019810:	3219      	adds	r2, #25
 8019812:	47b8      	blx	r7
 8019814:	3001      	adds	r0, #1
 8019816:	d1f0      	bne.n	80197fa <_printf_common+0x8a>
 8019818:	2001      	movs	r0, #1
 801981a:	4240      	negs	r0, r0
 801981c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801981e:	2030      	movs	r0, #48	; 0x30
 8019820:	18e1      	adds	r1, r4, r3
 8019822:	3143      	adds	r1, #67	; 0x43
 8019824:	7008      	strb	r0, [r1, #0]
 8019826:	0021      	movs	r1, r4
 8019828:	1c5a      	adds	r2, r3, #1
 801982a:	3145      	adds	r1, #69	; 0x45
 801982c:	7809      	ldrb	r1, [r1, #0]
 801982e:	18a2      	adds	r2, r4, r2
 8019830:	3243      	adds	r2, #67	; 0x43
 8019832:	3302      	adds	r3, #2
 8019834:	7011      	strb	r1, [r2, #0]
 8019836:	e7c1      	b.n	80197bc <_printf_common+0x4c>
 8019838:	0022      	movs	r2, r4
 801983a:	2301      	movs	r3, #1
 801983c:	9901      	ldr	r1, [sp, #4]
 801983e:	9800      	ldr	r0, [sp, #0]
 8019840:	9f08      	ldr	r7, [sp, #32]
 8019842:	321a      	adds	r2, #26
 8019844:	47b8      	blx	r7
 8019846:	3001      	adds	r0, #1
 8019848:	d0e6      	beq.n	8019818 <_printf_common+0xa8>
 801984a:	3601      	adds	r6, #1
 801984c:	e7d1      	b.n	80197f2 <_printf_common+0x82>
	...

08019850 <_printf_i>:
 8019850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019852:	b08b      	sub	sp, #44	; 0x2c
 8019854:	9206      	str	r2, [sp, #24]
 8019856:	000a      	movs	r2, r1
 8019858:	3243      	adds	r2, #67	; 0x43
 801985a:	9307      	str	r3, [sp, #28]
 801985c:	9005      	str	r0, [sp, #20]
 801985e:	9204      	str	r2, [sp, #16]
 8019860:	7e0a      	ldrb	r2, [r1, #24]
 8019862:	000c      	movs	r4, r1
 8019864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019866:	2a78      	cmp	r2, #120	; 0x78
 8019868:	d809      	bhi.n	801987e <_printf_i+0x2e>
 801986a:	2a62      	cmp	r2, #98	; 0x62
 801986c:	d80b      	bhi.n	8019886 <_printf_i+0x36>
 801986e:	2a00      	cmp	r2, #0
 8019870:	d100      	bne.n	8019874 <_printf_i+0x24>
 8019872:	e0be      	b.n	80199f2 <_printf_i+0x1a2>
 8019874:	497c      	ldr	r1, [pc, #496]	; (8019a68 <_printf_i+0x218>)
 8019876:	9103      	str	r1, [sp, #12]
 8019878:	2a58      	cmp	r2, #88	; 0x58
 801987a:	d100      	bne.n	801987e <_printf_i+0x2e>
 801987c:	e093      	b.n	80199a6 <_printf_i+0x156>
 801987e:	0026      	movs	r6, r4
 8019880:	3642      	adds	r6, #66	; 0x42
 8019882:	7032      	strb	r2, [r6, #0]
 8019884:	e022      	b.n	80198cc <_printf_i+0x7c>
 8019886:	0010      	movs	r0, r2
 8019888:	3863      	subs	r0, #99	; 0x63
 801988a:	2815      	cmp	r0, #21
 801988c:	d8f7      	bhi.n	801987e <_printf_i+0x2e>
 801988e:	f7ec fd5f 	bl	8006350 <__gnu_thumb1_case_shi>
 8019892:	0016      	.short	0x0016
 8019894:	fff6001f 	.word	0xfff6001f
 8019898:	fff6fff6 	.word	0xfff6fff6
 801989c:	001ffff6 	.word	0x001ffff6
 80198a0:	fff6fff6 	.word	0xfff6fff6
 80198a4:	fff6fff6 	.word	0xfff6fff6
 80198a8:	003600a3 	.word	0x003600a3
 80198ac:	fff60083 	.word	0xfff60083
 80198b0:	00b4fff6 	.word	0x00b4fff6
 80198b4:	0036fff6 	.word	0x0036fff6
 80198b8:	fff6fff6 	.word	0xfff6fff6
 80198bc:	0087      	.short	0x0087
 80198be:	0026      	movs	r6, r4
 80198c0:	681a      	ldr	r2, [r3, #0]
 80198c2:	3642      	adds	r6, #66	; 0x42
 80198c4:	1d11      	adds	r1, r2, #4
 80198c6:	6019      	str	r1, [r3, #0]
 80198c8:	6813      	ldr	r3, [r2, #0]
 80198ca:	7033      	strb	r3, [r6, #0]
 80198cc:	2301      	movs	r3, #1
 80198ce:	e0a2      	b.n	8019a16 <_printf_i+0x1c6>
 80198d0:	6818      	ldr	r0, [r3, #0]
 80198d2:	6809      	ldr	r1, [r1, #0]
 80198d4:	1d02      	adds	r2, r0, #4
 80198d6:	060d      	lsls	r5, r1, #24
 80198d8:	d50b      	bpl.n	80198f2 <_printf_i+0xa2>
 80198da:	6805      	ldr	r5, [r0, #0]
 80198dc:	601a      	str	r2, [r3, #0]
 80198de:	2d00      	cmp	r5, #0
 80198e0:	da03      	bge.n	80198ea <_printf_i+0x9a>
 80198e2:	232d      	movs	r3, #45	; 0x2d
 80198e4:	9a04      	ldr	r2, [sp, #16]
 80198e6:	426d      	negs	r5, r5
 80198e8:	7013      	strb	r3, [r2, #0]
 80198ea:	4b5f      	ldr	r3, [pc, #380]	; (8019a68 <_printf_i+0x218>)
 80198ec:	270a      	movs	r7, #10
 80198ee:	9303      	str	r3, [sp, #12]
 80198f0:	e01b      	b.n	801992a <_printf_i+0xda>
 80198f2:	6805      	ldr	r5, [r0, #0]
 80198f4:	601a      	str	r2, [r3, #0]
 80198f6:	0649      	lsls	r1, r1, #25
 80198f8:	d5f1      	bpl.n	80198de <_printf_i+0x8e>
 80198fa:	b22d      	sxth	r5, r5
 80198fc:	e7ef      	b.n	80198de <_printf_i+0x8e>
 80198fe:	680d      	ldr	r5, [r1, #0]
 8019900:	6819      	ldr	r1, [r3, #0]
 8019902:	1d08      	adds	r0, r1, #4
 8019904:	6018      	str	r0, [r3, #0]
 8019906:	062e      	lsls	r6, r5, #24
 8019908:	d501      	bpl.n	801990e <_printf_i+0xbe>
 801990a:	680d      	ldr	r5, [r1, #0]
 801990c:	e003      	b.n	8019916 <_printf_i+0xc6>
 801990e:	066d      	lsls	r5, r5, #25
 8019910:	d5fb      	bpl.n	801990a <_printf_i+0xba>
 8019912:	680d      	ldr	r5, [r1, #0]
 8019914:	b2ad      	uxth	r5, r5
 8019916:	4b54      	ldr	r3, [pc, #336]	; (8019a68 <_printf_i+0x218>)
 8019918:	2708      	movs	r7, #8
 801991a:	9303      	str	r3, [sp, #12]
 801991c:	2a6f      	cmp	r2, #111	; 0x6f
 801991e:	d000      	beq.n	8019922 <_printf_i+0xd2>
 8019920:	3702      	adds	r7, #2
 8019922:	0023      	movs	r3, r4
 8019924:	2200      	movs	r2, #0
 8019926:	3343      	adds	r3, #67	; 0x43
 8019928:	701a      	strb	r2, [r3, #0]
 801992a:	6863      	ldr	r3, [r4, #4]
 801992c:	60a3      	str	r3, [r4, #8]
 801992e:	2b00      	cmp	r3, #0
 8019930:	db03      	blt.n	801993a <_printf_i+0xea>
 8019932:	2104      	movs	r1, #4
 8019934:	6822      	ldr	r2, [r4, #0]
 8019936:	438a      	bics	r2, r1
 8019938:	6022      	str	r2, [r4, #0]
 801993a:	2d00      	cmp	r5, #0
 801993c:	d102      	bne.n	8019944 <_printf_i+0xf4>
 801993e:	9e04      	ldr	r6, [sp, #16]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d00c      	beq.n	801995e <_printf_i+0x10e>
 8019944:	9e04      	ldr	r6, [sp, #16]
 8019946:	0028      	movs	r0, r5
 8019948:	0039      	movs	r1, r7
 801994a:	f7ec fd91 	bl	8006470 <__aeabi_uidivmod>
 801994e:	9b03      	ldr	r3, [sp, #12]
 8019950:	3e01      	subs	r6, #1
 8019952:	5c5b      	ldrb	r3, [r3, r1]
 8019954:	7033      	strb	r3, [r6, #0]
 8019956:	002b      	movs	r3, r5
 8019958:	0005      	movs	r5, r0
 801995a:	429f      	cmp	r7, r3
 801995c:	d9f3      	bls.n	8019946 <_printf_i+0xf6>
 801995e:	2f08      	cmp	r7, #8
 8019960:	d109      	bne.n	8019976 <_printf_i+0x126>
 8019962:	6823      	ldr	r3, [r4, #0]
 8019964:	07db      	lsls	r3, r3, #31
 8019966:	d506      	bpl.n	8019976 <_printf_i+0x126>
 8019968:	6862      	ldr	r2, [r4, #4]
 801996a:	6923      	ldr	r3, [r4, #16]
 801996c:	429a      	cmp	r2, r3
 801996e:	dc02      	bgt.n	8019976 <_printf_i+0x126>
 8019970:	2330      	movs	r3, #48	; 0x30
 8019972:	3e01      	subs	r6, #1
 8019974:	7033      	strb	r3, [r6, #0]
 8019976:	9b04      	ldr	r3, [sp, #16]
 8019978:	1b9b      	subs	r3, r3, r6
 801997a:	6123      	str	r3, [r4, #16]
 801997c:	9b07      	ldr	r3, [sp, #28]
 801997e:	0021      	movs	r1, r4
 8019980:	9300      	str	r3, [sp, #0]
 8019982:	9805      	ldr	r0, [sp, #20]
 8019984:	9b06      	ldr	r3, [sp, #24]
 8019986:	aa09      	add	r2, sp, #36	; 0x24
 8019988:	f7ff fef2 	bl	8019770 <_printf_common>
 801998c:	3001      	adds	r0, #1
 801998e:	d147      	bne.n	8019a20 <_printf_i+0x1d0>
 8019990:	2001      	movs	r0, #1
 8019992:	4240      	negs	r0, r0
 8019994:	b00b      	add	sp, #44	; 0x2c
 8019996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019998:	2220      	movs	r2, #32
 801999a:	6809      	ldr	r1, [r1, #0]
 801999c:	430a      	orrs	r2, r1
 801999e:	6022      	str	r2, [r4, #0]
 80199a0:	2278      	movs	r2, #120	; 0x78
 80199a2:	4932      	ldr	r1, [pc, #200]	; (8019a6c <_printf_i+0x21c>)
 80199a4:	9103      	str	r1, [sp, #12]
 80199a6:	0021      	movs	r1, r4
 80199a8:	3145      	adds	r1, #69	; 0x45
 80199aa:	700a      	strb	r2, [r1, #0]
 80199ac:	6819      	ldr	r1, [r3, #0]
 80199ae:	6822      	ldr	r2, [r4, #0]
 80199b0:	c920      	ldmia	r1!, {r5}
 80199b2:	0610      	lsls	r0, r2, #24
 80199b4:	d402      	bmi.n	80199bc <_printf_i+0x16c>
 80199b6:	0650      	lsls	r0, r2, #25
 80199b8:	d500      	bpl.n	80199bc <_printf_i+0x16c>
 80199ba:	b2ad      	uxth	r5, r5
 80199bc:	6019      	str	r1, [r3, #0]
 80199be:	07d3      	lsls	r3, r2, #31
 80199c0:	d502      	bpl.n	80199c8 <_printf_i+0x178>
 80199c2:	2320      	movs	r3, #32
 80199c4:	4313      	orrs	r3, r2
 80199c6:	6023      	str	r3, [r4, #0]
 80199c8:	2710      	movs	r7, #16
 80199ca:	2d00      	cmp	r5, #0
 80199cc:	d1a9      	bne.n	8019922 <_printf_i+0xd2>
 80199ce:	2220      	movs	r2, #32
 80199d0:	6823      	ldr	r3, [r4, #0]
 80199d2:	4393      	bics	r3, r2
 80199d4:	6023      	str	r3, [r4, #0]
 80199d6:	e7a4      	b.n	8019922 <_printf_i+0xd2>
 80199d8:	681a      	ldr	r2, [r3, #0]
 80199da:	680d      	ldr	r5, [r1, #0]
 80199dc:	1d10      	adds	r0, r2, #4
 80199de:	6949      	ldr	r1, [r1, #20]
 80199e0:	6018      	str	r0, [r3, #0]
 80199e2:	6813      	ldr	r3, [r2, #0]
 80199e4:	062e      	lsls	r6, r5, #24
 80199e6:	d501      	bpl.n	80199ec <_printf_i+0x19c>
 80199e8:	6019      	str	r1, [r3, #0]
 80199ea:	e002      	b.n	80199f2 <_printf_i+0x1a2>
 80199ec:	066d      	lsls	r5, r5, #25
 80199ee:	d5fb      	bpl.n	80199e8 <_printf_i+0x198>
 80199f0:	8019      	strh	r1, [r3, #0]
 80199f2:	2300      	movs	r3, #0
 80199f4:	9e04      	ldr	r6, [sp, #16]
 80199f6:	6123      	str	r3, [r4, #16]
 80199f8:	e7c0      	b.n	801997c <_printf_i+0x12c>
 80199fa:	681a      	ldr	r2, [r3, #0]
 80199fc:	1d11      	adds	r1, r2, #4
 80199fe:	6019      	str	r1, [r3, #0]
 8019a00:	6816      	ldr	r6, [r2, #0]
 8019a02:	2100      	movs	r1, #0
 8019a04:	0030      	movs	r0, r6
 8019a06:	6862      	ldr	r2, [r4, #4]
 8019a08:	f000 f845 	bl	8019a96 <memchr>
 8019a0c:	2800      	cmp	r0, #0
 8019a0e:	d001      	beq.n	8019a14 <_printf_i+0x1c4>
 8019a10:	1b80      	subs	r0, r0, r6
 8019a12:	6060      	str	r0, [r4, #4]
 8019a14:	6863      	ldr	r3, [r4, #4]
 8019a16:	6123      	str	r3, [r4, #16]
 8019a18:	2300      	movs	r3, #0
 8019a1a:	9a04      	ldr	r2, [sp, #16]
 8019a1c:	7013      	strb	r3, [r2, #0]
 8019a1e:	e7ad      	b.n	801997c <_printf_i+0x12c>
 8019a20:	0032      	movs	r2, r6
 8019a22:	6923      	ldr	r3, [r4, #16]
 8019a24:	9906      	ldr	r1, [sp, #24]
 8019a26:	9805      	ldr	r0, [sp, #20]
 8019a28:	9d07      	ldr	r5, [sp, #28]
 8019a2a:	47a8      	blx	r5
 8019a2c:	3001      	adds	r0, #1
 8019a2e:	d0af      	beq.n	8019990 <_printf_i+0x140>
 8019a30:	6823      	ldr	r3, [r4, #0]
 8019a32:	079b      	lsls	r3, r3, #30
 8019a34:	d415      	bmi.n	8019a62 <_printf_i+0x212>
 8019a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a38:	68e0      	ldr	r0, [r4, #12]
 8019a3a:	4298      	cmp	r0, r3
 8019a3c:	daaa      	bge.n	8019994 <_printf_i+0x144>
 8019a3e:	0018      	movs	r0, r3
 8019a40:	e7a8      	b.n	8019994 <_printf_i+0x144>
 8019a42:	0022      	movs	r2, r4
 8019a44:	2301      	movs	r3, #1
 8019a46:	9906      	ldr	r1, [sp, #24]
 8019a48:	9805      	ldr	r0, [sp, #20]
 8019a4a:	9e07      	ldr	r6, [sp, #28]
 8019a4c:	3219      	adds	r2, #25
 8019a4e:	47b0      	blx	r6
 8019a50:	3001      	adds	r0, #1
 8019a52:	d09d      	beq.n	8019990 <_printf_i+0x140>
 8019a54:	3501      	adds	r5, #1
 8019a56:	68e3      	ldr	r3, [r4, #12]
 8019a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a5a:	1a9b      	subs	r3, r3, r2
 8019a5c:	42ab      	cmp	r3, r5
 8019a5e:	dcf0      	bgt.n	8019a42 <_printf_i+0x1f2>
 8019a60:	e7e9      	b.n	8019a36 <_printf_i+0x1e6>
 8019a62:	2500      	movs	r5, #0
 8019a64:	e7f7      	b.n	8019a56 <_printf_i+0x206>
 8019a66:	46c0      	nop			; (mov r8, r8)
 8019a68:	0801afac 	.word	0x0801afac
 8019a6c:	0801afbd 	.word	0x0801afbd

08019a70 <memmove>:
 8019a70:	b510      	push	{r4, lr}
 8019a72:	4288      	cmp	r0, r1
 8019a74:	d902      	bls.n	8019a7c <memmove+0xc>
 8019a76:	188b      	adds	r3, r1, r2
 8019a78:	4298      	cmp	r0, r3
 8019a7a:	d303      	bcc.n	8019a84 <memmove+0x14>
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	e007      	b.n	8019a90 <memmove+0x20>
 8019a80:	5c8b      	ldrb	r3, [r1, r2]
 8019a82:	5483      	strb	r3, [r0, r2]
 8019a84:	3a01      	subs	r2, #1
 8019a86:	d2fb      	bcs.n	8019a80 <memmove+0x10>
 8019a88:	bd10      	pop	{r4, pc}
 8019a8a:	5ccc      	ldrb	r4, [r1, r3]
 8019a8c:	54c4      	strb	r4, [r0, r3]
 8019a8e:	3301      	adds	r3, #1
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d1fa      	bne.n	8019a8a <memmove+0x1a>
 8019a94:	e7f8      	b.n	8019a88 <memmove+0x18>

08019a96 <memchr>:
 8019a96:	b2c9      	uxtb	r1, r1
 8019a98:	1882      	adds	r2, r0, r2
 8019a9a:	4290      	cmp	r0, r2
 8019a9c:	d101      	bne.n	8019aa2 <memchr+0xc>
 8019a9e:	2000      	movs	r0, #0
 8019aa0:	4770      	bx	lr
 8019aa2:	7803      	ldrb	r3, [r0, #0]
 8019aa4:	428b      	cmp	r3, r1
 8019aa6:	d0fb      	beq.n	8019aa0 <memchr+0xa>
 8019aa8:	3001      	adds	r0, #1
 8019aaa:	e7f6      	b.n	8019a9a <memchr+0x4>

08019aac <_realloc_r>:
 8019aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019aae:	0007      	movs	r7, r0
 8019ab0:	000e      	movs	r6, r1
 8019ab2:	0014      	movs	r4, r2
 8019ab4:	2900      	cmp	r1, #0
 8019ab6:	d105      	bne.n	8019ac4 <_realloc_r+0x18>
 8019ab8:	0011      	movs	r1, r2
 8019aba:	f7ff fb67 	bl	801918c <_malloc_r>
 8019abe:	0005      	movs	r5, r0
 8019ac0:	0028      	movs	r0, r5
 8019ac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019ac4:	2a00      	cmp	r2, #0
 8019ac6:	d103      	bne.n	8019ad0 <_realloc_r+0x24>
 8019ac8:	f7ff fca6 	bl	8019418 <_free_r>
 8019acc:	0025      	movs	r5, r4
 8019ace:	e7f7      	b.n	8019ac0 <_realloc_r+0x14>
 8019ad0:	f000 f81b 	bl	8019b0a <_malloc_usable_size_r>
 8019ad4:	9001      	str	r0, [sp, #4]
 8019ad6:	4284      	cmp	r4, r0
 8019ad8:	d803      	bhi.n	8019ae2 <_realloc_r+0x36>
 8019ada:	0035      	movs	r5, r6
 8019adc:	0843      	lsrs	r3, r0, #1
 8019ade:	42a3      	cmp	r3, r4
 8019ae0:	d3ee      	bcc.n	8019ac0 <_realloc_r+0x14>
 8019ae2:	0021      	movs	r1, r4
 8019ae4:	0038      	movs	r0, r7
 8019ae6:	f7ff fb51 	bl	801918c <_malloc_r>
 8019aea:	1e05      	subs	r5, r0, #0
 8019aec:	d0e8      	beq.n	8019ac0 <_realloc_r+0x14>
 8019aee:	9b01      	ldr	r3, [sp, #4]
 8019af0:	0022      	movs	r2, r4
 8019af2:	429c      	cmp	r4, r3
 8019af4:	d900      	bls.n	8019af8 <_realloc_r+0x4c>
 8019af6:	001a      	movs	r2, r3
 8019af8:	0031      	movs	r1, r6
 8019afa:	0028      	movs	r0, r5
 8019afc:	f7ff fc82 	bl	8019404 <memcpy>
 8019b00:	0031      	movs	r1, r6
 8019b02:	0038      	movs	r0, r7
 8019b04:	f7ff fc88 	bl	8019418 <_free_r>
 8019b08:	e7da      	b.n	8019ac0 <_realloc_r+0x14>

08019b0a <_malloc_usable_size_r>:
 8019b0a:	1f0b      	subs	r3, r1, #4
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	1f18      	subs	r0, r3, #4
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	da01      	bge.n	8019b18 <_malloc_usable_size_r+0xe>
 8019b14:	580b      	ldr	r3, [r1, r0]
 8019b16:	18c0      	adds	r0, r0, r3
 8019b18:	4770      	bx	lr
	...

08019b1c <_init>:
 8019b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b1e:	46c0      	nop			; (mov r8, r8)
 8019b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b22:	bc08      	pop	{r3}
 8019b24:	469e      	mov	lr, r3
 8019b26:	4770      	bx	lr

08019b28 <_fini>:
 8019b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b2a:	46c0      	nop			; (mov r8, r8)
 8019b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b2e:	bc08      	pop	{r3}
 8019b30:	469e      	mov	lr, r3
 8019b32:	4770      	bx	lr
 8019b34:	0000      	movs	r0, r0
	...

08019b38 <__FLASH_Program_Fast_veneer>:
 8019b38:	b401      	push	{r0}
 8019b3a:	4802      	ldr	r0, [pc, #8]	; (8019b44 <__FLASH_Program_Fast_veneer+0xc>)
 8019b3c:	4684      	mov	ip, r0
 8019b3e:	bc01      	pop	{r0}
 8019b40:	4760      	bx	ip
 8019b42:	bf00      	nop
 8019b44:	20000175 	.word	0x20000175

Disassembly of section .data:

20000000 <USBPD_Trace>:
20000000:	080015b7                                ....

20000004 <SystemCoreClock>:
20000004:	00f42400                                .$..

20000008 <TCPP0203_Driver>:
20000008:	080072cd 0800733d 08007367 0800739f     .r..=s..gs...s..
20000018:	080073f1 08007461 080074dd 0800752f     .s..at...t../u..
20000028:	08007579 080075c3 080075fb 08007635     yu...u...u..5v..
20000038:	08007681 080076b9 080076f1 08007729     .v...v...v..)w..
20000048:	08007761 08007799 080077d1 08007809     aw...w...w...x..
20000058:	08007841 08007879 080078b1 080078e9     Ax..yx...x...x..
20000068:	08007911 08007939                       .y..9y..

20000070 <USBPD_PWR_Port_Configs>:
20000070:	00006802                                .h..

20000074 <uwTickPrio>:
20000074:	00000004                                ....

20000078 <uwTickFreq>:
20000078:	00000001                                ....

2000007c <uxCriticalNesting>:
2000007c:	aaaaaaaa                                ....

20000080 <DPM_Settings>:
20000080:	00000001 00000006 00000000              ............

2000008c <DPM_ID_Settings>:
2000008c:	f0000003 00020483                       ........

20000094 <DPM_USER_Settings>:
20000094:	0000000c 00000000 00000000 00000000     ................
	...

20000104 <USBPD_NbPDO>:
20000104:	00000300                                ....

20000108 <PORT0_PDO_ListSRC>:
20000108:	0006412c 0003c12c 0001912c 00000000     ,A..,...,.......
	...

20000124 <_impure_data>:
20000124:	00000000 20002f00 20002f68 20002fd0     ...../. h/. ./. 
	...

20000170 <_impure_ptr>:
20000170:	20000124                                $.. 

20000174 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000174:	b580      	push	{r7, lr}
20000176:	b088      	sub	sp, #32
20000178:	af00      	add	r7, sp, #0
2000017a:	6078      	str	r0, [r7, #4]
2000017c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000017e:	231f      	movs	r3, #31
20000180:	18fb      	adds	r3, r7, r3
20000182:	2200      	movs	r2, #0
20000184:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000186:	687b      	ldr	r3, [r7, #4]
20000188:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000018a:	683b      	ldr	r3, [r7, #0]
2000018c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000018e:	4b1a      	ldr	r3, [pc, #104]	; (200001f8 <FLASH_Program_Fast+0x84>)
20000190:	695a      	ldr	r2, [r3, #20]
20000192:	4b19      	ldr	r3, [pc, #100]	; (200001f8 <FLASH_Program_Fast+0x84>)
20000194:	2180      	movs	r1, #128	; 0x80
20000196:	02c9      	lsls	r1, r1, #11
20000198:	430a      	orrs	r2, r1
2000019a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000019c:	f3ef 8310 	mrs	r3, PRIMASK
200001a0:	60fb      	str	r3, [r7, #12]
  return(result);
200001a2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200001a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200001a6:	b672      	cpsid	i
}
200001a8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200001aa:	e00f      	b.n	200001cc <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200001ac:	697a      	ldr	r2, [r7, #20]
200001ae:	69bb      	ldr	r3, [r7, #24]
200001b0:	6812      	ldr	r2, [r2, #0]
200001b2:	601a      	str	r2, [r3, #0]
    src += 4U;
200001b4:	697b      	ldr	r3, [r7, #20]
200001b6:	3304      	adds	r3, #4
200001b8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200001ba:	69bb      	ldr	r3, [r7, #24]
200001bc:	3304      	adds	r3, #4
200001be:	61bb      	str	r3, [r7, #24]
    index++;
200001c0:	211f      	movs	r1, #31
200001c2:	187b      	adds	r3, r7, r1
200001c4:	781a      	ldrb	r2, [r3, #0]
200001c6:	187b      	adds	r3, r7, r1
200001c8:	3201      	adds	r2, #1
200001ca:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200001cc:	231f      	movs	r3, #31
200001ce:	18fb      	adds	r3, r7, r3
200001d0:	781b      	ldrb	r3, [r3, #0]
200001d2:	2b3f      	cmp	r3, #63	; 0x3f
200001d4:	d9ea      	bls.n	200001ac <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200001d6:	46c0      	nop			; (mov r8, r8)
200001d8:	4b07      	ldr	r3, [pc, #28]	; (200001f8 <FLASH_Program_Fast+0x84>)
200001da:	691a      	ldr	r2, [r3, #16]
200001dc:	23c0      	movs	r3, #192	; 0xc0
200001de:	029b      	lsls	r3, r3, #10
200001e0:	4013      	ands	r3, r2
200001e2:	d1f9      	bne.n	200001d8 <FLASH_Program_Fast+0x64>
200001e4:	693b      	ldr	r3, [r7, #16]
200001e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200001e8:	68bb      	ldr	r3, [r7, #8]
200001ea:	f383 8810 	msr	PRIMASK, r3
}
200001ee:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200001f0:	46c0      	nop			; (mov r8, r8)
200001f2:	46bd      	mov	sp, r7
200001f4:	b008      	add	sp, #32
200001f6:	bd80      	pop	{r7, pc}
200001f8:	40022000 	.word	0x40022000
